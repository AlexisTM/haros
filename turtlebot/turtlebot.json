{
    "turtlebot": {
        "metapackage": true,
        "description": "The turtlebot meta package provides all the basic drivers for running and using a TurtleBot.",
        "url": "https://github.com/turtlebot/turtlebot",
        "dependencies": ["turtlebot_bringup", "turtlebot_capabilities", "turtlebot_description", "turtlebot_teleop"]
    },
    "turtlebot_bringup": {
        "description": "turtlebot_bringup provides roslaunch scripts for starting the TurtleBot base functionality.",
        "url": "https://github.com/turtlebot/turtlebot",
        "dependencies": ["zeroconf_avahi", "yocs_cmd_vel_mux", "kobuki_capabilities", "kobuki_node", "kobuki_bumper2pc", "kobuki_safety_controller", "create_node", "turtlebot_capabilities", "turtlebot_description", "robot_state_publisher", "robot_pose_ekf", "diagnostic_aggregator", "openni_launch", "laptop_battery_monitor", "rocon_app_manager", "depthimage_to_laserscan"]
    },
    "turtlebot_capabilities": {
        "description": "Capabilities for the TurtleBot",
        "url": "https://github.com/turtlebot/turtlebot",
        "dependencies": ["capabilities", "std_capabilities"]
    },
    "turtlebot_description": {
        "description": "turtlebot_description provides a complete 3D model of the TurtleBot for simulation and visualization. The files in this package are parsed and used by a variety of other components. Most users will not interact directly with this package.",
        "url": "https://github.com/turtlebot/turtlebot",
        "dependencies": ["urdf", "xacro", "kobuki_description", "create_description"]
    },
    "turtlebot_teleop": {
        "description": "Turtlebot Teleoperation implementation. This package used to be in turtlebot_apps repository. It has been temporarily migrated into turtlebot because it is useful for both robot(turtlebot_apps) side and user side pc(turtlebot_interactions).",
        "url": "https://github.com/turtlebot/turtlebot",
        "dependencies": ["roscpp", "geometry_msgs", "joy", "kobuki_safety_controller", "yocs_velocity_smoother", "turtlebot_bringup"]
    },
    "zeroconf_avahi": {
        "description": "This package provides implementations for zeroconf on top of linux's avahi-daemon.",
        "url": "https://github.com/stonier/zeroconf_avahi_suite",
        "dependencies": ["rosconsole", "roscpp", "zeroconf_msgs", "libavahi-client-dev", "libavahi-core-dev", "avahi-daemon"]
    },
    "yocs_cmd_vel_mux": {
        "description": "A multiplexer for command velocity inputs. Arbitrates incoming cmd_vel messages from several topics, allowing one topic at a time to command the robot, based on priorities. It also deallocates current allowed topic if no messages are received after a configured timeout. All topics, together with their priority and timeout are configured through a YAML file, that can be reload at runtime.",
        "url": "https://github.com/yujinrobot/yujin_ocs",
        "dependencies": ["roscpp", "geometry_msgs", "pluginlib", "nodelet", "dynamic_reconfigure", "yaml-cpp"]
    },
    "kobuki_capabilities": {
        "description": "Kobuki's capabilities",
        "url": "https://github.com/yujinrobot/kobuki",
        "dependencies": ["kobuki_node", "nodelet", "rocon_app_manager", "rocon_apps", "std_capabilities"]
    },
    "kobuki_node": {
        "description": "ROS nodelet for Kobuki: ROS wrapper for the Kobuki driver.",
        "url": "https://github.com/yujinrobot/kobuki",
        "dependencies": ["capabilities", "roscpp", "geometry_msgs", "sensor_msgs", "nav_msgs", "std_msgs", "tf", "angles", "diagnostic_aggregator", "diagnostic_updater", "diagnostic_msgs", "nodelet", "pluginlib", "kobuki_rapps", "kobuki_msgs", "kobuki_driver", "kobuki_ftdi", "kobuki_keyop", "kobuki_safety_controller", "ecl_exceptions", "ecl_sigslots", "ecl_streams", "ecl_threads", "rospy"]
    },
    "kobuki_bumper2pc": {
        "description": "Bumper/cliff to pointcloud nodelet: Publish bumpers and cliff sensors events as points in a pointcloud, so navistack can use them for poor-man navigation. Implemented as a nodelet intended to run together with kobuki_node.",
        "url": "https://github.com/yujinrobot/kobuki",
        "dependencies": ["roscpp", "nodelet", "pluginlib", "kobuki_msgs", "sensor_msgs"]
    },
    "kobuki_safety_controller": {
        "description": "A controller ensuring the safe operation of Kobuki. The SafetyController keeps track of bumper, cliff and wheel drop events. In case of the first two, Kobuki is commanded to move back. In the latter case, Kobuki is stopped. This controller can be enabled/disabled. The safety states (bumper pressed etc.) can be reset. WARNING: Dangerous!",
        "url": "https://github.com/yujinrobot/kobuki",
        "dependencies": ["roscpp", "nodelet", "pluginlib", "std_msgs", "geometry_msgs", "kobuki_msgs", "yocs_controllers", "ecl_threads"]
    },
    "create_node": {
        "description": "iRobot Create ROS driver node ROS bindings for the Create/Roomba driver. This is based on otl_roomba driver by OTL, ported to use create_driver's implementation instead. This also contains a 'bonus' feature from the turtlebot driver by Xuwen Cao and Morgan Quigley.",
        "url": "https://github.com/turtlebot/turtlebot_create",
        "dependencies": ["create_driver", "diagnostic_msgs", "dynamic_reconfigure", "geometry_msgs", "message_runtime", "nav_msgs", "python_orocos_kdl", "rospy", "tf"]
    },
    "robot_state_publisher": {
        "ros": "robot",
        "description": "This package allows you to publish the state of a robot to <a href=\"http://ros.org/wiki/tf\">tf</a>. Once the state gets published, it is available to all components in the system that also use <tt>tf</tt>. The package takes the joint angles of the robot as input and publishes the 3D poses of the robot links, using a kinematic tree model of the robot. The package can both be used as a library and as a ROS node. This package has been well tested and the code is stable. No major changes are planned in the near future",
        "url": "",
        "dependencies": ["catkin", "eigen", "kdl_parser", "orocos_kdl", "rosconsole", "roscpp", "rostime", "sensor_msgs", "tf", "tf_conversions"]
    },
    "robot_pose_ekf": {
        "description": "The Robot Pose EKF package is used to estimate the 3D pose of a robot, based on (partial) pose measurements coming from different sources. It uses an extended Kalman filter with a 6D model (3D position and 3D orientation) to combine measurements from wheel odometry, IMU sensor and visual odometry. The basic idea is to offer loosely coupled integration with different sensors, where sensor signals are received as ROS messages.",
        "url": "https://github.com/ros-planning/navigation",
        "dependencies": ["roscpp", "rostest", "bfl", "std_msgs", "geometry_msgs", "sensor_msgs", "nav_msgs", "tf"]
    },
    "diagnostic_aggregator": {
        "ros": "robot",
        "description": "diagnostic_aggregator",
        "url": "https://github.com/ros/diagnostics",
        "dependencies": ["diagnostic_msgs", "pluginlib", "roscpp", "rospy", "xmlrpcpp"]
    },
    "openni_launch": {
        "description": "Launch files to open an OpenNI device and load all nodelets to convert raw depth/RGB/IR streams to depth images, disparity images, and (registered) point clouds.",
        "url": "https://github.com/ros-drivers/openni_launch",
        "dependencies": ["nodelet", "openni_camera", "rgbd_launch"]
    },
    "laptop_battery_monitor": {
        "description": "Simple script to check battery status",
        "url": "https://github.com/ros-drivers/linux_peripheral_interfaces",
        "dependencies": ["rospy", "diagnostic_msgs", "smart_battery_msgs"]
    },
    "rocon_app_manager": {
        "description": "The public interface and retaskable interface for a robot.",
        "url": "https://github.com/robotics-in-concert/rocon_app_platform",
        "dependencies": ["capabilities", "gateway_msgs", "python-rospkg", "rocon_app_manager_msgs", "rocon_app_utilities", "rocon_apps", "rocon_console", "rocon_gateway_utils", "rocon_gateway", "rocon_hub", "rocon_interactions", "rocon_master_info", "rocon_python_comms", "rocon_python_utils", "rocon_std_msgs", "rocon_uri", "roslib", "rosmaster", "rospy", "std_msgs"]
    },
    "depthimage_to_laserscan": {
        "description": "Converts a depth image to a laser scan for use with navigation and localization.",
        "url": "https://github.com/ros-perception/depthimage_to_laserscan",
        "dependencies": ["roscpp", "sensor_msgs", "nodelet", "image_transport", "image_geometry", "dynamic_reconfigure"]
    },
    "capabilities": {
        "description": " Package which implements capabilities, including code to parse capability interface specs, to parse capability provider specs, and implement the capability server.",
        "url": "https://github.com/osrf/capabilities",
        "dependencies": ["bondpy", "message_runtime", "nodelet", "python-yaml", "roslaunch", "rospy", "std_msgs", "std_srvs"]
    },
    "std_capabilities": {
        "description": "This package contains standard capability interfaces, which describe common robot capabilities in terms of ROS concepts such as topics, services, actions, and parameters.",
        "url": "https://github.com/osrf/std_capabilities",
        "dependencies": []
    },
    "urdf": {
        "ros": "robot",
        "description": "This package contains a C++ parser for the Unified Robot Description Format (URDF), which is an XML format for representing a robot model. The code API of the parser has been through our review process and will remain backwards compatible in future releases.",
        "url": "https://github.com/ros/robot_model",
        "dependencies": ["liburdfdom-dev", "liburdfdom-headers-dev", "rosconsole_bridge", "roscpp", "urdf_parser_plugin", "pluginlib"]
    },
    "xacro": {
        "ros": "robot",
        "description": "Xacro is an XML macro language. With xacro, you can construct shorter and more readable XML files by using macros that expand to larger XML expressions.",
        "url": "https://github.com/ros/xacro",
        "dependencies": ["roslaunch"]
    },
    "kobuki_description": {
        "description": "Description of the Kobuki model. Provides the model description of Kobuki for simulation and visualisation. The files in this package are parsed and used by a variety of other components. Most users will not interact directly with this package. WARNING: This package is disabled because it cannot be catkinized by now, as xacro dependency is not catkin still. In the interim we use a unary pre-catkin stack named kobuki_description.",
        "url": "https://github.com/yujinrobot/kobuki",
        "dependencies": ["urdf", "xacro"]
    },
    "create_description": {
        "description": "Model description for the iRobot Create",
        "url": "https://github.com/turtlebot/turtlebot_create",
        "dependencies": ["urdf", "xacro"]
    },
    "roscpp": {
        "ros": "ros_core",
        "description": "roscpp is a C++ implementation of ROS. It provides a <a href=\"http://www.ros.org/wiki/Client%20Libraries\">client library</a> that enables C++ programmers to quickly interface with ROS <a href=\"http://ros.org/wiki/Topics\">Topics</a>, <a href=\"http://ros.org/wiki/Services\">Services</a>, and <a href=\"http://ros.org/wiki/Parameter Server\">Parameters</a>. roscpp is the most widely used ROS client library and is designed to be the high-performance library for ROS.",
        "url": "https://github.com/ros/ros_comm",
        "dependencies": ["cpp_common", "message_runtime", "rosconsole", "roscpp_serialization", "roscpp_traits", "rosgraph_msgs", "rostime", "std_msgs", "xmlrpcpp"]
    },
    "geometry_msgs": {
        "ros": "ros_core",
        "description": "geometry_msgs provides messages for common geometric primitives such as points, vectors, and poses. These primitives are designed to provide a common data type and facilitate interoperability throughout the system.",
        "url": "https://github.com/ros/common_msgs",
        "dependencies": ["message_runtime", "std_msgs"]
    },
    "joy": {
        "description": "ROS driver for a generic Linux joystick. The joy package contains joy_node, a node that interfaces a generic Linux joystick to ROS. This node publishes a \"Joy\" message, which contains the current state of each one of the joystick's buttons and axes.",
        "url": "https://github.com/ros-drivers/joystick_drivers",
        "dependencies": ["roscpp", "diagnostic_updater", "sensor_msgs", "joystick"]
    },
    "yocs_velocity_smoother": {
        "description": "Bound incoming velocity messages according to robot velocity and acceleration limits.",
        "url": "https://github.com/yujinrobot/yujin_ocs",
        "dependencies": ["roscpp", "pluginlib", "nodelet", "geometry_msgs", "nav_msgs", "ecl_threads", "dynamic_reconfigure"]
    },
    "rosconsole": {
        "ros": "ros_core",
        "description": "ROS console output library.",
        "url": "https://github.com/ros/ros_comm",
        "dependencies": ["apr", "cpp_common", "log4cxx", "rosbuild", "rostime"]
    },
    "zeroconf_msgs": {
        "description": "General ros communications used by the various zeroconf implementations.",
        "url": "https://github.com/stonier/zeroconf_msgs",
        "dependencies": ["message_runtime", "std_msgs"]
    },
    "libavahi-client-dev": {
        "linux": true,
        "description": "",
        "url": "",
        "dependencies": []
    },
    "libavahi-core-dev": {
        "linux": true,
        "description": "",
        "url": "",
        "dependencies": []
    },
    "avahi-daemon": {
        "linux": true,
        "description": "",
        "url": "",
        "dependencies": []
    },
    "pluginlib": {
        "ros": "ros_base",
        "description": "The pluginlib package provides tools for writing and dynamically loading plugins using the ROS build infrastructure. To work, these tools require plugin providers to register their plugins in the package.xml of their package.",
        "url": "https://github.com/ros/pluginlib",
        "dependencies": ["boost", "class_loader", "rosconsole", "roslib", "tinyxml"]
    },
    "nodelet": {
        "ros": "ros_base",
        "description": "The nodelet package is designed to provide a way to run multiple algorithms in the same process with zero copy transport between algorithms. This package provides both the nodelet base class needed for implementing a nodelet, as well as the NodeletLoader class used for instantiating nodelets.",
        "url": "https://github.com/ros/nodelet_core",
        "dependencies": ["bondcpp", "boost", "message_runtime", "pluginlib", "rosconsole", "roscpp", "std_msgs", "tinyxml", "uuid"]
    },
    "dynamic_reconfigure": {
        "ros": "ros_base",
        "description": "This unary stack contains the dynamic_reconfigure package which provides a means to change node parameters at any time without having to restart the node.",
        "url": "https://github.com/ros/dynamic_reconfigure",
        "dependencies": ["boost", "message_runtime", "roscpp", "roslib", "rospy", "rosservice", "std_msgs"]
    },
    "yaml-cpp": {
        "library": true,
        "description": "yaml-cpp is a YAML parser and emitter in C++ matching the YAML 1.2 spec.",
        "url": "https://code.google.com/p/yaml-cpp/",
        "dependencies": []
    },
    "rocon_apps": {
        "description": "Core rocon apps for use with the appmanager and rocon concert.",
        "url": "https://github.com/robotics-in-concert/rocon_app_platform",
        "dependencies": ["gateway_msgs", "rocon_app_manager_msgs", "roslib", "rospy", "rospy_tutorials", "topic_tools"]
    },
    "sensor_msgs": {
        "ros": "ros_core",
        "description": "This package defines messages for commonly used sensors, including cameras and scanning laser rangefinders.",
        "url": "https://github.com/ros/common_msgs",
        "dependencies": ["geometry_msgs", "message_runtime", "std_msgs"]
    },
    "nav_msgs": {
        "ros": "ros_core",
        "description": "nav_msgs defines the common messages used to interact with the <a href=\"http://wiki.ros.org/navigation\">navigation</a> stack.",
        "url": "https://github.com/ros/common_msgs",
        "dependencies": ["geometry_msgs", "message_runtime", "std_msgs", "actionlib_msgs"]
    },
    "std_msgs": {
        "ros": "ros_core",
        "description": "Standard ROS Messages including common message types representing primitive data types and other basic message constructs, such as multiarrays. For common, generic robot-specific message types, please see <a href=\"http://www.ros.org/wiki/common_msgs\">common_msgs</a>.",
        "url": "https://github.com/ros/std_msgs",
        "dependencies": ["message_runtime"]
    },
    "tf": {
        "ros": "robot",
        "description": "tf is a package that lets the user keep track of multiple coordinate frames over time. tf maintains the relationship between coordinate frames in a tree structure buffered in time, and lets the user transform points, vectors, etc between any two coordinate frames at any desired point in time.",
        "url": "https://github.com/ros/geometry",
        "dependencies": ["geometry_msgs", "graphviz", "message_filters", "message_runtime", "rosconsole", "roscpp", "roswtf", "sensor_msgs", "std_msgs", "tf2", "tf2_ros"]
    },
    "angles": {
        "ros": "robot",
        "description": "This package provides a set of simple math utilities to work with angles. The utilities cover simple things like normalizing an angle and conversion between degrees and radians. But even if you're trying to calculate things like the shortest angular distance between two joinst space positions of your robot, but the joint motion is constrained by joint limits, this package is what you need. The code in this packge is stable and well tested. There are no plans for major changes in the near future.",
        "url": "https://github.com/ros/angles",
        "dependencies": []
    },
    "diagnostic_updater": {
        "ros": "robot",
        "description": "diagnostic_updater contains tools for easily updating diagnostics. it is commonly used in device drivers to keep track of the status of output topics, device status, etc.",
        "url": "https://github.com/ros/diagnostics",
        "dependencies": ["diagnostic_msgs", "roscpp", "std_msgs"]
    },
    "diagnostic_msgs": {
        "ros": "ros_core",
        "description": "This package holds the diagnostic messages which provide the standardized interface for the diagnostic and runtime monitoring systems in ROS. These messages are currently used by the <a href=\"http://wiki.ros.org/diagnostics\">diagnostics</a> Stack, which provides libraries for simple ways to set and access the messages, as well as automated ways to process the diagnostic data. These messages are used for long term logging and will not be changed unless there is a very important reason.",
        "url": "https://github.com/ros/common_msgs",
        "dependencies": ["message_runtime", "std_msgs"]
    },
    "kobuki_rapps": {
        "description": "Robot apps for Kobuki",
        "url": "https://github.com/yujinrobot/kobuki",
        "dependencies": ["kobuki_auto_docking", "kobuki_random_walker", "nodelet"]
    },
    "kobuki_msgs": {
        "description": "Kobuki message and service types: custom messages and services for Kobuki packages.",
        "url": "https://github.com/yujinrobot/kobuki_msgs",
        "dependencies": ["std_msgs", "actionlib_msgs", "message_runtime"]
    },
    "kobuki_driver": {
        "description": "C++ driver library for Kobuki: Pure C++ driver library for Kobuki. This is for those who do not wish to use ROS on their systems.",
        "url": "https://github.com/yujinrobot/kobuki_core",
        "dependencies": ["ecl_mobile_robot", "ecl_converters", "ecl_devices", "ecl_geometry", "ecl_sigslots", "ecl_time", "ecl_command_line"]
    },
    "kobuki_ftdi": {
        "description": "Utilities for flashing and enabling Kobuki's USB connection. This package contains tools for flashing the Kobuki's FTDI chip (usually done at the factory). The special firmware for the FTDI chip (USB to serial converter) enables it to appear as /dev/kobuki on the user's PC.",
        "url": "https://github.com/yujinrobot/kobuki_core",
        "dependencies": ["ecl_command_line", "libusb-dev", "libftdi-dev", "ftdi-eeprom"]
    },
    "kobuki_keyop": {
        "description": "Keyboard teleoperation for Kobuki: relays commands from a keyboard to Kobuki.",
        "url": "https://github.com/yujinrobot/kobuki",
        "dependencies": ["geometry_msgs", "std_srvs", "std_msgs", "roscpp", "ecl_exceptions", "ecl_threads", "ecl_time", "kobuki_msgs", "yocs_cmd_vel_mux", "yocs_velocity_smoother"]
    },
    "ecl_exceptions": {
        "description": "Template based exceptions - these are simple and practical and avoid the proliferation of exception types. Although not syntatactically ideal, it is convenient and eminently practical.",
        "url": "https://github.com/yujinrobot/ecl_core",
        "dependencies": ["ecl_license", "ecl_config", "ecl_errors"]
    },
    "ecl_sigslots": {
        "description": "Provides a signal/slot mechanism (in the same vein as qt sigslots, boost::signals etc for intra-process communication. These include some improvements - they do not need a preprocessor, are fully type safe, allow for simple connections via a posix style string identifier and are multithread-safe.",
        "url": "https://github.com/yujinrobot/ecl_core",
        "dependencies": ["ecl_license", "ecl_config", "ecl_threads"]
    },
    "ecl_streams": {
        "description": "These are lightweight text streaming classes that connect to standardised ecl type devices.",
        "url": "https://github.com/yujinrobot/ecl_core",
        "dependencies": ["ecl_license", "ecl_errors", "ecl_concepts", "ecl_devices", "ecl_time", "ecl_converters", "ecl_type_traits"]
    },
    "ecl_threads": {
        "description": "This package provides the c++ extensions for a variety of threaded programming tools. These are usually different on different platforms, so the architecture for a cross-platform framework is also implemented.",
        "url": "https://github.com/yujinrobot/ecl_core",
        "dependencies": ["ecl_license", "ecl_build", "ecl_config", "ecl_errors", "ecl_concepts", "ecl_exceptions", "ecl_time", "ecl_utilities"]
    },
    "rospy": {
        "ros": "ros_core",
        "description": "rospy is a pure Python client library for ROS. The rospy client API enables Python programmers to quickly interface with ROS <a href=\"http://ros.org/wiki/Topics\">Topics</a>, <a href=\"http://ros.org/wiki/Services\">Services</a>, and <a href=\"http://ros.org/wiki/Parameter Server\">Parameters</a>. The design of rospy favors implementation speed (i.e. developer time) over runtime performance so that algorithms can be quickly prototyped and tested within ROS. It is also ideal for non-critical-path code, such as configuration and initialization code. Many of the ROS tools are written in rospy to take advantage of the type introspection capabilities. Many of the ROS tools, such as <a href=\"http://ros.org/wiki/rostopic\">rostopic</a> and <a href=\"http://ros.org/wiki/rosservice\">rosservice</a>, are built on top of rospy.",
        "url": "https://github.com/ros/ros_comm",
        "dependencies": ["genpy", "python-numpy", "python-rospkg", "python-yaml", "roscpp", "rosgraph", "rosgraph_msgs", "roslib", "std_msgs"]
    },
    "yocs_controllers": {
        "description": "Library for various controller types and algorithms.",
        "url": "https://github.com/yujinrobot/yujin_ocs",
        "dependencies": ["roscpp"]
    },
    "kobuki_auto_docking": {
        "description": "Automatic docking for Kobuki: Users owning a docking station for Kobuki can use this tool to let Kobuki find its nest autonomously.",
        "url": "https://github.com/yujinrobot/kobuki",
        "dependencies": ["roscpp", "rospy", "nodelet", "pluginlib", "message_filters", "actionlib", "kdl_conversions", "std_msgs", "nav_msgs", "geometry_msgs", "actionlib_msgs", "kobuki_msgs", "kobuki_dock_drive", "yocs_cmd_vel_mux", "ecl_threads", "ecl_geometry", "ecl_linear_algebra"]
    },
    "kobuki_random_walker": {
        "description": "Random walker app for Kobuki",
        "url": "https://github.com/yujinrobot/kobuki",
        "dependencies": ["ecl_threads", "geometry_msgs", "kobuki_msgs", "nodelet", "pluginlib", "roscpp", "std_msgs", "yocs_controllers", "yocs_cmd_vel_mux"]
    },
    "std_srvs": {
        "ros": "ros_core",
        "description": "Common service definitions. Currently just the 'Empty' service.",
        "url": "https://github.com/ros/ros_comm_msgs",
        "dependencies": ["message_runtime"]
    },
    "ecl_time": {
        "description": "Timing utilities are very dependent on the system api provided for their use. This package provides a means for handling different timing models. Current support - posix rt : complete. - macosx : posix timers only, missing absolute timers. - win : none.",
        "url": "https://github.com/yujinrobot/ecl_core",
        "dependencies": ["ecl_license", "ecl_config", "ecl_errors", "ecl_time_lite", "ecl_exceptions"]
    },
    "message_filters": {
        "ros": "ros_core",
        "description": "A set of message filters which take in messages and may output those messages at a later time, based on the conditions that filter needs met.",
        "url": "https://github.com/ros/ros_comm",
        "dependencies": ["rosconsole", "roscpp", "xmlrpcpp"]
    },
    "actionlib": {
        "ros": "ros_base",
        "description": "The actionlib stack provides a standardized interface for interfacing with preemptable tasks. Examples of this include moving the base to a target location, performing a laser scan and returning the resulting point cloud, detecting the handle of a door, etc.",
        "url": "https://github.com/ros/actionlib",
        "dependencies": ["actionlib_msgs", "boost", "message_runtime", "roscpp", "rospy", "rostest", "std_msgs"]
    },
    "kdl_conversions": {
        "ros": "robot",
        "description": "Conversion functions between KDL and geometry_msgs types.",
        "url": "https://github.com/ros/geometry",
        "dependencies": ["geometry_msgs", "orocos_kdl"]
    },
    "std_msgs": {
        "ros": "ros_core",
        "description": "Standard ROS Messages including common message types representing primitive data types and other basic message constructs, such as multiarrays. For common, generic robot-specific message types, please see <a href=\"http://www.ros.org/wiki/common_msgs\">common_msgs</a>.",
        "url": "https://github.com/ros/std_msgs",
        "dependencies": ["message_runtime"]
    },
    "actionlib_msgs": {
        "ros": "ros_core",
        "description": "actionlib_msgs defines the common messages to interact with an action server and an action client. For full documentation of the actionlib API see the <a href=\"http://wiki.ros.org/actionlib\">actionlib</a> package.",
        "url": "https://github.com/ros/common_msgs",
        "dependencies": ["message_generation", "message_runtime", "std_msgs"]
    },
    "kobuki_dock_drive": {
        "description": "Dock driving library for Kobuki. Users owning a docking station for Kobuki can use this tool to develop autonomous docking drive algorithms.",
        "url": "https://github.com/yujinrobot/kobuki_core",
        "dependencies": ["ecl_threads", "ecl_geometry", "ecl_linear_algebra"]
    },
    "ecl_geometry": {
        "description": "Any tools relating to mathematical geometry. Primarily featuring polynomials and interpolations.",
        "url": "https://github.com/yujinrobot/ecl_core",
        "dependencies": ["ecl_license", "ecl_config", "ecl_type_traits", "ecl_containers", "ecl_formatters", "ecl_linear_algebra", "ecl_exceptions", "ecl_math", "ecl_mpl"]
    },
    "ecl_linear_algebra": {
        "description": "Ecl frontend to a linear matrix package (currently eigen).",
        "url": "https://github.com/yujinrobot/ecl_core",
        "dependencies": ["ecl_license", "ecl_eigen", "ecl_formatters", "ecl_exceptions"]
    },
    "create_driver": {
        "description": "Driver for iRobot Create and Roomba This is a generic driver for iRobot Create that currently holds implementations for Turtlebot and Roomba. Port of pyrobot.py by Damon Kohler. It is currently labeled as turtlebot_driver pending review by the entire create community before using the name create_driver. For ROS bindings, please see turtlebot_node.",
        "url": "https://github.com/turtlebot/turtlebot_create",
        "dependencies": []
    },
    "message_runtime": {
        "ros": "ros_core",
        "description": "Package modeling the run-time dependencies for language bindings of messages.",
        "url": "https://github.com/ros/message_runtime",
        "dependencies": ["cpp_common", "roscpp_serialization", "roscpp_traits", "rostime", "genpy"]
    },
    "python_orocos_kdl": {
        "description": "This package contains the python bindings PyKDL for the Kinematics and Dynamics Library (KDL), distributed by the Orocos Project.",
        "url": "https://github.com/orocos/orocos_kinematics_dynamics",
        "dependencies": ["catkin", "orocos_kdl", "python-sip"]
    },
    "bfl": {
        "library": true,
        "description": "This package contains a recent version of the Bayesian Filtering Library (BFL), distributed by the Orocos Project. For stability reasons, this package is currently locked to revision 31655 (April 19, 2010), but this revision will be updated on a regular basis to the latest available BFL trunk. This ROS package does not modify BFL in any way, it simply provides a convenient way to download and compile the library, because BFL is not available from an OS package manager. This ROS package compiles BFL with the Boost library for matrix operations and random number generation.",
        "url": "http://svn.mech.kuleuven.be/repos/orocos/trunk/bfl",
        "dependencies": []
    },
    "openni_camera": {
        "description": "A ROS driver for OpenNI depth (+ RGB) cameras. These include: Microsoft Kinect, PrimeSense PSDK, ASUS Xtion Pro and Pro Live The driver publishes raw depth, RGB, and IR image streams.",
        "url": "https://github.com/ros-drivers/openni_camera",
        "dependencies": ["camera_info_manager", "dynamic_reconfigure", "image_transport", "log4cxx", "nodelet", "roscpp", "sensor_msgs", "libusb-1.0-dev", "libopenni-dev", "libopenni-sensor-primesense-dev"]
    },
    "rgbd_launch": {
        "description": "Launch files to open an RGBD device and load all nodelets to convert raw depth/RGB/IR streams to depth images, disparity images, and (registered) point clouds.",
        "url": "https://github.com/ros-drivers/rgbd_launch",
        "dependencies": ["depth_image_proc", "image_proc", "nodelet", "tf"]
    },
    "smart_battery_msgs": {
        "description": "Smart Battery Messages",
        "url": "https://github.com/ros-drivers/smart_battery_msgs",
        "dependencies": ["std_msgs", "message_runtime"]
    },
    "gateway_msgs": {
        "description": "Messages used by the gateway model.",
        "url": "https://github.com/robotics-in-concert/rocon_msgs",
        "dependencies": ["message_runtime", "std_msgs"]
    },
    "python-rospkg": {
        "library": true,
        "description": "Standalone Python library for the ROS package system.",
        "url": "https://github.com/ros-infrastructure/rospkg",
        "dependencies": []
    },
    "rocon_app_manager_msgs": {
        "description": "Messages used by the platform app manager.",
        "url": "https://github.com/robotics-in-concert/rocon_msgs",
        "dependencies": ["message_runtime", "rocon_std_msgs", "rocon_service_pair_msgs"]
    },
    "rocon_app_utilities": {
        "description": "rocon_app_utilities is a python-module to manipulate rapps. It provides a simple command-line tool as well as importable python module. The main function is to gather rapps in ROS_PACKAGE_PATH, read and parse the .rapp, and recomposite with parent specification.",
        "url": "https://github.com/robotics-in-concert/rocon_app_platform",
        "dependencies": ["rocon_python_utils", "rocon_uri", "python-rospkg", "roslaunch"]
    },
    "rocon_console": {
        "description": "Command line python console utilities (mostly for colourisation).",
        "url": "https://github.com/robotics-in-concert/rocon_tools",
        "dependencies": []
    },
    "rocon_gateway_utils": {
        "description": "Utilities for gateway users (avoids large dependency requirements).",
        "url": "https://github.com/robotics-in-concert/rocon_multimaster",
        "dependencies": ["rosgraph", "gateway_msgs", "rocon_console", "rocon_python_comms", "rosservice"]
    },
    "rocon_gateway": {
        "description": "A hub acts as a shared key-value store for multiple ros systems (primarily used by gateways).",
        "url": "https://github.com/robotics-in-concert/rocon_multimaster",
        "dependencies": ["gateway_msgs", "python-crypto", "rospy", "rocon_hub_client", "rocon_console", "rocon_python_comms", "rocon_python_redis", "rocon_gateway_utils", "rocon_python_utils", "rocon_python_wifi", "roslib", "rostopic", "rosservice", "std_srvs", "zeroconf_msgs", "zeroconf_avahi"]
    },
    "rocon_hub": {
        "description": "A hub acts as a shared key-value store for multiple ros systems (primarily used by gateways).",
        "url": "https://github.com/robotics-in-concert/rocon_multimaster",
        "dependencies": ["avahi-daemon", "avahi-utils", "redis-server", "std_srvs", "rosgraph", "rocon_console", "rocon_gateway", "rocon_python_comms", "rocon_python_redis", "rocon_semantic_version"]
    },
    "rocon_interactions": {
        "description": "Interaction management for human interactive agents in the concert.",
        "url": "https://github.com/robotics-in-concert/rocon_tools",
        "dependencies": ["genpy", "python-rospkg", "rospy", "rocon_bubble_icons", "rocon_console", "rocon_icons", "rocon_app_manager_msgs", "rocon_interaction_msgs", "rocon_python_comms", "rocon_python_utils", "rocon_std_msgs", "rocon_uri", "std_msgs", "unique_id"]
    },
    "rocon_master_info": {
        "description": "Publish master information - name, description, icon.",
        "url": "https://github.com/robotics-in-concert/rocon_tools",
        "dependencies": ["rospy", "rocon_console", "rocon_icons", "rocon_python_comms", "rocon_python_utils", "rocon_std_msgs"]
    },
    "rocon_python_comms": {
        "description": "Service pair libraries for pub/sub non-blocking services.",
        "url": "https://github.com/robotics-in-concert/rocon_tools",
        "dependencies": ["genpy", "rospy", "rosnode", "rosservice", "rostopic", "rosgraph", "roslib", "python-yaml", "rocon_console", "rocon_service_pair_msgs", "unique_id", "uuid_msgs"]
    },
    "rocon_python_utils": {
        "description": "Python system and ros utilities.",
        "url": "https://github.com/robotics-in-concert/rocon_tools",
        "dependencies": ["python-rospkg", "python-catkin-pkg", "rospy", "rocon_std_msgs", "roslib"]
    },
    "rocon_std_msgs": {
        "description": "Standard messages used by other rocon specific package types.",
        "url": "https://github.com/robotics-in-concert/rocon_msgs",
        "dependencies": ["message_runtime", "std_msgs", "rocon_service_pair_msgs"]
    },
    "rocon_uri": {
        "description": "Module for working with rocon uri strings.",
        "url": "https://github.com/robotics-in-concert/rocon_tools",
        "dependencies": ["rocon_console", "rocon_ebnf", "rospy"]
    },
    "roslib": {
        "ros": "ros_core",
        "description": "Base dependencies and support libraries for ROS. roslib contains many of the common data structures and tools that are shared across ROS client library implementations.",
        "url": "https://github.com/ros/ros",
        "dependencies": ["catkin", "python-rospkg", "rospack"]
    },
    "rosmaster": {
        "ros": "ros_core",
        "description": "ROS Master implementation.",
        "url": "https://github.com/ros/ros_comm",
        "dependencies": ["rosgraph"]
    },
    "rospy_tutorials": {
        "ros": "ros_core",
        "description": "This package attempts to show the features of ROS python API step-by-step, including using messages, servers, parameters, etc. These tutorials are compatible with the nodes in roscpp_tutorial.",
        "url": "https://github.com/ros/ros_tutorials",
        "dependencies": ["message_runtime", "rospy", "std_msgs"]
    },
    "topic_tools": {
        "ros": "ros_core",
        "description": "Tools for directing, throttling, selecting, and otherwise messing with ROS topics at a meta level. None of the programs in this package actually know about the topics whose streams they are altering; instead, these tools deal with messages as generic binary blobs. This means they can be applied to any ROS topic.",
        "url": "https://github.com/ros/ros_comm",
        "dependencies": ["message_runtime", "rosconsole", "roscpp", "rostime", "std_msgs", "xmlrpcpp"]
    },
    "roslaunch": {
        "ros": "ros_core",
        "description": "roslaunch is a tool for easily launching multiple ROS <a href=\"http://ros.org/wiki/Nodes\">nodes</a> locally and remotely via SSH, as well as setting parameters on the <a href=\"http://ros.org/wiki/Parameter Server\">Parameter Server</a>. It includes options to automatically respawn processes that have already died. roslaunch takes in one or more XML configuration files (with the <tt>.launch</tt> extension) that specify the parameters to set and nodes to launch, as well as the machines that they should be run on.",
        "url": "https://github.com/ros/ros_comm",
        "dependencies": ["python-paramiko", "python-rospkg", "python-yaml", "rosclean", "rosgraph_msgs", "roslib", "rosmaster", "rosout", "rosparam", "rosunit"]
    },
    "image_transport": {
        "ros": "perception",
        "description": "image_transport should always be used to subscribe to and publish images. It provides transparent support for transporting images in low-bandwidth compressed formats. Examples (provided by separate plugin packages) include JPEG/PNG compression and Theora streaming video.",
        "url": "https://github.com/ros-perception/image_common",
        "dependencies": ["message_filters", "pluginlib", "rosconsole", "roscpp", "roslib", "sensor_msgs"]
    },
    "image_geometry": {
        "ros": "perception",
        "description": "`image_geometry` contains C++ and Python libraries for interpreting images geometrically. It interfaces the calibration parameters in sensor_msgs/CameraInfo messages with OpenCV functions such as image rectification, much as cv_bridge interfaces ROS sensor_msgs/Image with OpenCV data types.",
        "url": "https://github.com/ros-perception/vision_opencv",
        "dependencies": ["libopencv-dev", "python-opencv", "sensor_msgs"]
    },
    "bondpy": {
        "ros": "ros_base",
        "description": "Python implementation of bond, a mechanism for checking when another process has terminated.",
        "url": "https://github.com/ros/bond_core",
        "dependencies": ["rospy", "smclib", "uuid"]
    },
    "python-yaml": {
        "library": true,
        "description": "YAML parser and emitter for Python.",
        "url": "https://pypi.python.org/pypi/PyYAML",
        "dependencies": []
    },
    "liburdfdom-dev": {
        "linux": true,
        "description": "The urdf (u-robot description format) library provides core data structures and a simple xml parsers for populating the class data structures from an urdf file. This package contains the development files (headers, pkg-config and cmake files).",
        "url": "",
        "dependencies": []
    },
    "liburdfdom-headers-dev": {
        "linux": true,
        "description": "The urdf (u-robot description format) library provides core data structures and a simple xml parsers for populating the class data structures from an urdf file. This package contains the headers files.",
        "url": "",
        "dependencies": []
    },
    "rosconsole_bridge": {
        "ros": "ros_core",
        "description": "rosconsole_bridge is a package used in conjunction with console_bridge and rosconsole for connecting console_bridge-based logging to rosconsole-based logging.",
        "url": "https://github.com/ros/rosconsole_bridge",
        "dependencies": ["libconsole-bridge-dev", "rosconsole"]
    },
    "urdf_parser_plugin": {
        "ros": "robot",
        "description": "This package contains a C++ base class for URDF parsers.",
        "url": "https://github.com/ros/robot_model",
        "dependencies": ["liburdfdom-headers-dev"]
    },
    "joystick": {
        "linux": true,
        "description": "Linux Joystick drivers.",
        "url": "https://github.com/torvalds/linux",
        "dependencies": []
    },
    "ecl_mobile_robot": {
        "description": "Contains transforms (e.g. differential drive inverse kinematics) for the various types of mobile robot platforms.",
        "url": "https://github.com/stonier/ecl_navigation",
        "dependencies": ["ecl_license", "ecl_errors", "ecl_geometry", "ecl_math", "ecl_formatters", "ecl_linear_algebra"]
    },
    "ecl_converters": {
        "description": "Some fast/convenient type converters, mostly for char strings or strings. These are not really fully fleshed out, alot of them could use the addition for the whole range of fundamental types (e.g. all integers, not just int, unsigned int). They will come as the need arises.",
        "url": "https://github.com/yujinrobot/ecl_core",
        "dependencies": ["ecl_license", "ecl_config", "ecl_errors", "ecl_exceptions", "ecl_mpl", "ecl_type_traits", "ecl_concepts"]
    },
    "ecl_devices": {
        "description": "Provides an extensible and standardised framework for input-output devices.",
        "url": "https://github.com/yujinrobot/ecl_core",
        "dependencies": ["ecl_license", "ecl_config", "ecl_errors", "ecl_mpl", "ecl_type_traits", "ecl_utilities", "ecl_containers", "ecl_threads"]
    },
    "ecl_command_line": {
        "description": "Embeds the TCLAP library inside the ecl. This is a very convenient command line parser in templatised c++.",
        "url": "https://github.com/yujinrobot/ecl_core",
        "dependencies": ["ecl_license"]
    },
    "libusb-dev": {
        "linux": true,
        "description": "libusb is a C library that gives applications easy access to USB devices on many different operating systems. libusb is an open source project, the code is licensed under the ​GNU Lesser General Public License version 2.1 or later. ",
        "url": "http://www.libusb.org/",
        "dependencies": []
    },
    "libftdi-dev": {
        "linux": true,
        "description": "This package contains the header files and static library needed to compile applications that use libftdi.",
        "url": "",
        "dependencies": []
    },
    "ftdi-eeprom": {
        "linux": true,
        "description": "Ftdi-eeprom is a small tool for creating and uploading the configuration eeprom for the ftdi chip. this eeprom contains information such as vendor and product id, manufacturer and product strings, revision, etc.",
        "url": "",
        "dependencies": []
    },
    "ecl_license": {
        "description": "Maintains the ecl licenses and also provides an install target for deploying licenses with the ecl libraries.",
        "url": "https://github.com/stonier/ecl_tools",
        "dependencies": []
    },
    "ecl_config": {
        "description": "These tools inspect and describe your system with macros, types and functions.",
        "url": "https://github.com/stonier/ecl_lite",
        "dependencies": ["ecl_license", "ecl_build"]
    },
    "ecl_errors": {
        "description": "This library provides lean and mean error mechanisms. It includes c style error functions as well as a few useful macros. For higher level mechanisms, refer to ecl_exceptions.",
        "url": "https://github.com/stonier/ecl_lite",
        "dependencies": ["ecl_license", "ecl_config"]
    },
    "ecl_mpl": {
        "description": "Metaprogramming tools move alot of runtime calculations to be shifted to compile time. This has only very elementary structures at this stage.",
        "url": "https://github.com/yujinrobot/ecl_core",
        "dependencies": ["ecl_license"]
    },
    "ecl_type_traits": {
        "description": "Extends c++ type traits and implements a few more to boot.",
        "url": "https://github.com/yujinrobot/ecl_core",
        "dependencies": ["ecl_license", "ecl_mpl", "ecl_config"]
    },
    "ecl_concepts": {
        "description": "Introduces a compile time concept checking mechanism that can be used most commonly to check for required functionality when passing template arguments.",
        "url": "https://github.com/yujinrobot/ecl_core",
        "dependencies": ["ecl_license", "ecl_config", "ecl_type_traits"]
    },
    "ecl_utilities": {
        "description": "Includes various supporting tools and utilities for c++ programming.",
        "url": "https://github.com/yujinrobot/ecl_core",
        "dependencies": ["ecl_license", "ecl_mpl", "ecl_concepts"]
    },
    "ecl_containers": {
        "description": "The containers included here are intended to extend the stl containers. In all cases, these implementations are designed to implement c++ conveniences and safety where speed is not sacrificed. Also includes techniques for memory debugging of common problems such as buffer overruns.",
        "url": "https://github.com/yujinrobot/ecl_core",
        "dependencies": ["ecl_license", "ecl_config", "ecl_errors", "ecl_exceptions", "ecl_formatters", "ecl_converters", "ecl_mpl", "ecl_type_traits", "ecl_utilities"]
    },
    "ecl_formatters": {
        "description": "The formatters here simply format various input types to a specified text format. They can be used with most streaming types (including both ecl and stl streams).",
        "url": "https://github.com/yujinrobot/ecl_core",
        "dependencies": ["ecl_license", "ecl_config", "ecl_exceptions", "ecl_converters"]
    },
    "ecl_eigen": {
        "description": "This provides an Eigen implementation for ecl's linear algebra.",
        "url": "https://github.com/yujinrobot/ecl_core",
        "dependencies": ["ecl_license", "eigen"]
    },
    "eigen": {
        "library": true,
        "description": "Eigen is a C++ template library for linear algebra: matrices, vectors, numerical solvers, and related algorithms.",
        "url": "https://bitbucket.org/eigen/eigen/",
        "dependencies": []
    },
    "ecl_build": {
        "description": "Collection of cmake/make build tools primarily for ecl development itself, but also contains a few cmake modules useful outside of the ecl.",
        "url": "https://github.com/stonier/ecl_tools",
        "dependencies": ["ecl_license"]
    },
    "ecl_time_lite": {
        "description": "Provides a portable set of time functions that are especially useful for porting other code or being wrapped by higher level c++ classes.",
        "url": "https://github.com/stonier/ecl_lite",
        "dependencies": ["ecl_license", "ecl_build", "ecl_config", "ecl_errors"]
    },
    "ecl_math": {
        "description": "This package provides simple support to cmath, filling in holes or redefining in a c++ formulation where desirable.",
        "url": "https://github.com/yujinrobot/ecl_core",
        "dependencies": ["ecl_license", "ecl_type_traits"]
    },
    "orocos_kdl": {
        "description": "This package contains a recent version of the Kinematics and Dynamics Library (KDL), distributed by the Orocos Project.",
        "url": "https://github.com/orocos/orocos_kinematics_dynamics",
        "dependencies": ["catkin", "eigen", "pkg-config"]
    },
    "message_generation": {
        "ros": "ros_core",
        "description": "Package modeling the build-time dependencies for generating language bindings of messages.",
        "url": "https://github.com/ros/message_generation",
        "dependencies": ["gencpp", "genlisp", "genmsg", "genpy"]
    },
    "catkin": {
        "ros": "ros_core",
        "description": "Low-level build system macros and infrastructure for ROS.",
        "url": "https://github.com/ros/catkin",
        "dependencies": []
    },
    "python-sip": {
        "library": true,
        "description": "SIP is a tool for quickly writing Python modules that interface with C++ and C libraries.",
        "url": "http://riverbankcomputing.co.uk/software/sip/intro",
        "dependencies": []
    },    
    "camera_info_manager": {
        "ros": "perception",
        "description": "This package provides a C++ interface for camera calibration information. It provides CameraInfo, and handles SetCameraInfo service requests, saving and restoring the camera calibration data.",
        "url": "https://github.com/ros-perception/image_common",
        "dependencies": ["boost", "camera_calibration_parsers", "image_transport", "roscpp", "roslib", "sensor_msgs"]
    },
    "log4cxx": {
        "library": true,
        "description": "Log4cxx C++ framework for logging. Supports various log levels, formats and transport mediums.",
        "url": "",
        "dependencies": []
    },    
    "libusb-1.0-dev": {
        "linux": true,
        "description": "libusb-1.0 is an almost-rewrite of the previous stable branch, libusb-0.1. It is a lightweight library that can be efficiently integrated into applications of any kind, with several new features.",
        "url": "http://www.libusb.org/wiki/libusb-1.0",
        "dependencies": []
    },    
    "libopenni-dev": {
        "linux": true,
        "description": "Openni is a framework for getting data to support 'natural interaction', i.e. skeleton tracking, gesture tracking, and similar ways of getting data from humans. openni provides the interface for physical devices and for middleware components. the api enables modules to be registered in the openni framework, which then produce sensory data. openni also allows selection of different hardware and middleware modules. This package provides the headers and pkgconfig for building c/c++ programs that use openni libraries.",
        "url": "",
        "dependencies": []
    },    
    "libopenni-sensor-primesense-dev": {
        "linux": true,
        "description": "Openni is a framework for getting data to support 'natural interaction', i.e. skeleton tracking, gesture tracking, and similar ways of getting data from humans. this package provides modules for openni that get the data from the primesense camera for processing with the openni middleware, like primesense nite. This package provides the headers for building against these sensor modules.",
        "url": "",
        "dependencies": []
    },    
    "depth_image_proc": {
        "ros": "perception",
        "description": "Contains nodelets for processing depth images such as those produced by OpenNI camera. Functions include creating disparity images and point clouds, as well as registering (reprojecting) a depth image into another camera frame.",
        "url": "https://github.com/ros-perception/image_pipeline",
        "dependencies": ["boost", "cv_bridge", "eigen_conversions", "image_geometry", "image_transport", "nodelet", "tf2", "tf2_ros"]
    },
    "image_proc": {
        "ros": "perception",
        "description": "Single image rectification and color processing.",
        "url": "https://github.com/ros-perception/image_pipeline",
        "dependencies": ["cv_bridge", "dynamic_reconfigure", "image_geometry", "image_transport", "libopencv-dev", "nodelet", "roscpp", "sensor_msgs"]
    },
    "rocon_service_pair_msgs": {
        "description": "Paired pubsubs generators for non-blocking services.",
        "url": "https://github.com/robotics-in-concert/rocon_msgs",
        "dependencies": ["rospy", "uuid_msgs", "message_runtime"]
    },
    "uuid_msgs": {
        "description": "ROS messages for universally unique identifiers.",
        "url": "https://github.com/ros-geographic-info/unique_identifier",
        "dependencies": ["message_runtime", "std_msgs"]
    },
    "rosgraph": {
        "ros": "ros_core",
        "description": "rosgraph contains the rosgraph command-line tool, which prints information about the ROS Computation Graph. It also provides an internal library that can be used by graphical tools.",
        "url": "https://github.com/ros/ros_comm",
        "dependencies": ["python-netifaces", "python-rospkg"]
    },
    "rosservice": {
        "ros": "ros_core",
        "description": "rosservice contains the rosservice command-line tool for listing and querying ROS <a href=\"http://www.ros.org/wiki/Services\">Services</a>. It also contains a Python library for retrieving information about Services and dynamically invoking them. The Python library is experimental and is for internal-use only.",
        "url": "https://github.com/ros/ros_comm",
        "dependencies": ["genpy", "rosgraph", "roslib", "rospy", "rosmsg"]
    },
    "genpy": {
        "ros": "ros_core",
        "description": "Python ROS message and service generators.",
        "url": "https://github.com/ros/genpy",
        "dependencies": ["genmsg"]
    },
    "rosnode": {
        "ros": "ros_core",
        "description": "rosnode is a command-line tool for displaying debug information about ROS Nodes, including publications, subscriptions and connections. It also contains an experimental library for retrieving node information. This library is intended for internal use only.",
        "url": "https://github.com/ros/ros_comm",
        "dependencies": ["rosgraph", "rostopic"]
    },
    "rostopic": {
        "ros": "ros_core",
        "description": "rostopic contains the rostopic command-line tool for displaying debug information about ROS <a href=\"http://www.ros.org/wiki/Topics\">Topics</a>, including publishers, subscribers, publishing rate, and ROS <a href=\"http://www.ros.org/wiki/Messages\">Messages</a>. It also contains an experimental Python library for getting information about and interacting with topics dynamically. This library is for internal-use only as the code API may change, though it does provide examples of how to implement dynamic subscription and publication behaviors in ROS.",
        "url": "https://github.com/ros/ros_comm",
        "dependencies": ["genpy", "rosbag", "rospy"]
    },
    "unique_id": {
        "description": "ROS Python and C++ interfaces for universally unique identifiers.",
        "url": "https://github.com/ros-geographic-info/unique_identifier",
        "dependencies": ["roscpp", "rospy", "uuid_msgs"]
    },
    "python-catkin-pkg": {
        "library": true,
        "description": "Standalone Python library for the catkin package system. Contains support for finding and introspecting catkin packages in the file system.",
        "url": "https://github.com/ros-infrastructure/catkin_pkg",
        "dependencies": []
    },
    "python-crypto": {
        "library": true,
        "description": "Cryptographic algorithms and protocols for Python",
        "url": "https://launchpad.net/ubuntu/+source/python-crypto",
        "dependencies": []
    },
    "rocon_hub_client": {
        "description": "Client api for discovery and connection to rocon hubs. It also has a few convenience api for manipulating data on the hub.",
        "url": "https://github.com/robotics-in-concert/rocon_multimaster",
        "dependencies": ["gateway_msgs", "rospy", "rocon_python_redis", "rocon_gateway_utils"]
    },
    "rocon_python_redis": {
        "description": "Locally patched version of the python redis client (https://github.com/andymccurdy/redis-py).",
        "url": "https://github.com/robotics-in-concert/rocon_tools",
        "dependencies": []
    },
    "rocon_python_wifi": {
        "description": "The pythonwifi package is available through pypi, but not through a deb package. This is copy of the package suitable for use through the ROS ecosystem.",
        "url": "https://github.com/robotics-in-concert/rocon_tools",
        "dependencies": []
    },
    "avahi-utils": {
        "linux": true,
        "description": "Avahi is a fully lgpl framework for multicast dns service discovery. it allows programs to publish and discover services and hosts running on a local network with no specific configuration. for example you can plug into a network and instantly find printers to print to, files to look at and people to talk to. This package contains several utilities that allow you to interact with the avahi daemon, including publish, browsing and discovering services.",
        "url": "",
        "dependencies": []
    },
    "redis-server": {
        "library": true,
        "description": "Redis is an open source, BSD licensed, advanced key-value cache and store. It is often referred to as a data structure server since keys can contain strings, hashes, lists, sets, sorted sets, bitmaps and hyperloglogs.",
        "url": "http://redis.io/",
        "dependencies": []
    },
    "rocon_semantic_version": {
        "description": "Internal packaging of the 2.2.2 version of the python semantic version module.",
        "url": "https://github.com/robotics-in-concert/rocon_tools",
        "dependencies": []
    },
    "rocon_bubble_icons": {
        "description": "Bubble icon library for rocon.",
        "url": "https://github.com/robotics-in-concert/rocon_tools",
        "dependencies": []
    },
    "rocon_icons": {
        "description": "Icons for rocon.",
        "url": "https://github.com/robotics-in-concert/rocon_tools",
        "dependencies": []
    },
    "rocon_interaction_msgs": {
        "description": "Messages used by rocon interactions.",
        "url": "https://github.com/robotics-in-concert/rocon_msgs",
        "dependencies": ["message_runtime", "rocon_std_msgs", "uuid_msgs"]
    },
    "rocon_ebnf": {
        "description": "Internal packaging of the 0.91 version of the simple python <a href=\"http://en.wikipedia.org/wiki/Extended_Backus%E2%80%93Naur_Form\">EBNF</a> parser written by LParis.",
        "url": "https://github.com/robotics-in-concert/rocon_tools",
        "dependencies": []
    },
    "libopencv-dev": {
        "linux": true,
        "description": "This is a meta package providing development package necessary for development of OpenCV (Open Computer Vision).",
        "url": "",
        "dependencies": []
    },
    "python-opencv": {
        "library": true,
        "description": "OpenCV is released under a BSD license and hence it’s free for both academic and commercial use. It has C++, C, Python and Java interfaces and supports Windows, Linux, Mac OS, iOS and Android. OpenCV was designed for computational efficiency and with a strong focus on real-time applications.",
        "url": "http://opencv.org/",
        "dependencies": []
    },
    "pkg-config": {
        "linux": true,
        "description": "The pkg-config program is used to retrieve information about installed libraries in the system.",
        "url": "",
        "dependencies": []
    }
}
