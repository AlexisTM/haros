[{"comment": "sensor_manager.h:0:  No copyright message found.  You should have a line: \"Copyright [year] <Copyright Owner>\"  [legal/copyright] [5]", "resources": [], "location": {"function": null, "line": 0, "class": null, "file": "include/fictibot_drivers/sensor_manager.h", "package": "fictibot_drivers"}, "rule": "cpplint_plugin:no_copyright"}, {"comment": "sensor_manager.h:1:  #ifndef header guard has wrong style, please use: _TMP_TMPQUHPDY_CPPLINT_PLUGIN_SENSOR_MANAGER_H_  [build/header_guard] [5]", "resources": [], "location": {"function": null, "line": 1, "class": null, "file": "include/fictibot_drivers/sensor_manager.h", "package": "fictibot_drivers"}, "rule": "cpplint_plugin:header_guard_format"}, {"comment": "sensor_manager.h:1:  #ifndef header guard has wrong style, please use: SENSOR_MANAGER_H  [build/header_guard] [5]", "resources": [], "location": {"function": null, "line": 1, "class": null, "file": "include/fictibot_drivers/sensor_manager.h", "package": "fictibot_drivers"}, "rule": "cpplint_plugin:header_guard_format"}, {"comment": "sensor_manager.h:27:  #endif line should be \"#endif  // _TMP_TMPQUHPDY_CPPLINT_PLUGIN_SENSOR_MANAGER_H_\"  [build/header_guard] [5]", "resources": [], "location": {"function": null, "line": 27, "class": null, "file": "include/fictibot_drivers/sensor_manager.h", "package": "fictibot_drivers"}, "rule": "cpplint_plugin:header_guard_close"}, {"comment": "sensor_manager.h:7:  { should almost always be at the end of the previous line  [whitespace/braces] [4]", "resources": [], "location": {"function": null, "line": 7, "class": null, "file": "include/fictibot_drivers/sensor_manager.h", "package": "fictibot_drivers"}, "rule": "cpplint_plugin:opening_curly_brace"}, {"comment": "sensor_manager.h:8:  public: should be indented +1 space inside class SensorManager  [whitespace/indent] [3]", "resources": [], "location": {"function": null, "line": 8, "class": null, "file": "include/fictibot_drivers/sensor_manager.h", "package": "fictibot_drivers"}, "rule": "cpplint_plugin:indent_access_mod"}, {"comment": "sensor_manager.h:9:  Is this a non-const reference? If so, make const or use a pointer: ros::NodeHandle& n  [runtime/references] [2]", "resources": [], "location": {"function": null, "line": 9, "class": null, "file": "include/fictibot_drivers/sensor_manager.h", "package": "fictibot_drivers"}, "rule": "cpplint_plugin:non_const_ref"}, {"comment": "sensor_manager.h:11:  You don't need a ; after a }  [readability/braces] [4]", "resources": [], "location": {"function": null, "line": 11, "class": null, "file": "include/fictibot_drivers/sensor_manager.h", "package": "fictibot_drivers"}, "rule": "cpplint_plugin:redundant_empty_statement"}, {"comment": "sensor_manager.h:16:  private: should be indented +1 space inside class SensorManager  [whitespace/indent] [3]", "resources": [], "location": {"function": null, "line": 16, "class": null, "file": "include/fictibot_drivers/sensor_manager.h", "package": "fictibot_drivers"}, "rule": "cpplint_plugin:indent_access_mod"}, {"comment": "motor_manager.h:0:  No copyright message found.  You should have a line: \"Copyright [year] <Copyright Owner>\"  [legal/copyright] [5]", "resources": [], "location": {"function": null, "line": 0, "class": null, "file": "include/fictibot_drivers/motor_manager.h", "package": "fictibot_drivers"}, "rule": "cpplint_plugin:no_copyright"}, {"comment": "motor_manager.h:1:  #ifndef header guard has wrong style, please use: _TMP_TMPQUHPDY_CPPLINT_PLUGIN_MOTOR_MANAGER_H_  [build/header_guard] [5]", "resources": [], "location": {"function": null, "line": 1, "class": null, "file": "include/fictibot_drivers/motor_manager.h", "package": "fictibot_drivers"}, "rule": "cpplint_plugin:header_guard_format"}, {"comment": "motor_manager.h:1:  #ifndef header guard has wrong style, please use: MOTOR_MANAGER_H  [build/header_guard] [5]", "resources": [], "location": {"function": null, "line": 1, "class": null, "file": "include/fictibot_drivers/motor_manager.h", "package": "fictibot_drivers"}, "rule": "cpplint_plugin:header_guard_format"}, {"comment": "motor_manager.h:35:  #endif line should be \"#endif  // _TMP_TMPQUHPDY_CPPLINT_PLUGIN_MOTOR_MANAGER_H_\"  [build/header_guard] [5]", "resources": [], "location": {"function": null, "line": 35, "class": null, "file": "include/fictibot_drivers/motor_manager.h", "package": "fictibot_drivers"}, "rule": "cpplint_plugin:header_guard_close"}, {"comment": "motor_manager.h:9:  { should almost always be at the end of the previous line  [whitespace/braces] [4]", "resources": [], "location": {"function": null, "line": 9, "class": null, "file": "include/fictibot_drivers/motor_manager.h", "package": "fictibot_drivers"}, "rule": "cpplint_plugin:opening_curly_brace"}, {"comment": "motor_manager.h:10:  public: should be indented +1 space inside class MotorManager  [whitespace/indent] [3]", "resources": [], "location": {"function": null, "line": 10, "class": null, "file": "include/fictibot_drivers/motor_manager.h", "package": "fictibot_drivers"}, "rule": "cpplint_plugin:indent_access_mod"}, {"comment": "motor_manager.h:11:  Is this a non-const reference? If so, make const or use a pointer: ros::NodeHandle& n  [runtime/references] [2]", "resources": [], "location": {"function": null, "line": 11, "class": null, "file": "include/fictibot_drivers/motor_manager.h", "package": "fictibot_drivers"}, "rule": "cpplint_plugin:non_const_ref"}, {"comment": "motor_manager.h:13:  You don't need a ; after a }  [readability/braces] [4]", "resources": [], "location": {"function": null, "line": 13, "class": null, "file": "include/fictibot_drivers/motor_manager.h", "package": "fictibot_drivers"}, "rule": "cpplint_plugin:redundant_empty_statement"}, {"comment": "motor_manager.h:18:  private: should be indented +1 space inside class MotorManager  [whitespace/indent] [3]", "resources": [], "location": {"function": null, "line": 18, "class": null, "file": "include/fictibot_drivers/motor_manager.h", "package": "fictibot_drivers"}, "rule": "cpplint_plugin:indent_access_mod"}, {"comment": "driver_node.cpp:0:  No copyright message found.  You should have a line: \"Copyright [year] <Copyright Owner>\"  [legal/copyright] [5]", "resources": [], "location": {"function": null, "line": 0, "class": null, "file": "src/driver_node.cpp", "package": "fictibot_drivers"}, "rule": "cpplint_plugin:no_copyright"}, {"comment": "driver_node.cpp:4:  Include \"fictibot_drivers/motor_manager.h\" not in alphabetical order  [build/include_alpha] [4]", "resources": [], "location": {"function": null, "line": 4, "class": null, "file": "src/driver_node.cpp", "package": "fictibot_drivers"}, "rule": "cpplint_plugin:include_order"}, {"comment": "driver_node.cpp:7:  { should almost always be at the end of the previous line  [whitespace/braces] [4]", "resources": [], "location": {"function": null, "line": 7, "class": null, "file": "src/driver_node.cpp", "package": "fictibot_drivers"}, "rule": "cpplint_plugin:opening_curly_brace"}, {"comment": "driver_node.cpp:17:  { should almost always be at the end of the previous line  [whitespace/braces] [4]", "resources": [], "location": {"function": null, "line": 17, "class": null, "file": "src/driver_node.cpp", "package": "fictibot_drivers"}, "rule": "cpplint_plugin:opening_curly_brace"}, {"comment": "Found implementation defined integer type.", "resources": [], "location": {"function": null, "line": 6, "class": null, "file": "src/driver_node.cpp", "package": "fictibot_drivers"}, "rule": "cppcheck_plugin:harosIntegerTypes"}, {"comment": "motor_manager.cpp:0:  No copyright message found.  You should have a line: \"Copyright [year] <Copyright Owner>\"  [legal/copyright] [5]", "resources": [], "location": {"function": null, "line": 0, "class": null, "file": "src/motor_manager.cpp", "package": "fictibot_drivers"}, "rule": "cpplint_plugin:no_copyright"}, {"comment": "motor_manager.cpp:4:  Include 'cmath' instead of 'math.h'.  [build/include] [5]", "resources": [], "location": {"function": null, "line": 4, "class": null, "file": "src/motor_manager.cpp", "package": "fictibot_drivers"}, "rule": "cpplint_plugin:c_headers"}, {"comment": "motor_manager.cpp:12:  { should almost always be at the end of the previous line  [whitespace/braces] [4]", "resources": [], "location": {"function": null, "line": 12, "class": null, "file": "src/motor_manager.cpp", "package": "fictibot_drivers"}, "rule": "cpplint_plugin:opening_curly_brace"}, {"comment": "motor_manager.cpp:25:  { should almost always be at the end of the previous line  [whitespace/braces] [4]", "resources": [], "location": {"function": null, "line": 25, "class": null, "file": "src/motor_manager.cpp", "package": "fictibot_drivers"}, "rule": "cpplint_plugin:opening_curly_brace"}, {"comment": "motor_manager.cpp:32:  { should almost always be at the end of the previous line  [whitespace/braces] [4]", "resources": [], "location": {"function": null, "line": 32, "class": null, "file": "src/motor_manager.cpp", "package": "fictibot_drivers"}, "rule": "cpplint_plugin:opening_curly_brace"}, {"comment": "motor_manager.cpp:38:  { should almost always be at the end of the previous line  [whitespace/braces] [4]", "resources": [], "location": {"function": null, "line": 38, "class": null, "file": "src/motor_manager.cpp", "package": "fictibot_drivers"}, "rule": "cpplint_plugin:opening_curly_brace"}, {"comment": "motor_manager.cpp:40:  { should almost always be at the end of the previous line  [whitespace/braces] [4]", "resources": [], "location": {"function": null, "line": 40, "class": null, "file": "src/motor_manager.cpp", "package": "fictibot_drivers"}, "rule": "cpplint_plugin:opening_curly_brace"}, {"comment": "motor_manager.cpp:47:  { should almost always be at the end of the previous line  [whitespace/braces] [4]", "resources": [], "location": {"function": null, "line": 47, "class": null, "file": "src/motor_manager.cpp", "package": "fictibot_drivers"}, "rule": "cpplint_plugin:opening_curly_brace"}, {"comment": "motor_manager.cpp:53:  { should almost always be at the end of the previous line  [whitespace/braces] [4]", "resources": [], "location": {"function": null, "line": 53, "class": null, "file": "src/motor_manager.cpp", "package": "fictibot_drivers"}, "rule": "cpplint_plugin:opening_curly_brace"}, {"comment": "motor_manager.cpp:57:  { should almost always be at the end of the previous line  [whitespace/braces] [4]", "resources": [], "location": {"function": null, "line": 57, "class": null, "file": "src/motor_manager.cpp", "package": "fictibot_drivers"}, "rule": "cpplint_plugin:opening_curly_brace"}, {"comment": "motor_manager.cpp:60:  { should almost always be at the end of the previous line  [whitespace/braces] [4]", "resources": [], "location": {"function": null, "line": 60, "class": null, "file": "src/motor_manager.cpp", "package": "fictibot_drivers"}, "rule": "cpplint_plugin:opening_curly_brace"}, {"comment": "motor_manager.cpp:67:  { should almost always be at the end of the previous line  [whitespace/braces] [4]", "resources": [], "location": {"function": null, "line": 67, "class": null, "file": "src/motor_manager.cpp", "package": "fictibot_drivers"}, "rule": "cpplint_plugin:opening_curly_brace"}, {"comment": "motor_manager.cpp:70:  { should almost always be at the end of the previous line  [whitespace/braces] [4]", "resources": [], "location": {"function": null, "line": 70, "class": null, "file": "src/motor_manager.cpp", "package": "fictibot_drivers"}, "rule": "cpplint_plugin:opening_curly_brace"}, {"comment": "motor_manager.cpp:75:  { should almost always be at the end of the previous line  [whitespace/braces] [4]", "resources": [], "location": {"function": null, "line": 75, "class": null, "file": "src/motor_manager.cpp", "package": "fictibot_drivers"}, "rule": "cpplint_plugin:opening_curly_brace"}, {"comment": "motor_manager.cpp:77:  { should almost always be at the end of the previous line  [whitespace/braces] [4]", "resources": [], "location": {"function": null, "line": 77, "class": null, "file": "src/motor_manager.cpp", "package": "fictibot_drivers"}, "rule": "cpplint_plugin:opening_curly_brace"}, {"comment": "motor_manager.cpp:80:  { should almost always be at the end of the previous line  [whitespace/braces] [4]", "resources": [], "location": {"function": null, "line": 80, "class": null, "file": "src/motor_manager.cpp", "package": "fictibot_drivers"}, "rule": "cpplint_plugin:opening_curly_brace"}, {"comment": "motor_manager.cpp:84:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]", "resources": [], "location": {"function": null, "line": 84, "class": null, "file": "src/motor_manager.cpp", "package": "fictibot_drivers"}, "rule": "cpplint_plugin:else_line"}, {"comment": "motor_manager.cpp:85:  { should almost always be at the end of the previous line  [whitespace/braces] [4]", "resources": [], "location": {"function": null, "line": 85, "class": null, "file": "src/motor_manager.cpp", "package": "fictibot_drivers"}, "rule": "cpplint_plugin:opening_curly_brace"}, {"comment": "motor_manager.cpp:88:  { should almost always be at the end of the previous line  [whitespace/braces] [4]", "resources": [], "location": {"function": null, "line": 88, "class": null, "file": "src/motor_manager.cpp", "package": "fictibot_drivers"}, "rule": "cpplint_plugin:opening_curly_brace"}, {"comment": "motor_manager.cpp:94:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]", "resources": [], "location": {"function": null, "line": 94, "class": null, "file": "src/motor_manager.cpp", "package": "fictibot_drivers"}, "rule": "cpplint_plugin:else_line"}, {"comment": "motor_manager.cpp:95:  { should almost always be at the end of the previous line  [whitespace/braces] [4]", "resources": [], "location": {"function": null, "line": 95, "class": null, "file": "src/motor_manager.cpp", "package": "fictibot_drivers"}, "rule": "cpplint_plugin:opening_curly_brace"}, {"comment": "motor_manager.cpp:97:  { should almost always be at the end of the previous line  [whitespace/braces] [4]", "resources": [], "location": {"function": null, "line": 97, "class": null, "file": "src/motor_manager.cpp", "package": "fictibot_drivers"}, "rule": "cpplint_plugin:opening_curly_brace"}, {"comment": "motor_manager.cpp:100:  { should almost always be at the end of the previous line  [whitespace/braces] [4]", "resources": [], "location": {"function": null, "line": 100, "class": null, "file": "src/motor_manager.cpp", "package": "fictibot_drivers"}, "rule": "cpplint_plugin:opening_curly_brace"}, {"comment": "motor_manager.cpp:104:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]", "resources": [], "location": {"function": null, "line": 104, "class": null, "file": "src/motor_manager.cpp", "package": "fictibot_drivers"}, "rule": "cpplint_plugin:else_line"}, {"comment": "motor_manager.cpp:105:  { should almost always be at the end of the previous line  [whitespace/braces] [4]", "resources": [], "location": {"function": null, "line": 105, "class": null, "file": "src/motor_manager.cpp", "package": "fictibot_drivers"}, "rule": "cpplint_plugin:opening_curly_brace"}, {"comment": "motor_manager.cpp:108:  { should almost always be at the end of the previous line  [whitespace/braces] [4]", "resources": [], "location": {"function": null, "line": 108, "class": null, "file": "src/motor_manager.cpp", "package": "fictibot_drivers"}, "rule": "cpplint_plugin:opening_curly_brace"}, {"comment": "motor_manager.cpp:114:  { should almost always be at the end of the previous line  [whitespace/braces] [4]", "resources": [], "location": {"function": null, "line": 114, "class": null, "file": "src/motor_manager.cpp", "package": "fictibot_drivers"}, "rule": "cpplint_plugin:opening_curly_brace"}, {"comment": "motor_manager.cpp:117:  { should almost always be at the end of the previous line  [whitespace/braces] [4]", "resources": [], "location": {"function": null, "line": 117, "class": null, "file": "src/motor_manager.cpp", "package": "fictibot_drivers"}, "rule": "cpplint_plugin:opening_curly_brace"}, {"comment": "motor_manager.cpp:121:  Small and focused functions are preferred: MotorManager::apply_commands() has 66 non-comment lines (error triggered by exceeding 40 lines).  [readability/fn_size] [5]", "resources": [], "location": {"function": "MotorManager::apply_commands()", "line": 121, "class": null, "file": "src/motor_manager.cpp", "package": "fictibot_drivers"}, "rule": "max_function_length_40"}, {"comment": "motor_manager.cpp:121:  Small and focused functions are preferred: MotorManager::apply_commands() has 66 non-comment lines (error triggered by exceeding 50 lines).  [readability/fn_size] [5]", "resources": [], "location": {"function": "MotorManager::apply_commands()", "line": 121, "class": null, "file": "src/motor_manager.cpp", "package": "fictibot_drivers"}, "rule": "max_eloc_50"}, {"comment": "function with cyclomatic complexity 15", "resources": [], "location": {"function": "MotorManager::apply_commands", "line": 52, "class": null, "file": "src/motor_manager.cpp", "package": "fictibot_drivers"}, "rule": "max_cyclomatic_complexity_10"}, {"comment": "Function length of 68", "resources": [], "location": {"function": "MotorManager::apply_commands", "line": 52, "class": null, "file": "src/motor_manager.cpp", "package": "fictibot_drivers"}, "rule": "max_function_length_40"}, {"comment": "MI of 33.1337648102", "resources": [], "location": {"function": null, "line": null, "class": null, "file": "src/motor_manager.cpp", "package": "fictibot_drivers"}, "rule": "mi_below_65"}, {"comment": "sensor_manager.cpp:0:  No copyright message found.  You should have a line: \"Copyright [year] <Copyright Owner>\"  [legal/copyright] [5]", "resources": [], "location": {"function": null, "line": 0, "class": null, "file": "src/sensor_manager.cpp", "package": "fictibot_drivers"}, "rule": "cpplint_plugin:no_copyright"}, {"comment": "sensor_manager.cpp:3:  Found C system header after C++ system header. Should be: sensor_manager.h, c system, c++ system, other.  [build/include_order] [4]", "resources": [], "location": {"function": null, "line": 3, "class": null, "file": "src/sensor_manager.cpp", "package": "fictibot_drivers"}, "rule": "cpplint_plugin:include_order"}, {"comment": "sensor_manager.cpp:7:  { should almost always be at the end of the previous line  [whitespace/braces] [4]", "resources": [], "location": {"function": null, "line": 7, "class": null, "file": "src/sensor_manager.cpp", "package": "fictibot_drivers"}, "rule": "cpplint_plugin:opening_curly_brace"}, {"comment": "sensor_manager.cpp:17:  { should almost always be at the end of the previous line  [whitespace/braces] [4]", "resources": [], "location": {"function": null, "line": 17, "class": null, "file": "src/sensor_manager.cpp", "package": "fictibot_drivers"}, "rule": "cpplint_plugin:opening_curly_brace"}, {"comment": "sensor_manager.cpp:33:  { should almost always be at the end of the previous line  [whitespace/braces] [4]", "resources": [], "location": {"function": null, "line": 33, "class": null, "file": "src/sensor_manager.cpp", "package": "fictibot_drivers"}, "rule": "cpplint_plugin:opening_curly_brace"}, {"comment": "sensor_manager.cpp:39:  { should almost always be at the end of the previous line  [whitespace/braces] [4]", "resources": [], "location": {"function": null, "line": 39, "class": null, "file": "src/sensor_manager.cpp", "package": "fictibot_drivers"}, "rule": "cpplint_plugin:opening_curly_brace"}, {"comment": "sensor_manager.cpp:44:  { should almost always be at the end of the previous line  [whitespace/braces] [4]", "resources": [], "location": {"function": null, "line": 44, "class": null, "file": "src/sensor_manager.cpp", "package": "fictibot_drivers"}, "rule": "cpplint_plugin:opening_curly_brace"}]