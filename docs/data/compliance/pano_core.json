[
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "Camera.h",
    "line": null,
    "function": null,
    "comment": "Camera.h:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_.",
    "file": "Camera.h",
    "line": 8,
    "function": null,
    "comment": "Camera.h:8:  #ifndef header guard has wrong style, please use: _HOME_ANDRE_ROS_HAROS_ANALYSER_CAMERA_H_  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the symbol name should be <PACKAGE>_<PATH>_<FILE>_H.",
    "file": "Camera.h",
    "line": 8,
    "function": null,
    "comment": "Camera.h:8:  #ifndef header guard has wrong style, please use: CAMERA_H  [build/header_guard] [5]",
    "tags": ["ros","code-standards","ros-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the guard's end should be '#endif  // <PROJECT>_<PATH>_<FILE>_H_' or '#endif  /* <PROJECT>_<PATH>_<FILE>_H_ */'.",
    "file": "Camera.h",
    "line": 100,
    "function": null,
    "comment": "Camera.h:100:  #endif line should be '#endif  // _HOME_ANDRE_ROS_HAROS_ANALYSER_CAMERA_H_'  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Camera.h",
    "line": 15,
    "function": null,
    "comment": "Camera.h:15:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Camera.h",
    "line": 18,
    "function": null,
    "comment": "Camera.h:18:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Camera.h",
    "line": 19,
    "function": null,
    "comment": "Camera.h:19:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "Camera.h",
    "line": 20,
    "function": null,
    "comment": "Camera.h:20:  public: should be indented +1 space inside class Camera  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Camera.h",
    "line": 27,
    "function": null,
    "comment": "Camera.h:27:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "Camera.h",
    "line": 31,
    "function": null,
    "comment": "Camera.h:31:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& uimage  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Camera.h",
    "line": 33,
    "function": null,
    "comment": "Camera.h:33:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "Camera.h",
    "line": 33,
    "function": null,
    "comment": "Camera.h:33:  Is this a non-const reference? If so, make const or use a pointer: std::vector<cv::Point3f>& rays  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Camera.h",
    "line": 34,
    "function": null,
    "comment": "Camera.h:34:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "Camera.h",
    "line": 34,
    "function": null,
    "comment": "Camera.h:34:  Is this a non-const reference? If so, make const or use a pointer: std::vector<cv::Point2f>& pts  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Camera.h",
    "line": 37,
    "function": null,
    "comment": "Camera.h:37:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Camera.h",
    "line": 41,
    "function": null,
    "comment": "Camera.h:41:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Camera.h",
    "line": 45,
    "function": null,
    "comment": "Camera.h:45:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Camera.h",
    "line": 49,
    "function": null,
    "comment": "Camera.h:49:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Camera.h",
    "line": 53,
    "function": null,
    "comment": "Camera.h:53:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Camera.h",
    "line": 57,
    "function": null,
    "comment": "Camera.h:57:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Camera.h",
    "line": 61,
    "function": null,
    "comment": "Camera.h:61:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Camera.h",
    "line": 70,
    "function": null,
    "comment": "Camera.h:70:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "Camera.h",
    "line": 75,
    "function": null,
    "comment": "Camera.h:75:  Is this a non-const reference? If so, make const or use a pointer: cv::FileStorage& fs  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "Camera.h",
    "line": 78,
    "function": null,
    "comment": "Camera.h:78:  Is this a non-const reference? If so, make const or use a pointer: float & fovx  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "Camera.h",
    "line": 78,
    "function": null,
    "comment": "Camera.h:78:  Is this a non-const reference? If so, make const or use a pointer: float & fovy  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "Camera.h",
    "line": 80,
    "function": null,
    "comment": "Camera.h:80:  private: should be indented +1 space inside class Camera  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "Camera.h",
    "line": 82,
    "function": null,
    "comment": "Camera.h:82:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "Camera.h",
    "line": 82,
    "function": null,
    "comment": "Camera.h:82:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "Camera.h",
    "line": 83,
    "function": null,
    "comment": "Camera.h:83:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "Camera.h",
    "line": 85,
    "function": null,
    "comment": "Camera.h:85:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "Camera.h",
    "line": 87,
    "function": null,
    "comment": "Camera.h:87:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "Camera.h",
    "line": 89,
    "function": null,
    "comment": "Camera.h:89:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "Camera.h",
    "line": 90,
    "function": null,
    "comment": "Camera.h:90:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Camera.h",
    "line": 95,
    "function": null,
    "comment": "Camera.h:95:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "Camera.h",
    "line": 98,
    "function": null,
    "comment": "Camera.h:98:  Namespace should be terminated with '// namespace pano'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "Camera.h",
    "line": 74,
    "function": null,
    "comment": "Camera.h:74:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "Camera.h",
    "line": 34,
    "function": null,
    "comment": "Camera.h:34:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "MoleculeProcessor.h",
    "line": null,
    "function": null,
    "comment": "MoleculeProcessor.h:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_.",
    "file": "MoleculeProcessor.h",
    "line": 8,
    "function": null,
    "comment": "MoleculeProcessor.h:8:  #ifndef header guard has wrong style, please use: _HOME_ANDRE_ROS_HAROS_ANALYSER_MOLECULEPROCESSOR_H_  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the symbol name should be <PACKAGE>_<PATH>_<FILE>_H.",
    "file": "MoleculeProcessor.h",
    "line": 8,
    "function": null,
    "comment": "MoleculeProcessor.h:8:  #ifndef header guard has wrong style, please use: MOLECULEPROCESSOR_H  [build/header_guard] [5]",
    "tags": ["ros","code-standards","ros-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the guard's end should be '#endif  // <PROJECT>_<PATH>_<FILE>_H_' or '#endif  /* <PROJECT>_<PATH>_<FILE>_H_ */'.",
    "file": "MoleculeProcessor.h",
    "line": 246,
    "function": null,
    "comment": "MoleculeProcessor.h:246:  #endif line should be '#endif  // _HOME_ANDRE_ROS_HAROS_ANALYSER_MOLECULEPROCESSOR_H_'  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "MoleculeProcessor.h",
    "line": 14,
    "function": null,
    "comment": "MoleculeProcessor.h:14:  Found C++ system header after other header. Should be: MoleculeProcessor.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "MoleculeProcessor.h",
    "line": 15,
    "function": null,
    "comment": "MoleculeProcessor.h:15:  Found C++ system header after other header. Should be: MoleculeProcessor.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "MoleculeProcessor.h",
    "line": 16,
    "function": null,
    "comment": "MoleculeProcessor.h:16:  Found C++ system header after other header. Should be: MoleculeProcessor.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.h",
    "line": 19,
    "function": null,
    "comment": "MoleculeProcessor.h:19:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.h",
    "line": 25,
    "function": null,
    "comment": "MoleculeProcessor.h:25:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "MoleculeProcessor.h",
    "line": 26,
    "function": null,
    "comment": "MoleculeProcessor.h:26:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "MoleculeProcessor.h",
    "line": 27,
    "function": null,
    "comment": "MoleculeProcessor.h:27:  private: should be indented +1 space inside class MoleculeProcessor  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "MoleculeProcessor.h",
    "line": 29,
    "function": null,
    "comment": "MoleculeProcessor.h:29:  public: should be indented +1 space inside class MoleculeProcessor  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "MoleculeProcessor.h",
    "line": 42,
    "function": null,
    "comment": "MoleculeProcessor.h:42:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "MoleculeProcessor.h",
    "line": 42,
    "function": null,
    "comment": "MoleculeProcessor.h:42:  Is this a non-const reference? If so, make const or use a pointer: ModelFitter& modelfitter  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "MoleculeProcessor.h",
    "line": 43,
    "function": null,
    "comment": "MoleculeProcessor.h:43:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "MoleculeProcessor.h",
    "line": 43,
    "function": null,
    "comment": "MoleculeProcessor.h:43:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "MoleculeProcessor.h",
    "line": 43,
    "function": null,
    "comment": "MoleculeProcessor.h:43:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "MoleculeProcessor.h",
    "line": 44,
    "function": null,
    "comment": "MoleculeProcessor.h:44:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "MoleculeProcessor.h",
    "line": 53,
    "function": null,
    "comment": "MoleculeProcessor.h:53:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "MoleculeProcessor.h",
    "line": 54,
    "function": null,
    "comment": "MoleculeProcessor.h:54:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "MoleculeProcessor.h",
    "line": 60,
    "function": null,
    "comment": "MoleculeProcessor.h:60:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "MoleculeProcessor.h",
    "line": 61,
    "function": null,
    "comment": "MoleculeProcessor.h:61:  Is this a non-const reference? If so, make const or use a pointer: std::map<cv::Ptr<ImageAtom>, size_t>& num_steps_map  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "MoleculeProcessor.h",
    "line": 62,
    "function": null,
    "comment": "MoleculeProcessor.h:62:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "MoleculeProcessor.h",
    "line": 63,
    "function": null,
    "comment": "MoleculeProcessor.h:63:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "MoleculeProcessor.h",
    "line": 63,
    "function": null,
    "comment": "MoleculeProcessor.h:63:  Is this a non-const reference? If so, make const or use a pointer: std::map<cv::Ptr<ImageAtom>, bool>& node_lock  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "MoleculeProcessor.h",
    "line": 70,
    "function": null,
    "comment": "MoleculeProcessor.h:70:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "MoleculeProcessor.h",
    "line": 72,
    "function": null,
    "comment": "MoleculeProcessor.h:72:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "MoleculeProcessor.h",
    "line": 72,
    "function": null,
    "comment": "MoleculeProcessor.h:72:  Is this a non-const reference? If so, make const or use a pointer: std::map<cv::Ptr<ImageAtom>, AtomPair>& atom_to_pair_map  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "MoleculeProcessor.h",
    "line": 73,
    "function": null,
    "comment": "MoleculeProcessor.h:73:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "MoleculeProcessor.h",
    "line": 73,
    "function": null,
    "comment": "MoleculeProcessor.h:73:  Is this a non-const reference? If so, make const or use a pointer: std::list<cv::Ptr<ImageAtom> >& atomchain  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "MoleculeProcessor.h",
    "line": 73,
    "function": null,
    "comment": "MoleculeProcessor.h:73:  Is this a non-const reference? If so, make const or use a pointer: std::list<AtomPair>& cyclePairs  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.h",
    "line": 76,
    "function": null,
    "comment": "MoleculeProcessor.h:76:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "MoleculeProcessor.h",
    "line": 83,
    "function": null,
    "comment": "MoleculeProcessor.h:83:  Is this a non-const reference? If so, make const or use a pointer: ImageMolecule& mol  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.h",
    "line": 94,
    "function": null,
    "comment": "MoleculeProcessor.h:94:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.h",
    "line": 100,
    "function": null,
    "comment": "MoleculeProcessor.h:100:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "MoleculeProcessor.h",
    "line": 103,
    "function": null,
    "comment": "MoleculeProcessor.h:103:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.h",
    "line": 111,
    "function": null,
    "comment": "MoleculeProcessor.h:111:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "MoleculeProcessor.h",
    "line": 112,
    "function": null,
    "comment": "MoleculeProcessor.h:112:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "MoleculeProcessor.h",
    "line": 113,
    "function": null,
    "comment": "MoleculeProcessor.h:113:  public: should be indented +1 space inside class MoleculeGlob  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "MoleculeProcessor.h",
    "line": 120,
    "function": null,
    "comment": "MoleculeProcessor.h:120:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "MoleculeProcessor.h",
    "line": 124,
    "function": null,
    "comment": "MoleculeProcessor.h:124:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "MoleculeProcessor.h",
    "line": 125,
    "function": null,
    "comment": "MoleculeProcessor.h:125:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "MoleculeProcessor.h",
    "line": 125,
    "function": null,
    "comment": "MoleculeProcessor.h:125:  Is this a non-const reference? If so, make const or use a pointer: std::list<AtomPair>& pairs  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "MoleculeProcessor.h",
    "line": 133,
    "function": null,
    "comment": "MoleculeProcessor.h:133:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.h",
    "line": 147,
    "function": null,
    "comment": "MoleculeProcessor.h:147:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "MoleculeProcessor.h",
    "line": 168,
    "function": null,
    "comment": "MoleculeProcessor.h:168:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "MoleculeProcessor.h",
    "line": 172,
    "function": null,
    "comment": "MoleculeProcessor.h:172:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "MoleculeProcessor.h",
    "line": 176,
    "function": null,
    "comment": "MoleculeProcessor.h:176:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "MoleculeProcessor.h",
    "line": 176,
    "function": null,
    "comment": "MoleculeProcessor.h:176:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.h",
    "line": 181,
    "function": null,
    "comment": "MoleculeProcessor.h:181:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.h",
    "line": 186,
    "function": null,
    "comment": "MoleculeProcessor.h:186:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.h",
    "line": 193,
    "function": null,
    "comment": "MoleculeProcessor.h:193:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.h",
    "line": 200,
    "function": null,
    "comment": "MoleculeProcessor.h:200:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.h",
    "line": 212,
    "function": null,
    "comment": "MoleculeProcessor.h:212:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "MoleculeProcessor.h",
    "line": 216,
    "function": null,
    "comment": "MoleculeProcessor.h:216:  Is this a non-const reference? If so, make const or use a pointer: cv::FileStorage& fs  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "MoleculeProcessor.h",
    "line": 219,
    "function": null,
    "comment": "MoleculeProcessor.h:219:  private: should be indented +1 space inside class MoleculeGlob  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "MoleculeProcessor.h",
    "line": 220,
    "function": null,
    "comment": "MoleculeProcessor.h:220:  Is this a non-const reference? If so, make const or use a pointer: std::vector<cv::Mat>& masks  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "MoleculeProcessor.h",
    "line": 230,
    "function": null,
    "comment": "MoleculeProcessor.h:230:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "MoleculeProcessor.h",
    "line": 233,
    "function": null,
    "comment": "MoleculeProcessor.h:233:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.h",
    "line": 237,
    "function": null,
    "comment": "MoleculeProcessor.h:237:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "MoleculeProcessor.h",
    "line": 238,
    "function": null,
    "comment": "MoleculeProcessor.h:238:  Is this a non-const reference? If so, make const or use a pointer: cv::Ptr<ImageMolecule>& mol  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.h",
    "line": 239,
    "function": null,
    "comment": "MoleculeProcessor.h:239:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "MoleculeProcessor.h",
    "line": 244,
    "function": null,
    "comment": "MoleculeProcessor.h:244:  Namespace should be terminated with '// namespace pano'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "MoleculeProcessor.h",
    "line": 246,
    "function": null,
    "comment": "MoleculeProcessor.h:246:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "MoleculeProcessor.h",
    "line": 197,
    "function": null,
    "comment": "MoleculeProcessor.h:197:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "MoleculeProcessor.h",
    "line": 231,
    "function": null,
    "comment": "MoleculeProcessor.h:231:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "ModelFitter.h",
    "line": null,
    "function": null,
    "comment": "ModelFitter.h:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_.",
    "file": "ModelFitter.h",
    "line": 8,
    "function": null,
    "comment": "ModelFitter.h:8:  #ifndef header guard has wrong style, please use: _HOME_ANDRE_ROS_HAROS_ANALYSER_MODELFITTER_H_  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the symbol name should be <PACKAGE>_<PATH>_<FILE>_H.",
    "file": "ModelFitter.h",
    "line": 8,
    "function": null,
    "comment": "ModelFitter.h:8:  #ifndef header guard has wrong style, please use: MODELFITTER_H  [build/header_guard] [5]",
    "tags": ["ros","code-standards","ros-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the guard's end should be '#endif  // <PROJECT>_<PATH>_<FILE>_H_' or '#endif  /* <PROJECT>_<PATH>_<FILE>_H_ */'.",
    "file": "ModelFitter.h",
    "line": 469,
    "function": null,
    "comment": "ModelFitter.h:469:  #endif line should be '#endif  // _HOME_ANDRE_ROS_HAROS_ANALYSER_MODELFITTER_H_'  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "ModelFitter.h",
    "line": 17,
    "function": null,
    "comment": "ModelFitter.h:17:  Include 'list' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "ModelFitter.h",
    "line": 22,
    "function": null,
    "comment": "ModelFitter.h:22:  Include 'exception' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "ModelFitter.h",
    "line": 24,
    "function": null,
    "comment": "ModelFitter.h:24:  Found C system header after C++ system header. Should be: ModelFitter.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "ModelFitter.h",
    "line": 25,
    "function": null,
    "comment": "ModelFitter.h:25:  Found C system header after C++ system header. Should be: ModelFitter.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "ModelFitter.h",
    "line": 26,
    "function": null,
    "comment": "ModelFitter.h:26:  Found C system header after C++ system header. Should be: ModelFitter.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "ModelFitter.h",
    "line": 28,
    "function": null,
    "comment": "ModelFitter.h:28:  Found C system header after C++ system header. Should be: ModelFitter.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "ModelFitter.h",
    "line": 29,
    "function": null,
    "comment": "ModelFitter.h:29:  Found C system header after C++ system header. Should be: ModelFitter.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "ModelFitter.h",
    "line": 30,
    "function": null,
    "comment": "ModelFitter.h:30:  Found C system header after C++ system header. Should be: ModelFitter.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.h",
    "line": 33,
    "function": null,
    "comment": "ModelFitter.h:33:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.h",
    "line": 39,
    "function": null,
    "comment": "ModelFitter.h:39:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "ModelFitter.h",
    "line": 40,
    "function": null,
    "comment": "ModelFitter.h:40:  public: should be indented +1 space inside class FitterResult  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "ModelFitter.h",
    "line": 41,
    "function": null,
    "comment": "ModelFitter.h:41:  Do not leave a blank line after 'public:'  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ModelFitter.h",
    "line": 43,
    "function": null,
    "comment": "ModelFitter.h:43:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.h",
    "line": 46,
    "function": null,
    "comment": "ModelFitter.h:46:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.h",
    "line": 50,
    "function": null,
    "comment": "ModelFitter.h:50:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.h",
    "line": 55,
    "function": null,
    "comment": "ModelFitter.h:55:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.h",
    "line": 60,
    "function": null,
    "comment": "ModelFitter.h:60:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't use a semicolon to denote an empty statement. Use {} instead.",
    "file": "ModelFitter.h",
    "line": 62,
    "function": null,
    "comment": "ModelFitter.h:62:  Line contains only semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","google-cpp","semicolon","empty-statement","empty-block"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.h",
    "line": 67,
    "function": null,
    "comment": "ModelFitter.h:67:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.h",
    "line": 71,
    "function": null,
    "comment": "ModelFitter.h:71:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.h",
    "line": 75,
    "function": null,
    "comment": "ModelFitter.h:75:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.h",
    "line": 79,
    "function": null,
    "comment": "ModelFitter.h:79:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.h",
    "line": 84,
    "function": null,
    "comment": "ModelFitter.h:84:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "ModelFitter.h",
    "line": 87,
    "function": null,
    "comment": "ModelFitter.h:87:  Is this a non-const reference? If so, make const or use a pointer: cv::FileStorage& fs  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.h",
    "line": 94,
    "function": null,
    "comment": "ModelFitter.h:94:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "ModelFitter.h",
    "line": 95,
    "function": null,
    "comment": "ModelFitter.h:95:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "ModelFitter.h",
    "line": 95,
    "function": null,
    "comment": "ModelFitter.h:95:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "ModelFitter.h",
    "line": 96,
    "function": null,
    "comment": "ModelFitter.h:96:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "ModelFitter.h",
    "line": 96,
    "function": null,
    "comment": "ModelFitter.h:96:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "ModelFitter.h",
    "line": 97,
    "function": null,
    "comment": "ModelFitter.h:97:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "ModelFitter.h",
    "line": 97,
    "function": null,
    "comment": "ModelFitter.h:97:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "ModelFitter.h",
    "line": 105,
    "function": null,
    "comment": "ModelFitter.h:105:  private: should be indented +1 space inside class FitterResult  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "ModelFitter.h",
    "line": 111,
    "function": null,
    "comment": "ModelFitter.h:111:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.h",
    "line": 118,
    "function": null,
    "comment": "ModelFitter.h:118:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ModelFitter.h",
    "line": 121,
    "function": null,
    "comment": "ModelFitter.h:121:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ModelFitter.h",
    "line": 122,
    "function": null,
    "comment": "ModelFitter.h:122:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.h",
    "line": 125,
    "function": null,
    "comment": "ModelFitter.h:125:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.h",
    "line": 129,
    "function": null,
    "comment": "ModelFitter.h:129:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.h",
    "line": 134,
    "function": null,
    "comment": "ModelFitter.h:134:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.h",
    "line": 138,
    "function": null,
    "comment": "ModelFitter.h:138:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.h",
    "line": 143,
    "function": null,
    "comment": "ModelFitter.h:143:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.h",
    "line": 148,
    "function": null,
    "comment": "ModelFitter.h:148:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.h",
    "line": 152,
    "function": null,
    "comment": "ModelFitter.h:152:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ModelFitter.h",
    "line": 158,
    "function": null,
    "comment": "ModelFitter.h:158:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.h",
    "line": 165,
    "function": null,
    "comment": "ModelFitter.h:165:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.h",
    "line": 171,
    "function": null,
    "comment": "ModelFitter.h:171:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.h",
    "line": 176,
    "function": null,
    "comment": "ModelFitter.h:176:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.h",
    "line": 189,
    "function": null,
    "comment": "ModelFitter.h:189:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.h",
    "line": 193,
    "function": null,
    "comment": "ModelFitter.h:193:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.h",
    "line": 197,
    "function": null,
    "comment": "ModelFitter.h:197:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.h",
    "line": 201,
    "function": null,
    "comment": "ModelFitter.h:201:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.h",
    "line": 205,
    "function": null,
    "comment": "ModelFitter.h:205:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.h",
    "line": 210,
    "function": null,
    "comment": "ModelFitter.h:210:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.h",
    "line": 215,
    "function": null,
    "comment": "ModelFitter.h:215:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "ModelFitter.h",
    "line": 219,
    "function": null,
    "comment": "ModelFitter.h:219:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& out  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "ModelFitter.h",
    "line": 220,
    "function": null,
    "comment": "ModelFitter.h:220:  Is this a non-const reference? If so, make const or use a pointer: cv::FileStorage& fs  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "ModelFitter.h",
    "line": 223,
    "function": null,
    "comment": "ModelFitter.h:223:  private: should be indented +1 space inside struct AtomPair  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "ModelFitter.h",
    "line": 224,
    "function": null,
    "comment": "ModelFitter.h:224:  Do not leave a blank line after 'private:'  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.h",
    "line": 233,
    "function": null,
    "comment": "ModelFitter.h:233:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.h",
    "line": 235,
    "function": null,
    "comment": "ModelFitter.h:235:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ModelFitter.h",
    "line": 239,
    "function": null,
    "comment": "ModelFitter.h:239:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.h",
    "line": 243,
    "function": null,
    "comment": "ModelFitter.h:243:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.h",
    "line": 245,
    "function": null,
    "comment": "ModelFitter.h:245:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.h",
    "line": 250,
    "function": null,
    "comment": "ModelFitter.h:250:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.h",
    "line": 252,
    "function": null,
    "comment": "ModelFitter.h:252:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.h",
    "line": 256,
    "function": null,
    "comment": "ModelFitter.h:256:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.h",
    "line": 264,
    "function": null,
    "comment": "ModelFitter.h:264:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "ModelFitter.h",
    "line": 267,
    "function": null,
    "comment": "ModelFitter.h:267:  Is this a non-const reference? If so, make const or use a pointer: std::ostream&out  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "ModelFitter.h",
    "line": 267,
    "function": null,
    "comment": "ModelFitter.h:267:  Single-parameter constructors should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.h",
    "line": 274,
    "function": null,
    "comment": "ModelFitter.h:274:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "ModelFitter.h",
    "line": 275,
    "function": null,
    "comment": "ModelFitter.h:275:  public: should be indented +1 space inside class ModelFitterParams  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.h",
    "line": 277,
    "function": null,
    "comment": "ModelFitter.h:277:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.h",
    "line": 282,
    "function": null,
    "comment": "ModelFitter.h:282:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.h",
    "line": 287,
    "function": null,
    "comment": "ModelFitter.h:287:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.h",
    "line": 293,
    "function": null,
    "comment": "ModelFitter.h:293:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "ModelFitter.h",
    "line": 294,
    "function": null,
    "comment": "ModelFitter.h:294:  public: should be indented +1 space inside class ModelFitter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "ModelFitter.h",
    "line": 295,
    "function": null,
    "comment": "ModelFitter.h:295:  Do not leave a blank line after 'public:'  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.h",
    "line": 297,
    "function": null,
    "comment": "ModelFitter.h:297:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "ModelFitter.h",
    "line": 300,
    "function": null,
    "comment": "ModelFitter.h:300:  Is this a non-const reference? If so, make const or use a pointer: AtomPair& pair  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "ModelFitter.h",
    "line": 302,
    "function": null,
    "comment": "ModelFitter.h:302:  protected: should be indented +1 space inside class ModelFitter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "ModelFitter.h",
    "line": 303,
    "function": null,
    "comment": "ModelFitter.h:303:  Do not leave a blank line after 'protected:'  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "ModelFitter.h",
    "line": 304,
    "function": null,
    "comment": "ModelFitter.h:304:  Is this a non-const reference? If so, make const or use a pointer: AtomPair& pair  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "ModelFitter.h",
    "line": 305,
    "function": null,
    "comment": "ModelFitter.h:305:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Do not indent within a namespace.",
    "file": "ModelFitter.h",
    "line": 309,
    "function": null,
    "comment": "ModelFitter.h:309:  Do not indent within a namespace  [runtime/indentation_namespace] [4]",
    "tags": ["code-standards","formatting","google-cpp","indentation","namespace"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.h",
    "line": 310,
    "function": null,
    "comment": "ModelFitter.h:310:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "ModelFitter.h",
    "line": 311,
    "function": null,
    "comment": "ModelFitter.h:311:  public: should be indented +1 space inside class GenericModelFitter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.h",
    "line": 314,
    "function": null,
    "comment": "ModelFitter.h:314:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "ModelFitter.h",
    "line": 317,
    "function": null,
    "comment": "ModelFitter.h:317:  Single-parameter constructors should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.h",
    "line": 319,
    "function": null,
    "comment": "ModelFitter.h:319:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "ModelFitter.h",
    "line": 322,
    "function": null,
    "comment": "ModelFitter.h:322:  protected: should be indented +1 space inside class GenericModelFitter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "ModelFitter.h",
    "line": 323,
    "function": null,
    "comment": "ModelFitter.h:323:  Is this a non-const reference? If so, make const or use a pointer: AtomPair& pair  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.h",
    "line": 324,
    "function": null,
    "comment": "ModelFitter.h:324:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "ModelFitter.h",
    "line": 327,
    "function": null,
    "comment": "ModelFitter.h:327:  private: should be indented +1 space inside class GenericModelFitter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.h",
    "line": 333,
    "function": null,
    "comment": "ModelFitter.h:333:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Storage class should come before the type.",
    "file": "ModelFitter.h",
    "line": 334,
    "function": null,
    "comment": "ModelFitter.h:334:  Storage class (static, extern, typedef, etc) should be first.  [build/storage_class] [5]",
    "tags": ["code-standards","google-cpp","invalid-code","storage-class"]
  },
  {
    "rule": "Storage class should come before the type.",
    "file": "ModelFitter.h",
    "line": 335,
    "function": null,
    "comment": "ModelFitter.h:335:  Storage class (static, extern, typedef, etc) should be first.  [build/storage_class] [5]",
    "tags": ["code-standards","google-cpp","invalid-code","storage-class"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ModelFitter.h",
    "line": 346,
    "function": null,
    "comment": "ModelFitter.h:346:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "ModelFitter.h",
    "line": 346,
    "function": null,
    "comment": "ModelFitter.h:346:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "ModelFitter.h",
    "line": 346,
    "function": null,
    "comment": "ModelFitter.h:346:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "ModelFitter.h",
    "line": 348,
    "function": null,
    "comment": "ModelFitter.h:348:  Is this a non-const reference? If so, make const or use a pointer: AtomPair &pair  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "ModelFitter.h",
    "line": 353,
    "function": null,
    "comment": "ModelFitter.h:353:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& G  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ModelFitter.h",
    "line": 359,
    "function": null,
    "comment": "ModelFitter.h:359:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ModelFitter.h",
    "line": 361,
    "function": null,
    "comment": "ModelFitter.h:361:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ModelFitter.h",
    "line": 362,
    "function": null,
    "comment": "ModelFitter.h:362:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ModelFitter.h",
    "line": 367,
    "function": null,
    "comment": "ModelFitter.h:367:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ModelFitter.h",
    "line": 368,
    "function": null,
    "comment": "ModelFitter.h:368:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ModelFitter.h",
    "line": 373,
    "function": null,
    "comment": "ModelFitter.h:373:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "ModelFitter.h",
    "line": 373,
    "function": null,
    "comment": "ModelFitter.h:373:  Is this a non-const reference? If so, make const or use a pointer: std::vector<cv::Point2f>& pts1  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "ModelFitter.h",
    "line": 374,
    "function": null,
    "comment": "ModelFitter.h:374:  Is this a non-const reference? If so, make const or use a pointer: std::vector<cv::Point2f>& pts1  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "ModelFitter.h",
    "line": 374,
    "function": null,
    "comment": "ModelFitter.h:374:  Is this a non-const reference? If so, make const or use a pointer: std::vector<cv::Point2f>& pts2  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "ModelFitter.h",
    "line": 378,
    "function": null,
    "comment": "ModelFitter.h:378:  Is this a non-const reference? If so, make const or use a pointer: AtomPair& pair  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ModelFitter.h",
    "line": 380,
    "function": null,
    "comment": "ModelFitter.h:380:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "ModelFitter.h",
    "line": 380,
    "function": null,
    "comment": "ModelFitter.h:380:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& p13d  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.h",
    "line": 381,
    "function": null,
    "comment": "ModelFitter.h:381:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.h",
    "line": 387,
    "function": null,
    "comment": "ModelFitter.h:387:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.h",
    "line": 395,
    "function": null,
    "comment": "ModelFitter.h:395:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.h",
    "line": 400,
    "function": null,
    "comment": "ModelFitter.h:400:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ModelFitter.h",
    "line": 404,
    "function": null,
    "comment": "ModelFitter.h:404:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.h",
    "line": 408,
    "function": null,
    "comment": "ModelFitter.h:408:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.h",
    "line": 417,
    "function": null,
    "comment": "ModelFitter.h:417:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.h",
    "line": 419,
    "function": null,
    "comment": "ModelFitter.h:419:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.h",
    "line": 428,
    "function": null,
    "comment": "ModelFitter.h:428:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.h",
    "line": 430,
    "function": null,
    "comment": "ModelFitter.h:430:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.h",
    "line": 438,
    "function": null,
    "comment": "ModelFitter.h:438:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.h",
    "line": 445,
    "function": null,
    "comment": "ModelFitter.h:445:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "ModelFitter.h",
    "line": 446,
    "function": null,
    "comment": "ModelFitter.h:446:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "ModelFitter.h",
    "line": 446,
    "function": null,
    "comment": "ModelFitter.h:446:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.h",
    "line": 450,
    "function": null,
    "comment": "ModelFitter.h:450:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "ModelFitter.h",
    "line": 453,
    "function": null,
    "comment": "ModelFitter.h:453:  Is this a non-const reference? If so, make const or use a pointer: cv::FileStorage& fs  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.h",
    "line": 463,
    "function": null,
    "comment": "ModelFitter.h:463:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "ModelFitter.h",
    "line": 464,
    "function": null,
    "comment": "ModelFitter.h:464:  Is this a non-const reference? If so, make const or use a pointer: SVDRSolverParams& params  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "ModelFitter.h",
    "line": 464,
    "function": null,
    "comment": "ModelFitter.h:464:  Is this a non-const reference? If so, make const or use a pointer: AtomPair& pair  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "ModelFitter.h",
    "line": 468,
    "function": null,
    "comment": "ModelFitter.h:468:  Namespace should be terminated with '// namespace pano'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "Images.h",
    "line": null,
    "function": null,
    "comment": "Images.h:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_.",
    "file": "Images.h",
    "line": 8,
    "function": null,
    "comment": "Images.h:8:  #ifndef header guard has wrong style, please use: _HOME_ANDRE_ROS_HAROS_ANALYSER_IMAGES_H_  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the symbol name should be <PACKAGE>_<PATH>_<FILE>_H.",
    "file": "Images.h",
    "line": 8,
    "function": null,
    "comment": "Images.h:8:  #ifndef header guard has wrong style, please use: IMAGES_H  [build/header_guard] [5]",
    "tags": ["ros","code-standards","ros-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the guard's end should be '#endif  // <PROJECT>_<PATH>_<FILE>_H_' or '#endif  /* <PROJECT>_<PATH>_<FILE>_H_ */'.",
    "file": "Images.h",
    "line": 148,
    "function": null,
    "comment": "Images.h:148:  #endif line should be '#endif  // _HOME_ANDRE_ROS_HAROS_ANALYSER_IMAGES_H_'  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "Images.h",
    "line": 14,
    "function": null,
    "comment": "Images.h:14:  Found C system header after C++ system header. Should be: Images.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "Images.h",
    "line": 15,
    "function": null,
    "comment": "Images.h:15:  Include 'map' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Images.h",
    "line": 18,
    "function": null,
    "comment": "Images.h:18:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Images.h",
    "line": 20,
    "function": null,
    "comment": "Images.h:20:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Images.h",
    "line": 21,
    "function": null,
    "comment": "Images.h:21:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "Images.h",
    "line": 22,
    "function": null,
    "comment": "Images.h:22:  public: should be indented +1 space inside class Images  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Images.h",
    "line": 25,
    "function": null,
    "comment": "Images.h:25:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Images.h",
    "line": 29,
    "function": null,
    "comment": "Images.h:29:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Images.h",
    "line": 33,
    "function": null,
    "comment": "Images.h:33:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Images.h",
    "line": 35,
    "function": null,
    "comment": "Images.h:35:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "Images.h",
    "line": 41,
    "function": null,
    "comment": "Images.h:41:  Constructors callable with one argument should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Images.h",
    "line": 44,
    "function": null,
    "comment": "Images.h:44:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "Images.h",
    "line": 48,
    "function": null,
    "comment": "Images.h:48:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Images.h",
    "line": 49,
    "function": null,
    "comment": "Images.h:49:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "Images.h",
    "line": 49,
    "function": null,
    "comment": "Images.h:49:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Images.h",
    "line": 55,
    "function": null,
    "comment": "Images.h:55:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Images.h",
    "line": 59,
    "function": null,
    "comment": "Images.h:59:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Images.h",
    "line": 64,
    "function": null,
    "comment": "Images.h:64:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Images.h",
    "line": 68,
    "function": null,
    "comment": "Images.h:68:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Images.h",
    "line": 72,
    "function": null,
    "comment": "Images.h:72:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Images.h",
    "line": 76,
    "function": null,
    "comment": "Images.h:76:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Images.h",
    "line": 84,
    "function": null,
    "comment": "Images.h:84:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "Images.h",
    "line": 88,
    "function": null,
    "comment": "Images.h:88:  Is this a non-const reference? If so, make const or use a pointer: cv::FileStorage& fs  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "Images.h",
    "line": 90,
    "function": null,
    "comment": "Images.h:90:  private: should be indented +1 space inside class Images  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Images.h",
    "line": 92,
    "function": null,
    "comment": "Images.h:92:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Images.h",
    "line": 114,
    "function": null,
    "comment": "Images.h:114:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "Images.h",
    "line": 115,
    "function": null,
    "comment": "Images.h:115:  public: should be indented +1 space inside class HugeImage  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Images.h",
    "line": 116,
    "function": null,
    "comment": "Images.h:116:  Do not leave a blank line after 'public:'  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "Images.h",
    "line": 117,
    "function": null,
    "comment": "Images.h:117:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "Images.h",
    "line": 117,
    "function": null,
    "comment": "Images.h:117:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Use 2 spaces for indentation.",
    "file": "Images.h",
    "line": 120,
    "function": null,
    "comment": "Images.h:120:  Weird number of spaces at line-start.  Are you using a 2-space indent?  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","indentation"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Images.h",
    "line": 126,
    "function": null,
    "comment": "Images.h:126:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "Images.h",
    "line": 130,
    "function": null,
    "comment": "Images.h:130:  Is this a non-const reference? If so, make const or use a pointer: std::string&prefix  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Images.h",
    "line": 133,
    "function": null,
    "comment": "Images.h:133:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Images.h",
    "line": 137,
    "function": null,
    "comment": "Images.h:137:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "Images.h",
    "line": 141,
    "function": null,
    "comment": "Images.h:141:  private: should be indented +1 space inside class HugeImage  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "Images.h",
    "line": 147,
    "function": null,
    "comment": "Images.h:147:  Namespace should be terminated with '// namespace pano'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "panoutils.h",
    "line": null,
    "function": null,
    "comment": "panoutils.h:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "All headers must be protected against multiple inclusion by",
    "file": "panoutils.h",
    "line": null,
    "function": null,
    "comment": "panoutils.h:0:  No #ifndef header guard found.  [build/header_guard] [5]",
    "tags": ["ros","code-standards","google-cpp","ros-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "panoutils.h",
    "line": 6,
    "function": null,
    "comment": "panoutils.h:6:  Include 'fstream' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "panoutils.h",
    "line": 9,
    "function": null,
    "comment": "panoutils.h:9:  Include 'string' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not include the same file twice.",
    "file": "panoutils.h",
    "line": 13,
    "function": null,
    "comment": "panoutils.h:13:  'string' already included at panoutils.h:9  [build/include] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Do not include the same file twice.",
    "file": "panoutils.h",
    "line": 14,
    "function": null,
    "comment": "panoutils.h:14:  'exception' already included at panoutils.h:11  [build/include] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "panoutils.h",
    "line": 16,
    "function": null,
    "comment": "panoutils.h:16:  Include 'iomanip' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "panoutils.h",
    "line": 18,
    "function": null,
    "comment": "panoutils.h:18:  Found C system header after C++ system header. Should be: panoutils.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "panoutils.h",
    "line": 19,
    "function": null,
    "comment": "panoutils.h:19:  Found C system header after C++ system header. Should be: panoutils.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "panoutils.h",
    "line": 22,
    "function": null,
    "comment": "panoutils.h:22:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "panoutils.h",
    "line": 29,
    "function": null,
    "comment": "panoutils.h:29:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "panoutils.h",
    "line": 29,
    "function": null,
    "comment": "panoutils.h:29:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "panoutils.h",
    "line": 38,
    "function": null,
    "comment": "panoutils.h:38:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "panoutils.h",
    "line": 38,
    "function": null,
    "comment": "panoutils.h:38:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "panoutils.h",
    "line": 38,
    "function": null,
    "comment": "panoutils.h:38:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "panoutils.h",
    "line": 38,
    "function": null,
    "comment": "panoutils.h:38:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "panoutils.h",
    "line": 48,
    "function": null,
    "comment": "panoutils.h:48:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "panoutils.h",
    "line": 50,
    "function": null,
    "comment": "panoutils.h:50:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "panoutils.h",
    "line": 62,
    "function": null,
    "comment": "panoutils.h:62:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "panoutils.h",
    "line": 63,
    "function": null,
    "comment": "panoutils.h:63:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "panoutils.h",
    "line": 65,
    "function": null,
    "comment": "panoutils.h:65:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "panoutils.h",
    "line": 73,
    "function": null,
    "comment": "panoutils.h:73:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "panoutils.h",
    "line": 73,
    "function": null,
    "comment": "panoutils.h:73:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "panoutils.h",
    "line": 80,
    "function": null,
    "comment": "panoutils.h:80:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "panoutils.h",
    "line": 83,
    "function": null,
    "comment": "panoutils.h:83:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "panoutils.h",
    "line": 83,
    "function": null,
    "comment": "panoutils.h:83:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& output  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "panoutils.h",
    "line": 86,
    "function": null,
    "comment": "panoutils.h:86:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "panoutils.h",
    "line": 86,
    "function": null,
    "comment": "panoutils.h:86:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& output  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "panoutils.h",
    "line": 88,
    "function": null,
    "comment": "panoutils.h:88:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "panoutils.h",
    "line": 88,
    "function": null,
    "comment": "panoutils.h:88:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "panoutils.h",
    "line": 88,
    "function": null,
    "comment": "panoutils.h:88:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "panoutils.h",
    "line": 88,
    "function": null,
    "comment": "panoutils.h:88:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "panoutils.h",
    "line": 88,
    "function": null,
    "comment": "panoutils.h:88:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& output  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "panoutils.h",
    "line": 89,
    "function": null,
    "comment": "panoutils.h:89:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "panoutils.h",
    "line": 92,
    "function": null,
    "comment": "panoutils.h:92:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "panoutils.h",
    "line": 92,
    "function": null,
    "comment": "panoutils.h:92:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "panoutils.h",
    "line": 92,
    "function": null,
    "comment": "panoutils.h:92:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "panoutils.h",
    "line": 92,
    "function": null,
    "comment": "panoutils.h:92:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& output  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "panoutils.h",
    "line": 93,
    "function": null,
    "comment": "panoutils.h:93:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "panoutils.h",
    "line": 96,
    "function": null,
    "comment": "panoutils.h:96:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "panoutils.h",
    "line": 96,
    "function": null,
    "comment": "panoutils.h:96:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "panoutils.h",
    "line": 96,
    "function": null,
    "comment": "panoutils.h:96:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "panoutils.h",
    "line": 96,
    "function": null,
    "comment": "panoutils.h:96:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "panoutils.h",
    "line": 96,
    "function": null,
    "comment": "panoutils.h:96:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& output  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "panoutils.h",
    "line": 97,
    "function": null,
    "comment": "panoutils.h:97:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "panoutils.h",
    "line": 100,
    "function": null,
    "comment": "panoutils.h:100:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "panoutils.h",
    "line": 100,
    "function": null,
    "comment": "panoutils.h:100:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "panoutils.h",
    "line": 100,
    "function": null,
    "comment": "panoutils.h:100:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "panoutils.h",
    "line": 100,
    "function": null,
    "comment": "panoutils.h:100:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& output  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "panoutils.h",
    "line": 101,
    "function": null,
    "comment": "panoutils.h:101:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "panoutils.h",
    "line": 105,
    "function": null,
    "comment": "panoutils.h:105:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "panoutils.h",
    "line": 105,
    "function": null,
    "comment": "panoutils.h:105:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "panoutils.h",
    "line": 105,
    "function": null,
    "comment": "panoutils.h:105:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& img  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "panoutils.h",
    "line": 106,
    "function": null,
    "comment": "panoutils.h:106:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "panoutils.h",
    "line": 113,
    "function": null,
    "comment": "panoutils.h:113:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "panoutils.h",
    "line": 114,
    "function": null,
    "comment": "panoutils.h:114:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "panoutils.h",
    "line": 114,
    "function": null,
    "comment": "panoutils.h:114:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "panoutils.h",
    "line": 115,
    "function": null,
    "comment": "panoutils.h:115:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "panoutils.h",
    "line": 116,
    "function": null,
    "comment": "panoutils.h:116:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "panoutils.h",
    "line": 119,
    "function": null,
    "comment": "panoutils.h:119:  Extra space after (  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "panoutils.h",
    "line": 123,
    "function": null,
    "comment": "panoutils.h:123:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "panoutils.h",
    "line": 126,
    "function": null,
    "comment": "panoutils.h:126:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "panoutils.h",
    "line": 126,
    "function": null,
    "comment": "panoutils.h:126:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "panoutils.h",
    "line": 126,
    "function": null,
    "comment": "panoutils.h:126:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& img  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "panoutils.h",
    "line": 127,
    "function": null,
    "comment": "panoutils.h:127:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "panoutils.h",
    "line": 134,
    "function": null,
    "comment": "panoutils.h:134:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "panoutils.h",
    "line": 135,
    "function": null,
    "comment": "panoutils.h:135:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "panoutils.h",
    "line": 135,
    "function": null,
    "comment": "panoutils.h:135:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "panoutils.h",
    "line": 137,
    "function": null,
    "comment": "panoutils.h:137:  Extra space after (  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "panoutils.h",
    "line": 140,
    "function": null,
    "comment": "panoutils.h:140:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "panoutils.h",
    "line": 143,
    "function": null,
    "comment": "panoutils.h:143:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "panoutils.h",
    "line": 143,
    "function": null,
    "comment": "panoutils.h:143:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "panoutils.h",
    "line": 143,
    "function": null,
    "comment": "panoutils.h:143:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& img  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "panoutils.h",
    "line": 144,
    "function": null,
    "comment": "panoutils.h:144:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "panoutils.h",
    "line": 151,
    "function": null,
    "comment": "panoutils.h:151:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "panoutils.h",
    "line": 152,
    "function": null,
    "comment": "panoutils.h:152:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "panoutils.h",
    "line": 152,
    "function": null,
    "comment": "panoutils.h:152:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "panoutils.h",
    "line": 153,
    "function": null,
    "comment": "panoutils.h:153:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "panoutils.h",
    "line": 154,
    "function": null,
    "comment": "panoutils.h:154:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "panoutils.h",
    "line": 157,
    "function": null,
    "comment": "panoutils.h:157:  Extra space after (  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "panoutils.h",
    "line": 160,
    "function": null,
    "comment": "panoutils.h:160:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "panoutils.h",
    "line": 164,
    "function": null,
    "comment": "panoutils.h:164:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "panoutils.h",
    "line": 164,
    "function": null,
    "comment": "panoutils.h:164:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "panoutils.h",
    "line": 164,
    "function": null,
    "comment": "panoutils.h:164:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "panoutils.h",
    "line": 164,
    "function": null,
    "comment": "panoutils.h:164:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "panoutils.h",
    "line": 164,
    "function": null,
    "comment": "panoutils.h:164:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& img  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "panoutils.h",
    "line": 165,
    "function": null,
    "comment": "panoutils.h:165:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "panoutils.h",
    "line": 172,
    "function": null,
    "comment": "panoutils.h:172:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "panoutils.h",
    "line": 173,
    "function": null,
    "comment": "panoutils.h:173:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "panoutils.h",
    "line": 173,
    "function": null,
    "comment": "panoutils.h:173:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "panoutils.h",
    "line": 174,
    "function": null,
    "comment": "panoutils.h:174:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "panoutils.h",
    "line": 175,
    "function": null,
    "comment": "panoutils.h:175:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "panoutils.h",
    "line": 178,
    "function": null,
    "comment": "panoutils.h:178:  Extra space after (  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "panoutils.h",
    "line": 179,
    "function": null,
    "comment": "panoutils.h:179:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "panoutils.h",
    "line": 180,
    "function": null,
    "comment": "panoutils.h:180:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "panoutils.h",
    "line": 181,
    "function": null,
    "comment": "panoutils.h:181:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "panoutils.h",
    "line": 181,
    "function": null,
    "comment": "panoutils.h:181:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "panoutils.h",
    "line": 182,
    "function": null,
    "comment": "panoutils.h:182:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "panoutils.h",
    "line": 183,
    "function": null,
    "comment": "panoutils.h:183:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "panoutils.h",
    "line": 183,
    "function": null,
    "comment": "panoutils.h:183:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "panoutils.h",
    "line": 184,
    "function": null,
    "comment": "panoutils.h:184:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "panoutils.h",
    "line": 186,
    "function": null,
    "comment": "panoutils.h:186:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "panoutils.h",
    "line": 189,
    "function": null,
    "comment": "panoutils.h:189:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "panoutils.h",
    "line": 192,
    "function": null,
    "comment": "panoutils.h:192:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "panoutils.h",
    "line": 195,
    "function": null,
    "comment": "panoutils.h:195:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "panoutils.h",
    "line": 195,
    "function": null,
    "comment": "panoutils.h:195:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "panoutils.h",
    "line": 195,
    "function": null,
    "comment": "panoutils.h:195:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "panoutils.h",
    "line": 195,
    "function": null,
    "comment": "panoutils.h:195:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "panoutils.h",
    "line": 195,
    "function": null,
    "comment": "panoutils.h:195:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& img  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "panoutils.h",
    "line": 196,
    "function": null,
    "comment": "panoutils.h:196:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "panoutils.h",
    "line": 203,
    "function": null,
    "comment": "panoutils.h:203:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "panoutils.h",
    "line": 204,
    "function": null,
    "comment": "panoutils.h:204:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "panoutils.h",
    "line": 204,
    "function": null,
    "comment": "panoutils.h:204:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "panoutils.h",
    "line": 205,
    "function": null,
    "comment": "panoutils.h:205:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "panoutils.h",
    "line": 206,
    "function": null,
    "comment": "panoutils.h:206:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "panoutils.h",
    "line": 209,
    "function": null,
    "comment": "panoutils.h:209:  Extra space after (  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "panoutils.h",
    "line": 210,
    "function": null,
    "comment": "panoutils.h:210:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "panoutils.h",
    "line": 211,
    "function": null,
    "comment": "panoutils.h:211:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "panoutils.h",
    "line": 212,
    "function": null,
    "comment": "panoutils.h:212:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "panoutils.h",
    "line": 212,
    "function": null,
    "comment": "panoutils.h:212:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "panoutils.h",
    "line": 213,
    "function": null,
    "comment": "panoutils.h:213:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "panoutils.h",
    "line": 214,
    "function": null,
    "comment": "panoutils.h:214:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "panoutils.h",
    "line": 214,
    "function": null,
    "comment": "panoutils.h:214:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "panoutils.h",
    "line": 215,
    "function": null,
    "comment": "panoutils.h:215:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "panoutils.h",
    "line": 217,
    "function": null,
    "comment": "panoutils.h:217:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "panoutils.h",
    "line": 220,
    "function": null,
    "comment": "panoutils.h:220:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "panoutils.h",
    "line": 223,
    "function": null,
    "comment": "panoutils.h:223:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "panoutils.h",
    "line": 226,
    "function": null,
    "comment": "panoutils.h:226:  Namespace should be terminated with '// namespace pano'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "panoutils.h",
    "line": 227,
    "function": null,
    "comment": "panoutils.h:227:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "panoutils.h",
    "line": 38,
    "function": null,
    "comment": "panoutils.h:38:  Add #include <utility> for pair<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "Blender.h",
    "line": null,
    "function": null,
    "comment": "Blender.h:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_.",
    "file": "Blender.h",
    "line": 8,
    "function": null,
    "comment": "Blender.h:8:  #ifndef header guard has wrong style, please use: _HOME_ANDRE_ROS_HAROS_ANALYSER_BLENDER_H_  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the symbol name should be <PACKAGE>_<PATH>_<FILE>_H.",
    "file": "Blender.h",
    "line": 8,
    "function": null,
    "comment": "Blender.h:8:  #ifndef header guard has wrong style, please use: BLENDER_H  [build/header_guard] [5]",
    "tags": ["ros","code-standards","ros-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the guard's end should be '#endif  // <PROJECT>_<PATH>_<FILE>_H_' or '#endif  /* <PROJECT>_<PATH>_<FILE>_H_ */'.",
    "file": "Blender.h",
    "line": 194,
    "function": null,
    "comment": "Blender.h:194:  #endif line should be '#endif  // _HOME_ANDRE_ROS_HAROS_ANALYSER_BLENDER_H_'  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "Blender.h",
    "line": 17,
    "function": null,
    "comment": "Blender.h:17:  Include 'pano_core/ImageMolecule.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "Blender.h",
    "line": 19,
    "function": null,
    "comment": "Blender.h:19:  Include 'pano_core/callbacks.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Blender.h",
    "line": 21,
    "function": null,
    "comment": "Blender.h:21:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Blender.h",
    "line": 24,
    "function": null,
    "comment": "Blender.h:24:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "Blender.h",
    "line": 24,
    "function": null,
    "comment": "Blender.h:24:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "Blender.h",
    "line": 25,
    "function": null,
    "comment": "Blender.h:25:  public: should be indented +1 space inside class Blender  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Blender.h",
    "line": 27,
    "function": null,
    "comment": "Blender.h:27:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "Blender.h",
    "line": 32,
    "function": null,
    "comment": "Blender.h:32:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& outimage  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Blender.h",
    "line": 36,
    "function": null,
    "comment": "Blender.h:36:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "Blender.h",
    "line": 36,
    "function": null,
    "comment": "Blender.h:36:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& outimage  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Blender.h",
    "line": 40,
    "function": null,
    "comment": "Blender.h:40:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "Blender.h",
    "line": 40,
    "function": null,
    "comment": "Blender.h:40:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "Blender.h",
    "line": 40,
    "function": null,
    "comment": "Blender.h:40:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& outimage  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Blender.h",
    "line": 42,
    "function": null,
    "comment": "Blender.h:42:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "Blender.h",
    "line": 42,
    "function": null,
    "comment": "Blender.h:42:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& weights  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Blender.h",
    "line": 44,
    "function": null,
    "comment": "Blender.h:44:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "Blender.h",
    "line": 44,
    "function": null,
    "comment": "Blender.h:44:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "Blender.h",
    "line": 44,
    "function": null,
    "comment": "Blender.h:44:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& weights  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "Blender.h",
    "line": 48,
    "function": null,
    "comment": "Blender.h:48:  protected: should be indented +1 space inside class Blender  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Blender.h",
    "line": 50,
    "function": null,
    "comment": "Blender.h:50:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Blender.h",
    "line": 55,
    "function": null,
    "comment": "Blender.h:55:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "Blender.h",
    "line": 56,
    "function": null,
    "comment": "Blender.h:56:  public: should be indented +1 space inside class BlenderNoBlend  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Blender.h",
    "line": 57,
    "function": null,
    "comment": "Blender.h:57:  Do not leave a blank line after 'public:'  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "Blender.h",
    "line": 62,
    "function": null,
    "comment": "Blender.h:62:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& outimage  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "Blender.h",
    "line": 66,
    "function": null,
    "comment": "Blender.h:66:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& outimage  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Blender.h",
    "line": 67,
    "function": null,
    "comment": "Blender.h:67:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "Blender.h",
    "line": 70,
    "function": null,
    "comment": "Blender.h:70:  private: should be indented +1 space inside class BlenderNoBlend  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Blender.h",
    "line": 71,
    "function": null,
    "comment": "Blender.h:71:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Blender.h",
    "line": 71,
    "function": null,
    "comment": "Blender.h:71:  Do not leave a blank line after 'private:'  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Blender.h",
    "line": 75,
    "function": null,
    "comment": "Blender.h:75:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "Blender.h",
    "line": 76,
    "function": null,
    "comment": "Blender.h:76:  public: should be indented +1 space inside class BlenderSimple  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "Blender.h",
    "line": 77,
    "function": null,
    "comment": "Blender.h:77:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "Blender.h",
    "line": 82,
    "function": null,
    "comment": "Blender.h:82:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& outimage  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "Blender.h",
    "line": 86,
    "function": null,
    "comment": "Blender.h:86:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& outimage  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Blender.h",
    "line": 87,
    "function": null,
    "comment": "Blender.h:87:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "Blender.h",
    "line": 91,
    "function": null,
    "comment": "Blender.h:91:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& outimage  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "Blender.h",
    "line": 95,
    "function": null,
    "comment": "Blender.h:95:  private: should be indented +1 space inside class BlenderSimple  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "Blender.h",
    "line": 108,
    "function": null,
    "comment": "Blender.h:108:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& alpha  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Blender.h",
    "line": 111,
    "function": null,
    "comment": "Blender.h:111:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Blender.h",
    "line": 112,
    "function": null,
    "comment": "Blender.h:112:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "Blender.h",
    "line": 113,
    "function": null,
    "comment": "Blender.h:113:  public: should be indented +1 space inside class BlenderAlpha  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "Blender.h",
    "line": 114,
    "function": null,
    "comment": "Blender.h:114:  Constructors callable with one argument should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "Blender.h",
    "line": 120,
    "function": null,
    "comment": "Blender.h:120:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& outimage  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Blender.h",
    "line": 122,
    "function": null,
    "comment": "Blender.h:122:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "Blender.h",
    "line": 126,
    "function": null,
    "comment": "Blender.h:126:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& outimage  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Blender.h",
    "line": 127,
    "function": null,
    "comment": "Blender.h:127:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "Blender.h",
    "line": 130,
    "function": null,
    "comment": "Blender.h:130:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& outimage  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "Blender.h",
    "line": 133,
    "function": null,
    "comment": "Blender.h:133:  private: should be indented +1 space inside class BlenderAlpha  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Blender.h",
    "line": 134,
    "function": null,
    "comment": "Blender.h:134:  Do not leave a blank line after 'private:'  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "Blender.h",
    "line": 136,
    "function": null,
    "comment": "Blender.h:136:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Blender.h",
    "line": 157,
    "function": null,
    "comment": "Blender.h:157:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "Blender.h",
    "line": 158,
    "function": null,
    "comment": "Blender.h:158:  public: should be indented +1 space inside class BlenderMultiband  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "Blender.h",
    "line": 159,
    "function": null,
    "comment": "Blender.h:159:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "Blender.h",
    "line": 164,
    "function": null,
    "comment": "Blender.h:164:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& outimage  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "Blender.h",
    "line": 168,
    "function": null,
    "comment": "Blender.h:168:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& outimage  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Blender.h",
    "line": 169,
    "function": null,
    "comment": "Blender.h:169:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "Blender.h",
    "line": 172,
    "function": null,
    "comment": "Blender.h:172:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& outimage  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "Blender.h",
    "line": 176,
    "function": null,
    "comment": "Blender.h:176:  private: should be indented +1 space inside class BlenderMultiband  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "Blender.h",
    "line": 192,
    "function": null,
    "comment": "Blender.h:192:  Namespace should be terminated with '// namespace pano'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "Blender.h",
    "line": 182,
    "function": null,
    "comment": "Blender.h:182:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "Blender.h",
    "line": 168,
    "function": null,
    "comment": "Blender.h:168:  Add #include <set> for set<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "ImageMolecule.h",
    "line": null,
    "function": null,
    "comment": "ImageMolecule.h:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_.",
    "file": "ImageMolecule.h",
    "line": 8,
    "function": null,
    "comment": "ImageMolecule.h:8:  #ifndef header guard has wrong style, please use: _HOME_ANDRE_ROS_HAROS_ANALYSER_IMAGEMOLECULE_H_  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the symbol name should be <PACKAGE>_<PATH>_<FILE>_H.",
    "file": "ImageMolecule.h",
    "line": 8,
    "function": null,
    "comment": "ImageMolecule.h:8:  #ifndef header guard has wrong style, please use: IMAGEMOLECULE_H  [build/header_guard] [5]",
    "tags": ["ros","code-standards","ros-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the guard's end should be '#endif  // <PROJECT>_<PATH>_<FILE>_H_' or '#endif  /* <PROJECT>_<PATH>_<FILE>_H_ */'.",
    "file": "ImageMolecule.h",
    "line": 184,
    "function": null,
    "comment": "ImageMolecule.h:184:  #endif line should be '#endif  // _HOME_ANDRE_ROS_HAROS_ANALYSER_IMAGEMOLECULE_H_'  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "ImageMolecule.h",
    "line": 13,
    "function": null,
    "comment": "ImageMolecule.h:13:  Include 'list' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "ImageMolecule.h",
    "line": 17,
    "function": null,
    "comment": "ImageMolecule.h:17:  Found C system header after C++ system header. Should be: ImageMolecule.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "ImageMolecule.h",
    "line": 18,
    "function": null,
    "comment": "ImageMolecule.h:18:  Found C system header after C++ system header. Should be: ImageMolecule.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "ImageMolecule.h",
    "line": 20,
    "function": null,
    "comment": "ImageMolecule.h:20:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "ImageMolecule.h",
    "line": 27,
    "function": null,
    "comment": "ImageMolecule.h:27:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "ImageMolecule.h",
    "line": 28,
    "function": null,
    "comment": "ImageMolecule.h:28:  public: should be indented +1 space inside class ImageMolecule  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "ImageMolecule.h",
    "line": 50,
    "function": null,
    "comment": "ImageMolecule.h:50:  Single-parameter constructors should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "ImageMolecule.h",
    "line": 54,
    "function": null,
    "comment": "ImageMolecule.h:54:  Single-parameter constructors should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "ImageMolecule.h",
    "line": 56,
    "function": null,
    "comment": "ImageMolecule.h:56:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "ImageMolecule.h",
    "line": 91,
    "function": null,
    "comment": "ImageMolecule.h:91:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "ImageMolecule.h",
    "line": 159,
    "function": null,
    "comment": "ImageMolecule.h:159:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "ImageMolecule.h",
    "line": 159,
    "function": null,
    "comment": "ImageMolecule.h:159:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageMolecule.h",
    "line": 167,
    "function": null,
    "comment": "ImageMolecule.h:167:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "ImageMolecule.h",
    "line": 171,
    "function": null,
    "comment": "ImageMolecule.h:171:  Is this a non-const reference? If so, make const or use a pointer: cv::FileStorage& fs  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "ImageMolecule.h",
    "line": 174,
    "function": null,
    "comment": "ImageMolecule.h:174:  private: should be indented +1 space inside class ImageMolecule  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "ImageMolecule.h",
    "line": 181,
    "function": null,
    "comment": "ImageMolecule.h:181:  Namespace should be terminated with '// namespace pano'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "callbacks.h",
    "line": null,
    "function": null,
    "comment": "callbacks.h:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_.",
    "file": "callbacks.h",
    "line": 8,
    "function": null,
    "comment": "callbacks.h:8:  #ifndef header guard has wrong style, please use: _HOME_ANDRE_ROS_HAROS_ANALYSER_CALLBACKS_H_  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the symbol name should be <PACKAGE>_<PATH>_<FILE>_H.",
    "file": "callbacks.h",
    "line": 8,
    "function": null,
    "comment": "callbacks.h:8:  #ifndef header guard has wrong style, please use: CALLBACKS_H  [build/header_guard] [5]",
    "tags": ["ros","code-standards","ros-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the guard's end should be '#endif  // <PROJECT>_<PATH>_<FILE>_H_' or '#endif  /* <PROJECT>_<PATH>_<FILE>_H_ */'.",
    "file": "callbacks.h",
    "line": 58,
    "function": null,
    "comment": "callbacks.h:58:  #endif line should be '#endif  // _HOME_ANDRE_ROS_HAROS_ANALYSER_CALLBACKS_H_'  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "callbacks.h",
    "line": 12,
    "function": null,
    "comment": "callbacks.h:12:  Found C system header after C++ system header. Should be: callbacks.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "callbacks.h",
    "line": 14,
    "function": null,
    "comment": "callbacks.h:14:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "callbacks.h",
    "line": 14,
    "function": null,
    "comment": "callbacks.h:14:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "callbacks.h",
    "line": 15,
    "function": null,
    "comment": "callbacks.h:15:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "callbacks.h",
    "line": 16,
    "function": null,
    "comment": "callbacks.h:16:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "callbacks.h",
    "line": 22,
    "function": null,
    "comment": "callbacks.h:22:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "callbacks.h",
    "line": 23,
    "function": null,
    "comment": "callbacks.h:23:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "callbacks.h",
    "line": 28,
    "function": null,
    "comment": "callbacks.h:28:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "callbacks.h",
    "line": 30,
    "function": null,
    "comment": "callbacks.h:30:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "callbacks.h",
    "line": 30,
    "function": null,
    "comment": "callbacks.h:30:  Single-parameter constructors should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "callbacks.h",
    "line": 31,
    "function": null,
    "comment": "callbacks.h:31:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "callbacks.h",
    "line": 32,
    "function": null,
    "comment": "callbacks.h:32:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "callbacks.h",
    "line": 37,
    "function": null,
    "comment": "callbacks.h:37:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "callbacks.h",
    "line": 38,
    "function": null,
    "comment": "callbacks.h:38:  public: should be indented +1 space inside class CallbackEngine  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "callbacks.h",
    "line": 40,
    "function": null,
    "comment": "callbacks.h:40:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "callbacks.h",
    "line": 40,
    "function": null,
    "comment": "callbacks.h:40:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "callbacks.h",
    "line": 41,
    "function": null,
    "comment": "callbacks.h:41:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "callbacks.h",
    "line": 44,
    "function": null,
    "comment": "callbacks.h:44:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "callbacks.h",
    "line": 44,
    "function": null,
    "comment": "callbacks.h:44:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "callbacks.h",
    "line": 45,
    "function": null,
    "comment": "callbacks.h:45:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "callbacks.h",
    "line": 45,
    "function": null,
    "comment": "callbacks.h:45:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "callbacks.h",
    "line": 45,
    "function": null,
    "comment": "callbacks.h:45:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "callbacks.h",
    "line": 50,
    "function": null,
    "comment": "callbacks.h:50:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "callbacks.h",
    "line": 50,
    "function": null,
    "comment": "callbacks.h:50:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "callbacks.h",
    "line": 51,
    "function": null,
    "comment": "callbacks.h:51:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "callbacks.h",
    "line": 53,
    "function": null,
    "comment": "callbacks.h:53:  private: should be indented +1 space inside class CallbackEngine  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "callbacks.h",
    "line": 54,
    "function": null,
    "comment": "callbacks.h:54:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "callbacks.h",
    "line": 56,
    "function": null,
    "comment": "callbacks.h:56:  Namespace should be terminated with '// namespace pano'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "Extrinsics.h",
    "line": null,
    "function": null,
    "comment": "Extrinsics.h:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_.",
    "file": "Extrinsics.h",
    "line": 8,
    "function": null,
    "comment": "Extrinsics.h:8:  #ifndef header guard has wrong style, please use: _HOME_ANDRE_ROS_HAROS_ANALYSER_EXTRINSICS_H_  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the symbol name should be <PACKAGE>_<PATH>_<FILE>_H.",
    "file": "Extrinsics.h",
    "line": 8,
    "function": null,
    "comment": "Extrinsics.h:8:  #ifndef header guard has wrong style, please use: EXTRINSICS_H  [build/header_guard] [5]",
    "tags": ["ros","code-standards","ros-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the guard's end should be '#endif  // <PROJECT>_<PATH>_<FILE>_H_' or '#endif  /* <PROJECT>_<PATH>_<FILE>_H_ */'.",
    "file": "Extrinsics.h",
    "line": 111,
    "function": null,
    "comment": "Extrinsics.h:111:  #endif line should be '#endif  // _HOME_ANDRE_ROS_HAROS_ANALYSER_EXTRINSICS_H_'  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "Extrinsics.h",
    "line": 13,
    "function": null,
    "comment": "Extrinsics.h:13:  Found C system header after other header. Should be: Extrinsics.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "Extrinsics.h",
    "line": 14,
    "function": null,
    "comment": "Extrinsics.h:14:  Found C system header after other header. Should be: Extrinsics.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "Extrinsics.h",
    "line": 15,
    "function": null,
    "comment": "Extrinsics.h:15:  Found C++ system header after other header. Should be: Extrinsics.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Extrinsics.h",
    "line": 17,
    "function": null,
    "comment": "Extrinsics.h:17:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Extrinsics.h",
    "line": 19,
    "function": null,
    "comment": "Extrinsics.h:19:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "Extrinsics.h",
    "line": 20,
    "function": null,
    "comment": "Extrinsics.h:20:  public: should be indented +1 space inside class Extrinsics  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Extrinsics.h",
    "line": 24,
    "function": null,
    "comment": "Extrinsics.h:24:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Extrinsics.h",
    "line": 25,
    "function": null,
    "comment": "Extrinsics.h:25:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Extrinsics.h",
    "line": 31,
    "function": null,
    "comment": "Extrinsics.h:31:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "Extrinsics.h",
    "line": 34,
    "function": null,
    "comment": "Extrinsics.h:34:  Is this a non-const reference? If so, make const or use a pointer: cv::FileStorage& fs  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Extrinsics.h",
    "line": 38,
    "function": null,
    "comment": "Extrinsics.h:38:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Extrinsics.h",
    "line": 43,
    "function": null,
    "comment": "Extrinsics.h:43:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Extrinsics.h",
    "line": 48,
    "function": null,
    "comment": "Extrinsics.h:48:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Extrinsics.h",
    "line": 52,
    "function": null,
    "comment": "Extrinsics.h:52:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Extrinsics.h",
    "line": 57,
    "function": null,
    "comment": "Extrinsics.h:57:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Extrinsics.h",
    "line": 62,
    "function": null,
    "comment": "Extrinsics.h:62:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Extrinsics.h",
    "line": 66,
    "function": null,
    "comment": "Extrinsics.h:66:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Extrinsics.h",
    "line": 71,
    "function": null,
    "comment": "Extrinsics.h:71:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Extrinsics.h",
    "line": 75,
    "function": null,
    "comment": "Extrinsics.h:75:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Extrinsics.h",
    "line": 80,
    "function": null,
    "comment": "Extrinsics.h:80:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "Extrinsics.h",
    "line": 84,
    "function": null,
    "comment": "Extrinsics.h:84:  private: should be indented +1 space inside class Extrinsics  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Extrinsics.h",
    "line": 92,
    "function": null,
    "comment": "Extrinsics.h:92:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Extrinsics.h",
    "line": 97,
    "function": null,
    "comment": "Extrinsics.h:97:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Extrinsics.h",
    "line": 101,
    "function": null,
    "comment": "Extrinsics.h:101:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "Extrinsics.h",
    "line": 103,
    "function": null,
    "comment": "Extrinsics.h:103:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "Extrinsics.h",
    "line": 104,
    "function": null,
    "comment": "Extrinsics.h:104:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "Extrinsics.h",
    "line": 105,
    "function": null,
    "comment": "Extrinsics.h:105:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "Extrinsics.h",
    "line": 106,
    "function": null,
    "comment": "Extrinsics.h:106:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "Extrinsics.h",
    "line": 110,
    "function": null,
    "comment": "Extrinsics.h:110:  Namespace should be terminated with '// namespace pano'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "pano_core.h",
    "line": null,
    "function": null,
    "comment": "pano_core.h:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_.",
    "file": "pano_core.h",
    "line": 1,
    "function": null,
    "comment": "pano_core.h:1:  #ifndef header guard has wrong style, please use: _HOME_ANDRE_ROS_HAROS_ANALYSER_PANO_CORE_H_  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the symbol name should be <PACKAGE>_<PATH>_<FILE>_H.",
    "file": "pano_core.h",
    "line": 1,
    "function": null,
    "comment": "pano_core.h:1:  #ifndef header guard has wrong style, please use: PANO_CORE_H  [build/header_guard] [5]",
    "tags": ["ros","code-standards","ros-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the guard's end should be '#endif  // <PROJECT>_<PATH>_<FILE>_H_' or '#endif  /* <PROJECT>_<PATH>_<FILE>_H_ */'.",
    "file": "pano_core.h",
    "line": 14,
    "function": null,
    "comment": "pano_core.h:14:  #endif line should be '#endif  // _HOME_ANDRE_ROS_HAROS_ANALYSER_PANO_CORE_H_'  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "pano_core.h",
    "line": 6,
    "function": null,
    "comment": "pano_core.h:6:  Include 'pano_core/feature_utils.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "pano_core.h",
    "line": 8,
    "function": null,
    "comment": "pano_core.h:8:  Include 'pano_core/Camera.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "pano_core.h",
    "line": 10,
    "function": null,
    "comment": "pano_core.h:10:  Include 'pano_core/CaptureEngine.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "pano_core.h",
    "line": 11,
    "function": null,
    "comment": "pano_core.h:11:  Include 'pano_core/Blender.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "QuadTree.h",
    "line": null,
    "function": null,
    "comment": "QuadTree.h:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "All headers must be protected against multiple inclusion by",
    "file": "QuadTree.h",
    "line": null,
    "function": null,
    "comment": "QuadTree.h:0:  No #ifndef header guard found.  [build/header_guard] [5]",
    "tags": ["ros","code-standards","google-cpp","ros-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "QuadTree.h",
    "line": 1,
    "function": null,
    "comment": "QuadTree.h:1:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "QuadTree.h",
    "line": 2,
    "function": null,
    "comment": "QuadTree.h:2:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "QuadTree.h",
    "line": 4,
    "function": null,
    "comment": "QuadTree.h:4:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "QuadTree.h",
    "line": 5,
    "function": null,
    "comment": "QuadTree.h:5:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "QuadTree.h",
    "line": 7,
    "function": null,
    "comment": "QuadTree.h:7:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "QuadTree.h",
    "line": 9,
    "function": null,
    "comment": "QuadTree.h:9:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "QuadTree.h",
    "line": 10,
    "function": null,
    "comment": "QuadTree.h:10:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "QuadTree.h",
    "line": 12,
    "function": null,
    "comment": "QuadTree.h:12:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "QuadTree.h",
    "line": 19,
    "function": null,
    "comment": "QuadTree.h:19:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "QuadTree.h",
    "line": 20,
    "function": null,
    "comment": "QuadTree.h:20:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "QuadTree.h",
    "line": 22,
    "function": null,
    "comment": "QuadTree.h:22:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "QuadTree.h",
    "line": 28,
    "function": null,
    "comment": "QuadTree.h:28:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "QuadTree.h",
    "line": 29,
    "function": null,
    "comment": "QuadTree.h:29:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "CaptureEngine.h",
    "line": null,
    "function": null,
    "comment": "CaptureEngine.h:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_.",
    "file": "CaptureEngine.h",
    "line": 8,
    "function": null,
    "comment": "CaptureEngine.h:8:  #ifndef header guard has wrong style, please use: _HOME_ANDRE_ROS_HAROS_ANALYSER_CAPTUREENGINE_H_  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the symbol name should be <PACKAGE>_<PATH>_<FILE>_H.",
    "file": "CaptureEngine.h",
    "line": 8,
    "function": null,
    "comment": "CaptureEngine.h:8:  #ifndef header guard has wrong style, please use: CAPTUREENGINE_H  [build/header_guard] [5]",
    "tags": ["ros","code-standards","ros-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the guard's end should be '#endif  // <PROJECT>_<PATH>_<FILE>_H_' or '#endif  /* <PROJECT>_<PATH>_<FILE>_H_ */'.",
    "file": "CaptureEngine.h",
    "line": 98,
    "function": null,
    "comment": "CaptureEngine.h:98:  #endif line should be '#endif  // _HOME_ANDRE_ROS_HAROS_ANALYSER_CAPTUREENGINE_H_'  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "CaptureEngine.h",
    "line": 19,
    "function": null,
    "comment": "CaptureEngine.h:19:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "CaptureEngine.h",
    "line": 22,
    "function": null,
    "comment": "CaptureEngine.h:22:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "CaptureEngine.h",
    "line": 23,
    "function": null,
    "comment": "CaptureEngine.h:23:  public: should be indented +1 space inside class PriorTracker  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "CaptureEngine.h",
    "line": 24,
    "function": null,
    "comment": "CaptureEngine.h:24:  Constructors callable with one argument should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "CaptureEngine.h",
    "line": 25,
    "function": null,
    "comment": "CaptureEngine.h:25:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "CaptureEngine.h",
    "line": 25,
    "function": null,
    "comment": "CaptureEngine.h:25:  Is this a non-const reference? If so, make const or use a pointer: ImageAtom& query  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "CaptureEngine.h",
    "line": 25,
    "function": null,
    "comment": "CaptureEngine.h:25:  Is this a non-const reference? If so, make const or use a pointer: ModelFitter& fitter  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "CaptureEngine.h",
    "line": 36,
    "function": null,
    "comment": "CaptureEngine.h:36:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "CaptureEngine.h",
    "line": 36,
    "function": null,
    "comment": "CaptureEngine.h:36:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "CaptureEngine.h",
    "line": 37,
    "function": null,
    "comment": "CaptureEngine.h:37:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "CaptureEngine.h",
    "line": 44,
    "function": null,
    "comment": "CaptureEngine.h:44:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "CaptureEngine.h",
    "line": 44,
    "function": null,
    "comment": "CaptureEngine.h:44:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "CaptureEngine.h",
    "line": 45,
    "function": null,
    "comment": "CaptureEngine.h:45:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "CaptureEngine.h",
    "line": 48,
    "function": null,
    "comment": "CaptureEngine.h:48:  private: should be indented +1 space inside class PriorTracker  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "CaptureEngine.h",
    "line": 49,
    "function": null,
    "comment": "CaptureEngine.h:49:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "CaptureEngine.h",
    "line": 57,
    "function": null,
    "comment": "CaptureEngine.h:57:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "CaptureEngine.h",
    "line": 61,
    "function": null,
    "comment": "CaptureEngine.h:61:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "CaptureEngine.h",
    "line": 62,
    "function": null,
    "comment": "CaptureEngine.h:62:  public: should be indented +1 space inside class CaptureEngine  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "CaptureEngine.h",
    "line": 63,
    "function": null,
    "comment": "CaptureEngine.h:63:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "CaptureEngine.h",
    "line": 64,
    "function": null,
    "comment": "CaptureEngine.h:64:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "CaptureEngine.h",
    "line": 71,
    "function": null,
    "comment": "CaptureEngine.h:71:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "CaptureEngine.h",
    "line": 75,
    "function": null,
    "comment": "CaptureEngine.h:75:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "CaptureEngine.h",
    "line": 78,
    "function": null,
    "comment": "CaptureEngine.h:78:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "CaptureEngine.h",
    "line": 78,
    "function": null,
    "comment": "CaptureEngine.h:78:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "CaptureEngine.h",
    "line": 86,
    "function": null,
    "comment": "CaptureEngine.h:86:  protected: should be indented +1 space inside class CaptureEngine  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "CaptureEngine.h",
    "line": 97,
    "function": null,
    "comment": "CaptureEngine.h:97:  Namespace should be terminated with '// namespace pano'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "CaptureEngine.h",
    "line": 94,
    "function": null,
    "comment": "CaptureEngine.h:94:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "Features.h",
    "line": null,
    "function": null,
    "comment": "Features.h:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_.",
    "file": "Features.h",
    "line": 8,
    "function": null,
    "comment": "Features.h:8:  #ifndef header guard has wrong style, please use: _HOME_ANDRE_ROS_HAROS_ANALYSER_FEATURES_H_  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the symbol name should be <PACKAGE>_<PATH>_<FILE>_H.",
    "file": "Features.h",
    "line": 8,
    "function": null,
    "comment": "Features.h:8:  #ifndef header guard has wrong style, please use: FEATURES_H  [build/header_guard] [5]",
    "tags": ["ros","code-standards","ros-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the guard's end should be '#endif  // <PROJECT>_<PATH>_<FILE>_H_' or '#endif  /* <PROJECT>_<PATH>_<FILE>_H_ */'.",
    "file": "Features.h",
    "line": 132,
    "function": null,
    "comment": "Features.h:132:  #endif line should be '#endif  // _HOME_ANDRE_ROS_HAROS_ANALYSER_FEATURES_H_'  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Features.h",
    "line": 19,
    "function": null,
    "comment": "Features.h:19:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Features.h",
    "line": 22,
    "function": null,
    "comment": "Features.h:22:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "Features.h",
    "line": 23,
    "function": null,
    "comment": "Features.h:23:  public: should be indented +1 space inside class Features  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Features.h",
    "line": 24,
    "function": null,
    "comment": "Features.h:24:  Do not leave a blank line after 'public:'  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Features.h",
    "line": 27,
    "function": null,
    "comment": "Features.h:27:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Features.h",
    "line": 31,
    "function": null,
    "comment": "Features.h:31:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Features.h",
    "line": 36,
    "function": null,
    "comment": "Features.h:36:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Features.h",
    "line": 38,
    "function": null,
    "comment": "Features.h:38:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "Features.h",
    "line": 46,
    "function": null,
    "comment": "Features.h:46:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "Features.h",
    "line": 46,
    "function": null,
    "comment": "Features.h:46:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "Features.h",
    "line": 47,
    "function": null,
    "comment": "Features.h:47:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "Features.h",
    "line": 47,
    "function": null,
    "comment": "Features.h:47:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Features.h",
    "line": 51,
    "function": null,
    "comment": "Features.h:51:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Features.h",
    "line": 52,
    "function": null,
    "comment": "Features.h:52:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Features.h",
    "line": 57,
    "function": null,
    "comment": "Features.h:57:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Features.h",
    "line": 58,
    "function": null,
    "comment": "Features.h:58:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Features.h",
    "line": 63,
    "function": null,
    "comment": "Features.h:63:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "Features.h",
    "line": 63,
    "function": null,
    "comment": "Features.h:63:  Is this a non-const reference? If so, make const or use a pointer: std::vector<cv::DMatch>& matches  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Features.h",
    "line": 66,
    "function": null,
    "comment": "Features.h:66:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Features.h",
    "line": 70,
    "function": null,
    "comment": "Features.h:70:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Features.h",
    "line": 75,
    "function": null,
    "comment": "Features.h:75:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Features.h",
    "line": 79,
    "function": null,
    "comment": "Features.h:79:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Features.h",
    "line": 83,
    "function": null,
    "comment": "Features.h:83:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Features.h",
    "line": 87,
    "function": null,
    "comment": "Features.h:87:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Features.h",
    "line": 94,
    "function": null,
    "comment": "Features.h:94:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "Features.h",
    "line": 98,
    "function": null,
    "comment": "Features.h:98:  Is this a non-const reference? If so, make const or use a pointer: cv::FileStorage& fs  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "Features.h",
    "line": 101,
    "function": null,
    "comment": "Features.h:101:  private: should be indented +1 space inside class Features  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Features.h",
    "line": 102,
    "function": null,
    "comment": "Features.h:102:  Do not leave a blank line after 'private:'  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Features.h",
    "line": 106,
    "function": null,
    "comment": "Features.h:106:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "Features.h",
    "line": 114,
    "function": null,
    "comment": "Features.h:114:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Features.h",
    "line": 117,
    "function": null,
    "comment": "Features.h:117:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Features.h",
    "line": 125,
    "function": null,
    "comment": "Features.h:125:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Features.h",
    "line": 128,
    "function": null,
    "comment": "Features.h:128:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Features.h",
    "line": 129,
    "function": null,
    "comment": "Features.h:129:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "Features.h",
    "line": 129,
    "function": null,
    "comment": "Features.h:129:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& img  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "Features.h",
    "line": 131,
    "function": null,
    "comment": "Features.h:131:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "Features.h",
    "line": 131,
    "function": null,
    "comment": "Features.h:131:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "Features.h",
    "line": 129,
    "function": null,
    "comment": "Features.h:129:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "Projector.h",
    "line": null,
    "function": null,
    "comment": "Projector.h:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_.",
    "file": "Projector.h",
    "line": 1,
    "function": null,
    "comment": "Projector.h:1:  #ifndef header guard has wrong style, please use: _HOME_ANDRE_ROS_HAROS_ANALYSER_PROJECTOR_H_  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the symbol name should be <PACKAGE>_<PATH>_<FILE>_H.",
    "file": "Projector.h",
    "line": 1,
    "function": null,
    "comment": "Projector.h:1:  #ifndef header guard has wrong style, please use: PROJECTOR_H  [build/header_guard] [5]",
    "tags": ["ros","code-standards","ros-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the guard's end should be '#endif  // <PROJECT>_<PATH>_<FILE>_H_' or '#endif  /* <PROJECT>_<PATH>_<FILE>_H_ */'.",
    "file": "Projector.h",
    "line": 143,
    "function": null,
    "comment": "Projector.h:143:  #endif line should be '#endif  // _HOME_ANDRE_ROS_HAROS_ANALYSER_PROJECTOR_H_'  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "Projector.h",
    "line": 6,
    "function": null,
    "comment": "Projector.h:6:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not indent within a namespace.",
    "file": "Projector.h",
    "line": 9,
    "function": null,
    "comment": "Projector.h:9:  Do not indent within a namespace  [runtime/indentation_namespace] [4]",
    "tags": ["code-standards","formatting","google-cpp","indentation","namespace"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "Projector.h",
    "line": 9,
    "function": null,
    "comment": "Projector.h:9:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "Projector.h",
    "line": 12,
    "function": null,
    "comment": "Projector.h:12:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "Projector.h",
    "line": 17,
    "function": null,
    "comment": "Projector.h:17:  public: should be indented +1 space inside class Projector  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The line before an access modifier (public, private, protected) should be blank, unless it is the beginning of the class.",
    "file": "Projector.h",
    "line": 17,
    "function": null,
    "comment": "Projector.h:17:  'public:' should be preceded by a blank line  [whitespace/blank_line] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","access-modifiers"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "Projector.h",
    "line": 18,
    "function": null,
    "comment": "Projector.h:18:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Projector.h",
    "line": 24,
    "function": null,
    "comment": "Projector.h:24:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "Projector.h",
    "line": 24,
    "function": null,
    "comment": "Projector.h:24:  Constructors callable with one argument should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Projector.h",
    "line": 30,
    "function": null,
    "comment": "Projector.h:30:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "Projector.h",
    "line": 30,
    "function": null,
    "comment": "Projector.h:30:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Projector.h",
    "line": 32,
    "function": null,
    "comment": "Projector.h:32:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "Projector.h",
    "line": 32,
    "function": null,
    "comment": "Projector.h:32:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "Projector.h",
    "line": 32,
    "function": null,
    "comment": "Projector.h:32:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& outimage  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Projector.h",
    "line": 48,
    "function": null,
    "comment": "Projector.h:48:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "Projector.h",
    "line": 48,
    "function": null,
    "comment": "Projector.h:48:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Projector.h",
    "line": 49,
    "function": null,
    "comment": "Projector.h:49:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Projector.h",
    "line": 51,
    "function": null,
    "comment": "Projector.h:51:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "Projector.h",
    "line": 51,
    "function": null,
    "comment": "Projector.h:51:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "Projector.h",
    "line": 51,
    "function": null,
    "comment": "Projector.h:51:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& spherical_coords  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Projector.h",
    "line": 55,
    "function": null,
    "comment": "Projector.h:55:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "Projector.h",
    "line": 55,
    "function": null,
    "comment": "Projector.h:55:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Projector.h",
    "line": 56,
    "function": null,
    "comment": "Projector.h:56:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "Projector.h",
    "line": 59,
    "function": null,
    "comment": "Projector.h:59:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& mask  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Projector.h",
    "line": 62,
    "function": null,
    "comment": "Projector.h:62:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "Projector.h",
    "line": 62,
    "function": null,
    "comment": "Projector.h:62:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "Projector.h",
    "line": 62,
    "function": null,
    "comment": "Projector.h:62:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat & outputimage  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Projector.h",
    "line": 81,
    "function": null,
    "comment": "Projector.h:81:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "Projector.h",
    "line": 81,
    "function": null,
    "comment": "Projector.h:81:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& remap1  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "Projector.h",
    "line": 81,
    "function": null,
    "comment": "Projector.h:81:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat&remap2  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Projector.h",
    "line": 86,
    "function": null,
    "comment": "Projector.h:86:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "Projector.h",
    "line": 86,
    "function": null,
    "comment": "Projector.h:86:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& remap  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "Projector.h",
    "line": 86,
    "function": null,
    "comment": "Projector.h:86:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& mask  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "Projector.h",
    "line": 87,
    "function": null,
    "comment": "Projector.h:87:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "Projector.h",
    "line": 87,
    "function": null,
    "comment": "Projector.h:87:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& tm  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Projector.h",
    "line": 94,
    "function": null,
    "comment": "Projector.h:94:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "Projector.h",
    "line": 94,
    "function": null,
    "comment": "Projector.h:94:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& remap1  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "Projector.h",
    "line": 94,
    "function": null,
    "comment": "Projector.h:94:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat&remap2  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "Projector.h",
    "line": 98,
    "function": null,
    "comment": "Projector.h:98:  private: should be indented +1 space inside class Projector  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Projector.h",
    "line": 100,
    "function": null,
    "comment": "Projector.h:100:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "Projector.h",
    "line": 100,
    "function": null,
    "comment": "Projector.h:100:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& remap1  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "Projector.h",
    "line": 100,
    "function": null,
    "comment": "Projector.h:100:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat&remap2  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Projector.h",
    "line": 107,
    "function": null,
    "comment": "Projector.h:107:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "Projector.h",
    "line": 107,
    "function": null,
    "comment": "Projector.h:107:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& remap1  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "Projector.h",
    "line": 107,
    "function": null,
    "comment": "Projector.h:107:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat&remap2  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Projector.h",
    "line": 113,
    "function": null,
    "comment": "Projector.h:113:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Do not indent within a namespace.",
    "file": "Projector.h",
    "line": 117,
    "function": null,
    "comment": "Projector.h:117:  Do not indent within a namespace  [runtime/indentation_namespace] [4]",
    "tags": ["code-standards","formatting","google-cpp","indentation","namespace"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "Projector.h",
    "line": 117,
    "function": null,
    "comment": "Projector.h:117:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "Projector.h",
    "line": 118,
    "function": null,
    "comment": "Projector.h:118:  public: should be indented +1 space inside class SparseProjector  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "Projector.h",
    "line": 119,
    "function": null,
    "comment": "Projector.h:119:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Projector.h",
    "line": 124,
    "function": null,
    "comment": "Projector.h:124:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "Projector.h",
    "line": 124,
    "function": null,
    "comment": "Projector.h:124:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "Projector.h",
    "line": 124,
    "function": null,
    "comment": "Projector.h:124:  Is this a non-const reference? If so, make const or use a pointer: std::vector<int>& roi_ids  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Projector.h",
    "line": 125,
    "function": null,
    "comment": "Projector.h:125:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "Projector.h",
    "line": 125,
    "function": null,
    "comment": "Projector.h:125:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "Projector.h",
    "line": 125,
    "function": null,
    "comment": "Projector.h:125:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& outimage  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "Projector.h",
    "line": 127,
    "function": null,
    "comment": "Projector.h:127:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "Projector.h",
    "line": 127,
    "function": null,
    "comment": "Projector.h:127:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "Projector.h",
    "line": 130,
    "function": null,
    "comment": "Projector.h:130:  private: should be indented +1 space inside class SparseProjector  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Projector.h",
    "line": 131,
    "function": null,
    "comment": "Projector.h:131:  Do not leave a blank line after 'private:'  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "Projector.h",
    "line": 137,
    "function": null,
    "comment": "Projector.h:137:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "Projector.h",
    "line": 139,
    "function": null,
    "comment": "Projector.h:139:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Projector.h",
    "line": 140,
    "function": null,
    "comment": "Projector.h:140:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "Projector.h",
    "line": 142,
    "function": null,
    "comment": "Projector.h:142:  Namespace should be terminated with '// namespace pano'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "Projector.h",
    "line": 136,
    "function": null,
    "comment": "Projector.h:136:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "PairNode.h",
    "line": null,
    "function": null,
    "comment": "PairNode.h:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_.",
    "file": "PairNode.h",
    "line": 1,
    "function": null,
    "comment": "PairNode.h:1:  #ifndef header guard has wrong style, please use: _HOME_ANDRE_ROS_HAROS_ANALYSER_PAIRNODE_H_  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the symbol name should be <PACKAGE>_<PATH>_<FILE>_H.",
    "file": "PairNode.h",
    "line": 1,
    "function": null,
    "comment": "PairNode.h:1:  #ifndef header guard has wrong style, please use: PAIRNODE_H  [build/header_guard] [5]",
    "tags": ["ros","code-standards","ros-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the guard's end should be '#endif  // <PROJECT>_<PATH>_<FILE>_H_' or '#endif  /* <PROJECT>_<PATH>_<FILE>_H_ */'.",
    "file": "PairNode.h",
    "line": 144,
    "function": null,
    "comment": "PairNode.h:144:  #endif line should be '#endif  // _HOME_ANDRE_ROS_HAROS_ANALYSER_PAIRNODE_H_'  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "PairNode.h",
    "line": 5,
    "function": null,
    "comment": "PairNode.h:5:  Found C++ system header after other header. Should be: PairNode.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "PairNode.h",
    "line": 7,
    "function": null,
    "comment": "PairNode.h:7:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "PairNode.h",
    "line": 13,
    "function": null,
    "comment": "PairNode.h:13:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "PairNode.h",
    "line": 14,
    "function": null,
    "comment": "PairNode.h:14:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "PairNode.h",
    "line": 20,
    "function": null,
    "comment": "PairNode.h:20:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "PairNode.h",
    "line": 20,
    "function": null,
    "comment": "PairNode.h:20:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "PairNode.h",
    "line": 23,
    "function": null,
    "comment": "PairNode.h:23:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "PairNode.h",
    "line": 23,
    "function": null,
    "comment": "PairNode.h:23:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "PairNode.h",
    "line": 35,
    "function": null,
    "comment": "PairNode.h:35:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "PairNode.h",
    "line": 45,
    "function": null,
    "comment": "PairNode.h:45:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "PairNode.h",
    "line": 45,
    "function": null,
    "comment": "PairNode.h:45:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Use 2 spaces for indentation.",
    "file": "PairNode.h",
    "line": 46,
    "function": null,
    "comment": "PairNode.h:46:  Weird number of spaces at line-start.  Are you using a 2-space indent?  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","indentation"]
  },
  {
    "rule": "Use 2 spaces for indentation.",
    "file": "PairNode.h",
    "line": 47,
    "function": null,
    "comment": "PairNode.h:47:  Weird number of spaces at line-start.  Are you using a 2-space indent?  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","indentation"]
  },
  {
    "rule": "Use 2 spaces for indentation.",
    "file": "PairNode.h",
    "line": 48,
    "function": null,
    "comment": "PairNode.h:48:  Weird number of spaces at line-start.  Are you using a 2-space indent?  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","indentation"]
  },
  {
    "rule": "Use 2 spaces for indentation.",
    "file": "PairNode.h",
    "line": 49,
    "function": null,
    "comment": "PairNode.h:49:  Weird number of spaces at line-start.  Are you using a 2-space indent?  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","indentation"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "PairNode.h",
    "line": 49,
    "function": null,
    "comment": "PairNode.h:49:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use 2 spaces for indentation.",
    "file": "PairNode.h",
    "line": 50,
    "function": null,
    "comment": "PairNode.h:50:  Weird number of spaces at line-start.  Are you using a 2-space indent?  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","indentation"]
  },
  {
    "rule": "Use 2 spaces for indentation.",
    "file": "PairNode.h",
    "line": 51,
    "function": null,
    "comment": "PairNode.h:51:  Weird number of spaces at line-start.  Are you using a 2-space indent?  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","indentation"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "PairNode.h",
    "line": 51,
    "function": null,
    "comment": "PairNode.h:51:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "PairNode.h",
    "line": 51,
    "function": null,
    "comment": "PairNode.h:51:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Use 2 spaces for indentation.",
    "file": "PairNode.h",
    "line": 52,
    "function": null,
    "comment": "PairNode.h:52:  Weird number of spaces at line-start.  Are you using a 2-space indent?  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","indentation"]
  },
  {
    "rule": "Use 2 spaces for indentation.",
    "file": "PairNode.h",
    "line": 53,
    "function": null,
    "comment": "PairNode.h:53:  Weird number of spaces at line-start.  Are you using a 2-space indent?  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","indentation"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "PairNode.h",
    "line": 53,
    "function": null,
    "comment": "PairNode.h:53:  Using C-style cast.  Use static_cast<float>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "PairNode.h",
    "line": 61,
    "function": null,
    "comment": "PairNode.h:61:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "PairNode.h",
    "line": 61,
    "function": null,
    "comment": "PairNode.h:61:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Use 2 spaces for indentation.",
    "file": "PairNode.h",
    "line": 62,
    "function": null,
    "comment": "PairNode.h:62:  Weird number of spaces at line-start.  Are you using a 2-space indent?  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","indentation"]
  },
  {
    "rule": "Use 2 spaces for indentation.",
    "file": "PairNode.h",
    "line": 63,
    "function": null,
    "comment": "PairNode.h:63:  Weird number of spaces at line-start.  Are you using a 2-space indent?  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","indentation"]
  },
  {
    "rule": "Use 2 spaces for indentation.",
    "file": "PairNode.h",
    "line": 64,
    "function": null,
    "comment": "PairNode.h:64:  Weird number of spaces at line-start.  Are you using a 2-space indent?  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","indentation"]
  },
  {
    "rule": "Use 2 spaces for indentation.",
    "file": "PairNode.h",
    "line": 65,
    "function": null,
    "comment": "PairNode.h:65:  Weird number of spaces at line-start.  Are you using a 2-space indent?  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","indentation"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "PairNode.h",
    "line": 65,
    "function": null,
    "comment": "PairNode.h:65:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "PairNode.h",
    "line": 66,
    "function": null,
    "comment": "PairNode.h:66:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Use 2 spaces for indentation.",
    "file": "PairNode.h",
    "line": 67,
    "function": null,
    "comment": "PairNode.h:67:  Weird number of spaces at line-start.  Are you using a 2-space indent?  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","indentation"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "PairNode.h",
    "line": 67,
    "function": null,
    "comment": "PairNode.h:67:  Using C-style cast.  Use static_cast<float>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "PairNode.h",
    "line": 74,
    "function": null,
    "comment": "PairNode.h:74:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "PairNode.h",
    "line": 74,
    "function": null,
    "comment": "PairNode.h:74:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "PairNode.h",
    "line": 74,
    "function": null,
    "comment": "PairNode.h:74:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Use 2 spaces for indentation.",
    "file": "PairNode.h",
    "line": 75,
    "function": null,
    "comment": "PairNode.h:75:  Weird number of spaces at line-start.  Are you using a 2-space indent?  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "PairNode.h",
    "line": 75,
    "function": null,
    "comment": "PairNode.h:75:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "PairNode.h",
    "line": 75,
    "function": null,
    "comment": "PairNode.h:75:  Using C-style cast.  Use static_cast<float>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "PairNode.h",
    "line": 78,
    "function": null,
    "comment": "PairNode.h:78:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "PairNode.h",
    "line": 78,
    "function": null,
    "comment": "PairNode.h:78:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "PairNode.h",
    "line": 78,
    "function": null,
    "comment": "PairNode.h:78:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "PairNode.h",
    "line": 79,
    "function": null,
    "comment": "PairNode.h:79:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "PairNode.h",
    "line": 86,
    "function": null,
    "comment": "PairNode.h:86:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "PairNode.h",
    "line": 86,
    "function": null,
    "comment": "PairNode.h:86:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "PairNode.h",
    "line": 86,
    "function": null,
    "comment": "PairNode.h:86:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "PairNode.h",
    "line": 86,
    "function": null,
    "comment": "PairNode.h:86:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "PairNode.h",
    "line": 88,
    "function": null,
    "comment": "PairNode.h:88:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "PairNode.h",
    "line": 93,
    "function": null,
    "comment": "PairNode.h:93:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "PairNode.h",
    "line": 94,
    "function": null,
    "comment": "PairNode.h:94:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "PairNode.h",
    "line": 96,
    "function": null,
    "comment": "PairNode.h:96:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "PairNode.h",
    "line": 98,
    "function": null,
    "comment": "PairNode.h:98:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "PairNode.h",
    "line": 100,
    "function": null,
    "comment": "PairNode.h:100:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "PairNode.h",
    "line": 100,
    "function": null,
    "comment": "PairNode.h:100:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Strings and /**/-comments should not extend beyond one line.",
    "file": "PairNode.h",
    "line": 107,
    "function": null,
    "comment": "PairNode.h:107:  Complex multi-line /*...*/-style comment found. Lint may give bogus warnings.  Consider replacing these with //-style comments, with #if 0...#endif, or with more clearly structured multi-line comments.  [readability/multiline_comment",
    "tags": ["comments","code-standards","google-cpp","multiline-comments","strings","multiline-strings"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "PairNode.h",
    "line": 109,
    "function": null,
    "comment": "PairNode.h:109:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "PairNode.h",
    "line": 111,
    "function": null,
    "comment": "PairNode.h:111:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "PairNode.h",
    "line": 111,
    "function": null,
    "comment": "PairNode.h:111:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "PairNode.h",
    "line": 123,
    "function": null,
    "comment": "PairNode.h:123:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "PairNode.h",
    "line": 123,
    "function": null,
    "comment": "PairNode.h:123:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "PairNode.h",
    "line": 123,
    "function": null,
    "comment": "PairNode.h:123:  Is this a non-const reference? If so, make const or use a pointer: std::ostream& out  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "PairNode.h",
    "line": 128,
    "function": null,
    "comment": "PairNode.h:128:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "PairNode.h",
    "line": 128,
    "function": null,
    "comment": "PairNode.h:128:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "PairNode.h",
    "line": 128,
    "function": null,
    "comment": "PairNode.h:128:  Is this a non-const reference? If so, make const or use a pointer: std::ostream& out  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "PairNode.h",
    "line": 129,
    "function": null,
    "comment": "PairNode.h:129:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "PairNode.h",
    "line": 142,
    "function": null,
    "comment": "PairNode.h:142:  Namespace should be terminated with '// namespace pano'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "PairNode.h",
    "line": 128,
    "function": null,
    "comment": "PairNode.h:128:  Add #include <map> for map<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "feature_utils.h",
    "line": null,
    "function": null,
    "comment": "feature_utils.h:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_.",
    "file": "feature_utils.h",
    "line": 8,
    "function": null,
    "comment": "feature_utils.h:8:  #ifndef header guard has wrong style, please use: _HOME_ANDRE_ROS_HAROS_ANALYSER_FEATURE_UTILS_H_  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the symbol name should be <PACKAGE>_<PATH>_<FILE>_H.",
    "file": "feature_utils.h",
    "line": 8,
    "function": null,
    "comment": "feature_utils.h:8:  #ifndef header guard has wrong style, please use: FEATURE_UTILS_H  [build/header_guard] [5]",
    "tags": ["ros","code-standards","ros-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the guard's end should be '#endif  // <PROJECT>_<PATH>_<FILE>_H_' or '#endif  /* <PROJECT>_<PATH>_<FILE>_H_ */'.",
    "file": "feature_utils.h",
    "line": 106,
    "function": null,
    "comment": "feature_utils.h:106:  #endif line should be '#endif  // _HOME_ANDRE_ROS_HAROS_ANALYSER_FEATURE_UTILS_H_'  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "feature_utils.h",
    "line": 17,
    "function": null,
    "comment": "feature_utils.h:17:  Include 'cmath' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "feature_utils.h",
    "line": 19,
    "function": null,
    "comment": "feature_utils.h:19:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "feature_utils.h",
    "line": 21,
    "function": null,
    "comment": "feature_utils.h:21:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.h",
    "line": 22,
    "function": null,
    "comment": "feature_utils.h:22:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.h",
    "line": 23,
    "function": null,
    "comment": "feature_utils.h:23:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.h",
    "line": 24,
    "function": null,
    "comment": "feature_utils.h:24:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.h",
    "line": 25,
    "function": null,
    "comment": "feature_utils.h:25:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.h",
    "line": 26,
    "function": null,
    "comment": "feature_utils.h:26:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "feature_utils.h",
    "line": 26,
    "function": null,
    "comment": "feature_utils.h:26:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.h",
    "line": 27,
    "function": null,
    "comment": "feature_utils.h:27:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.h",
    "line": 28,
    "function": null,
    "comment": "feature_utils.h:28:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "feature_utils.h",
    "line": 28,
    "function": null,
    "comment": "feature_utils.h:28:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.h",
    "line": 29,
    "function": null,
    "comment": "feature_utils.h:29:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.h",
    "line": 30,
    "function": null,
    "comment": "feature_utils.h:30:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.h",
    "line": 31,
    "function": null,
    "comment": "feature_utils.h:31:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "feature_utils.h",
    "line": 32,
    "function": null,
    "comment": "feature_utils.h:32:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "feature_utils.h",
    "line": 35,
    "function": null,
    "comment": "feature_utils.h:35:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.h",
    "line": 36,
    "function": null,
    "comment": "feature_utils.h:36:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.h",
    "line": 40,
    "function": null,
    "comment": "feature_utils.h:40:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.h",
    "line": 43,
    "function": null,
    "comment": "feature_utils.h:43:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.h",
    "line": 57,
    "function": null,
    "comment": "feature_utils.h:57:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "feature_utils.h",
    "line": 57,
    "function": null,
    "comment": "feature_utils.h:57:  Is this a non-const reference? If so, make const or use a pointer: std::vector<cv::Point2f>& pts  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.h",
    "line": 59,
    "function": null,
    "comment": "feature_utils.h:59:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "feature_utils.h",
    "line": 59,
    "function": null,
    "comment": "feature_utils.h:59:  Is this a non-const reference? If so, make const or use a pointer: KeypointVector& pts  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.h",
    "line": 64,
    "function": null,
    "comment": "feature_utils.h:64:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "feature_utils.h",
    "line": 64,
    "function": null,
    "comment": "feature_utils.h:64:  Is this a non-const reference? If so, make const or use a pointer: std::vector<cv::Point2f>& pts_train  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.h",
    "line": 65,
    "function": null,
    "comment": "feature_utils.h:65:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "feature_utils.h",
    "line": 65,
    "function": null,
    "comment": "feature_utils.h:65:  Is this a non-const reference? If so, make const or use a pointer: std::vector<cv::Point2f>& pts_query  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "feature_utils.h",
    "line": 67,
    "function": null,
    "comment": "feature_utils.h:67:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.h",
    "line": 68,
    "function": null,
    "comment": "feature_utils.h:68:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.h",
    "line": 69,
    "function": null,
    "comment": "feature_utils.h:69:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.h",
    "line": 70,
    "function": null,
    "comment": "feature_utils.h:70:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.h",
    "line": 71,
    "function": null,
    "comment": "feature_utils.h:71:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.h",
    "line": 72,
    "function": null,
    "comment": "feature_utils.h:72:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.h",
    "line": 73,
    "function": null,
    "comment": "feature_utils.h:73:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.h",
    "line": 74,
    "function": null,
    "comment": "feature_utils.h:74:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "feature_utils.h",
    "line": 78,
    "function": null,
    "comment": "feature_utils.h:78:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "feature_utils.h",
    "line": 79,
    "function": null,
    "comment": "feature_utils.h:79:  public: should be indented +1 space inside class GriddedDynamicDetectorAdaptor  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.h",
    "line": 80,
    "function": null,
    "comment": "feature_utils.h:80:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.h",
    "line": 81,
    "function": null,
    "comment": "feature_utils.h:81:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "feature_utils.h",
    "line": 81,
    "function": null,
    "comment": "feature_utils.h:81:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.h",
    "line": 82,
    "function": null,
    "comment": "feature_utils.h:82:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.h",
    "line": 83,
    "function": null,
    "comment": "feature_utils.h:83:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.h",
    "line": 84,
    "function": null,
    "comment": "feature_utils.h:84:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "feature_utils.h",
    "line": 84,
    "function": null,
    "comment": "feature_utils.h:84:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.h",
    "line": 85,
    "function": null,
    "comment": "feature_utils.h:85:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.h",
    "line": 86,
    "function": null,
    "comment": "feature_utils.h:86:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "feature_utils.h",
    "line": 86,
    "function": null,
    "comment": "feature_utils.h:86:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.h",
    "line": 87,
    "function": null,
    "comment": "feature_utils.h:87:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "feature_utils.h",
    "line": 87,
    "function": null,
    "comment": "feature_utils.h:87:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "feature_utils.h",
    "line": 87,
    "function": null,
    "comment": "feature_utils.h:87:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.h",
    "line": 88,
    "function": null,
    "comment": "feature_utils.h:88:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "feature_utils.h",
    "line": 88,
    "function": null,
    "comment": "feature_utils.h:88:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.h",
    "line": 89,
    "function": null,
    "comment": "feature_utils.h:89:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.h",
    "line": 90,
    "function": null,
    "comment": "feature_utils.h:90:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.h",
    "line": 91,
    "function": null,
    "comment": "feature_utils.h:91:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "feature_utils.h",
    "line": 91,
    "function": null,
    "comment": "feature_utils.h:91:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.h",
    "line": 92,
    "function": null,
    "comment": "feature_utils.h:92:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "feature_utils.h",
    "line": 94,
    "function": null,
    "comment": "feature_utils.h:94:  protected: should be indented +1 space inside class GriddedDynamicDetectorAdaptor  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.h",
    "line": 95,
    "function": null,
    "comment": "feature_utils.h:95:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.h",
    "line": 96,
    "function": null,
    "comment": "feature_utils.h:96:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "feature_utils.h",
    "line": 96,
    "function": null,
    "comment": "feature_utils.h:96:  Is this a non-const reference? If so, make const or use a pointer: std::vector<cv::KeyPoint>& keypoints  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.h",
    "line": 97,
    "function": null,
    "comment": "feature_utils.h:97:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.h",
    "line": 98,
    "function": null,
    "comment": "feature_utils.h:98:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.h",
    "line": 99,
    "function": null,
    "comment": "feature_utils.h:99:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.h",
    "line": 100,
    "function": null,
    "comment": "feature_utils.h:100:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.h",
    "line": 101,
    "function": null,
    "comment": "feature_utils.h:101:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "feature_utils.h",
    "line": 104,
    "function": null,
    "comment": "feature_utils.h:104:  Namespace should be terminated with '// namespace pano'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "ImageAtom.h",
    "line": null,
    "function": null,
    "comment": "ImageAtom.h:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_.",
    "file": "ImageAtom.h",
    "line": 1,
    "function": null,
    "comment": "ImageAtom.h:1:  #ifndef header guard has wrong style, please use: _HOME_ANDRE_ROS_HAROS_ANALYSER_IMAGEATOM_H_  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the symbol name should be <PACKAGE>_<PATH>_<FILE>_H.",
    "file": "ImageAtom.h",
    "line": 1,
    "function": null,
    "comment": "ImageAtom.h:1:  #ifndef header guard has wrong style, please use: IMAGEATOM_H  [build/header_guard] [5]",
    "tags": ["ros","code-standards","ros-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the guard's end should be '#endif  // <PROJECT>_<PATH>_<FILE>_H_' or '#endif  /* <PROJECT>_<PATH>_<FILE>_H_ */'.",
    "file": "ImageAtom.h",
    "line": 126,
    "function": null,
    "comment": "ImageAtom.h:126:  #endif line should be '#endif  // _HOME_ANDRE_ROS_HAROS_ANALYSER_IMAGEATOM_H_'  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "ImageAtom.h",
    "line": 5,
    "function": null,
    "comment": "ImageAtom.h:5:  Include 'pano_core/Features.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "ImageAtom.h",
    "line": 6,
    "function": null,
    "comment": "ImageAtom.h:6:  Include 'pano_core/Camera.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageAtom.h",
    "line": 11,
    "function": null,
    "comment": "ImageAtom.h:11:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageAtom.h",
    "line": 13,
    "function": null,
    "comment": "ImageAtom.h:13:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "ImageAtom.h",
    "line": 14,
    "function": null,
    "comment": "ImageAtom.h:14:  public: should be indented +1 space inside class ImageAtom  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "ImageAtom.h",
    "line": 15,
    "function": null,
    "comment": "ImageAtom.h:15:  Do not leave a blank line after 'public:'  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ImageAtom.h",
    "line": 24,
    "function": null,
    "comment": "ImageAtom.h:24:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageAtom.h",
    "line": 25,
    "function": null,
    "comment": "ImageAtom.h:25:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ImageAtom.h",
    "line": 29,
    "function": null,
    "comment": "ImageAtom.h:29:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ImageAtom.h",
    "line": 33,
    "function": null,
    "comment": "ImageAtom.h:33:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "ImageAtom.h",
    "line": 33,
    "function": null,
    "comment": "ImageAtom.h:33:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "ImageAtom.h",
    "line": 33,
    "function": null,
    "comment": "ImageAtom.h:33:  Is this a non-const reference? If so, make const or use a pointer: std::vector<cv::DMatch>& matches  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ImageAtom.h",
    "line": 35,
    "function": null,
    "comment": "ImageAtom.h:35:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "ImageAtom.h",
    "line": 35,
    "function": null,
    "comment": "ImageAtom.h:35:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "ImageAtom.h",
    "line": 35,
    "function": null,
    "comment": "ImageAtom.h:35:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& mask  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageAtom.h",
    "line": 39,
    "function": null,
    "comment": "ImageAtom.h:39:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageAtom.h",
    "line": 44,
    "function": null,
    "comment": "ImageAtom.h:44:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageAtom.h",
    "line": 48,
    "function": null,
    "comment": "ImageAtom.h:48:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageAtom.h",
    "line": 52,
    "function": null,
    "comment": "ImageAtom.h:52:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageAtom.h",
    "line": 56,
    "function": null,
    "comment": "ImageAtom.h:56:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageAtom.h",
    "line": 60,
    "function": null,
    "comment": "ImageAtom.h:60:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageAtom.h",
    "line": 64,
    "function": null,
    "comment": "ImageAtom.h:64:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageAtom.h",
    "line": 68,
    "function": null,
    "comment": "ImageAtom.h:68:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageAtom.h",
    "line": 72,
    "function": null,
    "comment": "ImageAtom.h:72:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageAtom.h",
    "line": 85,
    "function": null,
    "comment": "ImageAtom.h:85:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "ImageAtom.h",
    "line": 89,
    "function": null,
    "comment": "ImageAtom.h:89:  Is this a non-const reference? If so, make const or use a pointer: cv::FileStorage& fs  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageAtom.h",
    "line": 93,
    "function": null,
    "comment": "ImageAtom.h:93:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageAtom.h",
    "line": 98,
    "function": null,
    "comment": "ImageAtom.h:98:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use 2 spaces for indentation.",
    "file": "ImageAtom.h",
    "line": 101,
    "function": null,
    "comment": "ImageAtom.h:101:  Weird number of spaces at line-start.  Are you using a 2-space indent?  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "ImageAtom.h",
    "line": 107,
    "function": null,
    "comment": "ImageAtom.h:107:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "ImageAtom.h",
    "line": 107,
    "function": null,
    "comment": "ImageAtom.h:107:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageAtom.h",
    "line": 113,
    "function": null,
    "comment": "ImageAtom.h:113:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "ImageAtom.h",
    "line": 117,
    "function": null,
    "comment": "ImageAtom.h:117:  private: should be indented +1 space inside class ImageAtom  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "ImageAtom.h",
    "line": 118,
    "function": null,
    "comment": "ImageAtom.h:118:  Do not leave a blank line after 'private:'  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "ImageAtom.h",
    "line": 125,
    "function": null,
    "comment": "ImageAtom.h:125:  Namespace should be terminated with '// namespace pano'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "ImageAtom.h",
    "line": 126,
    "function": null,
    "comment": "ImageAtom.h:126:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "ImageAtom.h",
    "line": 126,
    "function": null,
    "comment": "ImageAtom.h:126:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "ImageAtom.h",
    "line": 33,
    "function": null,
    "comment": "ImageAtom.h:33:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "pano_interfaces.h",
    "line": null,
    "function": null,
    "comment": "pano_interfaces.h:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_.",
    "file": "pano_interfaces.h",
    "line": 1,
    "function": null,
    "comment": "pano_interfaces.h:1:  #ifndef header guard has wrong style, please use: _HOME_ANDRE_ROS_HAROS_ANALYSER_PANO_INTERFACES_H_  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the symbol name should be <PACKAGE>_<PATH>_<FILE>_H.",
    "file": "pano_interfaces.h",
    "line": 1,
    "function": null,
    "comment": "pano_interfaces.h:1:  #ifndef header guard has wrong style, please use: PANO_INTERFACES_H  [build/header_guard] [5]",
    "tags": ["ros","code-standards","ros-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the guard's end should be '#endif  // <PROJECT>_<PATH>_<FILE>_H_' or '#endif  /* <PROJECT>_<PATH>_<FILE>_H_ */'.",
    "file": "pano_interfaces.h",
    "line": 49,
    "function": null,
    "comment": "pano_interfaces.h:49:  #endif line should be '#endif  // _HOME_ANDRE_ROS_HAROS_ANALYSER_PANO_INTERFACES_H_'  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "pano_interfaces.h",
    "line": 6,
    "function": null,
    "comment": "pano_interfaces.h:6:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "pano_interfaces.h",
    "line": 6,
    "function": null,
    "comment": "pano_interfaces.h:6:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "pano_interfaces.h",
    "line": 8,
    "function": null,
    "comment": "pano_interfaces.h:8:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "pano_interfaces.h",
    "line": 9,
    "function": null,
    "comment": "pano_interfaces.h:9:  public: should be indented +1 space inside class drawable  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "pano_interfaces.h",
    "line": 10,
    "function": null,
    "comment": "pano_interfaces.h:10:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "pano_interfaces.h",
    "line": 19,
    "function": null,
    "comment": "pano_interfaces.h:19:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "pano_interfaces.h",
    "line": 20,
    "function": null,
    "comment": "pano_interfaces.h:20:  public: should be indented +1 space inside class serializable  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "pano_interfaces.h",
    "line": 21,
    "function": null,
    "comment": "pano_interfaces.h:21:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "pano_interfaces.h",
    "line": 23,
    "function": null,
    "comment": "pano_interfaces.h:23:  Is this a non-const reference? If so, make const or use a pointer: cv::FileStorage& fs  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "pano_interfaces.h",
    "line": 28,
    "function": null,
    "comment": "pano_interfaces.h:28:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "pano_interfaces.h",
    "line": 29,
    "function": null,
    "comment": "pano_interfaces.h:29:  public: should be indented +1 space inside class Copier  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "pano_interfaces.h",
    "line": 30,
    "function": null,
    "comment": "pano_interfaces.h:30:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "pano_interfaces.h",
    "line": 36,
    "function": null,
    "comment": "pano_interfaces.h:36:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "pano_interfaces.h",
    "line": 37,
    "function": null,
    "comment": "pano_interfaces.h:37:  public: should be indented +1 space inside class SCopier  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "pano_interfaces.h",
    "line": 38,
    "function": null,
    "comment": "pano_interfaces.h:38:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "pano_interfaces.h",
    "line": 39,
    "function": null,
    "comment": "pano_interfaces.h:39:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "pano_interfaces.h",
    "line": 39,
    "function": null,
    "comment": "pano_interfaces.h:39:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "pano_interfaces.h",
    "line": 42,
    "function": null,
    "comment": "pano_interfaces.h:42:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "pano_interfaces.h",
    "line": 48,
    "function": null,
    "comment": "pano_interfaces.h:48:  Namespace should be terminated with '// namespace pano'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "BlurDetector.h",
    "line": null,
    "function": null,
    "comment": "BlurDetector.h:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_.",
    "file": "BlurDetector.h",
    "line": 8,
    "function": null,
    "comment": "BlurDetector.h:8:  #ifndef header guard has wrong style, please use: _HOME_ANDRE_ROS_HAROS_ANALYSER_BLURDETECTOR_H_  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the symbol name should be <PACKAGE>_<PATH>_<FILE>_H.",
    "file": "BlurDetector.h",
    "line": 8,
    "function": null,
    "comment": "BlurDetector.h:8:  #ifndef header guard has wrong style, please use: BLURDETECTOR_H  [build/header_guard] [5]",
    "tags": ["ros","code-standards","ros-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the guard's end should be '#endif  // <PROJECT>_<PATH>_<FILE>_H_' or '#endif  /* <PROJECT>_<PATH>_<FILE>_H_ */'.",
    "file": "BlurDetector.h",
    "line": 43,
    "function": null,
    "comment": "BlurDetector.h:43:  #endif line should be '#endif  // _HOME_ANDRE_ROS_HAROS_ANALYSER_BLURDETECTOR_H_'  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "BlurDetector.h",
    "line": 14,
    "function": null,
    "comment": "BlurDetector.h:14:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "BlurDetector.h",
    "line": 19,
    "function": null,
    "comment": "BlurDetector.h:19:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "BlurDetector.h",
    "line": 20,
    "function": null,
    "comment": "BlurDetector.h:20:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "BlurDetector.h",
    "line": 20,
    "function": null,
    "comment": "BlurDetector.h:20:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& dst  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "BlurDetector.h",
    "line": 23,
    "function": null,
    "comment": "BlurDetector.h:23:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "BlurDetector.h",
    "line": 24,
    "function": null,
    "comment": "BlurDetector.h:24:  public: should be indented +1 space inside class BlurDetector  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "BlurDetector.h",
    "line": 32,
    "function": null,
    "comment": "BlurDetector.h:32:  protected: should be indented +1 space inside class BlurDetector  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "BlurDetector.h",
    "line": 41,
    "function": null,
    "comment": "BlurDetector.h:41:  Namespace should be terminated with '// namespace pano'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "Projector.cpp",
    "line": null,
    "function": null,
    "comment": "Projector.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "Projector.cpp",
    "line": 3,
    "function": null,
    "comment": "Projector.cpp:3:  Found C++ system header after other header. Should be: Projector.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "Projector.cpp",
    "line": 4,
    "function": null,
    "comment": "Projector.cpp:4:  Found C system header after other header. Should be: Projector.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "Projector.cpp",
    "line": 5,
    "function": null,
    "comment": "Projector.cpp:5:  Found C++ system header after other header. Should be: Projector.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "Projector.cpp",
    "line": 6,
    "function": null,
    "comment": "Projector.cpp:6:  Found C++ system header after other header. Should be: Projector.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "Projector.cpp",
    "line": 8,
    "function": null,
    "comment": "Projector.cpp:8:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Projector.cpp",
    "line": 11,
    "function": null,
    "comment": "Projector.cpp:11:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Projector.cpp",
    "line": 16,
    "function": null,
    "comment": "Projector.cpp:16:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Projector.cpp",
    "line": 17,
    "function": null,
    "comment": "Projector.cpp:17:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Projector.cpp",
    "line": 18,
    "function": null,
    "comment": "Projector.cpp:18:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Projector.cpp",
    "line": 20,
    "function": null,
    "comment": "Projector.cpp:20:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Projector.cpp",
    "line": 21,
    "function": null,
    "comment": "Projector.cpp:21:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Projector.cpp",
    "line": 24,
    "function": null,
    "comment": "Projector.cpp:24:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Projector.cpp",
    "line": 25,
    "function": null,
    "comment": "Projector.cpp:25:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Projector.cpp",
    "line": 26,
    "function": null,
    "comment": "Projector.cpp:26:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Projector.cpp",
    "line": 28,
    "function": null,
    "comment": "Projector.cpp:28:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Projector.cpp",
    "line": 30,
    "function": null,
    "comment": "Projector.cpp:30:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Projector.cpp",
    "line": 32,
    "function": null,
    "comment": "Projector.cpp:32:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Projector.cpp",
    "line": 33,
    "function": null,
    "comment": "Projector.cpp:33:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Projector.cpp",
    "line": 35,
    "function": null,
    "comment": "Projector.cpp:35:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "Projector.cpp",
    "line": 59,
    "function": null,
    "comment": "Projector.cpp:59:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "Projector.cpp",
    "line": 60,
    "function": null,
    "comment": "Projector.cpp:60:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "Projector.cpp",
    "line": 63,
    "function": null,
    "comment": "Projector.cpp:63:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "Projector.cpp",
    "line": 66,
    "function": null,
    "comment": "Projector.cpp:66:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "Projector.cpp",
    "line": 67,
    "function": null,
    "comment": "Projector.cpp:67:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Projector.cpp",
    "line": 69,
    "function": null,
    "comment": "Projector.cpp:69:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Projector.cpp",
    "line": 71,
    "function": null,
    "comment": "Projector.cpp:71:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Projector.cpp",
    "line": 72,
    "function": null,
    "comment": "Projector.cpp:72:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Projector.cpp",
    "line": 80,
    "function": null,
    "comment": "Projector.cpp:80:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "Projector.cpp",
    "line": 81,
    "function": null,
    "comment": "Projector.cpp:81:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Projector.cpp",
    "line": 83,
    "function": null,
    "comment": "Projector.cpp:83:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "Projector.cpp",
    "line": 84,
    "function": null,
    "comment": "Projector.cpp:84:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "Projector.cpp",
    "line": 85,
    "function": null,
    "comment": "Projector.cpp:85:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "Projector.cpp",
    "line": 86,
    "function": null,
    "comment": "Projector.cpp:86:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "Projector.cpp",
    "line": 87,
    "function": null,
    "comment": "Projector.cpp:87:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "Projector.cpp",
    "line": 91,
    "function": null,
    "comment": "Projector.cpp:91:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Projector.cpp",
    "line": 92,
    "function": null,
    "comment": "Projector.cpp:92:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Projector.cpp",
    "line": 93,
    "function": null,
    "comment": "Projector.cpp:93:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Projector.cpp",
    "line": 99,
    "function": null,
    "comment": "Projector.cpp:99:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Projector.cpp",
    "line": 102,
    "function": null,
    "comment": "Projector.cpp:102:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Projector.cpp",
    "line": 104,
    "function": null,
    "comment": "Projector.cpp:104:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Projector.cpp",
    "line": 105,
    "function": null,
    "comment": "Projector.cpp:105:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Projector.cpp",
    "line": 107,
    "function": null,
    "comment": "Projector.cpp:107:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Projector.cpp",
    "line": 109,
    "function": null,
    "comment": "Projector.cpp:109:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Projector.cpp",
    "line": 119,
    "function": null,
    "comment": "Projector.cpp:119:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "Projector.cpp",
    "line": 119,
    "function": null,
    "comment": "Projector.cpp:119:  Using C-style cast.  Use static_cast<float>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "Projector.cpp",
    "line": 120,
    "function": null,
    "comment": "Projector.cpp:120:  Using C-style cast.  Use static_cast<float>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Projector.cpp",
    "line": 121,
    "function": null,
    "comment": "Projector.cpp:121:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Projector.cpp",
    "line": 125,
    "function": null,
    "comment": "Projector.cpp:125:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Projector.cpp",
    "line": 126,
    "function": null,
    "comment": "Projector.cpp:126:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Projector.cpp",
    "line": 128,
    "function": null,
    "comment": "Projector.cpp:128:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Projector.cpp",
    "line": 130,
    "function": null,
    "comment": "Projector.cpp:130:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Projector.cpp",
    "line": 137,
    "function": null,
    "comment": "Projector.cpp:137:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Projector.cpp",
    "line": 141,
    "function": null,
    "comment": "Projector.cpp:141:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Projector.cpp",
    "line": 160,
    "function": null,
    "comment": "Projector.cpp:160:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Projector.cpp",
    "line": 162,
    "function": null,
    "comment": "Projector.cpp:162:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Projector.cpp",
    "line": 167,
    "function": null,
    "comment": "Projector.cpp:167:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Projector.cpp",
    "line": 177,
    "function": null,
    "comment": "Projector.cpp:177:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Projector.cpp",
    "line": 181,
    "function": null,
    "comment": "Projector.cpp:181:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "Projector.cpp",
    "line": 181,
    "function": null,
    "comment": "Projector.cpp:181:  Using C-style cast.  Use static_cast<float>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "Projector.cpp",
    "line": 182,
    "function": null,
    "comment": "Projector.cpp:182:  Using C-style cast.  Use static_cast<float>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Projector.cpp",
    "line": 183,
    "function": null,
    "comment": "Projector.cpp:183:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Projector.cpp",
    "line": 188,
    "function": null,
    "comment": "Projector.cpp:188:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Projector.cpp",
    "line": 189,
    "function": null,
    "comment": "Projector.cpp:189:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Projector.cpp",
    "line": 190,
    "function": null,
    "comment": "Projector.cpp:190:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Projector.cpp",
    "line": 193,
    "function": null,
    "comment": "Projector.cpp:193:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Projector.cpp",
    "line": 194,
    "function": null,
    "comment": "Projector.cpp:194:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Projector.cpp",
    "line": 195,
    "function": null,
    "comment": "Projector.cpp:195:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Projector.cpp",
    "line": 199,
    "function": null,
    "comment": "Projector.cpp:199:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Projector.cpp",
    "line": 200,
    "function": null,
    "comment": "Projector.cpp:200:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Projector.cpp",
    "line": 201,
    "function": null,
    "comment": "Projector.cpp:201:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Projector.cpp",
    "line": 205,
    "function": null,
    "comment": "Projector.cpp:205:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Projector.cpp",
    "line": 209,
    "function": null,
    "comment": "Projector.cpp:209:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Projector.cpp",
    "line": 213,
    "function": null,
    "comment": "Projector.cpp:213:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Projector.cpp",
    "line": 216,
    "function": null,
    "comment": "Projector.cpp:216:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Projector.cpp",
    "line": 217,
    "function": null,
    "comment": "Projector.cpp:217:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Projector.cpp",
    "line": 218,
    "function": null,
    "comment": "Projector.cpp:218:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Projector.cpp",
    "line": 220,
    "function": null,
    "comment": "Projector.cpp:220:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Projector.cpp",
    "line": 224,
    "function": null,
    "comment": "Projector.cpp:224:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Projector.cpp",
    "line": 226,
    "function": null,
    "comment": "Projector.cpp:226:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Projector.cpp",
    "line": 227,
    "function": null,
    "comment": "Projector.cpp:227:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Projector.cpp",
    "line": 229,
    "function": null,
    "comment": "Projector.cpp:229:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "Projector.cpp",
    "line": 229,
    "function": null,
    "comment": "Projector.cpp:229:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "Projector.cpp",
    "line": 230,
    "function": null,
    "comment": "Projector.cpp:230:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "Projector.cpp",
    "line": 234,
    "function": null,
    "comment": "Projector.cpp:234:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "Projector.cpp",
    "line": 236,
    "function": null,
    "comment": "Projector.cpp:236:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Projector.cpp",
    "line": 245,
    "function": null,
    "comment": "Projector.cpp:245:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Projector.cpp",
    "line": 246,
    "function": null,
    "comment": "Projector.cpp:246:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Projector.cpp",
    "line": 253,
    "function": null,
    "comment": "Projector.cpp:253:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Projector.cpp",
    "line": 258,
    "function": null,
    "comment": "Projector.cpp:258:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Projector.cpp",
    "line": 264,
    "function": null,
    "comment": "Projector.cpp:264:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Projector.cpp",
    "line": 265,
    "function": null,
    "comment": "Projector.cpp:265:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Projector.cpp",
    "line": 267,
    "function": null,
    "comment": "Projector.cpp:267:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Projector.cpp",
    "line": 268,
    "function": null,
    "comment": "Projector.cpp:268:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Projector.cpp",
    "line": 271,
    "function": null,
    "comment": "Projector.cpp:271:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Projector.cpp",
    "line": 273,
    "function": null,
    "comment": "Projector.cpp:273:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Projector.cpp",
    "line": 275,
    "function": null,
    "comment": "Projector.cpp:275:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Projector.cpp",
    "line": 277,
    "function": null,
    "comment": "Projector.cpp:277:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Projector.cpp",
    "line": 278,
    "function": null,
    "comment": "Projector.cpp:278:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "Projector.cpp",
    "line": 282,
    "function": null,
    "comment": "Projector.cpp:282:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Projector.cpp",
    "line": 285,
    "function": null,
    "comment": "Projector.cpp:285:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Projector.cpp",
    "line": 288,
    "function": null,
    "comment": "Projector.cpp:288:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Projector.cpp",
    "line": 289,
    "function": null,
    "comment": "Projector.cpp:289:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Projector.cpp",
    "line": 291,
    "function": null,
    "comment": "Projector.cpp:291:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Projector.cpp",
    "line": 292,
    "function": null,
    "comment": "Projector.cpp:292:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Projector.cpp",
    "line": 292,
    "function": null,
    "comment": "Projector.cpp:292:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Projector.cpp",
    "line": 296,
    "function": null,
    "comment": "Projector.cpp:296:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Projector.cpp",
    "line": 300,
    "function": null,
    "comment": "Projector.cpp:300:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Projector.cpp",
    "line": 302,
    "function": null,
    "comment": "Projector.cpp:302:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Projector.cpp",
    "line": 310,
    "function": null,
    "comment": "Projector.cpp:310:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Projector.cpp",
    "line": 311,
    "function": null,
    "comment": "Projector.cpp:311:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Projector.cpp",
    "line": 314,
    "function": null,
    "comment": "Projector.cpp:314:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Projector.cpp",
    "line": 315,
    "function": null,
    "comment": "Projector.cpp:315:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Projector.cpp",
    "line": 318,
    "function": null,
    "comment": "Projector.cpp:318:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Projector.cpp",
    "line": 319,
    "function": null,
    "comment": "Projector.cpp:319:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Projector.cpp",
    "line": 320,
    "function": null,
    "comment": "Projector.cpp:320:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Projector.cpp",
    "line": 322,
    "function": null,
    "comment": "Projector.cpp:322:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Projector.cpp",
    "line": 325,
    "function": null,
    "comment": "Projector.cpp:325:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Projector.cpp",
    "line": 327,
    "function": null,
    "comment": "Projector.cpp:327:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "Projector.cpp",
    "line": 329,
    "function": null,
    "comment": "Projector.cpp:329:  Using deprecated casting style.  Use static_cast<float>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "Projector.cpp",
    "line": 330,
    "function": null,
    "comment": "Projector.cpp:330:  Using deprecated casting style.  Use static_cast<float>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Projector.cpp",
    "line": 332,
    "function": null,
    "comment": "Projector.cpp:332:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Projector.cpp",
    "line": 334,
    "function": null,
    "comment": "Projector.cpp:334:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "Projector.cpp",
    "line": 342,
    "function": null,
    "comment": "Projector.cpp:342:  Anonymous namespace should be terminated with '// namespace'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Projector.cpp",
    "line": 343,
    "function": null,
    "comment": "Projector.cpp:343:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Projector.cpp",
    "line": 344,
    "function": null,
    "comment": "Projector.cpp:344:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "Projector.cpp",
    "line": 344,
    "function": null,
    "comment": "Projector.cpp:344:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Projector.cpp",
    "line": 345,
    "function": null,
    "comment": "Projector.cpp:345:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Projector.cpp",
    "line": 346,
    "function": null,
    "comment": "Projector.cpp:346:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Projector.cpp",
    "line": 347,
    "function": null,
    "comment": "Projector.cpp:347:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Projector.cpp",
    "line": 347,
    "function": null,
    "comment": "Projector.cpp:347:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Projector.cpp",
    "line": 353,
    "function": null,
    "comment": "Projector.cpp:353:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Projector.cpp",
    "line": 354,
    "function": null,
    "comment": "Projector.cpp:354:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Projector.cpp",
    "line": 355,
    "function": null,
    "comment": "Projector.cpp:355:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "Projector.cpp",
    "line": 357,
    "function": null,
    "comment": "Projector.cpp:357:  Using deprecated casting style.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Projector.cpp",
    "line": 358,
    "function": null,
    "comment": "Projector.cpp:358:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Projector.cpp",
    "line": 362,
    "function": null,
    "comment": "Projector.cpp:362:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Projector.cpp",
    "line": 373,
    "function": null,
    "comment": "Projector.cpp:373:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "Projector.cpp",
    "line": 384,
    "function": null,
    "comment": "Projector.cpp:384:  Using deprecated casting style.  Use static_cast<float>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Projector.cpp",
    "line": 387,
    "function": null,
    "comment": "Projector.cpp:387:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "Projector.cpp",
    "line": 387,
    "function": null,
    "comment": "Projector.cpp:387:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "Projector.cpp",
    "line": 387,
    "function": null,
    "comment": "Projector.cpp:387:  Using deprecated casting style.  Use static_cast<float>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Projector.cpp",
    "line": 390,
    "function": null,
    "comment": "Projector.cpp:390:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Projector.cpp",
    "line": 397,
    "function": null,
    "comment": "Projector.cpp:397:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Projector.cpp",
    "line": 398,
    "function": null,
    "comment": "Projector.cpp:398:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "Projector.cpp",
    "line": 403,
    "function": null,
    "comment": "Projector.cpp:403:  Namespace should be terminated with '// namespace pano'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "Projector.cpp",
    "line": 156,
    "function": null,
    "comment": "Projector.cpp:156:  Add #include <algorithm> for transform  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "Camera.cpp",
    "line": null,
    "function": null,
    "comment": "Camera.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "Camera.cpp",
    "line": 13,
    "function": null,
    "comment": "Camera.cpp:13:  Include 'opencv2/calib3d/calib3d.hpp' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "Camera.cpp",
    "line": 18,
    "function": null,
    "comment": "Camera.cpp:18:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Camera.cpp",
    "line": 21,
    "function": null,
    "comment": "Camera.cpp:21:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Camera.cpp",
    "line": 23,
    "function": null,
    "comment": "Camera.cpp:23:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Camera.cpp",
    "line": 25,
    "function": null,
    "comment": "Camera.cpp:25:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "Camera.cpp",
    "line": 25,
    "function": null,
    "comment": "Camera.cpp:25:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& K  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "Camera.cpp",
    "line": 25,
    "function": null,
    "comment": "Camera.cpp:25:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& distortion  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "Camera.cpp",
    "line": 25,
    "function": null,
    "comment": "Camera.cpp:25:  Is this a non-const reference? If so, make const or use a pointer: cv::Size & img_size  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Camera.cpp",
    "line": 26,
    "function": null,
    "comment": "Camera.cpp:26:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Camera.cpp",
    "line": 32,
    "function": null,
    "comment": "Camera.cpp:32:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Camera.cpp",
    "line": 39,
    "function": null,
    "comment": "Camera.cpp:39:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "Camera.cpp",
    "line": 41,
    "function": null,
    "comment": "Camera.cpp:41:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Camera.cpp",
    "line": 42,
    "function": null,
    "comment": "Camera.cpp:42:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "Camera.cpp",
    "line": 55,
    "function": null,
    "comment": "Camera.cpp:55:  Anonymous namespace should be terminated with '// namespace'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Camera.cpp",
    "line": 60,
    "function": null,
    "comment": "Camera.cpp:60:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Camera.cpp",
    "line": 61,
    "function": null,
    "comment": "Camera.cpp:61:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Camera.cpp",
    "line": 61,
    "function": null,
    "comment": "Camera.cpp:61:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Camera.cpp",
    "line": 66,
    "function": null,
    "comment": "Camera.cpp:66:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Camera.cpp",
    "line": 70,
    "function": null,
    "comment": "Camera.cpp:70:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Camera.cpp",
    "line": 71,
    "function": null,
    "comment": "Camera.cpp:71:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Camera.cpp",
    "line": 71,
    "function": null,
    "comment": "Camera.cpp:71:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "Camera.cpp",
    "line": 73,
    "function": null,
    "comment": "Camera.cpp:73:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "Camera.cpp",
    "line": 73,
    "function": null,
    "comment": "Camera.cpp:73:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "Camera.cpp",
    "line": 74,
    "function": null,
    "comment": "Camera.cpp:74:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "Camera.cpp",
    "line": 74,
    "function": null,
    "comment": "Camera.cpp:74:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "Camera.cpp",
    "line": 74,
    "function": null,
    "comment": "Camera.cpp:74:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "Camera.cpp",
    "line": 76,
    "function": null,
    "comment": "Camera.cpp:76:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "Camera.cpp",
    "line": 80,
    "function": null,
    "comment": "Camera.cpp:80:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "Camera.cpp",
    "line": 80,
    "function": null,
    "comment": "Camera.cpp:80:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "Camera.cpp",
    "line": 80,
    "function": null,
    "comment": "Camera.cpp:80:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Use 2 spaces for indentation.",
    "file": "Camera.cpp",
    "line": 81,
    "function": null,
    "comment": "Camera.cpp:81:  Weird number of spaces at line-start.  Are you using a 2-space indent?  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "Camera.cpp",
    "line": 81,
    "function": null,
    "comment": "Camera.cpp:81:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "Camera.cpp",
    "line": 81,
    "function": null,
    "comment": "Camera.cpp:81:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "Camera.cpp",
    "line": 81,
    "function": null,
    "comment": "Camera.cpp:81:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "Camera.cpp",
    "line": 82,
    "function": null,
    "comment": "Camera.cpp:82:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Use 2 spaces for indentation.",
    "file": "Camera.cpp",
    "line": 83,
    "function": null,
    "comment": "Camera.cpp:83:  Weird number of spaces at line-start.  Are you using a 2-space indent?  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","indentation"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "Camera.cpp",
    "line": 83,
    "function": null,
    "comment": "Camera.cpp:83:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "Camera.cpp",
    "line": 83,
    "function": null,
    "comment": "Camera.cpp:83:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a closing brace, if it does not end the line (for instance, '} else {').",
    "file": "Camera.cpp",
    "line": 83,
    "function": null,
    "comment": "Camera.cpp:83:  Missing space before else  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Use 2 spaces for indentation.",
    "file": "Camera.cpp",
    "line": 84,
    "function": null,
    "comment": "Camera.cpp:84:  Weird number of spaces at line-start.  Are you using a 2-space indent?  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Camera.cpp",
    "line": 86,
    "function": null,
    "comment": "Camera.cpp:86:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Camera.cpp",
    "line": 87,
    "function": null,
    "comment": "Camera.cpp:87:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Camera.cpp",
    "line": 89,
    "function": null,
    "comment": "Camera.cpp:89:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use 2 spaces for indentation.",
    "file": "Camera.cpp",
    "line": 90,
    "function": null,
    "comment": "Camera.cpp:90:  Weird number of spaces at line-start.  Are you using a 2-space indent?  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Camera.cpp",
    "line": 92,
    "function": null,
    "comment": "Camera.cpp:92:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Camera.cpp",
    "line": 93,
    "function": null,
    "comment": "Camera.cpp:93:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "Camera.cpp",
    "line": 96,
    "function": null,
    "comment": "Camera.cpp:96:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Camera.cpp",
    "line": 99,
    "function": null,
    "comment": "Camera.cpp:99:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "Camera.cpp",
    "line": 100,
    "function": null,
    "comment": "Camera.cpp:100:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat & m  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Camera.cpp",
    "line": 101,
    "function": null,
    "comment": "Camera.cpp:101:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "Camera.cpp",
    "line": 108,
    "function": null,
    "comment": "Camera.cpp:108:  Anonymous namespace should be terminated with '// namespace'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Camera.cpp",
    "line": 110,
    "function": null,
    "comment": "Camera.cpp:110:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Camera.cpp",
    "line": 118,
    "function": null,
    "comment": "Camera.cpp:118:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Camera.cpp",
    "line": 120,
    "function": null,
    "comment": "Camera.cpp:120:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Camera.cpp",
    "line": 121,
    "function": null,
    "comment": "Camera.cpp:121:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Camera.cpp",
    "line": 126,
    "function": null,
    "comment": "Camera.cpp:126:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Camera.cpp",
    "line": 127,
    "function": null,
    "comment": "Camera.cpp:127:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "Camera.cpp",
    "line": 136,
    "function": null,
    "comment": "Camera.cpp:136:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "Camera.cpp",
    "line": 136,
    "function": null,
    "comment": "Camera.cpp:136:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "Camera.cpp",
    "line": 136,
    "function": null,
    "comment": "Camera.cpp:136:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "Camera.cpp",
    "line": 138,
    "function": null,
    "comment": "Camera.cpp:138:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "Camera.cpp",
    "line": 139,
    "function": null,
    "comment": "Camera.cpp:139:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "Camera.cpp",
    "line": 140,
    "function": null,
    "comment": "Camera.cpp:140:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "Camera.cpp",
    "line": 141,
    "function": null,
    "comment": "Camera.cpp:141:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "Camera.cpp",
    "line": 149,
    "function": null,
    "comment": "Camera.cpp:149:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "Camera.cpp",
    "line": 149,
    "function": null,
    "comment": "Camera.cpp:149:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "Camera.cpp",
    "line": 150,
    "function": null,
    "comment": "Camera.cpp:150:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "Camera.cpp",
    "line": 150,
    "function": null,
    "comment": "Camera.cpp:150:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "Camera.cpp",
    "line": 151,
    "function": null,
    "comment": "Camera.cpp:151:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "Camera.cpp",
    "line": 152,
    "function": null,
    "comment": "Camera.cpp:152:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Camera.cpp",
    "line": 155,
    "function": null,
    "comment": "Camera.cpp:155:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "Camera.cpp",
    "line": 157,
    "function": null,
    "comment": "Camera.cpp:157:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "Camera.cpp",
    "line": 160,
    "function": null,
    "comment": "Camera.cpp:160:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Camera.cpp",
    "line": 167,
    "function": null,
    "comment": "Camera.cpp:167:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "Camera.cpp",
    "line": 170,
    "function": null,
    "comment": "Camera.cpp:170:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "Camera.cpp",
    "line": 172,
    "function": null,
    "comment": "Camera.cpp:172:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "Camera.cpp",
    "line": 172,
    "function": null,
    "comment": "Camera.cpp:172:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "Camera.cpp",
    "line": 173,
    "function": null,
    "comment": "Camera.cpp:173:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "Camera.cpp",
    "line": 173,
    "function": null,
    "comment": "Camera.cpp:173:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Camera.cpp",
    "line": 178,
    "function": null,
    "comment": "Camera.cpp:178:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "Camera.cpp",
    "line": 180,
    "function": null,
    "comment": "Camera.cpp:180:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Don't use a semicolon to denote an empty statement. Use {} instead.",
    "file": "Camera.cpp",
    "line": 181,
    "function": null,
    "comment": "Camera.cpp:181:  Line contains only semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","google-cpp","semicolon","empty-statement","empty-block"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Camera.cpp",
    "line": 184,
    "function": null,
    "comment": "Camera.cpp:184:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "Camera.cpp",
    "line": 198,
    "function": null,
    "comment": "Camera.cpp:198:  Namespace should be terminated with '// namespace pano'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "Camera.cpp",
    "line": 149,
    "function": null,
    "comment": "Camera.cpp:149:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "Camera.cpp",
    "line": 92,
    "function": null,
    "comment": "Camera.cpp:92:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "pano_core.cpp",
    "line": null,
    "function": null,
    "comment": "pano_core.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "pano_core.cpp",
    "line": 1,
    "function": null,
    "comment": "pano_core.cpp:1:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "pano_core.cpp",
    "line": 1,
    "function": null,
    "comment": "pano_core.cpp:1:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "Blender.cpp",
    "line": null,
    "function": null,
    "comment": "Blender.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "Blender.cpp",
    "line": 15,
    "function": null,
    "comment": "Blender.cpp:15:  Found C++ system header after other header. Should be: Blender.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "Blender.cpp",
    "line": 17,
    "function": null,
    "comment": "Blender.cpp:17:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "Blender.cpp",
    "line": 20,
    "function": null,
    "comment": "Blender.cpp:20:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Blender.cpp",
    "line": 22,
    "function": null,
    "comment": "Blender.cpp:22:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Blender.cpp",
    "line": 26,
    "function": null,
    "comment": "Blender.cpp:26:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Blender.cpp",
    "line": 27,
    "function": null,
    "comment": "Blender.cpp:27:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Blender.cpp",
    "line": 27,
    "function": null,
    "comment": "Blender.cpp:27:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "Blender.cpp",
    "line": 30,
    "function": null,
    "comment": "Blender.cpp:30:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "Blender.cpp",
    "line": 31,
    "function": null,
    "comment": "Blender.cpp:31:  Is this a non-const reference? If so, make const or use a pointer: Mat& alpha  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Blender.cpp",
    "line": 32,
    "function": null,
    "comment": "Blender.cpp:32:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Blender.cpp",
    "line": 34,
    "function": null,
    "comment": "Blender.cpp:34:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Blender.cpp",
    "line": 39,
    "function": null,
    "comment": "Blender.cpp:39:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Blender.cpp",
    "line": 44,
    "function": null,
    "comment": "Blender.cpp:44:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Blender.cpp",
    "line": 46,
    "function": null,
    "comment": "Blender.cpp:46:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Blender.cpp",
    "line": 52,
    "function": null,
    "comment": "Blender.cpp:52:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Blender.cpp",
    "line": 54,
    "function": null,
    "comment": "Blender.cpp:54:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Blender.cpp",
    "line": 55,
    "function": null,
    "comment": "Blender.cpp:55:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Blender.cpp",
    "line": 56,
    "function": null,
    "comment": "Blender.cpp:56:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Blender.cpp",
    "line": 61,
    "function": null,
    "comment": "Blender.cpp:61:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Blender.cpp",
    "line": 63,
    "function": null,
    "comment": "Blender.cpp:63:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Blender.cpp",
    "line": 66,
    "function": null,
    "comment": "Blender.cpp:66:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Blender.cpp",
    "line": 71,
    "function": null,
    "comment": "Blender.cpp:71:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Blender.cpp",
    "line": 73,
    "function": null,
    "comment": "Blender.cpp:73:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Blender.cpp",
    "line": 80,
    "function": null,
    "comment": "Blender.cpp:80:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Blender.cpp",
    "line": 81,
    "function": null,
    "comment": "Blender.cpp:81:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Blender.cpp",
    "line": 88,
    "function": null,
    "comment": "Blender.cpp:88:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Blender.cpp",
    "line": 89,
    "function": null,
    "comment": "Blender.cpp:89:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Blender.cpp",
    "line": 101,
    "function": null,
    "comment": "Blender.cpp:101:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Blender.cpp",
    "line": 102,
    "function": null,
    "comment": "Blender.cpp:102:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Blender.cpp",
    "line": 102,
    "function": null,
    "comment": "Blender.cpp:102:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Blender.cpp",
    "line": 105,
    "function": null,
    "comment": "Blender.cpp:105:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "Blender.cpp",
    "line": 105,
    "function": null,
    "comment": "Blender.cpp:105:  Is this a non-const reference? If so, make const or use a pointer: Mat& rgb1  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "Blender.cpp",
    "line": 105,
    "function": null,
    "comment": "Blender.cpp:105:  Is this a non-const reference? If so, make const or use a pointer: Mat& rgb_dest  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Blender.cpp",
    "line": 106,
    "function": null,
    "comment": "Blender.cpp:106:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Blender.cpp",
    "line": 113,
    "function": null,
    "comment": "Blender.cpp:113:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Blender.cpp",
    "line": 116,
    "function": null,
    "comment": "Blender.cpp:116:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Blender.cpp",
    "line": 119,
    "function": null,
    "comment": "Blender.cpp:119:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "Blender.cpp",
    "line": 124,
    "function": null,
    "comment": "Blender.cpp:124:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Blender.cpp",
    "line": 128,
    "function": null,
    "comment": "Blender.cpp:128:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "Blender.cpp",
    "line": 138,
    "function": null,
    "comment": "Blender.cpp:138:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "Blender.cpp",
    "line": 142,
    "function": null,
    "comment": "Blender.cpp:142:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Blender.cpp",
    "line": 143,
    "function": null,
    "comment": "Blender.cpp:143:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Blender.cpp",
    "line": 144,
    "function": null,
    "comment": "Blender.cpp:144:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Blender.cpp",
    "line": 149,
    "function": null,
    "comment": "Blender.cpp:149:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "Blender.cpp",
    "line": 156,
    "function": null,
    "comment": "Blender.cpp:156:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "Blender.cpp",
    "line": 159,
    "function": null,
    "comment": "Blender.cpp:159:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Blender.cpp",
    "line": 164,
    "function": null,
    "comment": "Blender.cpp:164:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Blender.cpp",
    "line": 168,
    "function": null,
    "comment": "Blender.cpp:168:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Blender.cpp",
    "line": 179,
    "function": null,
    "comment": "Blender.cpp:179:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Blender.cpp",
    "line": 182,
    "function": null,
    "comment": "Blender.cpp:182:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Blender.cpp",
    "line": 183,
    "function": null,
    "comment": "Blender.cpp:183:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Blender.cpp",
    "line": 192,
    "function": null,
    "comment": "Blender.cpp:192:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Blender.cpp",
    "line": 195,
    "function": null,
    "comment": "Blender.cpp:195:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Blender.cpp",
    "line": 196,
    "function": null,
    "comment": "Blender.cpp:196:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Blender.cpp",
    "line": 199,
    "function": null,
    "comment": "Blender.cpp:199:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Blender.cpp",
    "line": 204,
    "function": null,
    "comment": "Blender.cpp:204:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Blender.cpp",
    "line": 206,
    "function": null,
    "comment": "Blender.cpp:206:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Blender.cpp",
    "line": 208,
    "function": null,
    "comment": "Blender.cpp:208:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "Blender.cpp",
    "line": 209,
    "function": null,
    "comment": "Blender.cpp:209:  Using C-style cast.  Use static_cast<float>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "Blender.cpp",
    "line": 210,
    "function": null,
    "comment": "Blender.cpp:210:  Using C-style cast.  Use static_cast<float>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "Blender.cpp",
    "line": 211,
    "function": null,
    "comment": "Blender.cpp:211:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "Blender.cpp",
    "line": 211,
    "function": null,
    "comment": "Blender.cpp:211:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "Blender.cpp",
    "line": 212,
    "function": null,
    "comment": "Blender.cpp:212:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "Blender.cpp",
    "line": 212,
    "function": null,
    "comment": "Blender.cpp:212:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Blender.cpp",
    "line": 225,
    "function": null,
    "comment": "Blender.cpp:225:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "Blender.cpp",
    "line": 228,
    "function": null,
    "comment": "Blender.cpp:228:  Using C-style cast.  Use static_cast<float>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "Blender.cpp",
    "line": 229,
    "function": null,
    "comment": "Blender.cpp:229:  Using C-style cast.  Use static_cast<float>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "Blender.cpp",
    "line": 230,
    "function": null,
    "comment": "Blender.cpp:230:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "Blender.cpp",
    "line": 230,
    "function": null,
    "comment": "Blender.cpp:230:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "Blender.cpp",
    "line": 231,
    "function": null,
    "comment": "Blender.cpp:231:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "Blender.cpp",
    "line": 231,
    "function": null,
    "comment": "Blender.cpp:231:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "Blender.cpp",
    "line": 232,
    "function": null,
    "comment": "Blender.cpp:232:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "Blender.cpp",
    "line": 232,
    "function": null,
    "comment": "Blender.cpp:232:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "Blender.cpp",
    "line": 242,
    "function": null,
    "comment": "Blender.cpp:242:  Namespace should be terminated with '// namespace pano'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "Blender.cpp",
    "line": 141,
    "function": null,
    "comment": "Blender.cpp:141:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "Blender.cpp",
    "line": 232,
    "function": null,
    "comment": "Blender.cpp:232:  Add #include <algorithm> for max  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "Blender.cpp",
    "line": 136,
    "function": null,
    "comment": "Blender.cpp:136:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "Blender.cpp",
    "line": 192,
    "function": null,
    "comment": "Blender.cpp:192:  Add #include <set> for set<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "panoutils.cpp",
    "line": null,
    "function": null,
    "comment": "panoutils.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "panoutils.cpp",
    "line": 4,
    "function": null,
    "comment": "panoutils.cpp:4:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "panoutils.cpp",
    "line": 4,
    "function": null,
    "comment": "panoutils.cpp:4:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "panoutils.cpp",
    "line": 6,
    "function": null,
    "comment": "panoutils.cpp:6:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "panoutils.cpp",
    "line": 6,
    "function": null,
    "comment": "panoutils.cpp:6:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& output  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "panoutils.cpp",
    "line": 7,
    "function": null,
    "comment": "panoutils.cpp:7:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "panoutils.cpp",
    "line": 7,
    "function": null,
    "comment": "panoutils.cpp:7:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "panoutils.cpp",
    "line": 8,
    "function": null,
    "comment": "panoutils.cpp:8:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "panoutils.cpp",
    "line": 9,
    "function": null,
    "comment": "panoutils.cpp:9:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "panoutils.cpp",
    "line": 10,
    "function": null,
    "comment": "panoutils.cpp:10:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "panoutils.cpp",
    "line": 10,
    "function": null,
    "comment": "panoutils.cpp:10:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "panoutils.cpp",
    "line": 11,
    "function": null,
    "comment": "panoutils.cpp:11:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "panoutils.cpp",
    "line": 12,
    "function": null,
    "comment": "panoutils.cpp:12:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "panoutils.cpp",
    "line": 15,
    "function": null,
    "comment": "panoutils.cpp:15:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Strings and /**/-comments should not extend beyond one line.",
    "file": "panoutils.cpp",
    "line": 16,
    "function": null,
    "comment": "panoutils.cpp:16:  Complex multi-line /*...*/-style comment found. Lint may give bogus warnings.  Consider replacing these with //-style comments, with #if 0...#endif, or with more clearly structured multi-line comments.  [readability/multiline_comme",
    "tags": ["comments","code-standards","google-cpp","multiline-comments","strings","multiline-strings"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "panoutils.cpp",
    "line": 16,
    "function": null,
    "comment": "panoutils.cpp:16:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "panoutils.cpp",
    "line": 16,
    "function": null,
    "comment": "panoutils.cpp:16:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "panoutils.cpp",
    "line": 18,
    "function": null,
    "comment": "panoutils.cpp:18:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "panoutils.cpp",
    "line": 18,
    "function": null,
    "comment": "panoutils.cpp:18:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "panoutils.cpp",
    "line": 19,
    "function": null,
    "comment": "panoutils.cpp:19:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "panoutils.cpp",
    "line": 21,
    "function": null,
    "comment": "panoutils.cpp:21:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "panoutils.cpp",
    "line": 22,
    "function": null,
    "comment": "panoutils.cpp:22:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "panoutils.cpp",
    "line": 23,
    "function": null,
    "comment": "panoutils.cpp:23:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "panoutils.cpp",
    "line": 24,
    "function": null,
    "comment": "panoutils.cpp:24:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "panoutils.cpp",
    "line": 25,
    "function": null,
    "comment": "panoutils.cpp:25:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "panoutils.cpp",
    "line": 25,
    "function": null,
    "comment": "panoutils.cpp:25:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "panoutils.cpp",
    "line": 26,
    "function": null,
    "comment": "panoutils.cpp:26:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "panoutils.cpp",
    "line": 30,
    "function": null,
    "comment": "panoutils.cpp:30:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "panoutils.cpp",
    "line": 30,
    "function": null,
    "comment": "panoutils.cpp:30:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& output  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "panoutils.cpp",
    "line": 31,
    "function": null,
    "comment": "panoutils.cpp:31:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "panoutils.cpp",
    "line": 31,
    "function": null,
    "comment": "panoutils.cpp:31:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "panoutils.cpp",
    "line": 32,
    "function": null,
    "comment": "panoutils.cpp:32:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "panoutils.cpp",
    "line": 33,
    "function": null,
    "comment": "panoutils.cpp:33:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "panoutils.cpp",
    "line": 34,
    "function": null,
    "comment": "panoutils.cpp:34:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "panoutils.cpp",
    "line": 34,
    "function": null,
    "comment": "panoutils.cpp:34:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "panoutils.cpp",
    "line": 35,
    "function": null,
    "comment": "panoutils.cpp:35:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "panoutils.cpp",
    "line": 36,
    "function": null,
    "comment": "panoutils.cpp:36:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "panoutils.cpp",
    "line": 39,
    "function": null,
    "comment": "panoutils.cpp:39:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Strings and /**/-comments should not extend beyond one line.",
    "file": "panoutils.cpp",
    "line": 40,
    "function": null,
    "comment": "panoutils.cpp:40:  Complex multi-line /*...*/-style comment found. Lint may give bogus warnings.  Consider replacing these with //-style comments, with #if 0...#endif, or with more clearly structured multi-line comments.  [readability/multiline_comme",
    "tags": ["comments","code-standards","google-cpp","multiline-comments","strings","multiline-strings"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "panoutils.cpp",
    "line": 40,
    "function": null,
    "comment": "panoutils.cpp:40:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "panoutils.cpp",
    "line": 40,
    "function": null,
    "comment": "panoutils.cpp:40:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "panoutils.cpp",
    "line": 42,
    "function": null,
    "comment": "panoutils.cpp:42:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "panoutils.cpp",
    "line": 42,
    "function": null,
    "comment": "panoutils.cpp:42:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "panoutils.cpp",
    "line": 43,
    "function": null,
    "comment": "panoutils.cpp:43:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "panoutils.cpp",
    "line": 45,
    "function": null,
    "comment": "panoutils.cpp:45:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "panoutils.cpp",
    "line": 46,
    "function": null,
    "comment": "panoutils.cpp:46:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "panoutils.cpp",
    "line": 47,
    "function": null,
    "comment": "panoutils.cpp:47:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "panoutils.cpp",
    "line": 48,
    "function": null,
    "comment": "panoutils.cpp:48:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "panoutils.cpp",
    "line": 49,
    "function": null,
    "comment": "panoutils.cpp:49:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "panoutils.cpp",
    "line": 49,
    "function": null,
    "comment": "panoutils.cpp:49:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "panoutils.cpp",
    "line": 50,
    "function": null,
    "comment": "panoutils.cpp:50:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "panoutils.cpp",
    "line": 54,
    "function": null,
    "comment": "panoutils.cpp:54:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "panoutils.cpp",
    "line": 54,
    "function": null,
    "comment": "panoutils.cpp:54:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "panoutils.cpp",
    "line": 36,
    "function": null,
    "comment": "panoutils.cpp:36:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "MoleculeProcessor.cpp",
    "line": null,
    "function": null,
    "comment": "MoleculeProcessor.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "MoleculeProcessor.cpp",
    "line": 10,
    "function": null,
    "comment": "MoleculeProcessor.cpp:10:  Include 'pano_core/ImageAtom.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "MoleculeProcessor.cpp",
    "line": 13,
    "function": null,
    "comment": "MoleculeProcessor.cpp:13:  Include 'pano_core/feature_utils.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "MoleculeProcessor.cpp",
    "line": 15,
    "function": null,
    "comment": "MoleculeProcessor.cpp:15:  Found C++ system header after other header. Should be: MoleculeProcessor.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "MoleculeProcessor.cpp",
    "line": 16,
    "function": null,
    "comment": "MoleculeProcessor.cpp:16:  Found C++ system header after other header. Should be: MoleculeProcessor.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "MoleculeProcessor.cpp",
    "line": 17,
    "function": null,
    "comment": "MoleculeProcessor.cpp:17:  Found C++ system header after other header. Should be: MoleculeProcessor.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "MoleculeProcessor.cpp",
    "line": 18,
    "function": null,
    "comment": "MoleculeProcessor.cpp:18:  Found C++ system header after other header. Should be: MoleculeProcessor.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "MoleculeProcessor.cpp",
    "line": 20,
    "function": null,
    "comment": "MoleculeProcessor.cpp:20:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "MoleculeProcessor.cpp",
    "line": 21,
    "function": null,
    "comment": "MoleculeProcessor.cpp:21:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 23,
    "function": null,
    "comment": "MoleculeProcessor.cpp:23:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "MoleculeProcessor.cpp",
    "line": 27,
    "function": null,
    "comment": "MoleculeProcessor.cpp:27:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 30,
    "function": null,
    "comment": "MoleculeProcessor.cpp:30:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "MoleculeProcessor.cpp",
    "line": 33,
    "function": null,
    "comment": "MoleculeProcessor.cpp:33:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 34,
    "function": null,
    "comment": "MoleculeProcessor.cpp:34:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't use a semicolon to denote an empty statement. Use {} instead.",
    "file": "MoleculeProcessor.cpp",
    "line": 36,
    "function": null,
    "comment": "MoleculeProcessor.cpp:36:  Line contains only semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","google-cpp","semicolon","empty-statement","empty-block"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "MoleculeProcessor.cpp",
    "line": 45,
    "function": null,
    "comment": "MoleculeProcessor.cpp:45:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 47,
    "function": null,
    "comment": "MoleculeProcessor.cpp:47:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 51,
    "function": null,
    "comment": "MoleculeProcessor.cpp:51:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 57,
    "function": null,
    "comment": "MoleculeProcessor.cpp:57:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 62,
    "function": null,
    "comment": "MoleculeProcessor.cpp:62:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "MoleculeProcessor.cpp",
    "line": 62,
    "function": null,
    "comment": "MoleculeProcessor.cpp:62:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "MoleculeProcessor.cpp",
    "line": 66,
    "function": null,
    "comment": "MoleculeProcessor.cpp:66:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 67,
    "function": null,
    "comment": "MoleculeProcessor.cpp:67:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 71,
    "function": null,
    "comment": "MoleculeProcessor.cpp:71:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "MoleculeProcessor.cpp",
    "line": 75,
    "function": null,
    "comment": "MoleculeProcessor.cpp:75:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 76,
    "function": null,
    "comment": "MoleculeProcessor.cpp:76:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "MoleculeProcessor.cpp",
    "line": 77,
    "function": null,
    "comment": "MoleculeProcessor.cpp:77:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 79,
    "function": null,
    "comment": "MoleculeProcessor.cpp:79:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "MoleculeProcessor.cpp",
    "line": 80,
    "function": null,
    "comment": "MoleculeProcessor.cpp:80:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 88,
    "function": null,
    "comment": "MoleculeProcessor.cpp:88:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "MoleculeProcessor.cpp",
    "line": 89,
    "function": null,
    "comment": "MoleculeProcessor.cpp:89:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 91,
    "function": null,
    "comment": "MoleculeProcessor.cpp:91:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 95,
    "function": null,
    "comment": "MoleculeProcessor.cpp:95:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "MoleculeProcessor.cpp",
    "line": 98,
    "function": null,
    "comment": "MoleculeProcessor.cpp:98:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "MoleculeProcessor.cpp",
    "line": 108,
    "function": null,
    "comment": "MoleculeProcessor.cpp:108:  Is this a non-const reference? If so, make const or use a pointer: ImageMolecule& mol  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 109,
    "function": null,
    "comment": "MoleculeProcessor.cpp:109:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "MoleculeProcessor.cpp",
    "line": 110,
    "function": null,
    "comment": "MoleculeProcessor.cpp:110:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 120,
    "function": null,
    "comment": "MoleculeProcessor.cpp:120:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "MoleculeProcessor.cpp",
    "line": 122,
    "function": null,
    "comment": "MoleculeProcessor.cpp:122:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 127,
    "function": null,
    "comment": "MoleculeProcessor.cpp:127:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "MoleculeProcessor.cpp",
    "line": 132,
    "function": null,
    "comment": "MoleculeProcessor.cpp:132:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 133,
    "function": null,
    "comment": "MoleculeProcessor.cpp:133:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 138,
    "function": null,
    "comment": "MoleculeProcessor.cpp:138:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "MoleculeProcessor.cpp",
    "line": 141,
    "function": null,
    "comment": "MoleculeProcessor.cpp:141:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 148,
    "function": null,
    "comment": "MoleculeProcessor.cpp:148:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 150,
    "function": null,
    "comment": "MoleculeProcessor.cpp:150:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "MoleculeProcessor.cpp",
    "line": 154,
    "function": null,
    "comment": "MoleculeProcessor.cpp:154:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 155,
    "function": null,
    "comment": "MoleculeProcessor.cpp:155:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "MoleculeProcessor.cpp",
    "line": 156,
    "function": null,
    "comment": "MoleculeProcessor.cpp:156:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "MoleculeProcessor.cpp",
    "line": 177,
    "function": null,
    "comment": "MoleculeProcessor.cpp:177:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 181,
    "function": null,
    "comment": "MoleculeProcessor.cpp:181:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "MoleculeProcessor.cpp",
    "line": 182,
    "function": null,
    "comment": "MoleculeProcessor.cpp:182:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 184,
    "function": null,
    "comment": "MoleculeProcessor.cpp:184:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "MoleculeProcessor.cpp",
    "line": 189,
    "function": null,
    "comment": "MoleculeProcessor.cpp:189:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 193,
    "function": null,
    "comment": "MoleculeProcessor.cpp:193:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "MoleculeProcessor.cpp",
    "line": 194,
    "function": null,
    "comment": "MoleculeProcessor.cpp:194:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "MoleculeProcessor.cpp",
    "line": 194,
    "function": null,
    "comment": "MoleculeProcessor.cpp:194:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 197,
    "function": null,
    "comment": "MoleculeProcessor.cpp:197:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "MoleculeProcessor.cpp",
    "line": 198,
    "function": null,
    "comment": "MoleculeProcessor.cpp:198:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 205,
    "function": null,
    "comment": "MoleculeProcessor.cpp:205:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 216,
    "function": null,
    "comment": "MoleculeProcessor.cpp:216:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 221,
    "function": null,
    "comment": "MoleculeProcessor.cpp:221:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 226,
    "function": null,
    "comment": "MoleculeProcessor.cpp:226:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 235,
    "function": null,
    "comment": "MoleculeProcessor.cpp:235:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 238,
    "function": null,
    "comment": "MoleculeProcessor.cpp:238:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 240,
    "function": null,
    "comment": "MoleculeProcessor.cpp:240:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 246,
    "function": null,
    "comment": "MoleculeProcessor.cpp:246:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 248,
    "function": null,
    "comment": "MoleculeProcessor.cpp:248:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not indent within a namespace.",
    "file": "MoleculeProcessor.cpp",
    "line": 254,
    "function": null,
    "comment": "MoleculeProcessor.cpp:254:  Do not indent within a namespace  [runtime/indentation_namespace] [4]",
    "tags": ["code-standards","formatting","google-cpp","indentation","namespace"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 255,
    "function": null,
    "comment": "MoleculeProcessor.cpp:255:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 258,
    "function": null,
    "comment": "MoleculeProcessor.cpp:258:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "MoleculeProcessor.cpp",
    "line": 259,
    "function": null,
    "comment": "MoleculeProcessor.cpp:259:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "MoleculeProcessor.cpp",
    "line": 261,
    "function": null,
    "comment": "MoleculeProcessor.cpp:261:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Do not indent within a namespace.",
    "file": "MoleculeProcessor.cpp",
    "line": 265,
    "function": null,
    "comment": "MoleculeProcessor.cpp:265:  Do not indent within a namespace  [runtime/indentation_namespace] [4]",
    "tags": ["code-standards","formatting","google-cpp","indentation","namespace"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 266,
    "function": null,
    "comment": "MoleculeProcessor.cpp:266:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 269,
    "function": null,
    "comment": "MoleculeProcessor.cpp:269:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "MoleculeProcessor.cpp",
    "line": 270,
    "function": null,
    "comment": "MoleculeProcessor.cpp:270:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "MoleculeProcessor.cpp",
    "line": 270,
    "function": null,
    "comment": "MoleculeProcessor.cpp:270:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "MoleculeProcessor.cpp",
    "line": 272,
    "function": null,
    "comment": "MoleculeProcessor.cpp:272:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "MoleculeProcessor.cpp",
    "line": 276,
    "function": null,
    "comment": "MoleculeProcessor.cpp:276:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "MoleculeProcessor.cpp",
    "line": 276,
    "function": null,
    "comment": "MoleculeProcessor.cpp:276:  Is this a non-const reference? If so, make const or use a pointer: MatchesVector& output  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 277,
    "function": null,
    "comment": "MoleculeProcessor.cpp:277:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "MoleculeProcessor.cpp",
    "line": 283,
    "function": null,
    "comment": "MoleculeProcessor.cpp:283:  Is this a non-const reference? If so, make const or use a pointer: MatchesVector& output  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 284,
    "function": null,
    "comment": "MoleculeProcessor.cpp:284:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "MoleculeProcessor.cpp",
    "line": 287,
    "function": null,
    "comment": "MoleculeProcessor.cpp:287:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "MoleculeProcessor.cpp",
    "line": 290,
    "function": null,
    "comment": "MoleculeProcessor.cpp:290:  Is this a non-const reference? If so, make const or use a pointer: vector<DMatch>& out  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 291,
    "function": null,
    "comment": "MoleculeProcessor.cpp:291:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 295,
    "function": null,
    "comment": "MoleculeProcessor.cpp:295:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 300,
    "function": null,
    "comment": "MoleculeProcessor.cpp:300:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "MoleculeProcessor.cpp",
    "line": 303,
    "function": null,
    "comment": "MoleculeProcessor.cpp:303:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "MoleculeProcessor.cpp",
    "line": 305,
    "function": null,
    "comment": "MoleculeProcessor.cpp:305:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "MoleculeProcessor.cpp",
    "line": 305,
    "function": null,
    "comment": "MoleculeProcessor.cpp:305:  Is this a non-const reference? If so, make const or use a pointer: vector<char>& mask  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 306,
    "function": null,
    "comment": "MoleculeProcessor.cpp:306:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 310,
    "function": null,
    "comment": "MoleculeProcessor.cpp:310:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "MoleculeProcessor.cpp",
    "line": 316,
    "function": null,
    "comment": "MoleculeProcessor.cpp:316:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "MoleculeProcessor.cpp",
    "line": 316,
    "function": null,
    "comment": "MoleculeProcessor.cpp:316:  Is this a non-const reference? If so, make const or use a pointer: vector<DMatch>& matches  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "MoleculeProcessor.cpp",
    "line": 316,
    "function": null,
    "comment": "MoleculeProcessor.cpp:316:  Is this a non-const reference? If so, make const or use a pointer: vector<DMatch>& tmatches  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 317,
    "function": null,
    "comment": "MoleculeProcessor.cpp:317:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 320,
    "function": null,
    "comment": "MoleculeProcessor.cpp:320:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "MoleculeProcessor.cpp",
    "line": 321,
    "function": null,
    "comment": "MoleculeProcessor.cpp:321:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 323,
    "function": null,
    "comment": "MoleculeProcessor.cpp:323:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "MoleculeProcessor.cpp",
    "line": 324,
    "function": null,
    "comment": "MoleculeProcessor.cpp:324:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 334,
    "function": null,
    "comment": "MoleculeProcessor.cpp:334:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "MoleculeProcessor.cpp",
    "line": 336,
    "function": null,
    "comment": "MoleculeProcessor.cpp:336:  Single-parameter constructors should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 338,
    "function": null,
    "comment": "MoleculeProcessor.cpp:338:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "MoleculeProcessor.cpp",
    "line": 340,
    "function": null,
    "comment": "MoleculeProcessor.cpp:340:  Is this a non-const reference? If so, make const or use a pointer: AtomPair& apair  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 341,
    "function": null,
    "comment": "MoleculeProcessor.cpp:341:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "MoleculeProcessor.cpp",
    "line": 345,
    "function": null,
    "comment": "MoleculeProcessor.cpp:345:  Anonymous namespace should be terminated with '// namespace'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "MoleculeProcessor.cpp",
    "line": 346,
    "function": null,
    "comment": "MoleculeProcessor.cpp:346:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "MoleculeProcessor.cpp",
    "line": 347,
    "function": null,
    "comment": "MoleculeProcessor.cpp:347:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 348,
    "function": null,
    "comment": "MoleculeProcessor.cpp:348:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "MoleculeProcessor.cpp",
    "line": 349,
    "function": null,
    "comment": "MoleculeProcessor.cpp:349:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "MoleculeProcessor.cpp",
    "line": 350,
    "function": null,
    "comment": "MoleculeProcessor.cpp:350:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "MoleculeProcessor.cpp",
    "line": 358,
    "function": null,
    "comment": "MoleculeProcessor.cpp:358:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "MoleculeProcessor.cpp",
    "line": 361,
    "function": null,
    "comment": "MoleculeProcessor.cpp:361:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "MoleculeProcessor.cpp",
    "line": 362,
    "function": null,
    "comment": "MoleculeProcessor.cpp:362:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "MoleculeProcessor.cpp",
    "line": 363,
    "function": null,
    "comment": "MoleculeProcessor.cpp:363:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 367,
    "function": null,
    "comment": "MoleculeProcessor.cpp:367:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 371,
    "function": null,
    "comment": "MoleculeProcessor.cpp:371:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 381,
    "function": null,
    "comment": "MoleculeProcessor.cpp:381:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 383,
    "function": null,
    "comment": "MoleculeProcessor.cpp:383:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "MoleculeProcessor.cpp",
    "line": 385,
    "function": null,
    "comment": "MoleculeProcessor.cpp:385:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 393,
    "function": null,
    "comment": "MoleculeProcessor.cpp:393:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 397,
    "function": null,
    "comment": "MoleculeProcessor.cpp:397:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 399,
    "function": null,
    "comment": "MoleculeProcessor.cpp:399:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 403,
    "function": null,
    "comment": "MoleculeProcessor.cpp:403:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 415,
    "function": null,
    "comment": "MoleculeProcessor.cpp:415:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "MoleculeProcessor.cpp",
    "line": 419,
    "function": null,
    "comment": "MoleculeProcessor.cpp:419:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 420,
    "function": null,
    "comment": "MoleculeProcessor.cpp:420:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "MoleculeProcessor.cpp",
    "line": 421,
    "function": null,
    "comment": "MoleculeProcessor.cpp:421:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 424,
    "function": null,
    "comment": "MoleculeProcessor.cpp:424:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "MoleculeProcessor.cpp",
    "line": 427,
    "function": null,
    "comment": "MoleculeProcessor.cpp:427:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "MoleculeProcessor.cpp",
    "line": 429,
    "function": null,
    "comment": "MoleculeProcessor.cpp:429:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 430,
    "function": null,
    "comment": "MoleculeProcessor.cpp:430:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "MoleculeProcessor.cpp",
    "line": 431,
    "function": null,
    "comment": "MoleculeProcessor.cpp:431:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 436,
    "function": null,
    "comment": "MoleculeProcessor.cpp:436:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "MoleculeProcessor.cpp",
    "line": 445,
    "function": null,
    "comment": "MoleculeProcessor.cpp:445:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 452,
    "function": null,
    "comment": "MoleculeProcessor.cpp:452:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "MoleculeProcessor.cpp",
    "line": 454,
    "function": null,
    "comment": "MoleculeProcessor.cpp:454:  Single-parameter constructors should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 456,
    "function": null,
    "comment": "MoleculeProcessor.cpp:456:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 459,
    "function": null,
    "comment": "MoleculeProcessor.cpp:459:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 461,
    "function": null,
    "comment": "MoleculeProcessor.cpp:461:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 466,
    "function": null,
    "comment": "MoleculeProcessor.cpp:466:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "MoleculeProcessor.cpp",
    "line": 469,
    "function": null,
    "comment": "MoleculeProcessor.cpp:469:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 473,
    "function": null,
    "comment": "MoleculeProcessor.cpp:473:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "MoleculeProcessor.cpp",
    "line": 476,
    "function": null,
    "comment": "MoleculeProcessor.cpp:476:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 485,
    "function": null,
    "comment": "MoleculeProcessor.cpp:485:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 488,
    "function": null,
    "comment": "MoleculeProcessor.cpp:488:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 494,
    "function": null,
    "comment": "MoleculeProcessor.cpp:494:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "MoleculeProcessor.cpp",
    "line": 499,
    "function": null,
    "comment": "MoleculeProcessor.cpp:499:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 500,
    "function": null,
    "comment": "MoleculeProcessor.cpp:500:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "MoleculeProcessor.cpp",
    "line": 501,
    "function": null,
    "comment": "MoleculeProcessor.cpp:501:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 506,
    "function": null,
    "comment": "MoleculeProcessor.cpp:506:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "MoleculeProcessor.cpp",
    "line": 507,
    "function": null,
    "comment": "MoleculeProcessor.cpp:507:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "MoleculeProcessor.cpp",
    "line": 509,
    "function": null,
    "comment": "MoleculeProcessor.cpp:509:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "MoleculeProcessor.cpp",
    "line": 514,
    "function": null,
    "comment": "MoleculeProcessor.cpp:514:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "MoleculeProcessor.cpp",
    "line": 517,
    "function": null,
    "comment": "MoleculeProcessor.cpp:517:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "MoleculeProcessor.cpp",
    "line": 520,
    "function": null,
    "comment": "MoleculeProcessor.cpp:520:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 521,
    "function": null,
    "comment": "MoleculeProcessor.cpp:521:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "MoleculeProcessor.cpp",
    "line": 522,
    "function": null,
    "comment": "MoleculeProcessor.cpp:522:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "MoleculeProcessor.cpp",
    "line": 526,
    "function": null,
    "comment": "MoleculeProcessor.cpp:526:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 527,
    "function": null,
    "comment": "MoleculeProcessor.cpp:527:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "MoleculeProcessor.cpp",
    "line": 529,
    "function": null,
    "comment": "MoleculeProcessor.cpp:529:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 533,
    "function": null,
    "comment": "MoleculeProcessor.cpp:533:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "MoleculeProcessor.cpp",
    "line": 534,
    "function": null,
    "comment": "MoleculeProcessor.cpp:534:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 542,
    "function": null,
    "comment": "MoleculeProcessor.cpp:542:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 544,
    "function": null,
    "comment": "MoleculeProcessor.cpp:544:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 552,
    "function": null,
    "comment": "MoleculeProcessor.cpp:552:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 554,
    "function": null,
    "comment": "MoleculeProcessor.cpp:554:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 562,
    "function": null,
    "comment": "MoleculeProcessor.cpp:562:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 566,
    "function": null,
    "comment": "MoleculeProcessor.cpp:566:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "MoleculeProcessor.cpp",
    "line": 570,
    "function": null,
    "comment": "MoleculeProcessor.cpp:570:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "MoleculeProcessor.cpp",
    "line": 571,
    "function": null,
    "comment": "MoleculeProcessor.cpp:571:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 578,
    "function": null,
    "comment": "MoleculeProcessor.cpp:578:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 580,
    "function": null,
    "comment": "MoleculeProcessor.cpp:580:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 582,
    "function": null,
    "comment": "MoleculeProcessor.cpp:582:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 590,
    "function": null,
    "comment": "MoleculeProcessor.cpp:590:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "MoleculeProcessor.cpp",
    "line": 592,
    "function": null,
    "comment": "MoleculeProcessor.cpp:592:  Is this a non-const reference? If so, make const or use a pointer: cv::FileStorage& fs  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "MoleculeProcessor.cpp",
    "line": 592,
    "function": null,
    "comment": "MoleculeProcessor.cpp:592:  Single-parameter constructors should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 594,
    "function": null,
    "comment": "MoleculeProcessor.cpp:594:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "MoleculeProcessor.cpp",
    "line": 595,
    "function": null,
    "comment": "MoleculeProcessor.cpp:595:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "MoleculeProcessor.cpp",
    "line": 595,
    "function": null,
    "comment": "MoleculeProcessor.cpp:595:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 598,
    "function": null,
    "comment": "MoleculeProcessor.cpp:598:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 604,
    "function": null,
    "comment": "MoleculeProcessor.cpp:604:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "MoleculeProcessor.cpp",
    "line": 606,
    "function": null,
    "comment": "MoleculeProcessor.cpp:606:  Single-parameter constructors should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 608,
    "function": null,
    "comment": "MoleculeProcessor.cpp:608:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "MoleculeProcessor.cpp",
    "line": 609,
    "function": null,
    "comment": "MoleculeProcessor.cpp:609:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "MoleculeProcessor.cpp",
    "line": 609,
    "function": null,
    "comment": "MoleculeProcessor.cpp:609:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 613,
    "function": null,
    "comment": "MoleculeProcessor.cpp:613:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 618,
    "function": null,
    "comment": "MoleculeProcessor.cpp:618:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "MoleculeProcessor.cpp",
    "line": 623,
    "function": null,
    "comment": "MoleculeProcessor.cpp:623:  Anonymous namespace should be terminated with '// namespace'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 625,
    "function": null,
    "comment": "MoleculeProcessor.cpp:625:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 630,
    "function": null,
    "comment": "MoleculeProcessor.cpp:630:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 639,
    "function": null,
    "comment": "MoleculeProcessor.cpp:639:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "MoleculeProcessor.cpp",
    "line": 640,
    "function": null,
    "comment": "MoleculeProcessor.cpp:640:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Don't use a semicolon to denote an empty statement. Use {} instead.",
    "file": "MoleculeProcessor.cpp",
    "line": 643,
    "function": null,
    "comment": "MoleculeProcessor.cpp:643:  Line contains only semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","google-cpp","semicolon","empty-statement","empty-block"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 646,
    "function": null,
    "comment": "MoleculeProcessor.cpp:646:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "MoleculeProcessor.cpp",
    "line": 651,
    "function": null,
    "comment": "MoleculeProcessor.cpp:651:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 655,
    "function": null,
    "comment": "MoleculeProcessor.cpp:655:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 661,
    "function": null,
    "comment": "MoleculeProcessor.cpp:661:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 667,
    "function": null,
    "comment": "MoleculeProcessor.cpp:667:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "MoleculeProcessor.cpp",
    "line": 670,
    "function": null,
    "comment": "MoleculeProcessor.cpp:670:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 671,
    "function": null,
    "comment": "MoleculeProcessor.cpp:671:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "MoleculeProcessor.cpp",
    "line": 672,
    "function": null,
    "comment": "MoleculeProcessor.cpp:672:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "MoleculeProcessor.cpp",
    "line": 673,
    "function": null,
    "comment": "MoleculeProcessor.cpp:673:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 676,
    "function": null,
    "comment": "MoleculeProcessor.cpp:676:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "MoleculeProcessor.cpp",
    "line": 677,
    "function": null,
    "comment": "MoleculeProcessor.cpp:677:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 681,
    "function": null,
    "comment": "MoleculeProcessor.cpp:681:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "MoleculeProcessor.cpp",
    "line": 682,
    "function": null,
    "comment": "MoleculeProcessor.cpp:682:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 691,
    "function": null,
    "comment": "MoleculeProcessor.cpp:691:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "MoleculeProcessor.cpp",
    "line": 692,
    "function": null,
    "comment": "MoleculeProcessor.cpp:692:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 697,
    "function": null,
    "comment": "MoleculeProcessor.cpp:697:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 718,
    "function": null,
    "comment": "MoleculeProcessor.cpp:718:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "MoleculeProcessor.cpp",
    "line": 721,
    "function": null,
    "comment": "MoleculeProcessor.cpp:721:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 726,
    "function": null,
    "comment": "MoleculeProcessor.cpp:726:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "MoleculeProcessor.cpp",
    "line": 727,
    "function": null,
    "comment": "MoleculeProcessor.cpp:727:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 731,
    "function": null,
    "comment": "MoleculeProcessor.cpp:731:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 737,
    "function": null,
    "comment": "MoleculeProcessor.cpp:737:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 742,
    "function": null,
    "comment": "MoleculeProcessor.cpp:742:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "MoleculeProcessor.cpp",
    "line": 745,
    "function": null,
    "comment": "MoleculeProcessor.cpp:745:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "MoleculeProcessor.cpp",
    "line": 745,
    "function": null,
    "comment": "MoleculeProcessor.cpp:745:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 746,
    "function": null,
    "comment": "MoleculeProcessor.cpp:746:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "MoleculeProcessor.cpp",
    "line": 750,
    "function": null,
    "comment": "MoleculeProcessor.cpp:750:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "MoleculeProcessor.cpp",
    "line": 750,
    "function": null,
    "comment": "MoleculeProcessor.cpp:750:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "MoleculeProcessor.cpp",
    "line": 750,
    "function": null,
    "comment": "MoleculeProcessor.cpp:750:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "MoleculeProcessor.cpp",
    "line": 751,
    "function": null,
    "comment": "MoleculeProcessor.cpp:751:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "MoleculeProcessor.cpp",
    "line": 752,
    "function": null,
    "comment": "MoleculeProcessor.cpp:752:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 757,
    "function": null,
    "comment": "MoleculeProcessor.cpp:757:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "MoleculeProcessor.cpp",
    "line": 768,
    "function": null,
    "comment": "MoleculeProcessor.cpp:768:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "MoleculeProcessor.cpp",
    "line": 770,
    "function": null,
    "comment": "MoleculeProcessor.cpp:770:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "MoleculeProcessor.cpp",
    "line": 773,
    "function": null,
    "comment": "MoleculeProcessor.cpp:773:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "MoleculeProcessor.cpp",
    "line": 773,
    "function": null,
    "comment": "MoleculeProcessor.cpp:773:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "MoleculeProcessor.cpp",
    "line": 773,
    "function": null,
    "comment": "MoleculeProcessor.cpp:773:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "MoleculeProcessor.cpp",
    "line": 774,
    "function": null,
    "comment": "MoleculeProcessor.cpp:774:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "MoleculeProcessor.cpp",
    "line": 779,
    "function": null,
    "comment": "MoleculeProcessor.cpp:779:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 780,
    "function": null,
    "comment": "MoleculeProcessor.cpp:780:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 784,
    "function": null,
    "comment": "MoleculeProcessor.cpp:784:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "MoleculeProcessor.cpp",
    "line": 791,
    "function": null,
    "comment": "MoleculeProcessor.cpp:791:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 792,
    "function": null,
    "comment": "MoleculeProcessor.cpp:792:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 796,
    "function": null,
    "comment": "MoleculeProcessor.cpp:796:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "MoleculeProcessor.cpp",
    "line": 797,
    "function": null,
    "comment": "MoleculeProcessor.cpp:797:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 799,
    "function": null,
    "comment": "MoleculeProcessor.cpp:799:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 804,
    "function": null,
    "comment": "MoleculeProcessor.cpp:804:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "MoleculeProcessor.cpp",
    "line": 815,
    "function": null,
    "comment": "MoleculeProcessor.cpp:815:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "MoleculeProcessor.cpp",
    "line": 819,
    "function": null,
    "comment": "MoleculeProcessor.cpp:819:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "MoleculeProcessor.cpp",
    "line": 814,
    "function": null,
    "comment": "MoleculeProcessor.cpp:814:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "MoleculeProcessor.cpp",
    "line": 670,
    "function": null,
    "comment": "MoleculeProcessor.cpp:670:  Add #include <utility> for pair<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "MoleculeProcessor.cpp",
    "line": 520,
    "function": null,
    "comment": "MoleculeProcessor.cpp:520:  Add #include <list> for list<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "MoleculeProcessor.cpp",
    "line": 679,
    "function": null,
    "comment": "MoleculeProcessor.cpp:679:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "MoleculeProcessor.cpp",
    "line": 564,
    "function": null,
    "comment": "MoleculeProcessor.cpp:564:  Add #include <set> for set<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "SVDRSolver.cpp",
    "line": null,
    "function": null,
    "comment": "SVDRSolver.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "SVDRSolver.cpp",
    "line": 8,
    "function": null,
    "comment": "SVDRSolver.cpp:8:  Include 'pano_core/feature_utils.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "SVDRSolver.cpp",
    "line": 9,
    "function": null,
    "comment": "SVDRSolver.cpp:9:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "SVDRSolver.cpp",
    "line": 12,
    "function": null,
    "comment": "SVDRSolver.cpp:12:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "SVDRSolver.cpp",
    "line": 15,
    "function": null,
    "comment": "SVDRSolver.cpp:15:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "SVDRSolver.cpp",
    "line": 18,
    "function": null,
    "comment": "SVDRSolver.cpp:18:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "SVDRSolver.cpp",
    "line": 24,
    "function": null,
    "comment": "SVDRSolver.cpp:24:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "SVDRSolver.cpp",
    "line": 33,
    "function": null,
    "comment": "SVDRSolver.cpp:33:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "SVDRSolver.cpp",
    "line": 34,
    "function": null,
    "comment": "SVDRSolver.cpp:34:  Using C-style cast.  Use static_cast<double>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "SVDRSolver.cpp",
    "line": 35,
    "function": null,
    "comment": "SVDRSolver.cpp:35:  Using C-style cast.  Use static_cast<double>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "SVDRSolver.cpp",
    "line": 36,
    "function": null,
    "comment": "SVDRSolver.cpp:36:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "SVDRSolver.cpp",
    "line": 37,
    "function": null,
    "comment": "SVDRSolver.cpp:37:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "SVDRSolver.cpp",
    "line": 41,
    "function": null,
    "comment": "SVDRSolver.cpp:41:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "SVDRSolver.cpp",
    "line": 44,
    "function": null,
    "comment": "SVDRSolver.cpp:44:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "SVDRSolver.cpp",
    "line": 45,
    "function": null,
    "comment": "SVDRSolver.cpp:45:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "SVDRSolver.cpp",
    "line": 48,
    "function": null,
    "comment": "SVDRSolver.cpp:48:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "SVDRSolver.cpp",
    "line": 53,
    "function": null,
    "comment": "SVDRSolver.cpp:53:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "SVDRSolver.cpp",
    "line": 56,
    "function": null,
    "comment": "SVDRSolver.cpp:56:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "SVDRSolver.cpp",
    "line": 60,
    "function": null,
    "comment": "SVDRSolver.cpp:60:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "SVDRSolver.cpp",
    "line": 61,
    "function": null,
    "comment": "SVDRSolver.cpp:61:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "SVDRSolver.cpp",
    "line": 69,
    "function": null,
    "comment": "SVDRSolver.cpp:69:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "SVDRSolver.cpp",
    "line": 71,
    "function": null,
    "comment": "SVDRSolver.cpp:71:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "SVDRSolver.cpp",
    "line": 74,
    "function": null,
    "comment": "SVDRSolver.cpp:74:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "SVDRSolver.cpp",
    "line": 76,
    "function": null,
    "comment": "SVDRSolver.cpp:76:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "SVDRSolver.cpp",
    "line": 82,
    "function": null,
    "comment": "SVDRSolver.cpp:82:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "SVDRSolver.cpp",
    "line": 83,
    "function": null,
    "comment": "SVDRSolver.cpp:83:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "SVDRSolver.cpp",
    "line": 87,
    "function": null,
    "comment": "SVDRSolver.cpp:87:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "SVDRSolver.cpp",
    "line": 88,
    "function": null,
    "comment": "SVDRSolver.cpp:88:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "SVDRSolver.cpp",
    "line": 92,
    "function": null,
    "comment": "SVDRSolver.cpp:92:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "SVDRSolver.cpp",
    "line": 94,
    "function": null,
    "comment": "SVDRSolver.cpp:94:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "SVDRSolver.cpp",
    "line": 95,
    "function": null,
    "comment": "SVDRSolver.cpp:95:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "SVDRSolver.cpp",
    "line": 98,
    "function": null,
    "comment": "SVDRSolver.cpp:98:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "SVDRSolver.cpp",
    "line": 101,
    "function": null,
    "comment": "SVDRSolver.cpp:101:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "SVDRSolver.cpp",
    "line": 107,
    "function": null,
    "comment": "SVDRSolver.cpp:107:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "SVDRSolver.cpp",
    "line": 111,
    "function": null,
    "comment": "SVDRSolver.cpp:111:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "SVDRSolver.cpp",
    "line": 115,
    "function": null,
    "comment": "SVDRSolver.cpp:115:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "SVDRSolver.cpp",
    "line": 118,
    "function": null,
    "comment": "SVDRSolver.cpp:118:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "SVDRSolver.cpp",
    "line": 123,
    "function": null,
    "comment": "SVDRSolver.cpp:123:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "SVDRSolver.cpp",
    "line": 123,
    "function": null,
    "comment": "SVDRSolver.cpp:123:  Is this a non-const reference? If so, make const or use a pointer: FitterResult& result  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "SVDRSolver.cpp",
    "line": 124,
    "function": null,
    "comment": "SVDRSolver.cpp:124:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "SVDRSolver.cpp",
    "line": 125,
    "function": null,
    "comment": "SVDRSolver.cpp:125:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "SVDRSolver.cpp",
    "line": 129,
    "function": null,
    "comment": "SVDRSolver.cpp:129:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "SVDRSolver.cpp",
    "line": 130,
    "function": null,
    "comment": "SVDRSolver.cpp:130:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't use a semicolon to denote an empty statement. Use {} instead.",
    "file": "SVDRSolver.cpp",
    "line": 147,
    "function": null,
    "comment": "SVDRSolver.cpp:147:  Line contains only semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","google-cpp","semicolon","empty-statement","empty-block"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "SVDRSolver.cpp",
    "line": 158,
    "function": null,
    "comment": "SVDRSolver.cpp:158:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "SVDRSolver.cpp",
    "line": 158,
    "function": null,
    "comment": "SVDRSolver.cpp:158:  Using deprecated casting style.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "SVDRSolver.cpp",
    "line": 161,
    "function": null,
    "comment": "SVDRSolver.cpp:161:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "SVDRSolver.cpp",
    "line": 162,
    "function": null,
    "comment": "SVDRSolver.cpp:162:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "SVDRSolver.cpp",
    "line": 170,
    "function": null,
    "comment": "SVDRSolver.cpp:170:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "SVDRSolver.cpp",
    "line": 171,
    "function": null,
    "comment": "SVDRSolver.cpp:171:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "SVDRSolver.cpp",
    "line": 172,
    "function": null,
    "comment": "SVDRSolver.cpp:172:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "SVDRSolver.cpp",
    "line": 173,
    "function": null,
    "comment": "SVDRSolver.cpp:173:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "SVDRSolver.cpp",
    "line": 174,
    "function": null,
    "comment": "SVDRSolver.cpp:174:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "SVDRSolver.cpp",
    "line": 175,
    "function": null,
    "comment": "SVDRSolver.cpp:175:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "SVDRSolver.cpp",
    "line": 176,
    "function": null,
    "comment": "SVDRSolver.cpp:176:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "SVDRSolver.cpp",
    "line": 179,
    "function": null,
    "comment": "SVDRSolver.cpp:179:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "SVDRSolver.cpp",
    "line": 181,
    "function": null,
    "comment": "SVDRSolver.cpp:181:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "SVDRSolver.cpp",
    "line": 183,
    "function": null,
    "comment": "SVDRSolver.cpp:183:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "SVDRSolver.cpp",
    "line": 184,
    "function": null,
    "comment": "SVDRSolver.cpp:184:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "SVDRSolver.cpp",
    "line": 187,
    "function": null,
    "comment": "SVDRSolver.cpp:187:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "SVDRSolver.cpp",
    "line": 190,
    "function": null,
    "comment": "SVDRSolver.cpp:190:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "SVDRSolver.cpp",
    "line": 191,
    "function": null,
    "comment": "SVDRSolver.cpp:191:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "SVDRSolver.cpp",
    "line": 192,
    "function": null,
    "comment": "SVDRSolver.cpp:192:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "SVDRSolver.cpp",
    "line": 205,
    "function": null,
    "comment": "SVDRSolver.cpp:205:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "SVDRSolver.cpp",
    "line": 208,
    "function": null,
    "comment": "SVDRSolver.cpp:208:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "SVDRSolver.cpp",
    "line": 215,
    "function": null,
    "comment": "SVDRSolver.cpp:215:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "SVDRSolver.cpp",
    "line": 216,
    "function": null,
    "comment": "SVDRSolver.cpp:216:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "SVDRSolver.cpp",
    "line": 219,
    "function": null,
    "comment": "SVDRSolver.cpp:219:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "SVDRSolver.cpp",
    "line": 221,
    "function": null,
    "comment": "SVDRSolver.cpp:221:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "SVDRSolver.cpp",
    "line": 229,
    "function": null,
    "comment": "SVDRSolver.cpp:229:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "SVDRSolver.cpp",
    "line": 232,
    "function": null,
    "comment": "SVDRSolver.cpp:232:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "SVDRSolver.cpp",
    "line": 232,
    "function": null,
    "comment": "SVDRSolver.cpp:232:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "SVDRSolver.cpp",
    "line": 236,
    "function": null,
    "comment": "SVDRSolver.cpp:236:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "SVDRSolver.cpp",
    "line": 249,
    "function": null,
    "comment": "SVDRSolver.cpp:249:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "SVDRSolver.cpp",
    "line": 252,
    "function": null,
    "comment": "SVDRSolver.cpp:252:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "SVDRSolver.cpp",
    "line": 252,
    "function": null,
    "comment": "SVDRSolver.cpp:252:  Is this a non-const reference? If so, make const or use a pointer: FitterResult& result  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "SVDRSolver.cpp",
    "line": 253,
    "function": null,
    "comment": "SVDRSolver.cpp:253:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "SVDRSolver.cpp",
    "line": 254,
    "function": null,
    "comment": "SVDRSolver.cpp:254:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "SVDRSolver.cpp",
    "line": 255,
    "function": null,
    "comment": "SVDRSolver.cpp:255:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "SVDRSolver.cpp",
    "line": 265,
    "function": null,
    "comment": "SVDRSolver.cpp:265:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "SVDRSolver.cpp",
    "line": 265,
    "function": null,
    "comment": "SVDRSolver.cpp:265:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "SVDRSolver.cpp",
    "line": 266,
    "function": null,
    "comment": "SVDRSolver.cpp:266:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "SVDRSolver.cpp",
    "line": 269,
    "function": null,
    "comment": "SVDRSolver.cpp:269:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "SVDRSolver.cpp",
    "line": 269,
    "function": null,
    "comment": "SVDRSolver.cpp:269:  Is this a non-const reference? If so, make const or use a pointer: FitterResult& result  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "SVDRSolver.cpp",
    "line": 270,
    "function": null,
    "comment": "SVDRSolver.cpp:270:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "SVDRSolver.cpp",
    "line": 271,
    "function": null,
    "comment": "SVDRSolver.cpp:271:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "SVDRSolver.cpp",
    "line": 272,
    "function": null,
    "comment": "SVDRSolver.cpp:272:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "SVDRSolver.cpp",
    "line": 278,
    "function": null,
    "comment": "SVDRSolver.cpp:278:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "SVDRSolver.cpp",
    "line": 279,
    "function": null,
    "comment": "SVDRSolver.cpp:279:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "SVDRSolver.cpp",
    "line": 282,
    "function": null,
    "comment": "SVDRSolver.cpp:282:  Anonymous namespace should be terminated with '// namespace'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "SVDRSolver.cpp",
    "line": 284,
    "function": null,
    "comment": "SVDRSolver.cpp:284:  Extra space before ( in function call  [whitespace/parens] [0]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "SVDRSolver.cpp",
    "line": 284,
    "function": null,
    "comment": "SVDRSolver.cpp:284:  Is this a non-const reference? If so, make const or use a pointer: SVDRSolverParams& params  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "SVDRSolver.cpp",
    "line": 284,
    "function": null,
    "comment": "SVDRSolver.cpp:284:  Is this a non-const reference? If so, make const or use a pointer: AtomPair& pair  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "SVDRSolver.cpp",
    "line": 285,
    "function": null,
    "comment": "SVDRSolver.cpp:285:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "SVDRSolver.cpp",
    "line": 286,
    "function": null,
    "comment": "SVDRSolver.cpp:286:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "SVDRSolver.cpp",
    "line": 288,
    "function": null,
    "comment": "SVDRSolver.cpp:288:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "SVDRSolver.cpp",
    "line": 289,
    "function": null,
    "comment": "SVDRSolver.cpp:289:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "SVDRSolver.cpp",
    "line": 290,
    "function": null,
    "comment": "SVDRSolver.cpp:290:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "SVDRSolver.cpp",
    "line": 295,
    "function": null,
    "comment": "SVDRSolver.cpp:295:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "SVDRSolver.cpp",
    "line": 296,
    "function": null,
    "comment": "SVDRSolver.cpp:296:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "SVDRSolver.cpp",
    "line": 299,
    "function": null,
    "comment": "SVDRSolver.cpp:299:  Namespace should be terminated with '// namespace pano'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "SVDRSolver.cpp",
    "line": 158,
    "function": null,
    "comment": "SVDRSolver.cpp:158:  Add #include <algorithm> for min  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "SVDRSolver.cpp",
    "line": 273,
    "function": null,
    "comment": "SVDRSolver.cpp:273:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "CaptureEngine.cpp",
    "line": null,
    "function": null,
    "comment": "CaptureEngine.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "CaptureEngine.cpp",
    "line": 11,
    "function": null,
    "comment": "CaptureEngine.cpp:11:  Found C system header after other header. Should be: CaptureEngine.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "CaptureEngine.cpp",
    "line": 12,
    "function": null,
    "comment": "CaptureEngine.cpp:12:  Found C system header after other header. Should be: CaptureEngine.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "CaptureEngine.cpp",
    "line": 14,
    "function": null,
    "comment": "CaptureEngine.cpp:14:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "CaptureEngine.cpp",
    "line": 15,
    "function": null,
    "comment": "CaptureEngine.cpp:15:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "CaptureEngine.cpp",
    "line": 17,
    "function": null,
    "comment": "CaptureEngine.cpp:17:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "CaptureEngine.cpp",
    "line": 19,
    "function": null,
    "comment": "CaptureEngine.cpp:19:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "CaptureEngine.cpp",
    "line": 21,
    "function": null,
    "comment": "CaptureEngine.cpp:21:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "CaptureEngine.cpp",
    "line": 26,
    "function": null,
    "comment": "CaptureEngine.cpp:26:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "CaptureEngine.cpp",
    "line": 30,
    "function": null,
    "comment": "CaptureEngine.cpp:30:  Anonymous namespace should be terminated with '// namespace'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "CaptureEngine.cpp",
    "line": 34,
    "function": null,
    "comment": "CaptureEngine.cpp:34:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "CaptureEngine.cpp",
    "line": 35,
    "function": null,
    "comment": "CaptureEngine.cpp:35:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "CaptureEngine.cpp",
    "line": 35,
    "function": null,
    "comment": "CaptureEngine.cpp:35:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "CaptureEngine.cpp",
    "line": 37,
    "function": null,
    "comment": "CaptureEngine.cpp:37:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "CaptureEngine.cpp",
    "line": 38,
    "function": null,
    "comment": "CaptureEngine.cpp:38:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "CaptureEngine.cpp",
    "line": 39,
    "function": null,
    "comment": "CaptureEngine.cpp:39:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "CaptureEngine.cpp",
    "line": 41,
    "function": null,
    "comment": "CaptureEngine.cpp:41:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "CaptureEngine.cpp",
    "line": 46,
    "function": null,
    "comment": "CaptureEngine.cpp:46:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "CaptureEngine.cpp",
    "line": 50,
    "function": null,
    "comment": "CaptureEngine.cpp:50:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "CaptureEngine.cpp",
    "line": 56,
    "function": null,
    "comment": "CaptureEngine.cpp:56:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "CaptureEngine.cpp",
    "line": 58,
    "function": null,
    "comment": "CaptureEngine.cpp:58:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "CaptureEngine.cpp",
    "line": 73,
    "function": null,
    "comment": "CaptureEngine.cpp:73:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "CaptureEngine.cpp",
    "line": 78,
    "function": null,
    "comment": "CaptureEngine.cpp:78:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "CaptureEngine.cpp",
    "line": 81,
    "function": null,
    "comment": "CaptureEngine.cpp:81:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "CaptureEngine.cpp",
    "line": 84,
    "function": null,
    "comment": "CaptureEngine.cpp:84:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "CaptureEngine.cpp",
    "line": 86,
    "function": null,
    "comment": "CaptureEngine.cpp:86:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "CaptureEngine.cpp",
    "line": 87,
    "function": null,
    "comment": "CaptureEngine.cpp:87:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "CaptureEngine.cpp",
    "line": 94,
    "function": null,
    "comment": "CaptureEngine.cpp:94:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "CaptureEngine.cpp",
    "line": 95,
    "function": null,
    "comment": "CaptureEngine.cpp:95:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "CaptureEngine.cpp",
    "line": 95,
    "function": null,
    "comment": "CaptureEngine.cpp:95:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "CaptureEngine.cpp",
    "line": 99,
    "function": null,
    "comment": "CaptureEngine.cpp:99:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "CaptureEngine.cpp",
    "line": 101,
    "function": null,
    "comment": "CaptureEngine.cpp:101:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "CaptureEngine.cpp",
    "line": 102,
    "function": null,
    "comment": "CaptureEngine.cpp:102:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "CaptureEngine.cpp",
    "line": 104,
    "function": null,
    "comment": "CaptureEngine.cpp:104:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "CaptureEngine.cpp",
    "line": 105,
    "function": null,
    "comment": "CaptureEngine.cpp:105:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "CaptureEngine.cpp",
    "line": 116,
    "function": null,
    "comment": "CaptureEngine.cpp:116:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "CaptureEngine.cpp",
    "line": 116,
    "function": null,
    "comment": "CaptureEngine.cpp:116:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "CaptureEngine.cpp",
    "line": 119,
    "function": null,
    "comment": "CaptureEngine.cpp:119:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "CaptureEngine.cpp",
    "line": 120,
    "function": null,
    "comment": "CaptureEngine.cpp:120:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "CaptureEngine.cpp",
    "line": 122,
    "function": null,
    "comment": "CaptureEngine.cpp:122:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "CaptureEngine.cpp",
    "line": 125,
    "function": null,
    "comment": "CaptureEngine.cpp:125:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "CaptureEngine.cpp",
    "line": 126,
    "function": null,
    "comment": "CaptureEngine.cpp:126:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "CaptureEngine.cpp",
    "line": 128,
    "function": null,
    "comment": "CaptureEngine.cpp:128:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "CaptureEngine.cpp",
    "line": 131,
    "function": null,
    "comment": "CaptureEngine.cpp:131:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "CaptureEngine.cpp",
    "line": 131,
    "function": null,
    "comment": "CaptureEngine.cpp:131:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "CaptureEngine.cpp",
    "line": 132,
    "function": null,
    "comment": "CaptureEngine.cpp:132:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "CaptureEngine.cpp",
    "line": 133,
    "function": null,
    "comment": "CaptureEngine.cpp:133:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "CaptureEngine.cpp",
    "line": 134,
    "function": null,
    "comment": "CaptureEngine.cpp:134:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "CaptureEngine.cpp",
    "line": 136,
    "function": null,
    "comment": "CaptureEngine.cpp:136:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "CaptureEngine.cpp",
    "line": 138,
    "function": null,
    "comment": "CaptureEngine.cpp:138:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "CaptureEngine.cpp",
    "line": 143,
    "function": null,
    "comment": "CaptureEngine.cpp:143:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "CaptureEngine.cpp",
    "line": 143,
    "function": null,
    "comment": "CaptureEngine.cpp:143:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "CaptureEngine.cpp",
    "line": 147,
    "function": null,
    "comment": "CaptureEngine.cpp:147:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "CaptureEngine.cpp",
    "line": 149,
    "function": null,
    "comment": "CaptureEngine.cpp:149:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "CaptureEngine.cpp",
    "line": 150,
    "function": null,
    "comment": "CaptureEngine.cpp:150:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "CaptureEngine.cpp",
    "line": 151,
    "function": null,
    "comment": "CaptureEngine.cpp:151:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "CaptureEngine.cpp",
    "line": 151,
    "function": null,
    "comment": "CaptureEngine.cpp:151:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "CaptureEngine.cpp",
    "line": 152,
    "function": null,
    "comment": "CaptureEngine.cpp:152:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "CaptureEngine.cpp",
    "line": 152,
    "function": null,
    "comment": "CaptureEngine.cpp:152:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "CaptureEngine.cpp",
    "line": 154,
    "function": null,
    "comment": "CaptureEngine.cpp:154:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "CaptureEngine.cpp",
    "line": 155,
    "function": null,
    "comment": "CaptureEngine.cpp:155:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "CaptureEngine.cpp",
    "line": 155,
    "function": null,
    "comment": "CaptureEngine.cpp:155:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "CaptureEngine.cpp",
    "line": 155,
    "function": null,
    "comment": "CaptureEngine.cpp:155:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "CaptureEngine.cpp",
    "line": 159,
    "function": null,
    "comment": "CaptureEngine.cpp:159:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "CaptureEngine.cpp",
    "line": 162,
    "function": null,
    "comment": "CaptureEngine.cpp:162:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "CaptureEngine.cpp",
    "line": 164,
    "function": null,
    "comment": "CaptureEngine.cpp:164:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "CaptureEngine.cpp",
    "line": 166,
    "function": null,
    "comment": "CaptureEngine.cpp:166:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "CaptureEngine.cpp",
    "line": 167,
    "function": null,
    "comment": "CaptureEngine.cpp:167:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "CaptureEngine.cpp",
    "line": 169,
    "function": null,
    "comment": "CaptureEngine.cpp:169:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "CaptureEngine.cpp",
    "line": 172,
    "function": null,
    "comment": "CaptureEngine.cpp:172:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "CaptureEngine.cpp",
    "line": 172,
    "function": null,
    "comment": "CaptureEngine.cpp:172:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "CaptureEngine.cpp",
    "line": 173,
    "function": null,
    "comment": "CaptureEngine.cpp:173:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "CaptureEngine.cpp",
    "line": 176,
    "function": null,
    "comment": "CaptureEngine.cpp:176:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "CaptureEngine.cpp",
    "line": 178,
    "function": null,
    "comment": "CaptureEngine.cpp:178:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "CaptureEngine.cpp",
    "line": 180,
    "function": null,
    "comment": "CaptureEngine.cpp:180:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "CaptureEngine.cpp",
    "line": 182,
    "function": null,
    "comment": "CaptureEngine.cpp:182:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "CaptureEngine.cpp",
    "line": 192,
    "function": null,
    "comment": "CaptureEngine.cpp:192:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "CaptureEngine.cpp",
    "line": 198,
    "function": null,
    "comment": "CaptureEngine.cpp:198:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "CaptureEngine.cpp",
    "line": 205,
    "function": null,
    "comment": "CaptureEngine.cpp:205:  Namespace should be terminated with '// namespace pano'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "CaptureEngine.cpp",
    "line": 85,
    "function": null,
    "comment": "CaptureEngine.cpp:85:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "CaptureEngine.cpp",
    "line": 110,
    "function": null,
    "comment": "CaptureEngine.cpp:110:  Add #include <list> for list<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "ImageAtom.cpp",
    "line": null,
    "function": null,
    "comment": "ImageAtom.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "ImageAtom.cpp",
    "line": 7,
    "function": null,
    "comment": "ImageAtom.cpp:7:  Found C++ system header after other header. Should be: ImageAtom.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "ImageAtom.cpp",
    "line": 8,
    "function": null,
    "comment": "ImageAtom.cpp:8:  Found C++ system header after other header. Should be: ImageAtom.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "ImageAtom.cpp",
    "line": 10,
    "function": null,
    "comment": "ImageAtom.cpp:10:  Found C system header after other header. Should be: ImageAtom.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "ImageAtom.cpp",
    "line": 11,
    "function": null,
    "comment": "ImageAtom.cpp:11:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "ImageAtom.cpp",
    "line": 12,
    "function": null,
    "comment": "ImageAtom.cpp:12:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageAtom.cpp",
    "line": 14,
    "function": null,
    "comment": "ImageAtom.cpp:14:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageAtom.cpp",
    "line": 17,
    "function": null,
    "comment": "ImageAtom.cpp:17:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageAtom.cpp",
    "line": 22,
    "function": null,
    "comment": "ImageAtom.cpp:22:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "ImageAtom.cpp",
    "line": 23,
    "function": null,
    "comment": "ImageAtom.cpp:23:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "ImageAtom.cpp",
    "line": 23,
    "function": null,
    "comment": "ImageAtom.cpp:23:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageAtom.cpp",
    "line": 26,
    "function": null,
    "comment": "ImageAtom.cpp:26:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "ImageAtom.cpp",
    "line": 27,
    "function": null,
    "comment": "ImageAtom.cpp:27:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "ImageAtom.cpp",
    "line": 27,
    "function": null,
    "comment": "ImageAtom.cpp:27:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageAtom.cpp",
    "line": 32,
    "function": null,
    "comment": "ImageAtom.cpp:32:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "ImageAtom.cpp",
    "line": 33,
    "function": null,
    "comment": "ImageAtom.cpp:33:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "ImageAtom.cpp",
    "line": 33,
    "function": null,
    "comment": "ImageAtom.cpp:33:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "ImageAtom.cpp",
    "line": 35,
    "function": null,
    "comment": "ImageAtom.cpp:35:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageAtom.cpp",
    "line": 48,
    "function": null,
    "comment": "ImageAtom.cpp:48:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ImageAtom.cpp",
    "line": 54,
    "function": null,
    "comment": "ImageAtom.cpp:54:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageAtom.cpp",
    "line": 55,
    "function": null,
    "comment": "ImageAtom.cpp:55:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ImageAtom.cpp",
    "line": 59,
    "function": null,
    "comment": "ImageAtom.cpp:59:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageAtom.cpp",
    "line": 60,
    "function": null,
    "comment": "ImageAtom.cpp:60:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ImageAtom.cpp",
    "line": 61,
    "function": null,
    "comment": "ImageAtom.cpp:61:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "ImageAtom.cpp",
    "line": 61,
    "function": null,
    "comment": "ImageAtom.cpp:61:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "ImageAtom.cpp",
    "line": 61,
    "function": null,
    "comment": "ImageAtom.cpp:61:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "ImageAtom.cpp",
    "line": 61,
    "function": null,
    "comment": "ImageAtom.cpp:61:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "ImageAtom.cpp",
    "line": 61,
    "function": null,
    "comment": "ImageAtom.cpp:61:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ImageAtom.cpp",
    "line": 62,
    "function": null,
    "comment": "ImageAtom.cpp:62:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "ImageAtom.cpp",
    "line": 62,
    "function": null,
    "comment": "ImageAtom.cpp:62:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ImageAtom.cpp",
    "line": 65,
    "function": null,
    "comment": "ImageAtom.cpp:65:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ImageAtom.cpp",
    "line": 67,
    "function": null,
    "comment": "ImageAtom.cpp:67:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageAtom.cpp",
    "line": 70,
    "function": null,
    "comment": "ImageAtom.cpp:70:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ImageAtom.cpp",
    "line": 81,
    "function": null,
    "comment": "ImageAtom.cpp:81:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "ImageAtom.cpp",
    "line": 81,
    "function": null,
    "comment": "ImageAtom.cpp:81:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ImageAtom.cpp",
    "line": 82,
    "function": null,
    "comment": "ImageAtom.cpp:82:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ImageAtom.cpp",
    "line": 87,
    "function": null,
    "comment": "ImageAtom.cpp:87:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ImageAtom.cpp",
    "line": 91,
    "function": null,
    "comment": "ImageAtom.cpp:91:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageAtom.cpp",
    "line": 92,
    "function": null,
    "comment": "ImageAtom.cpp:92:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "ImageAtom.cpp",
    "line": 95,
    "function": null,
    "comment": "ImageAtom.cpp:95:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "ImageAtom.cpp",
    "line": 95,
    "function": null,
    "comment": "ImageAtom.cpp:95:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "ImageAtom.cpp",
    "line": 95,
    "function": null,
    "comment": "ImageAtom.cpp:95:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageAtom.cpp",
    "line": 103,
    "function": null,
    "comment": "ImageAtom.cpp:103:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "ImageAtom.cpp",
    "line": 107,
    "function": null,
    "comment": "ImageAtom.cpp:107:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "ImageAtom.cpp",
    "line": 111,
    "function": null,
    "comment": "ImageAtom.cpp:111:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ImageAtom.cpp",
    "line": 112,
    "function": null,
    "comment": "ImageAtom.cpp:112:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "ImageAtom.cpp",
    "line": 112,
    "function": null,
    "comment": "ImageAtom.cpp:112:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ImageAtom.cpp",
    "line": 113,
    "function": null,
    "comment": "ImageAtom.cpp:113:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "ImageAtom.cpp",
    "line": 117,
    "function": null,
    "comment": "ImageAtom.cpp:117:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageAtom.cpp",
    "line": 125,
    "function": null,
    "comment": "ImageAtom.cpp:125:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageAtom.cpp",
    "line": 128,
    "function": null,
    "comment": "ImageAtom.cpp:128:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "ImageAtom.cpp",
    "line": 132,
    "function": null,
    "comment": "ImageAtom.cpp:132:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageAtom.cpp",
    "line": 136,
    "function": null,
    "comment": "ImageAtom.cpp:136:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageAtom.cpp",
    "line": 139,
    "function": null,
    "comment": "ImageAtom.cpp:139:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "ImageAtom.cpp",
    "line": 145,
    "function": null,
    "comment": "ImageAtom.cpp:145:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageAtom.cpp",
    "line": 149,
    "function": null,
    "comment": "ImageAtom.cpp:149:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageAtom.cpp",
    "line": 164,
    "function": null,
    "comment": "ImageAtom.cpp:164:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "ImageAtom.cpp",
    "line": 169,
    "function": null,
    "comment": "ImageAtom.cpp:169:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "ImageAtom.cpp",
    "line": 172,
    "function": null,
    "comment": "ImageAtom.cpp:172:  Namespace should be terminated with '// namespace pano'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "ImageAtom.cpp",
    "line": 99,
    "function": null,
    "comment": "ImageAtom.cpp:99:  Add #include <algorithm> for sort  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "ImageAtom.cpp",
    "line": 91,
    "function": null,
    "comment": "ImageAtom.cpp:91:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "feature_utils.cpp",
    "line": null,
    "function": null,
    "comment": "feature_utils.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "feature_utils.cpp",
    "line": 10,
    "function": null,
    "comment": "feature_utils.cpp:10:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "feature_utils.cpp",
    "line": 11,
    "function": null,
    "comment": "feature_utils.cpp:11:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "feature_utils.cpp",
    "line": 13,
    "function": null,
    "comment": "feature_utils.cpp:13:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "feature_utils.cpp",
    "line": 16,
    "function": null,
    "comment": "feature_utils.cpp:16:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "feature_utils.cpp",
    "line": 17,
    "function": null,
    "comment": "feature_utils.cpp:17:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "feature_utils.cpp",
    "line": 22,
    "function": null,
    "comment": "feature_utils.cpp:22:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "feature_utils.cpp",
    "line": 23,
    "function": null,
    "comment": "feature_utils.cpp:23:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "feature_utils.cpp",
    "line": 25,
    "function": null,
    "comment": "feature_utils.cpp:25:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "feature_utils.cpp",
    "line": 26,
    "function": null,
    "comment": "feature_utils.cpp:26:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "feature_utils.cpp",
    "line": 35,
    "function": null,
    "comment": "feature_utils.cpp:35:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "feature_utils.cpp",
    "line": 36,
    "function": null,
    "comment": "feature_utils.cpp:36:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "feature_utils.cpp",
    "line": 41,
    "function": null,
    "comment": "feature_utils.cpp:41:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "feature_utils.cpp",
    "line": 46,
    "function": null,
    "comment": "feature_utils.cpp:46:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "feature_utils.cpp",
    "line": 46,
    "function": null,
    "comment": "feature_utils.cpp:46:  Is this a non-const reference? If so, make const or use a pointer: std::vector<cv::Point2f>& pts  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "feature_utils.cpp",
    "line": 47,
    "function": null,
    "comment": "feature_utils.cpp:47:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "feature_utils.cpp",
    "line": 51,
    "function": null,
    "comment": "feature_utils.cpp:51:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "feature_utils.cpp",
    "line": 56,
    "function": null,
    "comment": "feature_utils.cpp:56:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "feature_utils.cpp",
    "line": 56,
    "function": null,
    "comment": "feature_utils.cpp:56:  Is this a non-const reference? If so, make const or use a pointer: KeypointVector& kpts  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "feature_utils.cpp",
    "line": 57,
    "function": null,
    "comment": "feature_utils.cpp:57:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "feature_utils.cpp",
    "line": 61,
    "function": null,
    "comment": "feature_utils.cpp:61:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "feature_utils.cpp",
    "line": 66,
    "function": null,
    "comment": "feature_utils.cpp:66:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "feature_utils.cpp",
    "line": 67,
    "function": null,
    "comment": "feature_utils.cpp:67:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "feature_utils.cpp",
    "line": 67,
    "function": null,
    "comment": "feature_utils.cpp:67:  Is this a non-const reference? If so, make const or use a pointer: std::vector<cv::Point2f>& pts_train  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "feature_utils.cpp",
    "line": 67,
    "function": null,
    "comment": "feature_utils.cpp:67:  Is this a non-const reference? If so, make const or use a pointer: std::vector<Point2f>& pts_query  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "feature_utils.cpp",
    "line": 68,
    "function": null,
    "comment": "feature_utils.cpp:68:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "feature_utils.cpp",
    "line": 69,
    "function": null,
    "comment": "feature_utils.cpp:69:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "feature_utils.cpp",
    "line": 78,
    "function": null,
    "comment": "feature_utils.cpp:78:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "feature_utils.cpp",
    "line": 79,
    "function": null,
    "comment": "feature_utils.cpp:79:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "feature_utils.cpp",
    "line": 82,
    "function": null,
    "comment": "feature_utils.cpp:82:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "feature_utils.cpp",
    "line": 82,
    "function": null,
    "comment": "feature_utils.cpp:82:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "feature_utils.cpp",
    "line": 82,
    "function": null,
    "comment": "feature_utils.cpp:82:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "feature_utils.cpp",
    "line": 82,
    "function": null,
    "comment": "feature_utils.cpp:82:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "feature_utils.cpp",
    "line": 82,
    "function": null,
    "comment": "feature_utils.cpp:82:  Using deprecated casting style.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "feature_utils.cpp",
    "line": 86,
    "function": null,
    "comment": "feature_utils.cpp:86:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "feature_utils.cpp",
    "line": 86,
    "function": null,
    "comment": "feature_utils.cpp:86:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "feature_utils.cpp",
    "line": 86,
    "function": null,
    "comment": "feature_utils.cpp:86:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "feature_utils.cpp",
    "line": 86,
    "function": null,
    "comment": "feature_utils.cpp:86:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "feature_utils.cpp",
    "line": 86,
    "function": null,
    "comment": "feature_utils.cpp:86:  Using deprecated casting style.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "feature_utils.cpp",
    "line": 92,
    "function": null,
    "comment": "feature_utils.cpp:92:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "feature_utils.cpp",
    "line": 94,
    "function": null,
    "comment": "feature_utils.cpp:94:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "feature_utils.cpp",
    "line": 97,
    "function": null,
    "comment": "feature_utils.cpp:97:  Namespace should be terminated with '// namespace pano'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 103,
    "function": null,
    "comment": "feature_utils.cpp:103:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 104,
    "function": null,
    "comment": "feature_utils.cpp:104:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 105,
    "function": null,
    "comment": "feature_utils.cpp:105:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 107,
    "function": null,
    "comment": "feature_utils.cpp:107:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 107,
    "function": null,
    "comment": "feature_utils.cpp:107:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 108,
    "function": null,
    "comment": "feature_utils.cpp:108:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 108,
    "function": null,
    "comment": "feature_utils.cpp:108:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 109,
    "function": null,
    "comment": "feature_utils.cpp:109:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 109,
    "function": null,
    "comment": "feature_utils.cpp:109:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 110,
    "function": null,
    "comment": "feature_utils.cpp:110:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 110,
    "function": null,
    "comment": "feature_utils.cpp:110:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 111,
    "function": null,
    "comment": "feature_utils.cpp:111:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 112,
    "function": null,
    "comment": "feature_utils.cpp:112:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 113,
    "function": null,
    "comment": "feature_utils.cpp:113:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 113,
    "function": null,
    "comment": "feature_utils.cpp:113:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 114,
    "function": null,
    "comment": "feature_utils.cpp:114:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 114,
    "function": null,
    "comment": "feature_utils.cpp:114:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 115,
    "function": null,
    "comment": "feature_utils.cpp:115:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 115,
    "function": null,
    "comment": "feature_utils.cpp:115:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 116,
    "function": null,
    "comment": "feature_utils.cpp:116:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 116,
    "function": null,
    "comment": "feature_utils.cpp:116:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 117,
    "function": null,
    "comment": "feature_utils.cpp:117:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 117,
    "function": null,
    "comment": "feature_utils.cpp:117:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 118,
    "function": null,
    "comment": "feature_utils.cpp:118:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 118,
    "function": null,
    "comment": "feature_utils.cpp:118:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 120,
    "function": null,
    "comment": "feature_utils.cpp:120:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 120,
    "function": null,
    "comment": "feature_utils.cpp:120:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 121,
    "function": null,
    "comment": "feature_utils.cpp:121:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 121,
    "function": null,
    "comment": "feature_utils.cpp:121:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 123,
    "function": null,
    "comment": "feature_utils.cpp:123:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 123,
    "function": null,
    "comment": "feature_utils.cpp:123:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 124,
    "function": null,
    "comment": "feature_utils.cpp:124:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 124,
    "function": null,
    "comment": "feature_utils.cpp:124:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 126,
    "function": null,
    "comment": "feature_utils.cpp:126:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 126,
    "function": null,
    "comment": "feature_utils.cpp:126:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 127,
    "function": null,
    "comment": "feature_utils.cpp:127:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 127,
    "function": null,
    "comment": "feature_utils.cpp:127:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 129,
    "function": null,
    "comment": "feature_utils.cpp:129:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 129,
    "function": null,
    "comment": "feature_utils.cpp:129:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 130,
    "function": null,
    "comment": "feature_utils.cpp:130:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 130,
    "function": null,
    "comment": "feature_utils.cpp:130:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 132,
    "function": null,
    "comment": "feature_utils.cpp:132:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 132,
    "function": null,
    "comment": "feature_utils.cpp:132:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 133,
    "function": null,
    "comment": "feature_utils.cpp:133:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 133,
    "function": null,
    "comment": "feature_utils.cpp:133:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 135,
    "function": null,
    "comment": "feature_utils.cpp:135:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 135,
    "function": null,
    "comment": "feature_utils.cpp:135:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 136,
    "function": null,
    "comment": "feature_utils.cpp:136:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 136,
    "function": null,
    "comment": "feature_utils.cpp:136:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 137,
    "function": null,
    "comment": "feature_utils.cpp:137:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 137,
    "function": null,
    "comment": "feature_utils.cpp:137:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 138,
    "function": null,
    "comment": "feature_utils.cpp:138:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 139,
    "function": null,
    "comment": "feature_utils.cpp:139:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 139,
    "function": null,
    "comment": "feature_utils.cpp:139:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 140,
    "function": null,
    "comment": "feature_utils.cpp:140:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 140,
    "function": null,
    "comment": "feature_utils.cpp:140:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 141,
    "function": null,
    "comment": "feature_utils.cpp:141:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 142,
    "function": null,
    "comment": "feature_utils.cpp:142:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 142,
    "function": null,
    "comment": "feature_utils.cpp:142:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 143,
    "function": null,
    "comment": "feature_utils.cpp:143:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 144,
    "function": null,
    "comment": "feature_utils.cpp:144:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 145,
    "function": null,
    "comment": "feature_utils.cpp:145:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 147,
    "function": null,
    "comment": "feature_utils.cpp:147:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 148,
    "function": null,
    "comment": "feature_utils.cpp:148:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 148,
    "function": null,
    "comment": "feature_utils.cpp:148:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 149,
    "function": null,
    "comment": "feature_utils.cpp:149:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 149,
    "function": null,
    "comment": "feature_utils.cpp:149:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 150,
    "function": null,
    "comment": "feature_utils.cpp:150:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 150,
    "function": null,
    "comment": "feature_utils.cpp:150:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 153,
    "function": null,
    "comment": "feature_utils.cpp:153:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 154,
    "function": null,
    "comment": "feature_utils.cpp:154:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 154,
    "function": null,
    "comment": "feature_utils.cpp:154:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 155,
    "function": null,
    "comment": "feature_utils.cpp:155:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 155,
    "function": null,
    "comment": "feature_utils.cpp:155:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 156,
    "function": null,
    "comment": "feature_utils.cpp:156:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 157,
    "function": null,
    "comment": "feature_utils.cpp:157:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 157,
    "function": null,
    "comment": "feature_utils.cpp:157:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 158,
    "function": null,
    "comment": "feature_utils.cpp:158:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 158,
    "function": null,
    "comment": "feature_utils.cpp:158:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 159,
    "function": null,
    "comment": "feature_utils.cpp:159:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 159,
    "function": null,
    "comment": "feature_utils.cpp:159:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 160,
    "function": null,
    "comment": "feature_utils.cpp:160:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 161,
    "function": null,
    "comment": "feature_utils.cpp:161:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 161,
    "function": null,
    "comment": "feature_utils.cpp:161:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 162,
    "function": null,
    "comment": "feature_utils.cpp:162:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 162,
    "function": null,
    "comment": "feature_utils.cpp:162:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 163,
    "function": null,
    "comment": "feature_utils.cpp:163:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 163,
    "function": null,
    "comment": "feature_utils.cpp:163:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 164,
    "function": null,
    "comment": "feature_utils.cpp:164:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 165,
    "function": null,
    "comment": "feature_utils.cpp:165:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 165,
    "function": null,
    "comment": "feature_utils.cpp:165:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 166,
    "function": null,
    "comment": "feature_utils.cpp:166:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 166,
    "function": null,
    "comment": "feature_utils.cpp:166:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 167,
    "function": null,
    "comment": "feature_utils.cpp:167:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 167,
    "function": null,
    "comment": "feature_utils.cpp:167:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 168,
    "function": null,
    "comment": "feature_utils.cpp:168:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 170,
    "function": null,
    "comment": "feature_utils.cpp:170:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 170,
    "function": null,
    "comment": "feature_utils.cpp:170:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 171,
    "function": null,
    "comment": "feature_utils.cpp:171:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 171,
    "function": null,
    "comment": "feature_utils.cpp:171:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 172,
    "function": null,
    "comment": "feature_utils.cpp:172:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 172,
    "function": null,
    "comment": "feature_utils.cpp:172:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 173,
    "function": null,
    "comment": "feature_utils.cpp:173:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 173,
    "function": null,
    "comment": "feature_utils.cpp:173:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 174,
    "function": null,
    "comment": "feature_utils.cpp:174:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 175,
    "function": null,
    "comment": "feature_utils.cpp:175:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 175,
    "function": null,
    "comment": "feature_utils.cpp:175:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 178,
    "function": null,
    "comment": "feature_utils.cpp:178:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 179,
    "function": null,
    "comment": "feature_utils.cpp:179:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 179,
    "function": null,
    "comment": "feature_utils.cpp:179:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 180,
    "function": null,
    "comment": "feature_utils.cpp:180:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 180,
    "function": null,
    "comment": "feature_utils.cpp:180:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 181,
    "function": null,
    "comment": "feature_utils.cpp:181:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 182,
    "function": null,
    "comment": "feature_utils.cpp:182:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 182,
    "function": null,
    "comment": "feature_utils.cpp:182:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 183,
    "function": null,
    "comment": "feature_utils.cpp:183:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 183,
    "function": null,
    "comment": "feature_utils.cpp:183:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 184,
    "function": null,
    "comment": "feature_utils.cpp:184:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 184,
    "function": null,
    "comment": "feature_utils.cpp:184:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 185,
    "function": null,
    "comment": "feature_utils.cpp:185:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 185,
    "function": null,
    "comment": "feature_utils.cpp:185:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 186,
    "function": null,
    "comment": "feature_utils.cpp:186:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 187,
    "function": null,
    "comment": "feature_utils.cpp:187:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 187,
    "function": null,
    "comment": "feature_utils.cpp:187:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 188,
    "function": null,
    "comment": "feature_utils.cpp:188:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 188,
    "function": null,
    "comment": "feature_utils.cpp:188:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 189,
    "function": null,
    "comment": "feature_utils.cpp:189:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 189,
    "function": null,
    "comment": "feature_utils.cpp:189:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 190,
    "function": null,
    "comment": "feature_utils.cpp:190:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 190,
    "function": null,
    "comment": "feature_utils.cpp:190:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 191,
    "function": null,
    "comment": "feature_utils.cpp:191:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 192,
    "function": null,
    "comment": "feature_utils.cpp:192:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 192,
    "function": null,
    "comment": "feature_utils.cpp:192:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 193,
    "function": null,
    "comment": "feature_utils.cpp:193:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 193,
    "function": null,
    "comment": "feature_utils.cpp:193:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 194,
    "function": null,
    "comment": "feature_utils.cpp:194:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 196,
    "function": null,
    "comment": "feature_utils.cpp:196:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 196,
    "function": null,
    "comment": "feature_utils.cpp:196:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 197,
    "function": null,
    "comment": "feature_utils.cpp:197:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 197,
    "function": null,
    "comment": "feature_utils.cpp:197:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 198,
    "function": null,
    "comment": "feature_utils.cpp:198:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 198,
    "function": null,
    "comment": "feature_utils.cpp:198:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 199,
    "function": null,
    "comment": "feature_utils.cpp:199:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 199,
    "function": null,
    "comment": "feature_utils.cpp:199:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 200,
    "function": null,
    "comment": "feature_utils.cpp:200:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 201,
    "function": null,
    "comment": "feature_utils.cpp:201:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 201,
    "function": null,
    "comment": "feature_utils.cpp:201:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 204,
    "function": null,
    "comment": "feature_utils.cpp:204:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 205,
    "function": null,
    "comment": "feature_utils.cpp:205:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 205,
    "function": null,
    "comment": "feature_utils.cpp:205:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 206,
    "function": null,
    "comment": "feature_utils.cpp:206:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 206,
    "function": null,
    "comment": "feature_utils.cpp:206:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 207,
    "function": null,
    "comment": "feature_utils.cpp:207:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 208,
    "function": null,
    "comment": "feature_utils.cpp:208:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 208,
    "function": null,
    "comment": "feature_utils.cpp:208:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 209,
    "function": null,
    "comment": "feature_utils.cpp:209:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 209,
    "function": null,
    "comment": "feature_utils.cpp:209:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 210,
    "function": null,
    "comment": "feature_utils.cpp:210:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 210,
    "function": null,
    "comment": "feature_utils.cpp:210:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 211,
    "function": null,
    "comment": "feature_utils.cpp:211:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 211,
    "function": null,
    "comment": "feature_utils.cpp:211:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 212,
    "function": null,
    "comment": "feature_utils.cpp:212:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 213,
    "function": null,
    "comment": "feature_utils.cpp:213:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 213,
    "function": null,
    "comment": "feature_utils.cpp:213:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 214,
    "function": null,
    "comment": "feature_utils.cpp:214:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 214,
    "function": null,
    "comment": "feature_utils.cpp:214:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 215,
    "function": null,
    "comment": "feature_utils.cpp:215:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 215,
    "function": null,
    "comment": "feature_utils.cpp:215:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 216,
    "function": null,
    "comment": "feature_utils.cpp:216:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 216,
    "function": null,
    "comment": "feature_utils.cpp:216:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 217,
    "function": null,
    "comment": "feature_utils.cpp:217:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 218,
    "function": null,
    "comment": "feature_utils.cpp:218:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 218,
    "function": null,
    "comment": "feature_utils.cpp:218:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 219,
    "function": null,
    "comment": "feature_utils.cpp:219:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 219,
    "function": null,
    "comment": "feature_utils.cpp:219:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 220,
    "function": null,
    "comment": "feature_utils.cpp:220:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 222,
    "function": null,
    "comment": "feature_utils.cpp:222:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 222,
    "function": null,
    "comment": "feature_utils.cpp:222:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 223,
    "function": null,
    "comment": "feature_utils.cpp:223:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 223,
    "function": null,
    "comment": "feature_utils.cpp:223:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 224,
    "function": null,
    "comment": "feature_utils.cpp:224:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 224,
    "function": null,
    "comment": "feature_utils.cpp:224:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 225,
    "function": null,
    "comment": "feature_utils.cpp:225:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 225,
    "function": null,
    "comment": "feature_utils.cpp:225:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 226,
    "function": null,
    "comment": "feature_utils.cpp:226:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "feature_utils.cpp",
    "line": 227,
    "function": null,
    "comment": "feature_utils.cpp:227:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 227,
    "function": null,
    "comment": "feature_utils.cpp:227:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 230,
    "function": null,
    "comment": "feature_utils.cpp:230:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 231,
    "function": null,
    "comment": "feature_utils.cpp:231:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "feature_utils.cpp",
    "line": 232,
    "function": null,
    "comment": "feature_utils.cpp:232:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "feature_utils.cpp",
    "line": 67,
    "function": null,
    "comment": "feature_utils.cpp:67:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "BlenderMultiband.cpp",
    "line": null,
    "function": null,
    "comment": "BlenderMultiband.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "BlenderMultiband.cpp",
    "line": 3,
    "function": null,
    "comment": "BlenderMultiband.cpp:3:  Found C system header after other header. Should be: BlenderMultiband.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "BlenderMultiband.cpp",
    "line": 4,
    "function": null,
    "comment": "BlenderMultiband.cpp:4:  Found C system header after other header. Should be: BlenderMultiband.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "BlenderMultiband.cpp",
    "line": 7,
    "function": null,
    "comment": "BlenderMultiband.cpp:7:  Include 'pano_core/BlurDetector.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "BlenderMultiband.cpp",
    "line": 9,
    "function": null,
    "comment": "BlenderMultiband.cpp:9:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not include the same file twice.",
    "file": "BlenderMultiband.cpp",
    "line": 11,
    "function": null,
    "comment": "BlenderMultiband.cpp:11:  'opencv2/core/core.hpp' already included at BlenderMultiband.cpp:3  [build/include] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Do not include the same file twice.",
    "file": "BlenderMultiband.cpp",
    "line": 12,
    "function": null,
    "comment": "BlenderMultiband.cpp:12:  'opencv2/highgui/highgui.hpp' already included at BlenderMultiband.cpp:4  [build/include] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "BlenderMultiband.cpp",
    "line": 14,
    "function": null,
    "comment": "BlenderMultiband.cpp:14:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "BlenderMultiband.cpp",
    "line": 15,
    "function": null,
    "comment": "BlenderMultiband.cpp:15:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "BlenderMultiband.cpp",
    "line": 16,
    "function": null,
    "comment": "BlenderMultiband.cpp:16:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "BlenderMultiband.cpp",
    "line": 19,
    "function": null,
    "comment": "BlenderMultiband.cpp:19:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "BlenderMultiband.cpp",
    "line": 23,
    "function": null,
    "comment": "BlenderMultiband.cpp:23:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "BlenderMultiband.cpp",
    "line": 24,
    "function": null,
    "comment": "BlenderMultiband.cpp:24:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "BlenderMultiband.cpp",
    "line": 24,
    "function": null,
    "comment": "BlenderMultiband.cpp:24:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "BlenderMultiband.cpp",
    "line": 28,
    "function": null,
    "comment": "BlenderMultiband.cpp:28:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "BlenderMultiband.cpp",
    "line": 29,
    "function": null,
    "comment": "BlenderMultiband.cpp:29:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "BlenderMultiband.cpp",
    "line": 29,
    "function": null,
    "comment": "BlenderMultiband.cpp:29:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "BlenderMultiband.cpp",
    "line": 32,
    "function": null,
    "comment": "BlenderMultiband.cpp:32:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "BlenderMultiband.cpp",
    "line": 34,
    "function": null,
    "comment": "BlenderMultiband.cpp:34:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "BlenderMultiband.cpp",
    "line": 35,
    "function": null,
    "comment": "BlenderMultiband.cpp:35:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "BlenderMultiband.cpp",
    "line": 36,
    "function": null,
    "comment": "BlenderMultiband.cpp:36:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't use a semicolon to denote an empty statement. Use {} instead.",
    "file": "BlenderMultiband.cpp",
    "line": 37,
    "function": null,
    "comment": "BlenderMultiband.cpp:37:  Line contains only semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","google-cpp","semicolon","empty-statement","empty-block"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "BlenderMultiband.cpp",
    "line": 40,
    "function": null,
    "comment": "BlenderMultiband.cpp:40:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "BlenderMultiband.cpp",
    "line": 45,
    "function": null,
    "comment": "BlenderMultiband.cpp:45:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "BlenderMultiband.cpp",
    "line": 49,
    "function": null,
    "comment": "BlenderMultiband.cpp:49:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "BlenderMultiband.cpp",
    "line": 58,
    "function": null,
    "comment": "BlenderMultiband.cpp:58:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "BlenderMultiband.cpp",
    "line": 62,
    "function": null,
    "comment": "BlenderMultiband.cpp:62:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "BlenderMultiband.cpp",
    "line": 63,
    "function": null,
    "comment": "BlenderMultiband.cpp:63:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "BlenderMultiband.cpp",
    "line": 68,
    "function": null,
    "comment": "BlenderMultiband.cpp:68:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "BlenderMultiband.cpp",
    "line": 75,
    "function": null,
    "comment": "BlenderMultiband.cpp:75:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "BlenderMultiband.cpp",
    "line": 78,
    "function": null,
    "comment": "BlenderMultiband.cpp:78:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "BlenderMultiband.cpp",
    "line": 84,
    "function": null,
    "comment": "BlenderMultiband.cpp:84:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "BlenderMultiband.cpp",
    "line": 87,
    "function": null,
    "comment": "BlenderMultiband.cpp:87:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "BlenderMultiband.cpp",
    "line": 89,
    "function": null,
    "comment": "BlenderMultiband.cpp:89:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "BlenderMultiband.cpp",
    "line": 92,
    "function": null,
    "comment": "BlenderMultiband.cpp:92:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "BlenderMultiband.cpp",
    "line": 93,
    "function": null,
    "comment": "BlenderMultiband.cpp:93:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "BlenderMultiband.cpp",
    "line": 96,
    "function": null,
    "comment": "BlenderMultiband.cpp:96:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "BlenderMultiband.cpp",
    "line": 101,
    "function": null,
    "comment": "BlenderMultiband.cpp:101:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "BlenderMultiband.cpp",
    "line": 102,
    "function": null,
    "comment": "BlenderMultiband.cpp:102:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "BlenderMultiband.cpp",
    "line": 104,
    "function": null,
    "comment": "BlenderMultiband.cpp:104:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "BlenderMultiband.cpp",
    "line": 113,
    "function": null,
    "comment": "BlenderMultiband.cpp:113:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "BlenderMultiband.cpp",
    "line": 117,
    "function": null,
    "comment": "BlenderMultiband.cpp:117:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "BlenderMultiband.cpp",
    "line": 119,
    "function": null,
    "comment": "BlenderMultiband.cpp:119:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "BlenderMultiband.cpp",
    "line": 133,
    "function": null,
    "comment": "BlenderMultiband.cpp:133:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use 2 spaces for indentation.",
    "file": "BlenderMultiband.cpp",
    "line": 136,
    "function": null,
    "comment": "BlenderMultiband.cpp:136:  Weird number of spaces at line-start.  Are you using a 2-space indent?  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "BlenderMultiband.cpp",
    "line": 137,
    "function": null,
    "comment": "BlenderMultiband.cpp:137:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "BlenderMultiband.cpp",
    "line": 150,
    "function": null,
    "comment": "BlenderMultiband.cpp:150:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "BlenderMultiband.cpp",
    "line": 156,
    "function": null,
    "comment": "BlenderMultiband.cpp:156:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "BlenderMultiband.cpp",
    "line": 161,
    "function": null,
    "comment": "BlenderMultiband.cpp:161:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "BlenderMultiband.cpp",
    "line": 164,
    "function": null,
    "comment": "BlenderMultiband.cpp:164:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "BlenderMultiband.cpp",
    "line": 169,
    "function": null,
    "comment": "BlenderMultiband.cpp:169:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "BlenderMultiband.cpp",
    "line": 169,
    "function": null,
    "comment": "BlenderMultiband.cpp:169:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "BlenderMultiband.cpp",
    "line": 175,
    "function": null,
    "comment": "BlenderMultiband.cpp:175:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "BlenderMultiband.cpp",
    "line": 178,
    "function": null,
    "comment": "BlenderMultiband.cpp:178:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "BlenderMultiband.cpp",
    "line": 180,
    "function": null,
    "comment": "BlenderMultiband.cpp:180:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "BlenderMultiband.cpp",
    "line": 180,
    "function": null,
    "comment": "BlenderMultiband.cpp:180:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "BlenderMultiband.cpp",
    "line": 182,
    "function": null,
    "comment": "BlenderMultiband.cpp:182:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "BlenderMultiband.cpp",
    "line": 183,
    "function": null,
    "comment": "BlenderMultiband.cpp:183:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "BlenderMultiband.cpp",
    "line": 184,
    "function": null,
    "comment": "BlenderMultiband.cpp:184:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "BlenderMultiband.cpp",
    "line": 191,
    "function": null,
    "comment": "BlenderMultiband.cpp:191:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "BlenderMultiband.cpp",
    "line": 192,
    "function": null,
    "comment": "BlenderMultiband.cpp:192:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "BlenderMultiband.cpp",
    "line": 194,
    "function": null,
    "comment": "BlenderMultiband.cpp:194:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "BlenderMultiband.cpp",
    "line": 195,
    "function": null,
    "comment": "BlenderMultiband.cpp:195:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "BlenderMultiband.cpp",
    "line": 206,
    "function": null,
    "comment": "BlenderMultiband.cpp:206:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "BlenderMultiband.cpp",
    "line": 206,
    "function": null,
    "comment": "BlenderMultiband.cpp:206:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "BlenderMultiband.cpp",
    "line": 209,
    "function": null,
    "comment": "BlenderMultiband.cpp:209:  Namespace should be terminated with '// namespace pano'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "BlenderMultiband.cpp",
    "line": 209,
    "function": null,
    "comment": "BlenderMultiband.cpp:209:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "BlenderMultiband.cpp",
    "line": 61,
    "function": null,
    "comment": "BlenderMultiband.cpp:61:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "BlenderMultiband.cpp",
    "line": 173,
    "function": null,
    "comment": "BlenderMultiband.cpp:173:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "BlenderMultiband.cpp",
    "line": 108,
    "function": null,
    "comment": "BlenderMultiband.cpp:108:  Add #include <set> for set<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "ImageMolecule.cpp",
    "line": null,
    "function": null,
    "comment": "ImageMolecule.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "ImageMolecule.cpp",
    "line": 12,
    "function": null,
    "comment": "ImageMolecule.cpp:12:  Found C++ system header after other header. Should be: ImageMolecule.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "ImageMolecule.cpp",
    "line": 13,
    "function": null,
    "comment": "ImageMolecule.cpp:13:  Found C++ system header after other header. Should be: ImageMolecule.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "ImageMolecule.cpp",
    "line": 14,
    "function": null,
    "comment": "ImageMolecule.cpp:14:  Found C++ system header after other header. Should be: ImageMolecule.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "ImageMolecule.cpp",
    "line": 15,
    "function": null,
    "comment": "ImageMolecule.cpp:15:  Found C++ system header after other header. Should be: ImageMolecule.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not include the same file twice.",
    "file": "ImageMolecule.cpp",
    "line": 16,
    "function": null,
    "comment": "ImageMolecule.cpp:16:  'algorithm' already included at ImageMolecule.cpp:12  [build/include] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "ImageMolecule.cpp",
    "line": 17,
    "function": null,
    "comment": "ImageMolecule.cpp:17:  Found C++ system header after other header. Should be: ImageMolecule.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "ImageMolecule.cpp",
    "line": 18,
    "function": null,
    "comment": "ImageMolecule.cpp:18:  Found C++ system header after other header. Should be: ImageMolecule.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "ImageMolecule.cpp",
    "line": 19,
    "function": null,
    "comment": "ImageMolecule.cpp:19:  Found C++ system header after other header. Should be: ImageMolecule.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "ImageMolecule.cpp",
    "line": 20,
    "function": null,
    "comment": "ImageMolecule.cpp:20:  Found C++ system header after other header. Should be: ImageMolecule.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "ImageMolecule.cpp",
    "line": 22,
    "function": null,
    "comment": "ImageMolecule.cpp:22:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "ImageMolecule.cpp",
    "line": 23,
    "function": null,
    "comment": "ImageMolecule.cpp:23:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageMolecule.cpp",
    "line": 26,
    "function": null,
    "comment": "ImageMolecule.cpp:26:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageMolecule.cpp",
    "line": 29,
    "function": null,
    "comment": "ImageMolecule.cpp:29:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageMolecule.cpp",
    "line": 34,
    "function": null,
    "comment": "ImageMolecule.cpp:34:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "ImageMolecule.cpp",
    "line": 35,
    "function": null,
    "comment": "ImageMolecule.cpp:35:  Single-parameter constructors should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageMolecule.cpp",
    "line": 37,
    "function": null,
    "comment": "ImageMolecule.cpp:37:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageMolecule.cpp",
    "line": 41,
    "function": null,
    "comment": "ImageMolecule.cpp:41:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "ImageMolecule.cpp",
    "line": 44,
    "function": null,
    "comment": "ImageMolecule.cpp:44:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageMolecule.cpp",
    "line": 48,
    "function": null,
    "comment": "ImageMolecule.cpp:48:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "ImageMolecule.cpp",
    "line": 49,
    "function": null,
    "comment": "ImageMolecule.cpp:49:  Single-parameter constructors should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageMolecule.cpp",
    "line": 51,
    "function": null,
    "comment": "ImageMolecule.cpp:51:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageMolecule.cpp",
    "line": 55,
    "function": null,
    "comment": "ImageMolecule.cpp:55:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "ImageMolecule.cpp",
    "line": 59,
    "function": null,
    "comment": "ImageMolecule.cpp:59:  Anonymous namespace should be terminated with '// namespace'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageMolecule.cpp",
    "line": 62,
    "function": null,
    "comment": "ImageMolecule.cpp:62:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "ImageMolecule.cpp",
    "line": 63,
    "function": null,
    "comment": "ImageMolecule.cpp:63:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "ImageMolecule.cpp",
    "line": 63,
    "function": null,
    "comment": "ImageMolecule.cpp:63:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ImageMolecule.cpp",
    "line": 67,
    "function": null,
    "comment": "ImageMolecule.cpp:67:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageMolecule.cpp",
    "line": 68,
    "function": null,
    "comment": "ImageMolecule.cpp:68:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "ImageMolecule.cpp",
    "line": 69,
    "function": null,
    "comment": "ImageMolecule.cpp:69:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "ImageMolecule.cpp",
    "line": 69,
    "function": null,
    "comment": "ImageMolecule.cpp:69:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageMolecule.cpp",
    "line": 73,
    "function": null,
    "comment": "ImageMolecule.cpp:73:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageMolecule.cpp",
    "line": 80,
    "function": null,
    "comment": "ImageMolecule.cpp:80:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "ImageMolecule.cpp",
    "line": 86,
    "function": null,
    "comment": "ImageMolecule.cpp:86:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageMolecule.cpp",
    "line": 87,
    "function": null,
    "comment": "ImageMolecule.cpp:87:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "ImageMolecule.cpp",
    "line": 94,
    "function": null,
    "comment": "ImageMolecule.cpp:94:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageMolecule.cpp",
    "line": 95,
    "function": null,
    "comment": "ImageMolecule.cpp:95:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageMolecule.cpp",
    "line": 105,
    "function": null,
    "comment": "ImageMolecule.cpp:105:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageMolecule.cpp",
    "line": 108,
    "function": null,
    "comment": "ImageMolecule.cpp:108:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "ImageMolecule.cpp",
    "line": 109,
    "function": null,
    "comment": "ImageMolecule.cpp:109:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "ImageMolecule.cpp",
    "line": 109,
    "function": null,
    "comment": "ImageMolecule.cpp:109:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageMolecule.cpp",
    "line": 115,
    "function": null,
    "comment": "ImageMolecule.cpp:115:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageMolecule.cpp",
    "line": 117,
    "function": null,
    "comment": "ImageMolecule.cpp:117:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "ImageMolecule.cpp",
    "line": 123,
    "function": null,
    "comment": "ImageMolecule.cpp:123:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageMolecule.cpp",
    "line": 124,
    "function": null,
    "comment": "ImageMolecule.cpp:124:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageMolecule.cpp",
    "line": 127,
    "function": null,
    "comment": "ImageMolecule.cpp:127:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageMolecule.cpp",
    "line": 139,
    "function": null,
    "comment": "ImageMolecule.cpp:139:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "ImageMolecule.cpp",
    "line": 147,
    "function": null,
    "comment": "ImageMolecule.cpp:147:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageMolecule.cpp",
    "line": 148,
    "function": null,
    "comment": "ImageMolecule.cpp:148:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "ImageMolecule.cpp",
    "line": 152,
    "function": null,
    "comment": "ImageMolecule.cpp:152:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageMolecule.cpp",
    "line": 153,
    "function": null,
    "comment": "ImageMolecule.cpp:153:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageMolecule.cpp",
    "line": 158,
    "function": null,
    "comment": "ImageMolecule.cpp:158:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "ImageMolecule.cpp",
    "line": 162,
    "function": null,
    "comment": "ImageMolecule.cpp:162:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageMolecule.cpp",
    "line": 163,
    "function": null,
    "comment": "ImageMolecule.cpp:163:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "ImageMolecule.cpp",
    "line": 167,
    "function": null,
    "comment": "ImageMolecule.cpp:167:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageMolecule.cpp",
    "line": 168,
    "function": null,
    "comment": "ImageMolecule.cpp:168:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "ImageMolecule.cpp",
    "line": 172,
    "function": null,
    "comment": "ImageMolecule.cpp:172:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageMolecule.cpp",
    "line": 173,
    "function": null,
    "comment": "ImageMolecule.cpp:173:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "ImageMolecule.cpp",
    "line": 176,
    "function": null,
    "comment": "ImageMolecule.cpp:176:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageMolecule.cpp",
    "line": 177,
    "function": null,
    "comment": "ImageMolecule.cpp:177:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "ImageMolecule.cpp",
    "line": 178,
    "function": null,
    "comment": "ImageMolecule.cpp:178:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageMolecule.cpp",
    "line": 180,
    "function": null,
    "comment": "ImageMolecule.cpp:180:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "ImageMolecule.cpp",
    "line": 184,
    "function": null,
    "comment": "ImageMolecule.cpp:184:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "ImageMolecule.cpp",
    "line": 185,
    "function": null,
    "comment": "ImageMolecule.cpp:185:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "To-do comments should look like '// TODO(my_username): Stuff.'.",
    "file": "ImageMolecule.cpp",
    "line": 192,
    "function": null,
    "comment": "ImageMolecule.cpp:192:  Missing username in TODO; it should look like '// TODO(my_username): Stuff.'  [readability/todo] [2]",
    "tags": ["comments","code-standards","formatting","google-cpp","todo-comment"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageMolecule.cpp",
    "line": 195,
    "function": null,
    "comment": "ImageMolecule.cpp:195:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageMolecule.cpp",
    "line": 198,
    "function": null,
    "comment": "ImageMolecule.cpp:198:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageMolecule.cpp",
    "line": 206,
    "function": null,
    "comment": "ImageMolecule.cpp:206:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageMolecule.cpp",
    "line": 215,
    "function": null,
    "comment": "ImageMolecule.cpp:215:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "ImageMolecule.cpp",
    "line": 216,
    "function": null,
    "comment": "ImageMolecule.cpp:216:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "ImageMolecule.cpp",
    "line": 217,
    "function": null,
    "comment": "ImageMolecule.cpp:217:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageMolecule.cpp",
    "line": 219,
    "function": null,
    "comment": "ImageMolecule.cpp:219:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "ImageMolecule.cpp",
    "line": 223,
    "function": null,
    "comment": "ImageMolecule.cpp:223:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "ImageMolecule.cpp",
    "line": 226,
    "function": null,
    "comment": "ImageMolecule.cpp:226:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "ImageMolecule.cpp",
    "line": 229,
    "function": null,
    "comment": "ImageMolecule.cpp:229:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "ImageMolecule.cpp",
    "line": 230,
    "function": null,
    "comment": "ImageMolecule.cpp:230:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ImageMolecule.cpp",
    "line": 231,
    "function": null,
    "comment": "ImageMolecule.cpp:231:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "ImageMolecule.cpp",
    "line": 234,
    "function": null,
    "comment": "ImageMolecule.cpp:234:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageMolecule.cpp",
    "line": 235,
    "function": null,
    "comment": "ImageMolecule.cpp:235:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "ImageMolecule.cpp",
    "line": 239,
    "function": null,
    "comment": "ImageMolecule.cpp:239:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageMolecule.cpp",
    "line": 240,
    "function": null,
    "comment": "ImageMolecule.cpp:240:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "ImageMolecule.cpp",
    "line": 244,
    "function": null,
    "comment": "ImageMolecule.cpp:244:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageMolecule.cpp",
    "line": 245,
    "function": null,
    "comment": "ImageMolecule.cpp:245:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ImageMolecule.cpp",
    "line": 249,
    "function": null,
    "comment": "ImageMolecule.cpp:249:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "ImageMolecule.cpp",
    "line": 249,
    "function": null,
    "comment": "ImageMolecule.cpp:249:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageMolecule.cpp",
    "line": 250,
    "function": null,
    "comment": "ImageMolecule.cpp:250:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageMolecule.cpp",
    "line": 256,
    "function": null,
    "comment": "ImageMolecule.cpp:256:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageMolecule.cpp",
    "line": 260,
    "function": null,
    "comment": "ImageMolecule.cpp:260:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageMolecule.cpp",
    "line": 266,
    "function": null,
    "comment": "ImageMolecule.cpp:266:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageMolecule.cpp",
    "line": 273,
    "function": null,
    "comment": "ImageMolecule.cpp:273:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageMolecule.cpp",
    "line": 283,
    "function": null,
    "comment": "ImageMolecule.cpp:283:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "ImageMolecule.cpp",
    "line": 284,
    "function": null,
    "comment": "ImageMolecule.cpp:284:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageMolecule.cpp",
    "line": 285,
    "function": null,
    "comment": "ImageMolecule.cpp:285:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "ImageMolecule.cpp",
    "line": 291,
    "function": null,
    "comment": "ImageMolecule.cpp:291:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "ImageMolecule.cpp",
    "line": 293,
    "function": null,
    "comment": "ImageMolecule.cpp:293:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageMolecule.cpp",
    "line": 297,
    "function": null,
    "comment": "ImageMolecule.cpp:297:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageMolecule.cpp",
    "line": 304,
    "function": null,
    "comment": "ImageMolecule.cpp:304:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageMolecule.cpp",
    "line": 316,
    "function": null,
    "comment": "ImageMolecule.cpp:316:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageMolecule.cpp",
    "line": 324,
    "function": null,
    "comment": "ImageMolecule.cpp:324:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageMolecule.cpp",
    "line": 330,
    "function": null,
    "comment": "ImageMolecule.cpp:330:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "ImageMolecule.cpp",
    "line": 334,
    "function": null,
    "comment": "ImageMolecule.cpp:334:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ImageMolecule.cpp",
    "line": 343,
    "function": null,
    "comment": "ImageMolecule.cpp:343:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "ImageMolecule.cpp",
    "line": 348,
    "function": null,
    "comment": "ImageMolecule.cpp:348:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "ImageMolecule.cpp",
    "line": 352,
    "function": null,
    "comment": "ImageMolecule.cpp:352:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "ImageMolecule.cpp",
    "line": 355,
    "function": null,
    "comment": "ImageMolecule.cpp:355:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "ImageMolecule.cpp",
    "line": 374,
    "function": null,
    "comment": "ImageMolecule.cpp:374:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "ImageMolecule.cpp",
    "line": 408,
    "function": null,
    "comment": "ImageMolecule.cpp:408:  Namespace should be terminated with '// namespace pano'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "ImageMolecule.cpp",
    "line": 328,
    "function": null,
    "comment": "ImageMolecule.cpp:328:  Add #include <map> for map<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "ImageMolecule.cpp",
    "line": 274,
    "function": null,
    "comment": "ImageMolecule.cpp:274:  Add #include <list> for list<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "Features.cpp",
    "line": null,
    "function": null,
    "comment": "Features.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "Features.cpp",
    "line": 2,
    "function": null,
    "comment": "Features.cpp:2:  Include 'pano_core/feature_utils.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "Features.cpp",
    "line": 3,
    "function": null,
    "comment": "Features.cpp:3:  Include 'opencv2/core/core.hpp' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "Features.cpp",
    "line": 6,
    "function": null,
    "comment": "Features.cpp:6:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Features.cpp",
    "line": 8,
    "function": null,
    "comment": "Features.cpp:8:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Features.cpp",
    "line": 11,
    "function": null,
    "comment": "Features.cpp:11:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Features.cpp",
    "line": 15,
    "function": null,
    "comment": "Features.cpp:15:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use 2 spaces for indentation.",
    "file": "Features.cpp",
    "line": 17,
    "function": null,
    "comment": "Features.cpp:17:  Weird number of spaces at line-start.  Are you using a 2-space indent?  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Features.cpp",
    "line": 20,
    "function": null,
    "comment": "Features.cpp:20:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Features.cpp",
    "line": 21,
    "function": null,
    "comment": "Features.cpp:21:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Features.cpp",
    "line": 28,
    "function": null,
    "comment": "Features.cpp:28:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Features.cpp",
    "line": 29,
    "function": null,
    "comment": "Features.cpp:29:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Features.cpp",
    "line": 30,
    "function": null,
    "comment": "Features.cpp:30:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Features.cpp",
    "line": 32,
    "function": null,
    "comment": "Features.cpp:32:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Features.cpp",
    "line": 38,
    "function": null,
    "comment": "Features.cpp:38:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Features.cpp",
    "line": 45,
    "function": null,
    "comment": "Features.cpp:45:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Features.cpp",
    "line": 47,
    "function": null,
    "comment": "Features.cpp:47:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Features.cpp",
    "line": 49,
    "function": null,
    "comment": "Features.cpp:49:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "Features.cpp",
    "line": 50,
    "function": null,
    "comment": "Features.cpp:50:  Is this a non-const reference? If so, make const or use a pointer: Mat& img  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Features.cpp",
    "line": 51,
    "function": null,
    "comment": "Features.cpp:51:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "Features.cpp",
    "line": 52,
    "function": null,
    "comment": "Features.cpp:52:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Features.cpp",
    "line": 53,
    "function": null,
    "comment": "Features.cpp:53:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Features.cpp",
    "line": 55,
    "function": null,
    "comment": "Features.cpp:55:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Features.cpp",
    "line": 62,
    "function": null,
    "comment": "Features.cpp:62:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "Features.cpp",
    "line": 66,
    "function": null,
    "comment": "Features.cpp:66:  Namespace should be terminated with '// namespace pano'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "Features.cpp",
    "line": 50,
    "function": null,
    "comment": "Features.cpp:50:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "Extrinsics.cpp",
    "line": null,
    "function": null,
    "comment": "Extrinsics.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "Extrinsics.cpp",
    "line": 11,
    "function": null,
    "comment": "Extrinsics.cpp:11:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "Extrinsics.cpp",
    "line": 12,
    "function": null,
    "comment": "Extrinsics.cpp:12:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Extrinsics.cpp",
    "line": 14,
    "function": null,
    "comment": "Extrinsics.cpp:14:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Extrinsics.cpp",
    "line": 17,
    "function": null,
    "comment": "Extrinsics.cpp:17:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Extrinsics.cpp",
    "line": 18,
    "function": null,
    "comment": "Extrinsics.cpp:18:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Extrinsics.cpp",
    "line": 18,
    "function": null,
    "comment": "Extrinsics.cpp:18:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Extrinsics.cpp",
    "line": 22,
    "function": null,
    "comment": "Extrinsics.cpp:22:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Extrinsics.cpp",
    "line": 23,
    "function": null,
    "comment": "Extrinsics.cpp:23:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Extrinsics.cpp",
    "line": 23,
    "function": null,
    "comment": "Extrinsics.cpp:23:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Extrinsics.cpp",
    "line": 25,
    "function": null,
    "comment": "Extrinsics.cpp:25:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Extrinsics.cpp",
    "line": 27,
    "function": null,
    "comment": "Extrinsics.cpp:27:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Extrinsics.cpp",
    "line": 28,
    "function": null,
    "comment": "Extrinsics.cpp:28:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Extrinsics.cpp",
    "line": 28,
    "function": null,
    "comment": "Extrinsics.cpp:28:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Extrinsics.cpp",
    "line": 30,
    "function": null,
    "comment": "Extrinsics.cpp:30:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Extrinsics.cpp",
    "line": 33,
    "function": null,
    "comment": "Extrinsics.cpp:33:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Extrinsics.cpp",
    "line": 45,
    "function": null,
    "comment": "Extrinsics.cpp:45:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Extrinsics.cpp",
    "line": 54,
    "function": null,
    "comment": "Extrinsics.cpp:54:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Extrinsics.cpp",
    "line": 58,
    "function": null,
    "comment": "Extrinsics.cpp:58:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Extrinsics.cpp",
    "line": 62,
    "function": null,
    "comment": "Extrinsics.cpp:62:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Extrinsics.cpp",
    "line": 63,
    "function": null,
    "comment": "Extrinsics.cpp:63:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Extrinsics.cpp",
    "line": 65,
    "function": null,
    "comment": "Extrinsics.cpp:65:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Extrinsics.cpp",
    "line": 73,
    "function": null,
    "comment": "Extrinsics.cpp:73:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Extrinsics.cpp",
    "line": 76,
    "function": null,
    "comment": "Extrinsics.cpp:76:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Extrinsics.cpp",
    "line": 78,
    "function": null,
    "comment": "Extrinsics.cpp:78:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "Extrinsics.cpp",
    "line": 81,
    "function": null,
    "comment": "Extrinsics.cpp:81:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Extrinsics.cpp",
    "line": 86,
    "function": null,
    "comment": "Extrinsics.cpp:86:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Extrinsics.cpp",
    "line": 91,
    "function": null,
    "comment": "Extrinsics.cpp:91:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Extrinsics.cpp",
    "line": 93,
    "function": null,
    "comment": "Extrinsics.cpp:93:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "Extrinsics.cpp",
    "line": 96,
    "function": null,
    "comment": "Extrinsics.cpp:96:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Extrinsics.cpp",
    "line": 103,
    "function": null,
    "comment": "Extrinsics.cpp:103:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Extrinsics.cpp",
    "line": 110,
    "function": null,
    "comment": "Extrinsics.cpp:110:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "Extrinsics.cpp",
    "line": 111,
    "function": null,
    "comment": "Extrinsics.cpp:111:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Extrinsics.cpp",
    "line": 118,
    "function": null,
    "comment": "Extrinsics.cpp:118:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Extrinsics.cpp",
    "line": 119,
    "function": null,
    "comment": "Extrinsics.cpp:119:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Extrinsics.cpp",
    "line": 124,
    "function": null,
    "comment": "Extrinsics.cpp:124:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Extrinsics.cpp",
    "line": 126,
    "function": null,
    "comment": "Extrinsics.cpp:126:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Extrinsics.cpp",
    "line": 130,
    "function": null,
    "comment": "Extrinsics.cpp:130:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Extrinsics.cpp",
    "line": 132,
    "function": null,
    "comment": "Extrinsics.cpp:132:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "Extrinsics.cpp",
    "line": 135,
    "function": null,
    "comment": "Extrinsics.cpp:135:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Extrinsics.cpp",
    "line": 144,
    "function": null,
    "comment": "Extrinsics.cpp:144:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "Extrinsics.cpp",
    "line": 145,
    "function": null,
    "comment": "Extrinsics.cpp:145:  Using C-style cast.  Use static_cast<double>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Extrinsics.cpp",
    "line": 152,
    "function": null,
    "comment": "Extrinsics.cpp:152:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "Extrinsics.cpp",
    "line": 153,
    "function": null,
    "comment": "Extrinsics.cpp:153:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "Extrinsics.cpp",
    "line": 157,
    "function": null,
    "comment": "Extrinsics.cpp:157:  Namespace should be terminated with '// namespace pano'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "Extrinsics.cpp",
    "line": 25,
    "function": null,
    "comment": "Extrinsics.cpp:25:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "Images.cpp",
    "line": null,
    "function": null,
    "comment": "Images.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "Images.cpp",
    "line": 8,
    "function": null,
    "comment": "Images.cpp:8:  Include 'iomanip' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "Images.cpp",
    "line": 11,
    "function": null,
    "comment": "Images.cpp:11:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Images.cpp",
    "line": 15,
    "function": null,
    "comment": "Images.cpp:15:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Images.cpp",
    "line": 18,
    "function": null,
    "comment": "Images.cpp:18:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Images.cpp",
    "line": 23,
    "function": null,
    "comment": "Images.cpp:23:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Images.cpp",
    "line": 28,
    "function": null,
    "comment": "Images.cpp:28:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Images.cpp",
    "line": 31,
    "function": null,
    "comment": "Images.cpp:31:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Images.cpp",
    "line": 34,
    "function": null,
    "comment": "Images.cpp:34:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Images.cpp",
    "line": 37,
    "function": null,
    "comment": "Images.cpp:37:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "Images.cpp",
    "line": 40,
    "function": null,
    "comment": "Images.cpp:40:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Images.cpp",
    "line": 41,
    "function": null,
    "comment": "Images.cpp:41:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "Images.cpp",
    "line": 44,
    "function": null,
    "comment": "Images.cpp:44:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Images.cpp",
    "line": 45,
    "function": null,
    "comment": "Images.cpp:45:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Images.cpp",
    "line": 46,
    "function": null,
    "comment": "Images.cpp:46:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "Images.cpp",
    "line": 46,
    "function": null,
    "comment": "Images.cpp:46:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Images.cpp",
    "line": 49,
    "function": null,
    "comment": "Images.cpp:49:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Images.cpp",
    "line": 51,
    "function": null,
    "comment": "Images.cpp:51:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "Images.cpp",
    "line": 51,
    "function": null,
    "comment": "Images.cpp:51:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Images.cpp",
    "line": 52,
    "function": null,
    "comment": "Images.cpp:52:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Images.cpp",
    "line": 60,
    "function": null,
    "comment": "Images.cpp:60:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Images.cpp",
    "line": 61,
    "function": null,
    "comment": "Images.cpp:61:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "Images.cpp",
    "line": 65,
    "function": null,
    "comment": "Images.cpp:65:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Don't use a semicolon to denote an empty statement. Use {} instead.",
    "file": "Images.cpp",
    "line": 70,
    "function": null,
    "comment": "Images.cpp:70:  Line contains only semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","google-cpp","semicolon","empty-statement","empty-block"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Images.cpp",
    "line": 74,
    "function": null,
    "comment": "Images.cpp:74:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Images.cpp",
    "line": 78,
    "function": null,
    "comment": "Images.cpp:78:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Images.cpp",
    "line": 80,
    "function": null,
    "comment": "Images.cpp:80:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Images.cpp",
    "line": 81,
    "function": null,
    "comment": "Images.cpp:81:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "Images.cpp",
    "line": 81,
    "function": null,
    "comment": "Images.cpp:81:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Images.cpp",
    "line": 87,
    "function": null,
    "comment": "Images.cpp:87:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Images.cpp",
    "line": 89,
    "function": null,
    "comment": "Images.cpp:89:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "Images.cpp",
    "line": 96,
    "function": null,
    "comment": "Images.cpp:96:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "Images.cpp",
    "line": 97,
    "function": null,
    "comment": "Images.cpp:97:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Images.cpp",
    "line": 101,
    "function": null,
    "comment": "Images.cpp:101:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "Images.cpp",
    "line": 104,
    "function": null,
    "comment": "Images.cpp:104:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "Images.cpp",
    "line": 105,
    "function": null,
    "comment": "Images.cpp:105:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Images.cpp",
    "line": 107,
    "function": null,
    "comment": "Images.cpp:107:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "Images.cpp",
    "line": 108,
    "function": null,
    "comment": "Images.cpp:108:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Images.cpp",
    "line": 113,
    "function": null,
    "comment": "Images.cpp:113:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Images.cpp",
    "line": 118,
    "function": null,
    "comment": "Images.cpp:118:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Images.cpp",
    "line": 126,
    "function": null,
    "comment": "Images.cpp:126:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Images.cpp",
    "line": 132,
    "function": null,
    "comment": "Images.cpp:132:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "Images.cpp",
    "line": 133,
    "function": null,
    "comment": "Images.cpp:133:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Images.cpp",
    "line": 136,
    "function": null,
    "comment": "Images.cpp:136:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Images.cpp",
    "line": 139,
    "function": null,
    "comment": "Images.cpp:139:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Images.cpp",
    "line": 140,
    "function": null,
    "comment": "Images.cpp:140:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "Images.cpp",
    "line": 140,
    "function": null,
    "comment": "Images.cpp:140:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "Images.cpp",
    "line": 143,
    "function": null,
    "comment": "Images.cpp:143:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "Images.cpp",
    "line": 151,
    "function": null,
    "comment": "Images.cpp:151:  Namespace should be terminated with '// namespace pano'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "Images.cpp",
    "line": 142,
    "function": null,
    "comment": "Images.cpp:142:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "ModelFitter.cpp",
    "line": null,
    "function": null,
    "comment": "ModelFitter.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Do not include the C standard headers. Use the C++ headers instead.",
    "file": "ModelFitter.cpp",
    "line": 8,
    "function": null,
    "comment": "ModelFitter.cpp:8:  Include 'cstdint' instead of 'stdint.h'.  [build/include] [5]",
    "tags": ["hicpp","code-standards","headers","include","preprocessor","deprecation","c"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "ModelFitter.cpp",
    "line": 10,
    "function": null,
    "comment": "ModelFitter.cpp:10:  Include 'algorithm' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "ModelFitter.cpp",
    "line": 12,
    "function": null,
    "comment": "ModelFitter.cpp:12:  Found C system header after C++ system header. Should be: ModelFitter.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "ModelFitter.cpp",
    "line": 13,
    "function": null,
    "comment": "ModelFitter.cpp:13:  Found C system header after C++ system header. Should be: ModelFitter.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "ModelFitter.cpp",
    "line": 15,
    "function": null,
    "comment": "ModelFitter.cpp:15:  Found C system header after C++ system header. Should be: ModelFitter.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "ModelFitter.cpp",
    "line": 17,
    "function": null,
    "comment": "ModelFitter.cpp:17:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.cpp",
    "line": 20,
    "function": null,
    "comment": "ModelFitter.cpp:20:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.cpp",
    "line": 22,
    "function": null,
    "comment": "ModelFitter.cpp:22:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.cpp",
    "line": 24,
    "function": null,
    "comment": "ModelFitter.cpp:24:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.cpp",
    "line": 37,
    "function": null,
    "comment": "ModelFitter.cpp:37:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ModelFitter.cpp",
    "line": 46,
    "function": null,
    "comment": "ModelFitter.cpp:46:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.cpp",
    "line": 47,
    "function": null,
    "comment": "ModelFitter.cpp:47:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ModelFitter.cpp",
    "line": 49,
    "function": null,
    "comment": "ModelFitter.cpp:49:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ModelFitter.cpp",
    "line": 50,
    "function": null,
    "comment": "ModelFitter.cpp:50:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ModelFitter.cpp",
    "line": 51,
    "function": null,
    "comment": "ModelFitter.cpp:51:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.cpp",
    "line": 53,
    "function": null,
    "comment": "ModelFitter.cpp:53:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "ModelFitter.cpp",
    "line": 54,
    "function": null,
    "comment": "ModelFitter.cpp:54:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "ModelFitter.cpp",
    "line": 54,
    "function": null,
    "comment": "ModelFitter.cpp:54:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.cpp",
    "line": 57,
    "function": null,
    "comment": "ModelFitter.cpp:57:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.cpp",
    "line": 64,
    "function": null,
    "comment": "ModelFitter.cpp:64:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.cpp",
    "line": 68,
    "function": null,
    "comment": "ModelFitter.cpp:68:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.cpp",
    "line": 73,
    "function": null,
    "comment": "ModelFitter.cpp:73:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "ModelFitter.cpp",
    "line": 74,
    "function": null,
    "comment": "ModelFitter.cpp:74:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "ModelFitter.cpp",
    "line": 74,
    "function": null,
    "comment": "ModelFitter.cpp:74:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "ModelFitter.cpp",
    "line": 74,
    "function": null,
    "comment": "ModelFitter.cpp:74:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.cpp",
    "line": 84,
    "function": null,
    "comment": "ModelFitter.cpp:84:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "ModelFitter.cpp",
    "line": 88,
    "function": null,
    "comment": "ModelFitter.cpp:88:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "ModelFitter.cpp",
    "line": 89,
    "function": null,
    "comment": "ModelFitter.cpp:89:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "ModelFitter.cpp",
    "line": 90,
    "function": null,
    "comment": "ModelFitter.cpp:90:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "ModelFitter.cpp",
    "line": 93,
    "function": null,
    "comment": "ModelFitter.cpp:93:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.cpp",
    "line": 97,
    "function": null,
    "comment": "ModelFitter.cpp:97:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't use a semicolon to denote an empty statement. Use {} instead.",
    "file": "ModelFitter.cpp",
    "line": 100,
    "function": null,
    "comment": "ModelFitter.cpp:100:  Line contains only semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","google-cpp","semicolon","empty-statement","empty-block"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.cpp",
    "line": 103,
    "function": null,
    "comment": "ModelFitter.cpp:103:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't use a semicolon to denote an empty statement. Use {} instead.",
    "file": "ModelFitter.cpp",
    "line": 109,
    "function": null,
    "comment": "ModelFitter.cpp:109:  Line contains only semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","google-cpp","semicolon","empty-statement","empty-block"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.cpp",
    "line": 112,
    "function": null,
    "comment": "ModelFitter.cpp:112:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "ModelFitter.cpp",
    "line": 115,
    "function": null,
    "comment": "ModelFitter.cpp:115:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "ModelFitter.cpp",
    "line": 116,
    "function": null,
    "comment": "ModelFitter.cpp:116:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "ModelFitter.cpp",
    "line": 117,
    "function": null,
    "comment": "ModelFitter.cpp:117:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "ModelFitter.cpp",
    "line": 118,
    "function": null,
    "comment": "ModelFitter.cpp:118:  Using C-style cast.  Use static_cast<double>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "ModelFitter.cpp",
    "line": 119,
    "function": null,
    "comment": "ModelFitter.cpp:119:  Using C-style cast.  Use static_cast<double>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ModelFitter.cpp",
    "line": 123,
    "function": null,
    "comment": "ModelFitter.cpp:123:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ModelFitter.cpp",
    "line": 124,
    "function": null,
    "comment": "ModelFitter.cpp:124:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ModelFitter.cpp",
    "line": 125,
    "function": null,
    "comment": "ModelFitter.cpp:125:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.cpp",
    "line": 126,
    "function": null,
    "comment": "ModelFitter.cpp:126:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "ModelFitter.cpp",
    "line": 127,
    "function": null,
    "comment": "ModelFitter.cpp:127:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "ModelFitter.cpp",
    "line": 127,
    "function": null,
    "comment": "ModelFitter.cpp:127:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ModelFitter.cpp",
    "line": 130,
    "function": null,
    "comment": "ModelFitter.cpp:130:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ModelFitter.cpp",
    "line": 131,
    "function": null,
    "comment": "ModelFitter.cpp:131:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ModelFitter.cpp",
    "line": 132,
    "function": null,
    "comment": "ModelFitter.cpp:132:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ModelFitter.cpp",
    "line": 133,
    "function": null,
    "comment": "ModelFitter.cpp:133:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.cpp",
    "line": 135,
    "function": null,
    "comment": "ModelFitter.cpp:135:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "ModelFitter.cpp",
    "line": 136,
    "function": null,
    "comment": "ModelFitter.cpp:136:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ModelFitter.cpp",
    "line": 137,
    "function": null,
    "comment": "ModelFitter.cpp:137:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ModelFitter.cpp",
    "line": 138,
    "function": null,
    "comment": "ModelFitter.cpp:138:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ModelFitter.cpp",
    "line": 140,
    "function": null,
    "comment": "ModelFitter.cpp:140:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ModelFitter.cpp",
    "line": 141,
    "function": null,
    "comment": "ModelFitter.cpp:141:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ModelFitter.cpp",
    "line": 142,
    "function": null,
    "comment": "ModelFitter.cpp:142:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ModelFitter.cpp",
    "line": 143,
    "function": null,
    "comment": "ModelFitter.cpp:143:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.cpp",
    "line": 144,
    "function": null,
    "comment": "ModelFitter.cpp:144:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ModelFitter.cpp",
    "line": 145,
    "function": null,
    "comment": "ModelFitter.cpp:145:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ModelFitter.cpp",
    "line": 149,
    "function": null,
    "comment": "ModelFitter.cpp:149:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ModelFitter.cpp",
    "line": 150,
    "function": null,
    "comment": "ModelFitter.cpp:150:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "ModelFitter.cpp",
    "line": 153,
    "function": null,
    "comment": "ModelFitter.cpp:153:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "ModelFitter.cpp",
    "line": 153,
    "function": null,
    "comment": "ModelFitter.cpp:153:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ModelFitter.cpp",
    "line": 155,
    "function": null,
    "comment": "ModelFitter.cpp:155:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ModelFitter.cpp",
    "line": 158,
    "function": null,
    "comment": "ModelFitter.cpp:158:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ModelFitter.cpp",
    "line": 159,
    "function": null,
    "comment": "ModelFitter.cpp:159:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.cpp",
    "line": 162,
    "function": null,
    "comment": "ModelFitter.cpp:162:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.cpp",
    "line": 166,
    "function": null,
    "comment": "ModelFitter.cpp:166:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.cpp",
    "line": 170,
    "function": null,
    "comment": "ModelFitter.cpp:170:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.cpp",
    "line": 175,
    "function": null,
    "comment": "ModelFitter.cpp:175:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.cpp",
    "line": 186,
    "function": null,
    "comment": "ModelFitter.cpp:186:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "ModelFitter.cpp",
    "line": 189,
    "function": null,
    "comment": "ModelFitter.cpp:189:  Using deprecated casting style.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "ModelFitter.cpp",
    "line": 192,
    "function": null,
    "comment": "ModelFitter.cpp:192:  Using deprecated casting style.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "ModelFitter.cpp",
    "line": 196,
    "function": null,
    "comment": "ModelFitter.cpp:196:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "ModelFitter.cpp",
    "line": 196,
    "function": null,
    "comment": "ModelFitter.cpp:196:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "ModelFitter.cpp",
    "line": 197,
    "function": null,
    "comment": "ModelFitter.cpp:197:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ModelFitter.cpp",
    "line": 198,
    "function": null,
    "comment": "ModelFitter.cpp:198:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "ModelFitter.cpp",
    "line": 198,
    "function": null,
    "comment": "ModelFitter.cpp:198:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "ModelFitter.cpp",
    "line": 199,
    "function": null,
    "comment": "ModelFitter.cpp:199:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.cpp",
    "line": 202,
    "function": null,
    "comment": "ModelFitter.cpp:202:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ModelFitter.cpp",
    "line": 204,
    "function": null,
    "comment": "ModelFitter.cpp:204:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.cpp",
    "line": 205,
    "function": null,
    "comment": "ModelFitter.cpp:205:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "ModelFitter.cpp",
    "line": 206,
    "function": null,
    "comment": "ModelFitter.cpp:206:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "ModelFitter.cpp",
    "line": 212,
    "function": null,
    "comment": "ModelFitter.cpp:212:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ModelFitter.cpp",
    "line": 215,
    "function": null,
    "comment": "ModelFitter.cpp:215:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.cpp",
    "line": 216,
    "function": null,
    "comment": "ModelFitter.cpp:216:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.cpp",
    "line": 221,
    "function": null,
    "comment": "ModelFitter.cpp:221:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "ModelFitter.cpp",
    "line": 225,
    "function": null,
    "comment": "ModelFitter.cpp:225:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ModelFitter.cpp",
    "line": 228,
    "function": null,
    "comment": "ModelFitter.cpp:228:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.cpp",
    "line": 229,
    "function": null,
    "comment": "ModelFitter.cpp:229:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.cpp",
    "line": 234,
    "function": null,
    "comment": "ModelFitter.cpp:234:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ModelFitter.cpp",
    "line": 236,
    "function": null,
    "comment": "ModelFitter.cpp:236:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ModelFitter.cpp",
    "line": 240,
    "function": null,
    "comment": "ModelFitter.cpp:240:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.cpp",
    "line": 242,
    "function": null,
    "comment": "ModelFitter.cpp:242:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.cpp",
    "line": 249,
    "function": null,
    "comment": "ModelFitter.cpp:249:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.cpp",
    "line": 251,
    "function": null,
    "comment": "ModelFitter.cpp:251:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "ModelFitter.cpp",
    "line": 259,
    "function": null,
    "comment": "ModelFitter.cpp:259:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ModelFitter.cpp",
    "line": 262,
    "function": null,
    "comment": "ModelFitter.cpp:262:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.cpp",
    "line": 264,
    "function": null,
    "comment": "ModelFitter.cpp:264:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "ModelFitter.cpp",
    "line": 275,
    "function": null,
    "comment": "ModelFitter.cpp:275:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.cpp",
    "line": 277,
    "function": null,
    "comment": "ModelFitter.cpp:277:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.cpp",
    "line": 279,
    "function": null,
    "comment": "ModelFitter.cpp:279:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "ModelFitter.cpp",
    "line": 281,
    "function": null,
    "comment": "ModelFitter.cpp:281:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.cpp",
    "line": 290,
    "function": null,
    "comment": "ModelFitter.cpp:290:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "ModelFitter.cpp",
    "line": 296,
    "function": null,
    "comment": "ModelFitter.cpp:296:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& G  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.cpp",
    "line": 297,
    "function": null,
    "comment": "ModelFitter.cpp:297:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ModelFitter.cpp",
    "line": 298,
    "function": null,
    "comment": "ModelFitter.cpp:298:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.cpp",
    "line": 301,
    "function": null,
    "comment": "ModelFitter.cpp:301:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.cpp",
    "line": 303,
    "function": null,
    "comment": "ModelFitter.cpp:303:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "ModelFitter.cpp",
    "line": 310,
    "function": null,
    "comment": "ModelFitter.cpp:310:  Is this a non-const reference? If so, make const or use a pointer: AtomPair& pair  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.cpp",
    "line": 311,
    "function": null,
    "comment": "ModelFitter.cpp:311:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "ModelFitter.cpp",
    "line": 312,
    "function": null,
    "comment": "ModelFitter.cpp:312:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ModelFitter.cpp",
    "line": 322,
    "function": null,
    "comment": "ModelFitter.cpp:322:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ModelFitter.cpp",
    "line": 333,
    "function": null,
    "comment": "ModelFitter.cpp:333:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "ModelFitter.cpp",
    "line": 348,
    "function": null,
    "comment": "ModelFitter.cpp:348:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.cpp",
    "line": 352,
    "function": null,
    "comment": "ModelFitter.cpp:352:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use C-style strings for static and global string constants.",
    "file": "ModelFitter.cpp",
    "line": 356,
    "function": null,
    "comment": "ModelFitter.cpp:356:  For a static/global string constant, use a C style string instead: 'const char FitPair::VERBOSE[]'.  [runtime/string] [4]",
    "tags": ["code-standards","google-cpp","strings","constants"]
  },
  {
    "rule": "Use C-style strings for static and global string constants.",
    "file": "ModelFitter.cpp",
    "line": 357,
    "function": null,
    "comment": "ModelFitter.cpp:357:  For a static/global string constant, use a C style string instead: 'const char FitPair::UBER_VERBOSE[]'.  [runtime/string] [4]",
    "tags": ["code-standards","google-cpp","strings","constants"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ModelFitter.cpp",
    "line": 359,
    "function": null,
    "comment": "ModelFitter.cpp:359:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ModelFitter.cpp",
    "line": 361,
    "function": null,
    "comment": "ModelFitter.cpp:361:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.cpp",
    "line": 363,
    "function": null,
    "comment": "ModelFitter.cpp:363:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.cpp",
    "line": 366,
    "function": null,
    "comment": "ModelFitter.cpp:366:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "ModelFitter.cpp",
    "line": 367,
    "function": null,
    "comment": "ModelFitter.cpp:367:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ModelFitter.cpp",
    "line": 374,
    "function": null,
    "comment": "ModelFitter.cpp:374:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ModelFitter.cpp",
    "line": 396,
    "function": null,
    "comment": "ModelFitter.cpp:396:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ModelFitter.cpp",
    "line": 399,
    "function": null,
    "comment": "ModelFitter.cpp:399:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "ModelFitter.cpp",
    "line": 424,
    "function": null,
    "comment": "ModelFitter.cpp:424:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "ModelFitter.cpp",
    "line": 426,
    "function": null,
    "comment": "ModelFitter.cpp:426:  Namespace should be terminated with '// namespace pano'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "ModelFitter.cpp",
    "line": 357,
    "function": null,
    "comment": "ModelFitter.cpp:357:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "ModelFitter.cpp",
    "line": 359,
    "function": null,
    "comment": "ModelFitter.cpp:359:  Add #include <list> for list<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "ModelFitter.cpp",
    "line": 262,
    "function": null,
    "comment": "ModelFitter.cpp:262:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "BlurDetector.cpp",
    "line": null,
    "function": null,
    "comment": "BlurDetector.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "BlurDetector.cpp",
    "line": 12,
    "function": null,
    "comment": "BlurDetector.cpp:12:  Found C++ system header after other header. Should be: BlurDetector.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "BlurDetector.cpp",
    "line": 13,
    "function": null,
    "comment": "BlurDetector.cpp:13:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "BlurDetector.cpp",
    "line": 15,
    "function": null,
    "comment": "BlurDetector.cpp:15:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "BlurDetector.cpp",
    "line": 18,
    "function": null,
    "comment": "BlurDetector.cpp:18:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "BlurDetector.cpp",
    "line": 22,
    "function": null,
    "comment": "BlurDetector.cpp:22:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "BlurDetector.cpp",
    "line": 26,
    "function": null,
    "comment": "BlurDetector.cpp:26:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "BlurDetector.cpp",
    "line": 30,
    "function": null,
    "comment": "BlurDetector.cpp:30:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "BlurDetector.cpp",
    "line": 32,
    "function": null,
    "comment": "BlurDetector.cpp:32:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "BlurDetector.cpp",
    "line": 35,
    "function": null,
    "comment": "BlurDetector.cpp:35:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "BlurDetector.cpp",
    "line": 39,
    "function": null,
    "comment": "BlurDetector.cpp:39:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "BlurDetector.cpp",
    "line": 40,
    "function": null,
    "comment": "BlurDetector.cpp:40:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "BlurDetector.cpp",
    "line": 57,
    "function": null,
    "comment": "BlurDetector.cpp:57:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "BlurDetector.cpp",
    "line": 63,
    "function": null,
    "comment": "BlurDetector.cpp:63:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "BlurDetector.cpp",
    "line": 63,
    "function": null,
    "comment": "BlurDetector.cpp:63:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& dst  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "BlurDetector.cpp",
    "line": 64,
    "function": null,
    "comment": "BlurDetector.cpp:64:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "BlurDetector.cpp",
    "line": 65,
    "function": null,
    "comment": "BlurDetector.cpp:65:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "BlurDetector.cpp",
    "line": 71,
    "function": null,
    "comment": "BlurDetector.cpp:71:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "BlurDetector.cpp",
    "line": 84,
    "function": null,
    "comment": "BlurDetector.cpp:84:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "BlurDetector.cpp",
    "line": 87,
    "function": null,
    "comment": "BlurDetector.cpp:87:  Namespace should be terminated with '// namespace pano'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "BlenderSimple.cpp",
    "line": null,
    "function": null,
    "comment": "BlenderSimple.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "BlenderSimple.cpp",
    "line": 3,
    "function": null,
    "comment": "BlenderSimple.cpp:3:  Found C system header after other header. Should be: BlenderSimple.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "BlenderSimple.cpp",
    "line": 4,
    "function": null,
    "comment": "BlenderSimple.cpp:4:  Found C system header after other header. Should be: BlenderSimple.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "BlenderSimple.cpp",
    "line": 7,
    "function": null,
    "comment": "BlenderSimple.cpp:7:  Include 'pano_core/BlurDetector.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "BlenderSimple.cpp",
    "line": 8,
    "function": null,
    "comment": "BlenderSimple.cpp:8:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "BlenderSimple.cpp",
    "line": 9,
    "function": null,
    "comment": "BlenderSimple.cpp:9:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "BlenderSimple.cpp",
    "line": 12,
    "function": null,
    "comment": "BlenderSimple.cpp:12:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "BlenderSimple.cpp",
    "line": 16,
    "function": null,
    "comment": "BlenderSimple.cpp:16:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "BlenderSimple.cpp",
    "line": 17,
    "function": null,
    "comment": "BlenderSimple.cpp:17:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "BlenderSimple.cpp",
    "line": 17,
    "function": null,
    "comment": "BlenderSimple.cpp:17:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "BlenderSimple.cpp",
    "line": 21,
    "function": null,
    "comment": "BlenderSimple.cpp:21:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "BlenderSimple.cpp",
    "line": 22,
    "function": null,
    "comment": "BlenderSimple.cpp:22:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "BlenderSimple.cpp",
    "line": 22,
    "function": null,
    "comment": "BlenderSimple.cpp:22:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "BlenderSimple.cpp",
    "line": 26,
    "function": null,
    "comment": "BlenderSimple.cpp:26:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "BlenderSimple.cpp",
    "line": 27,
    "function": null,
    "comment": "BlenderSimple.cpp:27:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't use a semicolon to denote an empty statement. Use {} instead.",
    "file": "BlenderSimple.cpp",
    "line": 28,
    "function": null,
    "comment": "BlenderSimple.cpp:28:  Line contains only semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","google-cpp","semicolon","empty-statement","empty-block"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "BlenderSimple.cpp",
    "line": 31,
    "function": null,
    "comment": "BlenderSimple.cpp:31:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "BlenderSimple.cpp",
    "line": 36,
    "function": null,
    "comment": "BlenderSimple.cpp:36:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "BlenderSimple.cpp",
    "line": 40,
    "function": null,
    "comment": "BlenderSimple.cpp:40:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "BlenderSimple.cpp",
    "line": 49,
    "function": null,
    "comment": "BlenderSimple.cpp:49:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "BlenderSimple.cpp",
    "line": 53,
    "function": null,
    "comment": "BlenderSimple.cpp:53:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "BlenderSimple.cpp",
    "line": 54,
    "function": null,
    "comment": "BlenderSimple.cpp:54:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "BlenderSimple.cpp",
    "line": 59,
    "function": null,
    "comment": "BlenderSimple.cpp:59:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "BlenderSimple.cpp",
    "line": 66,
    "function": null,
    "comment": "BlenderSimple.cpp:66:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "BlenderSimple.cpp",
    "line": 69,
    "function": null,
    "comment": "BlenderSimple.cpp:69:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "BlenderSimple.cpp",
    "line": 75,
    "function": null,
    "comment": "BlenderSimple.cpp:75:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "BlenderSimple.cpp",
    "line": 78,
    "function": null,
    "comment": "BlenderSimple.cpp:78:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "BlenderSimple.cpp",
    "line": 80,
    "function": null,
    "comment": "BlenderSimple.cpp:80:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "BlenderSimple.cpp",
    "line": 83,
    "function": null,
    "comment": "BlenderSimple.cpp:83:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "BlenderSimple.cpp",
    "line": 84,
    "function": null,
    "comment": "BlenderSimple.cpp:84:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "BlenderSimple.cpp",
    "line": 87,
    "function": null,
    "comment": "BlenderSimple.cpp:87:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "BlenderSimple.cpp",
    "line": 92,
    "function": null,
    "comment": "BlenderSimple.cpp:92:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "BlenderSimple.cpp",
    "line": 93,
    "function": null,
    "comment": "BlenderSimple.cpp:93:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "BlenderSimple.cpp",
    "line": 95,
    "function": null,
    "comment": "BlenderSimple.cpp:95:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "BlenderSimple.cpp",
    "line": 104,
    "function": null,
    "comment": "BlenderSimple.cpp:104:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "BlenderSimple.cpp",
    "line": 108,
    "function": null,
    "comment": "BlenderSimple.cpp:108:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "BlenderSimple.cpp",
    "line": 110,
    "function": null,
    "comment": "BlenderSimple.cpp:110:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "BlenderSimple.cpp",
    "line": 115,
    "function": null,
    "comment": "BlenderSimple.cpp:115:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "BlenderSimple.cpp",
    "line": 124,
    "function": null,
    "comment": "BlenderSimple.cpp:124:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use 2 spaces for indentation.",
    "file": "BlenderSimple.cpp",
    "line": 127,
    "function": null,
    "comment": "BlenderSimple.cpp:127:  Weird number of spaces at line-start.  Are you using a 2-space indent?  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "BlenderSimple.cpp",
    "line": 128,
    "function": null,
    "comment": "BlenderSimple.cpp:128:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "BlenderSimple.cpp",
    "line": 141,
    "function": null,
    "comment": "BlenderSimple.cpp:141:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "BlenderSimple.cpp",
    "line": 142,
    "function": null,
    "comment": "BlenderSimple.cpp:142:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "BlenderSimple.cpp",
    "line": 147,
    "function": null,
    "comment": "BlenderSimple.cpp:147:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "BlenderSimple.cpp",
    "line": 152,
    "function": null,
    "comment": "BlenderSimple.cpp:152:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "BlenderSimple.cpp",
    "line": 156,
    "function": null,
    "comment": "BlenderSimple.cpp:156:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "BlenderSimple.cpp",
    "line": 165,
    "function": null,
    "comment": "BlenderSimple.cpp:165:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "BlenderSimple.cpp",
    "line": 168,
    "function": null,
    "comment": "BlenderSimple.cpp:168:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "BlenderSimple.cpp",
    "line": 171,
    "function": null,
    "comment": "BlenderSimple.cpp:171:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "BlenderSimple.cpp",
    "line": 172,
    "function": null,
    "comment": "BlenderSimple.cpp:172:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "BlenderSimple.cpp",
    "line": 192,
    "function": null,
    "comment": "BlenderSimple.cpp:192:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "BlenderSimple.cpp",
    "line": 195,
    "function": null,
    "comment": "BlenderSimple.cpp:195:  Namespace should be terminated with '// namespace pano'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "BlenderSimple.cpp",
    "line": 195,
    "function": null,
    "comment": "BlenderSimple.cpp:195:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "BlenderSimple.cpp",
    "line": 52,
    "function": null,
    "comment": "BlenderSimple.cpp:52:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "BlenderSimple.cpp",
    "line": 163,
    "function": null,
    "comment": "BlenderSimple.cpp:163:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "BlenderSimple.cpp",
    "line": 99,
    "function": null,
    "comment": "BlenderSimple.cpp:99:  Add #include <set> for set<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "QuadTree.cpp",
    "line": null,
    "function": null,
    "comment": "QuadTree.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "QuadTree.cpp",
    "line": 1,
    "function": null,
    "comment": "QuadTree.cpp:1:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "QuadTree.cpp",
    "line": 2,
    "function": null,
    "comment": "QuadTree.cpp:2:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "QuadTree.cpp",
    "line": 3,
    "function": null,
    "comment": "QuadTree.cpp:3:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "QuadTree.cpp",
    "line": 5,
    "function": null,
    "comment": "QuadTree.cpp:5:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "QuadTree.cpp",
    "line": 6,
    "function": null,
    "comment": "QuadTree.cpp:6:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "QuadTree.cpp",
    "line": 7,
    "function": null,
    "comment": "QuadTree.cpp:7:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "QuadTree.cpp",
    "line": 8,
    "function": null,
    "comment": "QuadTree.cpp:8:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "QuadTree.cpp",
    "line": 9,
    "function": null,
    "comment": "QuadTree.cpp:9:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "QuadTree.cpp",
    "line": 11,
    "function": null,
    "comment": "QuadTree.cpp:11:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "QuadTree.cpp",
    "line": 13,
    "function": null,
    "comment": "QuadTree.cpp:13:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "QuadTree.cpp",
    "line": 34,
    "function": null,
    "comment": "QuadTree.cpp:34:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "QuadTree.cpp",
    "line": 35,
    "function": null,
    "comment": "QuadTree.cpp:35:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "QuadTree.cpp",
    "line": 50,
    "function": null,
    "comment": "QuadTree.cpp:50:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "QuadTree.cpp",
    "line": 108,
    "function": null,
    "comment": "QuadTree.cpp:108:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "QuadTree.cpp",
    "line": 151,
    "function": null,
    "comment": "QuadTree.cpp:151:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "QuadTree.cpp",
    "line": 156,
    "function": null,
    "comment": "QuadTree.cpp:156:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "QuadTree.cpp",
    "line": 161,
    "function": null,
    "comment": "QuadTree.cpp:161:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "QuadTree.cpp",
    "line": 164,
    "function": null,
    "comment": "QuadTree.cpp:164:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "QuadTree.cpp",
    "line": 174,
    "function": null,
    "comment": "QuadTree.cpp:174:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "QuadTree.cpp",
    "line": 174,
    "function": null,
    "comment": "QuadTree.cpp:174:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "QuadTree.cpp",
    "line": 186,
    "function": null,
    "comment": "QuadTree.cpp:186:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "QuadTree.cpp",
    "line": 189,
    "function": null,
    "comment": "QuadTree.cpp:189:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "QuadTree.cpp",
    "line": 189,
    "function": null,
    "comment": "QuadTree.cpp:189:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "QuadTree.cpp",
    "line": 198,
    "function": null,
    "comment": "QuadTree.cpp:198:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "QuadTree.cpp",
    "line": 198,
    "function": null,
    "comment": "QuadTree.cpp:198:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "video_stitcher.cpp",
    "line": null,
    "function": null,
    "comment": "video_stitcher.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "video_stitcher.cpp",
    "line": 11,
    "function": null,
    "comment": "video_stitcher.cpp:11:  Include 'opencv2/legacy/legacy.hpp' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "video_stitcher.cpp",
    "line": 14,
    "function": null,
    "comment": "video_stitcher.cpp:14:  Include 'fstream' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "video_stitcher.cpp",
    "line": 18,
    "function": null,
    "comment": "video_stitcher.cpp:18:  Found C system header after C++ system header. Should be: video_stitcher.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "video_stitcher.cpp",
    "line": 19,
    "function": null,
    "comment": "video_stitcher.cpp:19:  Found C system header after C++ system header. Should be: video_stitcher.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "video_stitcher.cpp",
    "line": 27,
    "function": null,
    "comment": "video_stitcher.cpp:27:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "video_stitcher.cpp",
    "line": 28,
    "function": null,
    "comment": "video_stitcher.cpp:28:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "video_stitcher.cpp",
    "line": 29,
    "function": null,
    "comment": "video_stitcher.cpp:29:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "video_stitcher.cpp",
    "line": 37,
    "function": null,
    "comment": "video_stitcher.cpp:37:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "video_stitcher.cpp",
    "line": 39,
    "function": null,
    "comment": "video_stitcher.cpp:39:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "video_stitcher.cpp",
    "line": 46,
    "function": null,
    "comment": "video_stitcher.cpp:46:  Is this a non-const reference? If so, make const or use a pointer: istream& input  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "video_stitcher.cpp",
    "line": 47,
    "function": null,
    "comment": "video_stitcher.cpp:47:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "video_stitcher.cpp",
    "line": 50,
    "function": null,
    "comment": "video_stitcher.cpp:50:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "video_stitcher.cpp",
    "line": 58,
    "function": null,
    "comment": "video_stitcher.cpp:58:  Anonymous namespace should be terminated with '// namespace'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "video_stitcher.cpp",
    "line": 60,
    "function": null,
    "comment": "video_stitcher.cpp:60:  Is this a non-const reference? If so, make const or use a pointer: Options& opts  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "video_stitcher.cpp",
    "line": 61,
    "function": null,
    "comment": "video_stitcher.cpp:61:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "video_stitcher.cpp",
    "line": 65,
    "function": null,
    "comment": "video_stitcher.cpp:65:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "video_stitcher.cpp",
    "line": 65,
    "function": null,
    "comment": "video_stitcher.cpp:65:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "video_stitcher.cpp",
    "line": 66,
    "function": null,
    "comment": "video_stitcher.cpp:66:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "video_stitcher.cpp",
    "line": 66,
    "function": null,
    "comment": "video_stitcher.cpp:66:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "video_stitcher.cpp",
    "line": 67,
    "function": null,
    "comment": "video_stitcher.cpp:67:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "video_stitcher.cpp",
    "line": 67,
    "function": null,
    "comment": "video_stitcher.cpp:67:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "video_stitcher.cpp",
    "line": 68,
    "function": null,
    "comment": "video_stitcher.cpp:68:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "video_stitcher.cpp",
    "line": 68,
    "function": null,
    "comment": "video_stitcher.cpp:68:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "video_stitcher.cpp",
    "line": 73,
    "function": null,
    "comment": "video_stitcher.cpp:73:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "video_stitcher.cpp",
    "line": 77,
    "function": null,
    "comment": "video_stitcher.cpp:77:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "video_stitcher.cpp",
    "line": 83,
    "function": null,
    "comment": "video_stitcher.cpp:83:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "video_stitcher.cpp",
    "line": 91,
    "function": null,
    "comment": "video_stitcher.cpp:91:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "video_stitcher.cpp",
    "line": 97,
    "function": null,
    "comment": "video_stitcher.cpp:97:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "video_stitcher.cpp",
    "line": 100,
    "function": null,
    "comment": "video_stitcher.cpp:100:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "video_stitcher.cpp",
    "line": 101,
    "function": null,
    "comment": "video_stitcher.cpp:101:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "video_stitcher.cpp",
    "line": 102,
    "function": null,
    "comment": "video_stitcher.cpp:102:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "video_stitcher.cpp",
    "line": 107,
    "function": null,
    "comment": "video_stitcher.cpp:107:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "video_stitcher.cpp",
    "line": 108,
    "function": null,
    "comment": "video_stitcher.cpp:108:  public: should be indented +1 space inside class StitchProgressCallable  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "video_stitcher.cpp",
    "line": 110,
    "function": null,
    "comment": "video_stitcher.cpp:110:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "video_stitcher.cpp",
    "line": 112,
    "function": null,
    "comment": "video_stitcher.cpp:112:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "video_stitcher.cpp",
    "line": 118,
    "function": null,
    "comment": "video_stitcher.cpp:118:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "video_stitcher.cpp",
    "line": 120,
    "function": null,
    "comment": "video_stitcher.cpp:120:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "video_stitcher.cpp",
    "line": 122,
    "function": null,
    "comment": "video_stitcher.cpp:122:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "video_stitcher.cpp",
    "line": 127,
    "function": null,
    "comment": "video_stitcher.cpp:127:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "video_stitcher.cpp",
    "line": 131,
    "function": null,
    "comment": "video_stitcher.cpp:131:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "video_stitcher.cpp",
    "line": 133,
    "function": null,
    "comment": "video_stitcher.cpp:133:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "video_stitcher.cpp",
    "line": 133,
    "function": null,
    "comment": "video_stitcher.cpp:133:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "video_stitcher.cpp",
    "line": 144,
    "function": null,
    "comment": "video_stitcher.cpp:144:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "video_stitcher.cpp",
    "line": 147,
    "function": null,
    "comment": "video_stitcher.cpp:147:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "video_stitcher.cpp",
    "line": 164,
    "function": null,
    "comment": "video_stitcher.cpp:164:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "video_stitcher.cpp",
    "line": 167,
    "function": null,
    "comment": "video_stitcher.cpp:167:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "video_stitcher.cpp",
    "line": 167,
    "function": null,
    "comment": "video_stitcher.cpp:167:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "video_stitcher.cpp",
    "line": 169,
    "function": null,
    "comment": "video_stitcher.cpp:169:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "video_stitcher.cpp",
    "line": 170,
    "function": null,
    "comment": "video_stitcher.cpp:170:  Using deprecated casting style.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "video_stitcher.cpp",
    "line": 181,
    "function": null,
    "comment": "video_stitcher.cpp:181:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "video_stitcher.cpp",
    "line": 186,
    "function": null,
    "comment": "video_stitcher.cpp:186:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "video_stitcher.cpp",
    "line": 191,
    "function": null,
    "comment": "video_stitcher.cpp:191:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "video_stitcher.cpp",
    "line": 194,
    "function": null,
    "comment": "video_stitcher.cpp:194:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "video_stitcher.cpp",
    "line": 199,
    "function": null,
    "comment": "video_stitcher.cpp:199:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "video_stitcher.cpp",
    "line": 201,
    "function": null,
    "comment": "video_stitcher.cpp:201:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "video_stitcher.cpp",
    "line": 205,
    "function": null,
    "comment": "video_stitcher.cpp:205:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "video_stitcher.cpp",
    "line": 207,
    "function": null,
    "comment": "video_stitcher.cpp:207:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "video_stitcher.cpp",
    "line": 209,
    "function": null,
    "comment": "video_stitcher.cpp:209:  Using deprecated casting style.  Use static_cast<float>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "video_stitcher.cpp",
    "line": 214,
    "function": null,
    "comment": "video_stitcher.cpp:214:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "video_stitcher.cpp",
    "line": 215,
    "function": null,
    "comment": "video_stitcher.cpp:215:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "video_stitcher.cpp",
    "line": 217,
    "function": null,
    "comment": "video_stitcher.cpp:217:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "video_stitcher.cpp",
    "line": 223,
    "function": null,
    "comment": "video_stitcher.cpp:223:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "video_stitcher.cpp",
    "line": 243,
    "function": null,
    "comment": "video_stitcher.cpp:243:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "video_stitcher.cpp",
    "line": 250,
    "function": null,
    "comment": "video_stitcher.cpp:250:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "video_stitcher.cpp",
    "line": 254,
    "function": null,
    "comment": "video_stitcher.cpp:254:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "video_stitcher.cpp",
    "line": 254,
    "function": null,
    "comment": "video_stitcher.cpp:254:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "video_stitcher.cpp",
    "line": 260,
    "function": null,
    "comment": "video_stitcher.cpp:260:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "video_stitcher.cpp",
    "line": 267,
    "function": null,
    "comment": "video_stitcher.cpp:267:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "You shouldn't have spaces before your brackets, except maybe after 'delete []' or 'return []() {};'",
    "file": "video_stitcher.cpp",
    "line": 275,
    "function": null,
    "comment": "video_stitcher.cpp:275:  Extra space before [  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","brackets"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "video_stitcher.cpp",
    "line": 277,
    "function": null,
    "comment": "video_stitcher.cpp:277:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "video_stitcher.cpp",
    "line": 277,
    "function": null,
    "comment": "video_stitcher.cpp:277:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "video_stitcher.cpp",
    "line": 277,
    "function": null,
    "comment": "video_stitcher.cpp:277:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "video_stitcher.cpp",
    "line": 286,
    "function": null,
    "comment": "video_stitcher.cpp:286:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "video_stitcher.cpp",
    "line": 295,
    "function": null,
    "comment": "video_stitcher.cpp:295:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "video_stitcher.cpp",
    "line": 296,
    "function": null,
    "comment": "video_stitcher.cpp:296:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "video_stitcher.cpp",
    "line": 252,
    "function": null,
    "comment": "video_stitcher.cpp:252:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "stitcher.cpp",
    "line": null,
    "function": null,
    "comment": "stitcher.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "stitcher.cpp",
    "line": 11,
    "function": null,
    "comment": "stitcher.cpp:11:  Include 'opencv2/legacy/legacy.hpp' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "stitcher.cpp",
    "line": 14,
    "function": null,
    "comment": "stitcher.cpp:14:  Include 'fstream' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "stitcher.cpp",
    "line": 18,
    "function": null,
    "comment": "stitcher.cpp:18:  Found C system header after C++ system header. Should be: stitcher.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stitcher.cpp",
    "line": 31,
    "function": null,
    "comment": "stitcher.cpp:31:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "stitcher.cpp",
    "line": 31,
    "function": null,
    "comment": "stitcher.cpp:31:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stitcher.cpp",
    "line": 31,
    "function": null,
    "comment": "stitcher.cpp:31:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a semicolon, if it does not end the line.",
    "file": "stitcher.cpp",
    "line": 31,
    "function": null,
    "comment": "stitcher.cpp:31:  Missing space after ;  [whitespace/semicolon] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stitcher.cpp",
    "line": 32,
    "function": null,
    "comment": "stitcher.cpp:32:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "stitcher.cpp",
    "line": 32,
    "function": null,
    "comment": "stitcher.cpp:32:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "There should be a space after a semicolon, if it does not end the line.",
    "file": "stitcher.cpp",
    "line": 32,
    "function": null,
    "comment": "stitcher.cpp:32:  Missing space after ;  [whitespace/semicolon] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stitcher.cpp",
    "line": 33,
    "function": null,
    "comment": "stitcher.cpp:33:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "stitcher.cpp",
    "line": 33,
    "function": null,
    "comment": "stitcher.cpp:33:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stitcher.cpp",
    "line": 33,
    "function": null,
    "comment": "stitcher.cpp:33:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stitcher.cpp",
    "line": 34,
    "function": null,
    "comment": "stitcher.cpp:34:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "stitcher.cpp",
    "line": 34,
    "function": null,
    "comment": "stitcher.cpp:34:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stitcher.cpp",
    "line": 34,
    "function": null,
    "comment": "stitcher.cpp:34:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "stitcher.cpp",
    "line": 38,
    "function": null,
    "comment": "stitcher.cpp:38:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "stitcher.cpp",
    "line": 39,
    "function": null,
    "comment": "stitcher.cpp:39:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "stitcher.cpp",
    "line": 40,
    "function": null,
    "comment": "stitcher.cpp:40:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "stitcher.cpp",
    "line": 48,
    "function": null,
    "comment": "stitcher.cpp:48:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "stitcher.cpp",
    "line": 50,
    "function": null,
    "comment": "stitcher.cpp:50:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "stitcher.cpp",
    "line": 57,
    "function": null,
    "comment": "stitcher.cpp:57:  Is this a non-const reference? If so, make const or use a pointer: istream& input  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "stitcher.cpp",
    "line": 58,
    "function": null,
    "comment": "stitcher.cpp:58:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "stitcher.cpp",
    "line": 61,
    "function": null,
    "comment": "stitcher.cpp:61:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "stitcher.cpp",
    "line": 69,
    "function": null,
    "comment": "stitcher.cpp:69:  Anonymous namespace should be terminated with '// namespace'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "stitcher.cpp",
    "line": 71,
    "function": null,
    "comment": "stitcher.cpp:71:  Is this a non-const reference? If so, make const or use a pointer: Options& opts  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "stitcher.cpp",
    "line": 72,
    "function": null,
    "comment": "stitcher.cpp:72:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stitcher.cpp",
    "line": 77,
    "function": null,
    "comment": "stitcher.cpp:77:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stitcher.cpp",
    "line": 78,
    "function": null,
    "comment": "stitcher.cpp:78:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stitcher.cpp",
    "line": 79,
    "function": null,
    "comment": "stitcher.cpp:79:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stitcher.cpp",
    "line": 80,
    "function": null,
    "comment": "stitcher.cpp:80:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stitcher.cpp",
    "line": 82,
    "function": null,
    "comment": "stitcher.cpp:82:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stitcher.cpp",
    "line": 83,
    "function": null,
    "comment": "stitcher.cpp:83:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stitcher.cpp",
    "line": 84,
    "function": null,
    "comment": "stitcher.cpp:84:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stitcher.cpp",
    "line": 88,
    "function": null,
    "comment": "stitcher.cpp:88:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "stitcher.cpp",
    "line": 92,
    "function": null,
    "comment": "stitcher.cpp:92:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "stitcher.cpp",
    "line": 98,
    "function": null,
    "comment": "stitcher.cpp:98:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "stitcher.cpp",
    "line": 105,
    "function": null,
    "comment": "stitcher.cpp:105:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "stitcher.cpp",
    "line": 111,
    "function": null,
    "comment": "stitcher.cpp:111:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "stitcher.cpp",
    "line": 114,
    "function": null,
    "comment": "stitcher.cpp:114:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "stitcher.cpp",
    "line": 115,
    "function": null,
    "comment": "stitcher.cpp:115:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "stitcher.cpp",
    "line": 116,
    "function": null,
    "comment": "stitcher.cpp:116:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "stitcher.cpp",
    "line": 121,
    "function": null,
    "comment": "stitcher.cpp:121:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "stitcher.cpp",
    "line": 122,
    "function": null,
    "comment": "stitcher.cpp:122:  public: should be indented +1 space inside class StitchProgressCallable  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "stitcher.cpp",
    "line": 124,
    "function": null,
    "comment": "stitcher.cpp:124:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "stitcher.cpp",
    "line": 127,
    "function": null,
    "comment": "stitcher.cpp:127:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stitcher.cpp",
    "line": 133,
    "function": null,
    "comment": "stitcher.cpp:133:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "stitcher.cpp",
    "line": 135,
    "function": null,
    "comment": "stitcher.cpp:135:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "stitcher.cpp",
    "line": 137,
    "function": null,
    "comment": "stitcher.cpp:137:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stitcher.cpp",
    "line": 142,
    "function": null,
    "comment": "stitcher.cpp:142:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stitcher.cpp",
    "line": 146,
    "function": null,
    "comment": "stitcher.cpp:146:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "stitcher.cpp",
    "line": 148,
    "function": null,
    "comment": "stitcher.cpp:148:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "stitcher.cpp",
    "line": 148,
    "function": null,
    "comment": "stitcher.cpp:148:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "stitcher.cpp",
    "line": 159,
    "function": null,
    "comment": "stitcher.cpp:159:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "stitcher.cpp",
    "line": 162,
    "function": null,
    "comment": "stitcher.cpp:162:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "stitcher.cpp",
    "line": 179,
    "function": null,
    "comment": "stitcher.cpp:179:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "stitcher.cpp",
    "line": 182,
    "function": null,
    "comment": "stitcher.cpp:182:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "stitcher.cpp",
    "line": 182,
    "function": null,
    "comment": "stitcher.cpp:182:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "stitcher.cpp",
    "line": 184,
    "function": null,
    "comment": "stitcher.cpp:184:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "stitcher.cpp",
    "line": 185,
    "function": null,
    "comment": "stitcher.cpp:185:  Using deprecated casting style.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "stitcher.cpp",
    "line": 196,
    "function": null,
    "comment": "stitcher.cpp:196:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "stitcher.cpp",
    "line": 201,
    "function": null,
    "comment": "stitcher.cpp:201:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "stitcher.cpp",
    "line": 206,
    "function": null,
    "comment": "stitcher.cpp:206:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "stitcher.cpp",
    "line": 209,
    "function": null,
    "comment": "stitcher.cpp:209:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stitcher.cpp",
    "line": 214,
    "function": null,
    "comment": "stitcher.cpp:214:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "stitcher.cpp",
    "line": 216,
    "function": null,
    "comment": "stitcher.cpp:216:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "stitcher.cpp",
    "line": 220,
    "function": null,
    "comment": "stitcher.cpp:220:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "stitcher.cpp",
    "line": 222,
    "function": null,
    "comment": "stitcher.cpp:222:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "stitcher.cpp",
    "line": 224,
    "function": null,
    "comment": "stitcher.cpp:224:  Using deprecated casting style.  Use static_cast<float>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stitcher.cpp",
    "line": 229,
    "function": null,
    "comment": "stitcher.cpp:229:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "stitcher.cpp",
    "line": 231,
    "function": null,
    "comment": "stitcher.cpp:231:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "stitcher.cpp",
    "line": 233,
    "function": null,
    "comment": "stitcher.cpp:233:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "stitcher.cpp",
    "line": 239,
    "function": null,
    "comment": "stitcher.cpp:239:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stitcher.cpp",
    "line": 259,
    "function": null,
    "comment": "stitcher.cpp:259:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stitcher.cpp",
    "line": 266,
    "function": null,
    "comment": "stitcher.cpp:266:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "stitcher.cpp",
    "line": 270,
    "function": null,
    "comment": "stitcher.cpp:270:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "stitcher.cpp",
    "line": 270,
    "function": null,
    "comment": "stitcher.cpp:270:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "stitcher.cpp",
    "line": 276,
    "function": null,
    "comment": "stitcher.cpp:276:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "stitcher.cpp",
    "line": 283,
    "function": null,
    "comment": "stitcher.cpp:283:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "stitcher.cpp",
    "line": 294,
    "function": null,
    "comment": "stitcher.cpp:294:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "stitcher.cpp",
    "line": 268,
    "function": null,
    "comment": "stitcher.cpp:268:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "video_tracker.cpp",
    "line": null,
    "function": null,
    "comment": "video_tracker.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "video_tracker.cpp",
    "line": 9,
    "function": null,
    "comment": "video_tracker.cpp:9:  Include 'pano_core/feature_utils.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "video_tracker.cpp",
    "line": 11,
    "function": null,
    "comment": "video_tracker.cpp:11:  Include 'pano_core/CaptureEngine.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "video_tracker.cpp",
    "line": 13,
    "function": null,
    "comment": "video_tracker.cpp:13:  Include 'pano_core/Blender.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "video_tracker.cpp",
    "line": 16,
    "function": null,
    "comment": "video_tracker.cpp:16:  Found C system header after other header. Should be: video_tracker.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "video_tracker.cpp",
    "line": 17,
    "function": null,
    "comment": "video_tracker.cpp:17:  Found C system header after other header. Should be: video_tracker.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "video_tracker.cpp",
    "line": 18,
    "function": null,
    "comment": "video_tracker.cpp:18:  Found C system header after other header. Should be: video_tracker.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "video_tracker.cpp",
    "line": 19,
    "function": null,
    "comment": "video_tracker.cpp:19:  Found C++ system header after other header. Should be: video_tracker.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "video_tracker.cpp",
    "line": 20,
    "function": null,
    "comment": "video_tracker.cpp:20:  Found C++ system header after other header. Should be: video_tracker.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "video_tracker.cpp",
    "line": 21,
    "function": null,
    "comment": "video_tracker.cpp:21:  Found C++ system header after other header. Should be: video_tracker.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "video_tracker.cpp",
    "line": 23,
    "function": null,
    "comment": "video_tracker.cpp:23:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "video_tracker.cpp",
    "line": 24,
    "function": null,
    "comment": "video_tracker.cpp:24:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "video_tracker.cpp",
    "line": 25,
    "function": null,
    "comment": "video_tracker.cpp:25:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "video_tracker.cpp",
    "line": 27,
    "function": null,
    "comment": "video_tracker.cpp:27:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "video_tracker.cpp",
    "line": 33,
    "function": null,
    "comment": "video_tracker.cpp:33:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "video_tracker.cpp",
    "line": 37,
    "function": null,
    "comment": "video_tracker.cpp:37:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "video_tracker.cpp",
    "line": 37,
    "function": null,
    "comment": "video_tracker.cpp:37:  Is this a non-const reference? If so, make const or use a pointer: Mat& img  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "video_tracker.cpp",
    "line": 38,
    "function": null,
    "comment": "video_tracker.cpp:38:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "video_tracker.cpp",
    "line": 39,
    "function": null,
    "comment": "video_tracker.cpp:39:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "video_tracker.cpp",
    "line": 40,
    "function": null,
    "comment": "video_tracker.cpp:40:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "video_tracker.cpp",
    "line": 41,
    "function": null,
    "comment": "video_tracker.cpp:41:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "video_tracker.cpp",
    "line": 42,
    "function": null,
    "comment": "video_tracker.cpp:42:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "video_tracker.cpp",
    "line": 44,
    "function": null,
    "comment": "video_tracker.cpp:44:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "video_tracker.cpp",
    "line": 52,
    "function": null,
    "comment": "video_tracker.cpp:52:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "video_tracker.cpp",
    "line": 54,
    "function": null,
    "comment": "video_tracker.cpp:54:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "video_tracker.cpp",
    "line": 57,
    "function": null,
    "comment": "video_tracker.cpp:57:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "video_tracker.cpp",
    "line": 58,
    "function": null,
    "comment": "video_tracker.cpp:58:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "video_tracker.cpp",
    "line": 60,
    "function": null,
    "comment": "video_tracker.cpp:60:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "video_tracker.cpp",
    "line": 61,
    "function": null,
    "comment": "video_tracker.cpp:61:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "video_tracker.cpp",
    "line": 72,
    "function": null,
    "comment": "video_tracker.cpp:72:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "video_tracker.cpp",
    "line": 72,
    "function": null,
    "comment": "video_tracker.cpp:72:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "video_tracker.cpp",
    "line": 72,
    "function": null,
    "comment": "video_tracker.cpp:72:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "video_tracker.cpp",
    "line": 77,
    "function": null,
    "comment": "video_tracker.cpp:77:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "video_tracker.cpp",
    "line": 83,
    "function": null,
    "comment": "video_tracker.cpp:83:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "video_tracker.cpp",
    "line": 105,
    "function": null,
    "comment": "video_tracker.cpp:105:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "video_tracker.cpp",
    "line": 120,
    "function": null,
    "comment": "video_tracker.cpp:120:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "video_tracker.cpp",
    "line": 121,
    "function": null,
    "comment": "video_tracker.cpp:121:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "video_tracker.cpp",
    "line": 147,
    "function": null,
    "comment": "video_tracker.cpp:147:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "video_tracker.cpp",
    "line": 148,
    "function": null,
    "comment": "video_tracker.cpp:148:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Use 2 spaces for indentation.",
    "file": "video_tracker.cpp",
    "line": 153,
    "function": null,
    "comment": "video_tracker.cpp:153:  Weird number of spaces at line-start.  Are you using a 2-space indent?  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "video_tracker.cpp",
    "line": 162,
    "function": null,
    "comment": "video_tracker.cpp:162:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "video_tracker.cpp",
    "line": 163,
    "function": null,
    "comment": "video_tracker.cpp:163:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "video_tracker.cpp",
    "line": 166,
    "function": null,
    "comment": "video_tracker.cpp:166:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "video_tracker.cpp",
    "line": 168,
    "function": null,
    "comment": "video_tracker.cpp:168:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "video_tracker.cpp",
    "line": 169,
    "function": null,
    "comment": "video_tracker.cpp:169:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "video_tracker.cpp",
    "line": 170,
    "function": null,
    "comment": "video_tracker.cpp:170:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "video_tracker.cpp",
    "line": 170,
    "function": null,
    "comment": "video_tracker.cpp:170:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "video_tracker.cpp",
    "line": 173,
    "function": null,
    "comment": "video_tracker.cpp:173:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "video_tracker.cpp",
    "line": 175,
    "function": null,
    "comment": "video_tracker.cpp:175:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "video_tracker.cpp",
    "line": 177,
    "function": null,
    "comment": "video_tracker.cpp:177:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "video_tracker.cpp",
    "line": 195,
    "function": null,
    "comment": "video_tracker.cpp:195:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "video_tracker.cpp",
    "line": 198,
    "function": null,
    "comment": "video_tracker.cpp:198:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "video_tracker.cpp",
    "line": 202,
    "function": null,
    "comment": "video_tracker.cpp:202:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "video_tracker.cpp",
    "line": 203,
    "function": null,
    "comment": "video_tracker.cpp:203:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "video_tracker.cpp",
    "line": 206,
    "function": null,
    "comment": "video_tracker.cpp:206:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "video_tracker.cpp",
    "line": 213,
    "function": null,
    "comment": "video_tracker.cpp:213:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "video_tracker.cpp",
    "line": 215,
    "function": null,
    "comment": "video_tracker.cpp:215:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "video_tracker.cpp",
    "line": 218,
    "function": null,
    "comment": "video_tracker.cpp:218:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "video_tracker.cpp",
    "line": 219,
    "function": null,
    "comment": "video_tracker.cpp:219:  Using C-style cast.  Use static_cast<double>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "video_tracker.cpp",
    "line": 222,
    "function": null,
    "comment": "video_tracker.cpp:222:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "video_tracker.cpp",
    "line": 224,
    "function": null,
    "comment": "video_tracker.cpp:224:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "video_tracker.cpp",
    "line": 233,
    "function": null,
    "comment": "video_tracker.cpp:233:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "video_tracker.cpp",
    "line": 235,
    "function": null,
    "comment": "video_tracker.cpp:235:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "video_tracker.cpp",
    "line": 256,
    "function": null,
    "comment": "video_tracker.cpp:256:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "video_tracker.cpp",
    "line": 290,
    "function": null,
    "comment": "video_tracker.cpp:290:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "video_tracker.cpp",
    "line": 293,
    "function": null,
    "comment": "video_tracker.cpp:293:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "video_tracker.cpp",
    "line": 311,
    "function": null,
    "comment": "video_tracker.cpp:311:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "video_tracker.cpp",
    "line": 313,
    "function": null,
    "comment": "video_tracker.cpp:313:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "video_tracker.cpp",
    "line": 65,
    "function": null,
    "comment": "video_tracker.cpp:65:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "video_tracker.cpp",
    "line": 213,
    "function": null,
    "comment": "video_tracker.cpp:213:  Add #include <algorithm> for swap  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "video_tracker.cpp",
    "line": 140,
    "function": null,
    "comment": "video_tracker.cpp:140:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "copy_tests.cpp",
    "line": null,
    "function": null,
    "comment": "copy_tests.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "copy_tests.cpp",
    "line": 9,
    "function": null,
    "comment": "copy_tests.cpp:9:  Include 'pano_core/feature_utils.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "copy_tests.cpp",
    "line": 10,
    "function": null,
    "comment": "copy_tests.cpp:10:  Found C++ system header after other header. Should be: copy_tests.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "copy_tests.cpp",
    "line": 11,
    "function": null,
    "comment": "copy_tests.cpp:11:  Found C++ system header after other header. Should be: copy_tests.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "copy_tests.cpp",
    "line": 12,
    "function": null,
    "comment": "copy_tests.cpp:12:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "copy_tests.cpp",
    "line": 13,
    "function": null,
    "comment": "copy_tests.cpp:13:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "copy_tests.cpp",
    "line": 14,
    "function": null,
    "comment": "copy_tests.cpp:14:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "copy_tests.cpp",
    "line": 16,
    "function": null,
    "comment": "copy_tests.cpp:16:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "copy_tests.cpp",
    "line": 20,
    "function": null,
    "comment": "copy_tests.cpp:20:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "copy_tests.cpp",
    "line": 21,
    "function": null,
    "comment": "copy_tests.cpp:21:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "copy_tests.cpp",
    "line": 31,
    "function": null,
    "comment": "copy_tests.cpp:31:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "copy_tests.cpp",
    "line": 33,
    "function": null,
    "comment": "copy_tests.cpp:33:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "copy_tests.cpp",
    "line": 38,
    "function": null,
    "comment": "copy_tests.cpp:38:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "copy_tests.cpp",
    "line": 45,
    "function": null,
    "comment": "copy_tests.cpp:45:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Use 2 spaces for indentation.",
    "file": "copy_tests.cpp",
    "line": 48,
    "function": null,
    "comment": "copy_tests.cpp:48:  Weird number of spaces at line-start.  Are you using a 2-space indent?  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "copy_tests.cpp",
    "line": 53,
    "function": null,
    "comment": "copy_tests.cpp:53:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "video_stitcher.cpp",
    "line": null,
    "function": null,
    "comment": "video_stitcher.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "video_stitcher.cpp",
    "line": 9,
    "function": null,
    "comment": "video_stitcher.cpp:9:  Include 'pano_core/feature_utils.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "video_stitcher.cpp",
    "line": 11,
    "function": null,
    "comment": "video_stitcher.cpp:11:  Include 'pano_core/CaptureEngine.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "video_stitcher.cpp",
    "line": 13,
    "function": null,
    "comment": "video_stitcher.cpp:13:  Include 'pano_core/Blender.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "video_stitcher.cpp",
    "line": 16,
    "function": null,
    "comment": "video_stitcher.cpp:16:  Found C system header after other header. Should be: video_stitcher.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "video_stitcher.cpp",
    "line": 17,
    "function": null,
    "comment": "video_stitcher.cpp:17:  Found C system header after other header. Should be: video_stitcher.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "video_stitcher.cpp",
    "line": 21,
    "function": null,
    "comment": "video_stitcher.cpp:21:  Found C++ system header after other header. Should be: video_stitcher.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "video_stitcher.cpp",
    "line": 22,
    "function": null,
    "comment": "video_stitcher.cpp:22:  Found C++ system header after other header. Should be: video_stitcher.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "video_stitcher.cpp",
    "line": 23,
    "function": null,
    "comment": "video_stitcher.cpp:23:  Found C++ system header after other header. Should be: video_stitcher.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "video_stitcher.cpp",
    "line": 25,
    "function": null,
    "comment": "video_stitcher.cpp:25:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "video_stitcher.cpp",
    "line": 26,
    "function": null,
    "comment": "video_stitcher.cpp:26:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "video_stitcher.cpp",
    "line": 27,
    "function": null,
    "comment": "video_stitcher.cpp:27:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "video_stitcher.cpp",
    "line": 29,
    "function": null,
    "comment": "video_stitcher.cpp:29:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "video_stitcher.cpp",
    "line": 35,
    "function": null,
    "comment": "video_stitcher.cpp:35:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "video_stitcher.cpp",
    "line": 41,
    "function": null,
    "comment": "video_stitcher.cpp:41:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "video_stitcher.cpp",
    "line": 42,
    "function": null,
    "comment": "video_stitcher.cpp:42:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "video_stitcher.cpp",
    "line": 44,
    "function": null,
    "comment": "video_stitcher.cpp:44:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "video_stitcher.cpp",
    "line": 45,
    "function": null,
    "comment": "video_stitcher.cpp:45:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "video_stitcher.cpp",
    "line": 56,
    "function": null,
    "comment": "video_stitcher.cpp:56:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "video_stitcher.cpp",
    "line": 56,
    "function": null,
    "comment": "video_stitcher.cpp:56:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "video_stitcher.cpp",
    "line": 61,
    "function": null,
    "comment": "video_stitcher.cpp:61:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "video_stitcher.cpp",
    "line": 67,
    "function": null,
    "comment": "video_stitcher.cpp:67:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "video_stitcher.cpp",
    "line": 89,
    "function": null,
    "comment": "video_stitcher.cpp:89:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "video_stitcher.cpp",
    "line": 104,
    "function": null,
    "comment": "video_stitcher.cpp:104:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "video_stitcher.cpp",
    "line": 105,
    "function": null,
    "comment": "video_stitcher.cpp:105:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "video_stitcher.cpp",
    "line": 113,
    "function": null,
    "comment": "video_stitcher.cpp:113:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "video_stitcher.cpp",
    "line": 114,
    "function": null,
    "comment": "video_stitcher.cpp:114:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "video_stitcher.cpp",
    "line": 120,
    "function": null,
    "comment": "video_stitcher.cpp:120:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "video_stitcher.cpp",
    "line": 121,
    "function": null,
    "comment": "video_stitcher.cpp:121:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "video_stitcher.cpp",
    "line": 127,
    "function": null,
    "comment": "video_stitcher.cpp:127:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "video_stitcher.cpp",
    "line": 132,
    "function": null,
    "comment": "video_stitcher.cpp:132:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "video_stitcher.cpp",
    "line": 133,
    "function": null,
    "comment": "video_stitcher.cpp:133:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "video_stitcher.cpp",
    "line": 140,
    "function": null,
    "comment": "video_stitcher.cpp:140:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "video_stitcher.cpp",
    "line": 140,
    "function": null,
    "comment": "video_stitcher.cpp:140:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "video_stitcher.cpp",
    "line": 143,
    "function": null,
    "comment": "video_stitcher.cpp:143:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "video_stitcher.cpp",
    "line": 148,
    "function": null,
    "comment": "video_stitcher.cpp:148:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "video_stitcher.cpp",
    "line": 152,
    "function": null,
    "comment": "video_stitcher.cpp:152:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "video_stitcher.cpp",
    "line": 153,
    "function": null,
    "comment": "video_stitcher.cpp:153:  Using C-style cast.  Use static_cast<double>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "video_stitcher.cpp",
    "line": 156,
    "function": null,
    "comment": "video_stitcher.cpp:156:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "video_stitcher.cpp",
    "line": 157,
    "function": null,
    "comment": "video_stitcher.cpp:157:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "video_stitcher.cpp",
    "line": 158,
    "function": null,
    "comment": "video_stitcher.cpp:158:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "video_stitcher.cpp",
    "line": 163,
    "function": null,
    "comment": "video_stitcher.cpp:163:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "video_stitcher.cpp",
    "line": 168,
    "function": null,
    "comment": "video_stitcher.cpp:168:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "video_stitcher.cpp",
    "line": 170,
    "function": null,
    "comment": "video_stitcher.cpp:170:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "video_stitcher.cpp",
    "line": 184,
    "function": null,
    "comment": "video_stitcher.cpp:184:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "video_stitcher.cpp",
    "line": 216,
    "function": null,
    "comment": "video_stitcher.cpp:216:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "video_stitcher.cpp",
    "line": 219,
    "function": null,
    "comment": "video_stitcher.cpp:219:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "video_stitcher.cpp",
    "line": 237,
    "function": null,
    "comment": "video_stitcher.cpp:237:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "video_stitcher.cpp",
    "line": 239,
    "function": null,
    "comment": "video_stitcher.cpp:239:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "video_stitcher.cpp",
    "line": 49,
    "function": null,
    "comment": "video_stitcher.cpp:49:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "utest.cpp",
    "line": null,
    "function": null,
    "comment": "utest.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "utest.cpp",
    "line": 11,
    "function": null,
    "comment": "utest.cpp:11:  Found C system header after other header. Should be: utest.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "utest.cpp",
    "line": 13,
    "function": null,
    "comment": "utest.cpp:13:  Found C++ system header after other header. Should be: utest.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "utest.cpp",
    "line": 14,
    "function": null,
    "comment": "utest.cpp:14:  Found C++ system header after other header. Should be: utest.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "utest.cpp",
    "line": 15,
    "function": null,
    "comment": "utest.cpp:15:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "utest.cpp",
    "line": 16,
    "function": null,
    "comment": "utest.cpp:16:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "utest.cpp",
    "line": 17,
    "function": null,
    "comment": "utest.cpp:17:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "utest.cpp",
    "line": 20,
    "function": null,
    "comment": "utest.cpp:20:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "utest.cpp",
    "line": 21,
    "function": null,
    "comment": "utest.cpp:21:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "utest.cpp",
    "line": 57,
    "function": null,
    "comment": "utest.cpp:57:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "medical_test.cpp",
    "line": null,
    "function": null,
    "comment": "medical_test.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "medical_test.cpp",
    "line": 9,
    "function": null,
    "comment": "medical_test.cpp:9:  Include 'pano_core/feature_utils.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "medical_test.cpp",
    "line": 12,
    "function": null,
    "comment": "medical_test.cpp:12:  Found C system header after other header. Should be: medical_test.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "medical_test.cpp",
    "line": 13,
    "function": null,
    "comment": "medical_test.cpp:13:  Found C system header after other header. Should be: medical_test.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "medical_test.cpp",
    "line": 14,
    "function": null,
    "comment": "medical_test.cpp:14:  Found C system header after other header. Should be: medical_test.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "medical_test.cpp",
    "line": 15,
    "function": null,
    "comment": "medical_test.cpp:15:  Found C system header after other header. Should be: medical_test.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "medical_test.cpp",
    "line": 16,
    "function": null,
    "comment": "medical_test.cpp:16:  Found C++ system header after other header. Should be: medical_test.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "medical_test.cpp",
    "line": 17,
    "function": null,
    "comment": "medical_test.cpp:17:  Found C++ system header after other header. Should be: medical_test.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "medical_test.cpp",
    "line": 18,
    "function": null,
    "comment": "medical_test.cpp:18:  Found C++ system header after other header. Should be: medical_test.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "medical_test.cpp",
    "line": 19,
    "function": null,
    "comment": "medical_test.cpp:19:  Found C++ system header after other header. Should be: medical_test.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "medical_test.cpp",
    "line": 21,
    "function": null,
    "comment": "medical_test.cpp:21:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "medical_test.cpp",
    "line": 22,
    "function": null,
    "comment": "medical_test.cpp:22:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "medical_test.cpp",
    "line": 23,
    "function": null,
    "comment": "medical_test.cpp:23:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "medical_test.cpp",
    "line": 25,
    "function": null,
    "comment": "medical_test.cpp:25:  Is this a non-const reference? If so, make const or use a pointer: istream& input  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "medical_test.cpp",
    "line": 26,
    "function": null,
    "comment": "medical_test.cpp:26:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "medical_test.cpp",
    "line": 29,
    "function": null,
    "comment": "medical_test.cpp:29:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "medical_test.cpp",
    "line": 40,
    "function": null,
    "comment": "medical_test.cpp:40:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "medical_test.cpp",
    "line": 40,
    "function": null,
    "comment": "medical_test.cpp:40:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& R_w  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "medical_test.cpp",
    "line": 41,
    "function": null,
    "comment": "medical_test.cpp:41:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat & R_new  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "medical_test.cpp",
    "line": 41,
    "function": null,
    "comment": "medical_test.cpp:41:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& H  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "medical_test.cpp",
    "line": 42,
    "function": null,
    "comment": "medical_test.cpp:42:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "medical_test.cpp",
    "line": 48,
    "function": null,
    "comment": "medical_test.cpp:48:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& dest  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "medical_test.cpp",
    "line": 49,
    "function": null,
    "comment": "medical_test.cpp:49:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "medical_test.cpp",
    "line": 50,
    "function": null,
    "comment": "medical_test.cpp:50:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "medical_test.cpp",
    "line": 53,
    "function": null,
    "comment": "medical_test.cpp:53:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat&dest  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "medical_test.cpp",
    "line": 54,
    "function": null,
    "comment": "medical_test.cpp:54:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "medical_test.cpp",
    "line": 60,
    "function": null,
    "comment": "medical_test.cpp:60:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "medical_test.cpp",
    "line": 61,
    "function": null,
    "comment": "medical_test.cpp:61:  public: should be indented +1 space inside class ESM_data  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "medical_test.cpp",
    "line": 62,
    "function": null,
    "comment": "medical_test.cpp:62:  Do not leave a blank line after 'public:'  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "medical_test.cpp",
    "line": 64,
    "function": null,
    "comment": "medical_test.cpp:64:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "medical_test.cpp",
    "line": 65,
    "function": null,
    "comment": "medical_test.cpp:65:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "medical_test.cpp",
    "line": 66,
    "function": null,
    "comment": "medical_test.cpp:66:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "medical_test.cpp",
    "line": 70,
    "function": null,
    "comment": "medical_test.cpp:70:  Is this a non-const reference? If so, make const or use a pointer: Mat& R  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "medical_test.cpp",
    "line": 70,
    "function": null,
    "comment": "medical_test.cpp:70:  Is this a non-const reference? If so, make const or use a pointer: Mat& H  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "medical_test.cpp",
    "line": 71,
    "function": null,
    "comment": "medical_test.cpp:71:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "medical_test.cpp",
    "line": 72,
    "function": null,
    "comment": "medical_test.cpp:72:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "medical_test.cpp",
    "line": 72,
    "function": null,
    "comment": "medical_test.cpp:72:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "medical_test.cpp",
    "line": 74,
    "function": null,
    "comment": "medical_test.cpp:74:  private: should be indented +1 space inside class ESM_data  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "medical_test.cpp",
    "line": 76,
    "function": null,
    "comment": "medical_test.cpp:76:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "medical_test.cpp",
    "line": 77,
    "function": null,
    "comment": "medical_test.cpp:77:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "medical_test.cpp",
    "line": 77,
    "function": null,
    "comment": "medical_test.cpp:77:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "medical_test.cpp",
    "line": 80,
    "function": null,
    "comment": "medical_test.cpp:80:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "medical_test.cpp",
    "line": 81,
    "function": null,
    "comment": "medical_test.cpp:81:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "medical_test.cpp",
    "line": 87,
    "function": null,
    "comment": "medical_test.cpp:87:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "medical_test.cpp",
    "line": 112,
    "function": null,
    "comment": "medical_test.cpp:112:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "medical_test.cpp",
    "line": 118,
    "function": null,
    "comment": "medical_test.cpp:118:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "medical_test.cpp",
    "line": 119,
    "function": null,
    "comment": "medical_test.cpp:119:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "medical_test.cpp",
    "line": 121,
    "function": null,
    "comment": "medical_test.cpp:121:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "medical_test.cpp",
    "line": 133,
    "function": null,
    "comment": "medical_test.cpp:133:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "medical_test.cpp",
    "line": 146,
    "function": null,
    "comment": "medical_test.cpp:146:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "medical_test.cpp",
    "line": 149,
    "function": null,
    "comment": "medical_test.cpp:149:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "medical_test.cpp",
    "line": 149,
    "function": null,
    "comment": "medical_test.cpp:149:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "medical_test.cpp",
    "line": 150,
    "function": null,
    "comment": "medical_test.cpp:150:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "medical_test.cpp",
    "line": 162,
    "function": null,
    "comment": "medical_test.cpp:162:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "medical_test.cpp",
    "line": 175,
    "function": null,
    "comment": "medical_test.cpp:175:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "medical_test.cpp",
    "line": 176,
    "function": null,
    "comment": "medical_test.cpp:176:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "medical_test.cpp",
    "line": 187,
    "function": null,
    "comment": "medical_test.cpp:187:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "medical_test.cpp",
    "line": 155,
    "function": null,
    "comment": "medical_test.cpp:155:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "glob_deserial.cpp",
    "line": null,
    "function": null,
    "comment": "glob_deserial.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "glob_deserial.cpp",
    "line": 9,
    "function": null,
    "comment": "glob_deserial.cpp:9:  Include 'pano_core/feature_utils.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "glob_deserial.cpp",
    "line": 11,
    "function": null,
    "comment": "glob_deserial.cpp:11:  Include 'pano_core/MoleculeProcessor.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "glob_deserial.cpp",
    "line": 12,
    "function": null,
    "comment": "glob_deserial.cpp:12:  Include 'pano_core/CaptureEngine.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "glob_deserial.cpp",
    "line": 14,
    "function": null,
    "comment": "glob_deserial.cpp:14:  Include 'pano_core/Blender.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "glob_deserial.cpp",
    "line": 16,
    "function": null,
    "comment": "glob_deserial.cpp:16:  Found C++ system header after other header. Should be: glob_deserial.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "glob_deserial.cpp",
    "line": 17,
    "function": null,
    "comment": "glob_deserial.cpp:17:  Found C++ system header after other header. Should be: glob_deserial.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "glob_deserial.cpp",
    "line": 18,
    "function": null,
    "comment": "glob_deserial.cpp:18:  Found C++ system header after other header. Should be: glob_deserial.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "glob_deserial.cpp",
    "line": 20,
    "function": null,
    "comment": "glob_deserial.cpp:20:  Found C system header after other header. Should be: glob_deserial.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "glob_deserial.cpp",
    "line": 21,
    "function": null,
    "comment": "glob_deserial.cpp:21:  Found C system header after other header. Should be: glob_deserial.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "glob_deserial.cpp",
    "line": 23,
    "function": null,
    "comment": "glob_deserial.cpp:23:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "glob_deserial.cpp",
    "line": 24,
    "function": null,
    "comment": "glob_deserial.cpp:24:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "glob_deserial.cpp",
    "line": 25,
    "function": null,
    "comment": "glob_deserial.cpp:25:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "glob_deserial.cpp",
    "line": 28,
    "function": null,
    "comment": "glob_deserial.cpp:28:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "glob_deserial.cpp",
    "line": 30,
    "function": null,
    "comment": "glob_deserial.cpp:30:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "glob_deserial.cpp",
    "line": 31,
    "function": null,
    "comment": "glob_deserial.cpp:31:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "glob_deserial.cpp",
    "line": 38,
    "function": null,
    "comment": "glob_deserial.cpp:38:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "glob_deserial.cpp",
    "line": 44,
    "function": null,
    "comment": "glob_deserial.cpp:44:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "glob_deserial.cpp",
    "line": 53,
    "function": null,
    "comment": "glob_deserial.cpp:53:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "glob_deserial.cpp",
    "line": 63,
    "function": null,
    "comment": "glob_deserial.cpp:63:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "glob_deserial.cpp",
    "line": 64,
    "function": null,
    "comment": "glob_deserial.cpp:64:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "glob_deserial.cpp",
    "line": 66,
    "function": null,
    "comment": "glob_deserial.cpp:66:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "glob_deserial.cpp",
    "line": 67,
    "function": null,
    "comment": "glob_deserial.cpp:67:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "glob_deserial.cpp",
    "line": 70,
    "function": null,
    "comment": "glob_deserial.cpp:70:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "glob_deserial.cpp",
    "line": 71,
    "function": null,
    "comment": "glob_deserial.cpp:71:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "glob_deserial.cpp",
    "line": 72,
    "function": null,
    "comment": "glob_deserial.cpp:72:  Missing space before ( in while(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "glob_deserial.cpp",
    "line": 72,
    "function": null,
    "comment": "glob_deserial.cpp:72:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "glob_deserial.cpp",
    "line": 72,
    "function": null,
    "comment": "glob_deserial.cpp:72:  Using deprecated casting style.  Use static_cast<char>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "glob_deserial.cpp",
    "line": 73,
    "function": null,
    "comment": "glob_deserial.cpp:73:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "glob_deserial.cpp",
    "line": 37,
    "function": null,
    "comment": "glob_deserial.cpp:37:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "imagelist_matcher.cpp",
    "line": null,
    "function": null,
    "comment": "imagelist_matcher.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "imagelist_matcher.cpp",
    "line": 2,
    "function": null,
    "comment": "imagelist_matcher.cpp:2:  Include 'pano_core/feature_utils.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "imagelist_matcher.cpp",
    "line": 4,
    "function": null,
    "comment": "imagelist_matcher.cpp:4:  Include 'pano_core/CaptureEngine.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "imagelist_matcher.cpp",
    "line": 6,
    "function": null,
    "comment": "imagelist_matcher.cpp:6:  Include 'pano_core/Blender.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "imagelist_matcher.cpp",
    "line": 8,
    "function": null,
    "comment": "imagelist_matcher.cpp:8:  Found C++ system header after other header. Should be: imagelist_matcher.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "imagelist_matcher.cpp",
    "line": 9,
    "function": null,
    "comment": "imagelist_matcher.cpp:9:  Found C system header after other header. Should be: imagelist_matcher.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "imagelist_matcher.cpp",
    "line": 10,
    "function": null,
    "comment": "imagelist_matcher.cpp:10:  Found C++ system header after other header. Should be: imagelist_matcher.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "imagelist_matcher.cpp",
    "line": 11,
    "function": null,
    "comment": "imagelist_matcher.cpp:11:  Found C++ system header after other header. Should be: imagelist_matcher.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "imagelist_matcher.cpp",
    "line": 13,
    "function": null,
    "comment": "imagelist_matcher.cpp:13:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "imagelist_matcher.cpp",
    "line": 14,
    "function": null,
    "comment": "imagelist_matcher.cpp:14:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "imagelist_matcher.cpp",
    "line": 15,
    "function": null,
    "comment": "imagelist_matcher.cpp:15:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "imagelist_matcher.cpp",
    "line": 17,
    "function": null,
    "comment": "imagelist_matcher.cpp:17:  Is this a non-const reference? If so, make const or use a pointer: vector<string>& l  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "imagelist_matcher.cpp",
    "line": 18,
    "function": null,
    "comment": "imagelist_matcher.cpp:18:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "imagelist_matcher.cpp",
    "line": 32,
    "function": null,
    "comment": "imagelist_matcher.cpp:32:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "imagelist_matcher.cpp",
    "line": 32,
    "function": null,
    "comment": "imagelist_matcher.cpp:32:  Is this a non-const reference? If so, make const or use a pointer: vector<char>& mask  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "imagelist_matcher.cpp",
    "line": 33,
    "function": null,
    "comment": "imagelist_matcher.cpp:33:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "imagelist_matcher.cpp",
    "line": 37,
    "function": null,
    "comment": "imagelist_matcher.cpp:37:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "imagelist_matcher.cpp",
    "line": 43,
    "function": null,
    "comment": "imagelist_matcher.cpp:43:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "imagelist_matcher.cpp",
    "line": 43,
    "function": null,
    "comment": "imagelist_matcher.cpp:43:  Is this a non-const reference? If so, make const or use a pointer: vector<DMatch>& tmatches  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "imagelist_matcher.cpp",
    "line": 44,
    "function": null,
    "comment": "imagelist_matcher.cpp:44:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "imagelist_matcher.cpp",
    "line": 47,
    "function": null,
    "comment": "imagelist_matcher.cpp:47:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "imagelist_matcher.cpp",
    "line": 53,
    "function": null,
    "comment": "imagelist_matcher.cpp:53:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "imagelist_matcher.cpp",
    "line": 55,
    "function": null,
    "comment": "imagelist_matcher.cpp:55:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "imagelist_matcher.cpp",
    "line": 67,
    "function": null,
    "comment": "imagelist_matcher.cpp:67:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "imagelist_matcher.cpp",
    "line": 72,
    "function": null,
    "comment": "imagelist_matcher.cpp:72:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "imagelist_matcher.cpp",
    "line": 72,
    "function": null,
    "comment": "imagelist_matcher.cpp:72:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "imagelist_matcher.cpp",
    "line": 82,
    "function": null,
    "comment": "imagelist_matcher.cpp:82:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "imagelist_matcher.cpp",
    "line": 84,
    "function": null,
    "comment": "imagelist_matcher.cpp:84:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "imagelist_matcher.cpp",
    "line": 85,
    "function": null,
    "comment": "imagelist_matcher.cpp:85:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "imagelist_matcher.cpp",
    "line": 94,
    "function": null,
    "comment": "imagelist_matcher.cpp:94:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "imagelist_matcher.cpp",
    "line": 106,
    "function": null,
    "comment": "imagelist_matcher.cpp:106:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "imagelist_matcher.cpp",
    "line": 117,
    "function": null,
    "comment": "imagelist_matcher.cpp:117:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "imagelist_matcher.cpp",
    "line": 120,
    "function": null,
    "comment": "imagelist_matcher.cpp:120:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "imagelist_matcher.cpp",
    "line": 123,
    "function": null,
    "comment": "imagelist_matcher.cpp:123:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "imagelist_matcher.cpp",
    "line": 127,
    "function": null,
    "comment": "imagelist_matcher.cpp:127:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "imagelist_matcher.cpp",
    "line": 138,
    "function": null,
    "comment": "imagelist_matcher.cpp:138:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "imagelist_matcher.cpp",
    "line": 65,
    "function": null,
    "comment": "imagelist_matcher.cpp:65:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "imagelist_matcher.cpp",
    "line": 132,
    "function": null,
    "comment": "imagelist_matcher.cpp:132:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "molecule_builder.cpp",
    "line": null,
    "function": null,
    "comment": "molecule_builder.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "molecule_builder.cpp",
    "line": 14,
    "function": null,
    "comment": "molecule_builder.cpp:14:  Include 'pano_core/ImageAtom.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "molecule_builder.cpp",
    "line": 15,
    "function": null,
    "comment": "molecule_builder.cpp:15:  Include 'pano_core/feature_utils.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "molecule_builder.cpp",
    "line": 18,
    "function": null,
    "comment": "molecule_builder.cpp:18:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "molecule_builder.cpp",
    "line": 19,
    "function": null,
    "comment": "molecule_builder.cpp:19:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "molecule_builder.cpp",
    "line": 20,
    "function": null,
    "comment": "molecule_builder.cpp:20:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "molecule_builder.cpp",
    "line": 23,
    "function": null,
    "comment": "molecule_builder.cpp:23:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "molecule_builder.cpp",
    "line": 24,
    "function": null,
    "comment": "molecule_builder.cpp:24:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "molecule_builder.cpp",
    "line": 26,
    "function": null,
    "comment": "molecule_builder.cpp:26:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "molecule_builder.cpp",
    "line": 40,
    "function": null,
    "comment": "molecule_builder.cpp:40:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "molecule_builder.cpp",
    "line": 46,
    "function": null,
    "comment": "molecule_builder.cpp:46:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "molecule_builder.cpp",
    "line": 78,
    "function": null,
    "comment": "molecule_builder.cpp:78:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "molecule_builder.cpp",
    "line": 80,
    "function": null,
    "comment": "molecule_builder.cpp:80:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "molecule_builder.cpp",
    "line": 81,
    "function": null,
    "comment": "molecule_builder.cpp:81:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "molecule_builder.cpp",
    "line": 92,
    "function": null,
    "comment": "molecule_builder.cpp:92:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "molecule_builder.cpp",
    "line": 93,
    "function": null,
    "comment": "molecule_builder.cpp:93:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "molecule_builder.cpp",
    "line": 94,
    "function": null,
    "comment": "molecule_builder.cpp:94:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "molecule_builder.cpp",
    "line": 96,
    "function": null,
    "comment": "molecule_builder.cpp:96:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "molecule_builder.cpp",
    "line": 97,
    "function": null,
    "comment": "molecule_builder.cpp:97:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "molecule_builder.cpp",
    "line": 102,
    "function": null,
    "comment": "molecule_builder.cpp:102:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "molecule_builder.cpp",
    "line": 104,
    "function": null,
    "comment": "molecule_builder.cpp:104:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "molecule_builder.cpp",
    "line": 107,
    "function": null,
    "comment": "molecule_builder.cpp:107:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "molecule_builder.cpp",
    "line": 107,
    "function": null,
    "comment": "molecule_builder.cpp:107:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "molecule_builder.cpp",
    "line": 107,
    "function": null,
    "comment": "molecule_builder.cpp:107:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a closing brace, if it does not end the line (for instance, '} else {').",
    "file": "molecule_builder.cpp",
    "line": 107,
    "function": null,
    "comment": "molecule_builder.cpp:107:  Missing space before else  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "molecule_builder.cpp",
    "line": 108,
    "function": null,
    "comment": "molecule_builder.cpp:108:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "molecule_builder.cpp",
    "line": 108,
    "function": null,
    "comment": "molecule_builder.cpp:108:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "molecule_builder.cpp",
    "line": 108,
    "function": null,
    "comment": "molecule_builder.cpp:108:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "molecule_builder.cpp",
    "line": 110,
    "function": null,
    "comment": "molecule_builder.cpp:110:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "molecule_builder.cpp",
    "line": 113,
    "function": null,
    "comment": "molecule_builder.cpp:113:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "molecule_builder.cpp",
    "line": 119,
    "function": null,
    "comment": "molecule_builder.cpp:119:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "molecule_builder.cpp",
    "line": 127,
    "function": null,
    "comment": "molecule_builder.cpp:127:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "molecule_builder.cpp",
    "line": 140,
    "function": null,
    "comment": "molecule_builder.cpp:140:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "molecule_builder.cpp",
    "line": 133,
    "function": null,
    "comment": "molecule_builder.cpp:133:  Add #include <algorithm> for swap  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "molecule_builder.cpp",
    "line": 58,
    "function": null,
    "comment": "molecule_builder.cpp:58:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "w2d_time.cpp",
    "line": null,
    "function": null,
    "comment": "w2d_time.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "w2d_time.cpp",
    "line": 10,
    "function": null,
    "comment": "w2d_time.cpp:10:  Found C system header after C++ system header. Should be: w2d_time.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "w2d_time.cpp",
    "line": 13,
    "function": null,
    "comment": "w2d_time.cpp:13:  Include 'pano_core/feature_utils.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "w2d_time.cpp",
    "line": 16,
    "function": null,
    "comment": "w2d_time.cpp:16:  Found C system header after other header. Should be: w2d_time.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "w2d_time.cpp",
    "line": 17,
    "function": null,
    "comment": "w2d_time.cpp:17:  Found C system header after other header. Should be: w2d_time.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not include the same file twice.",
    "file": "w2d_time.cpp",
    "line": 18,
    "function": null,
    "comment": "w2d_time.cpp:18:  'iostream' already included at w2d_time.cpp:8  [build/include] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "w2d_time.cpp",
    "line": 19,
    "function": null,
    "comment": "w2d_time.cpp:19:  Found C++ system header after other header. Should be: w2d_time.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "w2d_time.cpp",
    "line": 20,
    "function": null,
    "comment": "w2d_time.cpp:20:  Found C++ system header after other header. Should be: w2d_time.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "w2d_time.cpp",
    "line": 21,
    "function": null,
    "comment": "w2d_time.cpp:21:  Found C++ system header after other header. Should be: w2d_time.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "w2d_time.cpp",
    "line": 23,
    "function": null,
    "comment": "w2d_time.cpp:23:  Found C system header after other header. Should be: w2d_time.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "w2d_time.cpp",
    "line": 24,
    "function": null,
    "comment": "w2d_time.cpp:24:  Found C system header after other header. Should be: w2d_time.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "w2d_time.cpp",
    "line": 26,
    "function": null,
    "comment": "w2d_time.cpp:26:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "w2d_time.cpp",
    "line": 27,
    "function": null,
    "comment": "w2d_time.cpp:27:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "w2d_time.cpp",
    "line": 28,
    "function": null,
    "comment": "w2d_time.cpp:28:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "w2d_time.cpp",
    "line": 29,
    "function": null,
    "comment": "w2d_time.cpp:29:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "w2d_time.cpp",
    "line": 31,
    "function": null,
    "comment": "w2d_time.cpp:31:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& img  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "w2d_time.cpp",
    "line": 32,
    "function": null,
    "comment": "w2d_time.cpp:32:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "w2d_time.cpp",
    "line": 33,
    "function": null,
    "comment": "w2d_time.cpp:33:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "w2d_time.cpp",
    "line": 39,
    "function": null,
    "comment": "w2d_time.cpp:39:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "w2d_time.cpp",
    "line": 54,
    "function": null,
    "comment": "w2d_time.cpp:54:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "w2d_time.cpp",
    "line": 54,
    "function": null,
    "comment": "w2d_time.cpp:54:  Is this a non-const reference? If so, make const or use a pointer: istream& input  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "w2d_time.cpp",
    "line": 56,
    "function": null,
    "comment": "w2d_time.cpp:56:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "w2d_time.cpp",
    "line": 59,
    "function": null,
    "comment": "w2d_time.cpp:59:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "w2d_time.cpp",
    "line": 67,
    "function": null,
    "comment": "w2d_time.cpp:67:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "w2d_time.cpp",
    "line": 68,
    "function": null,
    "comment": "w2d_time.cpp:68:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "w2d_time.cpp",
    "line": 71,
    "function": null,
    "comment": "w2d_time.cpp:71:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "w2d_time.cpp",
    "line": 71,
    "function": null,
    "comment": "w2d_time.cpp:71:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "w2d_time.cpp",
    "line": 83,
    "function": null,
    "comment": "w2d_time.cpp:83:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "w2d_time.cpp",
    "line": 83,
    "function": null,
    "comment": "w2d_time.cpp:83:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "w2d_time.cpp",
    "line": 83,
    "function": null,
    "comment": "w2d_time.cpp:83:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "w2d_time.cpp",
    "line": 92,
    "function": null,
    "comment": "w2d_time.cpp:92:  Missing space before ( in while(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "w2d_time.cpp",
    "line": 93,
    "function": null,
    "comment": "w2d_time.cpp:93:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "w2d_time.cpp",
    "line": 94,
    "function": null,
    "comment": "w2d_time.cpp:94:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "w2d_time.cpp",
    "line": 101,
    "function": null,
    "comment": "w2d_time.cpp:101:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "w2d_time.cpp",
    "line": 103,
    "function": null,
    "comment": "w2d_time.cpp:103:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "w2d_time.cpp",
    "line": 104,
    "function": null,
    "comment": "w2d_time.cpp:104:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "w2d_time.cpp",
    "line": 104,
    "function": null,
    "comment": "w2d_time.cpp:104:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space after a semicolon, if it does not end the line.",
    "file": "w2d_time.cpp",
    "line": 104,
    "function": null,
    "comment": "w2d_time.cpp:104:  Missing space after ;  [whitespace/semicolon] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "w2d_time.cpp",
    "line": 104,
    "function": null,
    "comment": "w2d_time.cpp:104:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "w2d_time.cpp",
    "line": 107,
    "function": null,
    "comment": "w2d_time.cpp:107:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "w2d_time.cpp",
    "line": 107,
    "function": null,
    "comment": "w2d_time.cpp:107:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "w2d_time.cpp",
    "line": 111,
    "function": null,
    "comment": "w2d_time.cpp:111:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "w2d_time.cpp",
    "line": 113,
    "function": null,
    "comment": "w2d_time.cpp:113:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "w2d_time.cpp",
    "line": 114,
    "function": null,
    "comment": "w2d_time.cpp:114:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "w2d_time.cpp",
    "line": 121,
    "function": null,
    "comment": "w2d_time.cpp:121:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "w2d_time.cpp",
    "line": 122,
    "function": null,
    "comment": "w2d_time.cpp:122:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "w2d_time.cpp",
    "line": 124,
    "function": null,
    "comment": "w2d_time.cpp:124:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "w2d_time.cpp",
    "line": 127,
    "function": null,
    "comment": "w2d_time.cpp:127:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "w2d_time.cpp",
    "line": 90,
    "function": null,
    "comment": "w2d_time.cpp:90:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Use at most one level of pointer indirection.",
    "file": "stitcher.cpp",
    "line": 71,
    "function": null,
    "comment": "Found two or more levels of pointer indirection.",
    "tags": ["hicpp","code-standards","pointers","multiple-pointers"]
  },
  {
    "rule": "Do not use default arguments.",
    "file": "stitcher.cpp",
    "line": 133,
    "function": null,
    "comment": "Found function with default arguments.",
    "tags": ["hicpp","code-standards","functions","parameters","default-arguments","arguments"]
  },
  {
    "rule": "Do not use default arguments.",
    "file": "stitcher.cpp",
    "line": 229,
    "function": null,
    "comment": "Found function with default arguments.",
    "tags": ["hicpp","code-standards","functions","parameters","default-arguments","arguments"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "stitcher.cpp",
    "line": 71,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "stitcher.cpp",
    "line": 126,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "stitcher.cpp",
    "line": 141,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "stitcher.cpp",
    "line": 154,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "stitcher.cpp",
    "line": 155,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "stitcher.cpp",
    "line": 210,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "stitcher.cpp",
    "line": 211,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "stitcher.cpp",
    "line": 212,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "stitcher.cpp",
    "line": 214,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "stitcher.cpp",
    "line": 224,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "stitcher.cpp",
    "line": 258,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "stitcher.cpp",
    "line": 282,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Use at most one level of pointer indirection.",
    "file": "video_stitcher.cpp",
    "line": 60,
    "function": null,
    "comment": "Found two or more levels of pointer indirection.",
    "tags": ["hicpp","code-standards","pointers","multiple-pointers"]
  },
  {
    "rule": "Do not use default arguments.",
    "file": "video_stitcher.cpp",
    "line": 118,
    "function": null,
    "comment": "Found function with default arguments.",
    "tags": ["hicpp","code-standards","functions","parameters","default-arguments","arguments"]
  },
  {
    "rule": "Do not use default arguments.",
    "file": "video_stitcher.cpp",
    "line": 214,
    "function": null,
    "comment": "Found function with default arguments.",
    "tags": ["hicpp","code-standards","functions","parameters","default-arguments","arguments"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "video_stitcher.cpp",
    "line": 60,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "video_stitcher.cpp",
    "line": 112,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "video_stitcher.cpp",
    "line": 126,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "video_stitcher.cpp",
    "line": 139,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "video_stitcher.cpp",
    "line": 140,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "video_stitcher.cpp",
    "line": 195,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "video_stitcher.cpp",
    "line": 196,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "video_stitcher.cpp",
    "line": 197,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "video_stitcher.cpp",
    "line": 199,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "video_stitcher.cpp",
    "line": 209,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "video_stitcher.cpp",
    "line": 242,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "video_stitcher.cpp",
    "line": 266,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Use at most one level of pointer indirection.",
    "file": "Blender.cpp",
    "line": 91,
    "function": null,
    "comment": "Found two or more levels of pointer indirection.",
    "tags": ["hicpp","code-standards","pointers","multiple-pointers"]
  },
  {
    "rule": "Use at most one level of pointer indirection.",
    "file": "Blender.cpp",
    "line": 197,
    "function": null,
    "comment": "Found two or more levels of pointer indirection.",
    "tags": ["hicpp","code-standards","pointers","multiple-pointers"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "Blender.cpp",
    "line": 24,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "Blender.cpp",
    "line": 31,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "Blender.cpp",
    "line": 38,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "Blender.cpp",
    "line": 43,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "Blender.cpp",
    "line": 45,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "Blender.cpp",
    "line": 47,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "Blender.cpp",
    "line": 54,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "Blender.cpp",
    "line": 142,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "Blender.cpp",
    "line": 145,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "Blender.cpp",
    "line": 205,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "Blender.cpp",
    "line": 207,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "Blender.cpp",
    "line": 226,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "Blender.cpp",
    "line": 227,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Use at most one level of pointer indirection.",
    "file": "BlenderMultiband.cpp",
    "line": 138,
    "function": null,
    "comment": "Found two or more levels of pointer indirection.",
    "tags": ["hicpp","code-standards","pointers","multiple-pointers"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "BlenderMultiband.cpp",
    "line": 62,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "BlenderMultiband.cpp",
    "line": 64,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "BlenderMultiband.cpp",
    "line": 131,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "BlenderMultiband.cpp",
    "line": 183,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "BlenderMultiband.cpp",
    "line": 185,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Use at most one level of pointer indirection.",
    "file": "BlenderSimple.cpp",
    "line": 129,
    "function": null,
    "comment": "Found two or more levels of pointer indirection.",
    "tags": ["hicpp","code-standards","pointers","multiple-pointers"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "BlenderSimple.cpp",
    "line": 53,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "BlenderSimple.cpp",
    "line": 55,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "BlenderSimple.cpp",
    "line": 171,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "BlenderSimple.cpp",
    "line": 173,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "BlenderSimple.cpp",
    "line": 120,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "BlurDetector.cpp",
    "line": 31,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "BlurDetector.cpp",
    "line": 76,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "Camera.cpp",
    "line": 179,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "CaptureEngine.cpp",
    "line": 32,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "Extrinsics.cpp",
    "line": 75,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "Extrinsics.cpp",
    "line": 90,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "Extrinsics.cpp",
    "line": 102,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "Extrinsics.cpp",
    "line": 109,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "Extrinsics.cpp",
    "line": 123,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "Extrinsics.cpp",
    "line": 143,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "Extrinsics.cpp",
    "line": 151,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "Features.cpp",
    "line": 52,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ImageAtom.cpp",
    "line": 15,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ImageAtom.cpp",
    "line": 16,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ImageAtom.cpp",
    "line": 101,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ImageAtom.cpp",
    "line": 124,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ImageAtom.cpp",
    "line": 135,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ImageMolecule.cpp",
    "line": 99,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ImageMolecule.cpp",
    "line": 104,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ImageMolecule.cpp",
    "line": 205,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ImageMolecule.cpp",
    "line": 265,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ImageMolecule.cpp",
    "line": 329,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ImageMolecule.cpp",
    "line": 342,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "Images.cpp",
    "line": 142,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Non-empty case blocks must not fall through to the next case.",
    "file": "ModelFitter.cpp",
    "line": 25,
    "function": null,
    "comment": "Non-empty case without a break statement.",
    "tags": ["hicpp","code-standards","switch","case","fall-through"]
  },
  {
    "rule": "Non-empty case blocks must not fall through to the next case.",
    "file": "ModelFitter.cpp",
    "line": 27,
    "function": null,
    "comment": "Non-empty case without a break statement.",
    "tags": ["hicpp","code-standards","switch","case","fall-through"]
  },
  {
    "rule": "Non-empty case blocks must not fall through to the next case.",
    "file": "ModelFitter.cpp",
    "line": 29,
    "function": null,
    "comment": "Non-empty case without a break statement.",
    "tags": ["hicpp","code-standards","switch","case","fall-through"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ModelFitter.cpp",
    "line": 21,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ModelFitter.cpp",
    "line": 50,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ModelFitter.cpp",
    "line": 56,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ModelFitter.cpp",
    "line": 63,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ModelFitter.cpp",
    "line": 72,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ModelFitter.cpp",
    "line": 83,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ModelFitter.cpp",
    "line": 102,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ModelFitter.cpp",
    "line": 111,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ModelFitter.cpp",
    "line": 241,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ModelFitter.cpp",
    "line": 247,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ModelFitter.cpp",
    "line": 248,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ModelFitter.cpp",
    "line": 263,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ModelFitter.cpp",
    "line": 267,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ModelFitter.cpp",
    "line": 272,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ModelFitter.cpp",
    "line": 276,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ModelFitter.cpp",
    "line": 300,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ModelFitter.cpp",
    "line": 302,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ModelFitter.cpp",
    "line": 310,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ModelFitter.cpp",
    "line": 359,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Declarations should be at the smallest feasible scope.",
    "file": "MoleculeProcessor.cpp",
    "line": 48,
    "function": null,
    "comment": "The scope of the variable 'min_err' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:void f(int x){    int i = 0",
    "tags": ["code-standards","jsf-av-cpp","scope"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "MoleculeProcessor.cpp",
    "line": 239,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "MoleculeProcessor.cpp",
    "line": 247,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "MoleculeProcessor.cpp",
    "line": 293,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "MoleculeProcessor.cpp",
    "line": 294,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "MoleculeProcessor.cpp",
    "line": 299,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "MoleculeProcessor.cpp",
    "line": 305,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "MoleculeProcessor.cpp",
    "line": 309,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "MoleculeProcessor.cpp",
    "line": 316,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "MoleculeProcessor.cpp",
    "line": 319,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "MoleculeProcessor.cpp",
    "line": 358,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "MoleculeProcessor.cpp",
    "line": 366,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "MoleculeProcessor.cpp",
    "line": 423,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "MoleculeProcessor.cpp",
    "line": 645,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "MoleculeProcessor.cpp",
    "line": 680,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "MoleculeProcessor.cpp",
    "line": 687,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "MoleculeProcessor.cpp",
    "line": 688,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use default arguments.",
    "file": "Projector.cpp",
    "line": 188,
    "function": null,
    "comment": "Found function with default arguments.",
    "tags": ["hicpp","code-standards","functions","parameters","default-arguments","arguments"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "Projector.cpp",
    "line": 68,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "Projector.cpp",
    "line": 70,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "Projector.cpp",
    "line": 94,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "Projector.cpp",
    "line": 95,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "Projector.cpp",
    "line": 159,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "Projector.cpp",
    "line": 161,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "Projector.cpp",
    "line": 168,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "Projector.cpp",
    "line": 169,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "Projector.cpp",
    "line": 192,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "Projector.cpp",
    "line": 198,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "Projector.cpp",
    "line": 244,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "Projector.cpp",
    "line": 252,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "Projector.cpp",
    "line": 274,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "Projector.cpp",
    "line": 282,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "Projector.cpp",
    "line": 318,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "Projector.cpp",
    "line": 331,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "Projector.cpp",
    "line": 333,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "Projector.cpp",
    "line": 357,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "Projector.cpp",
    "line": 372,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "Projector.cpp",
    "line": 397,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not rely on the sequence of evaluation within an expression.",
    "file": "Projector.cpp",
    "line": 188,
    "function": null,
    "comment": "Found assignment as a subexpression.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","evaluation-order","expressions"]
  },
  {
    "rule": "Ensure that no expression is redundant.",
    "file": "SVDRSolver.cpp",
    "line": 211,
    "function": null,
    "comment": "Variable 'sumdist' is assigned a value that is never used.",
    "tags": ["hicpp","code-standards","redundancy"]
  },
  {
    "rule": "Maximum number of function parameters: 6",
    "file": "SVDRSolver.cpp",
    "line": 123,
    "function": null,
    "comment": "Found function with 7 or more parameters.",
    "tags": ["hicpp","code-standards","functions","parameters"]
  },
  {
    "rule": "Maximum number of function parameters: 6",
    "file": "SVDRSolver.cpp",
    "line": 252,
    "function": null,
    "comment": "Found function with 7 or more parameters.",
    "tags": ["hicpp","code-standards","functions","parameters"]
  },
  {
    "rule": "Maximum number of function parameters: 6",
    "file": "SVDRSolver.cpp",
    "line": 269,
    "function": null,
    "comment": "Found function with 7 or more parameters.",
    "tags": ["hicpp","code-standards","functions","parameters"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "SVDRSolver.cpp",
    "line": 49,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "SVDRSolver.cpp",
    "line": 68,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "SVDRSolver.cpp",
    "line": 91,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "SVDRSolver.cpp",
    "line": 112,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "SVDRSolver.cpp",
    "line": 117,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "SVDRSolver.cpp",
    "line": 123,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "SVDRSolver.cpp",
    "line": 124,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "SVDRSolver.cpp",
    "line": 127,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "SVDRSolver.cpp",
    "line": 134,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "SVDRSolver.cpp",
    "line": 146,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "SVDRSolver.cpp",
    "line": 156,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "SVDRSolver.cpp",
    "line": 164,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "SVDRSolver.cpp",
    "line": 204,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "SVDRSolver.cpp",
    "line": 241,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "SVDRSolver.cpp",
    "line": 252,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "SVDRSolver.cpp",
    "line": 253,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "SVDRSolver.cpp",
    "line": 269,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "SVDRSolver.cpp",
    "line": 270,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "feature_utils.cpp",
    "line": 21,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "feature_utils.cpp",
    "line": 24,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "feature_utils.cpp",
    "line": 50,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "feature_utils.cpp",
    "line": 60,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "feature_utils.cpp",
    "line": 75,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not rely on the sequence of evaluation within an expression.",
    "file": "feature_utils.cpp",
    "line": 35,
    "function": null,
    "comment": "Found assignment as a subexpression.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","evaluation-order","expressions"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "pano_core.cpp",
    "line": 1,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "copy_tests.cpp",
    "line": 15,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Use at most one level of pointer indirection.",
    "file": "glob_deserial.cpp",
    "line": 27,
    "function": null,
    "comment": "Found two or more levels of pointer indirection.",
    "tags": ["hicpp","code-standards","pointers","multiple-pointers"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "glob_deserial.cpp",
    "line": 27,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Use at most one level of pointer indirection.",
    "file": "imagelist_matcher.cpp",
    "line": 52,
    "function": null,
    "comment": "Found two or more levels of pointer indirection.",
    "tags": ["hicpp","code-standards","pointers","multiple-pointers"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "imagelist_matcher.cpp",
    "line": 32,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "imagelist_matcher.cpp",
    "line": 36,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "imagelist_matcher.cpp",
    "line": 43,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "imagelist_matcher.cpp",
    "line": 46,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "imagelist_matcher.cpp",
    "line": 52,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "imagelist_matcher.cpp",
    "line": 93,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "imagelist_matcher.cpp",
    "line": 116,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "imagelist_matcher.cpp",
    "line": 122,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Use at most one level of pointer indirection.",
    "file": "medical_test.cpp",
    "line": 117,
    "function": null,
    "comment": "Found two or more levels of pointer indirection.",
    "tags": ["hicpp","code-standards","pointers","multiple-pointers"]
  },
  {
    "rule": "Maximum number of function parameters: 6",
    "file": "medical_test.cpp",
    "line": 40,
    "function": null,
    "comment": "Found function with 7 or more parameters.",
    "tags": ["hicpp","code-standards","functions","parameters"]
  },
  {
    "rule": "Do not use default arguments.",
    "file": "medical_test.cpp",
    "line": 48,
    "function": null,
    "comment": "Found function with default arguments.",
    "tags": ["hicpp","code-standards","functions","parameters","default-arguments","arguments"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "medical_test.cpp",
    "line": 70,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "medical_test.cpp",
    "line": 117,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Ensure that no expression is redundant.",
    "file": "molecule_builder.cpp",
    "line": 76,
    "function": null,
    "comment": "Variable 'ref_live' is reassigned a value before the old one has been used.",
    "tags": ["hicpp","code-standards","redundancy"]
  },
  {
    "rule": "Use at most one level of pointer indirection.",
    "file": "molecule_builder.cpp",
    "line": 22,
    "function": null,
    "comment": "Found two or more levels of pointer indirection.",
    "tags": ["hicpp","code-standards","pointers","multiple-pointers"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "molecule_builder.cpp",
    "line": 22,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "molecule_builder.cpp",
    "line": 78,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "utest.cpp",
    "line": 56,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Non-empty case blocks must not fall through to the next case.",
    "file": "video_stitcher.cpp",
    "line": 221,
    "function": null,
    "comment": "Non-empty case without a break statement.",
    "tags": ["hicpp","code-standards","switch","case","fall-through"]
  },
  {
    "rule": "Non-empty case blocks must not fall through to the next case.",
    "file": "video_stitcher.cpp",
    "line": 229,
    "function": null,
    "comment": "Non-empty case without a break statement.",
    "tags": ["hicpp","code-standards","switch","case","fall-through"]
  },
  {
    "rule": "Use at most one level of pointer indirection.",
    "file": "video_stitcher.cpp",
    "line": 40,
    "function": null,
    "comment": "Found two or more levels of pointer indirection.",
    "tags": ["hicpp","code-standards","pointers","multiple-pointers"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "video_stitcher.cpp",
    "line": 40,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "video_stitcher.cpp",
    "line": 110,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Non-empty case blocks must not fall through to the next case.",
    "file": "video_tracker.cpp",
    "line": 295,
    "function": null,
    "comment": "Non-empty case without a break statement.",
    "tags": ["hicpp","code-standards","switch","case","fall-through"]
  },
  {
    "rule": "Non-empty case blocks must not fall through to the next case.",
    "file": "video_tracker.cpp",
    "line": 303,
    "function": null,
    "comment": "Non-empty case without a break statement.",
    "tags": ["hicpp","code-standards","switch","case","fall-through"]
  },
  {
    "rule": "Use at most one level of pointer indirection.",
    "file": "video_tracker.cpp",
    "line": 56,
    "function": null,
    "comment": "Found two or more levels of pointer indirection.",
    "tags": ["hicpp","code-standards","pointers","multiple-pointers"]
  },
  {
    "rule": "Do not use default arguments.",
    "file": "video_tracker.cpp",
    "line": 37,
    "function": null,
    "comment": "Found function with default arguments.",
    "tags": ["hicpp","code-standards","functions","parameters","default-arguments","arguments"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "video_tracker.cpp",
    "line": 40,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "video_tracker.cpp",
    "line": 56,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "video_tracker.cpp",
    "line": 126,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "video_tracker.cpp",
    "line": 174,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "video_tracker.cpp",
    "line": 249,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Use at most one level of pointer indirection.",
    "file": "w2d_time.cpp",
    "line": 66,
    "function": null,
    "comment": "Found two or more levels of pointer indirection.",
    "tags": ["hicpp","code-standards","pointers","multiple-pointers"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "w2d_time.cpp",
    "line": 38,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "w2d_time.cpp",
    "line": 66,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "w2d_time.cpp",
    "line": 104,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "Blender.cpp",
    "line": 80,
    "function": null,
    "comment": "The function 'blendMolecule' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "BlurDetector.cpp",
    "line": 29,
    "function": null,
    "comment": "The function 'checkBlur' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "Projector.cpp",
    "line": 301,
    "function": null,
    "comment": "The function 'checksize' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "ModelFitter.cpp",
    "line": 296,
    "function": null,
    "comment": "The function 'convertRTtoG' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "feature_utils.cpp",
    "line": 16,
    "function": null,
    "comment": "The function 'detectImpl' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "medical_test.cpp",
    "line": 70,
    "function": null,
    "comment": "The function 'estimageRandH' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "medical_test.cpp",
    "line": 40,
    "function": null,
    "comment": "The function 'estimateH' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "pano_core.cpp",
    "line": 1,
    "function": null,
    "comment": "The function 'foo' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "MoleculeProcessor.cpp",
    "line": 419,
    "function": null,
    "comment": "The function 'generateMasks' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "Projector.cpp",
    "line": 264,
    "function": null,
    "comment": "The function 'getSphereMask' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "ImageAtom.cpp",
    "line": 16,
    "function": null,
    "comment": "The function 'getUID' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "MoleculeProcessor.cpp",
    "line": 779,
    "function": null,
    "comment": "The function 'graphviz_dump' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "MoleculeProcessor.cpp",
    "line": 791,
    "function": null,
    "comment": "The function 'graphviz_dump_all' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "ImageMolecule.cpp",
    "line": 249,
    "function": null,
    "comment": "The function 'hasAtomThrow' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "MoleculeProcessor.cpp",
    "line": 305,
    "function": null,
    "comment": "The function 'maskMatchesByTrainImgIdx' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "panoutils.cpp",
    "line": 30,
    "function": null,
    "comment": "The function 'mdImageByDoubleWeights' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "panoutils.cpp",
    "line": 6,
    "function": null,
    "comment": "The function 'mdImageByFloatWeights' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "ImageMolecule.cpp",
    "line": 104,
    "function": null,
    "comment": "The function 'peelAtoms' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "Camera.cpp",
    "line": 86,
    "function": null,
    "comment": "The function 'ptsToRays' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "Camera.cpp",
    "line": 92,
    "function": null,
    "comment": "The function 'raysToPts' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "ImageMolecule.cpp",
    "line": 138,
    "function": null,
    "comment": "The function 'removeBadPairs' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "ImageMolecule.cpp",
    "line": 123,
    "function": null,
    "comment": "The function 'removePair' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "w2d_time.cpp",
    "line": 31,
    "function": null,
    "comment": "The function 'rescaleFloatImage' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "MoleculeProcessor.cpp",
    "line": 414,
    "function": null,
    "comment": "The function 'setMatcher' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "ModelFitter.cpp",
    "line": 153,
    "function": null,
    "comment": "The function 'setMatches' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "ModelFitter.cpp",
    "line": 63,
    "function": null,
    "comment": "The function 'setNonStdMatName' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "ModelFitter.cpp",
    "line": 310,
    "function": null,
    "comment": "The function 'sparsifyMatches' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "MoleculeProcessor.cpp",
    "line": 551,
    "function": null,
    "comment": "The function 'truncateMolecules' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "medical_test.cpp",
    "line": 86,
    "function": null,
    "comment": "The function 'updateGradient' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "medical_test.cpp",
    "line": 79,
    "function": null,
    "comment": "The function 'updateWarp' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "Camera.cpp",
    "line": 149,
    "function": null,
    "comment": "The function 'write' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "Maximum coupling between objects: 5",
    "file": "Camera.h",
    "line": null,
    "function": null,
    "comment": "CBO is greater than 5, Camera, 7",
    "tags": ["metrics","nasa-satc","ros","coupling"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "MoleculeProcessor.h",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "MoleculeProcessor.h",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Maximum coupling between objects: 5",
    "file": "MoleculeProcessor.h",
    "line": null,
    "function": null,
    "comment": "CBO is greater than 5, MoleculeProcessor, 6",
    "tags": ["metrics","nasa-satc","ros","coupling"]
  },
  {
    "rule": "Maximum coupling between objects: 5",
    "file": "MoleculeProcessor.h",
    "line": null,
    "function": null,
    "comment": "CBO is greater than 5, MoleculeGlob, 11",
    "tags": ["metrics","nasa-satc","ros","coupling"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "ModelFitter.h",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Maximum coupling between objects: 5",
    "file": "ModelFitter.h",
    "line": null,
    "function": null,
    "comment": "CBO is greater than 5, FitterResult, 7",
    "tags": ["metrics","nasa-satc","ros","coupling"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "Images.h",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Maximum coupling between objects: 5",
    "file": "Images.h",
    "line": null,
    "function": null,
    "comment": "CBO is greater than 5, Images, 6",
    "tags": ["metrics","nasa-satc","ros","coupling"]
  },
  {
    "rule": "Maximum coupling between objects: 5",
    "file": "Blender.h",
    "line": null,
    "function": null,
    "comment": "CBO is greater than 5, BlenderSimple, 10",
    "tags": ["metrics","nasa-satc","ros","coupling"]
  },
  {
    "rule": "Maximum coupling between objects: 5",
    "file": "Blender.h",
    "line": null,
    "function": null,
    "comment": "CBO is greater than 5, BlenderAlpha, 10",
    "tags": ["metrics","nasa-satc","ros","coupling"]
  },
  {
    "rule": "Maximum coupling between objects: 5",
    "file": "Blender.h",
    "line": null,
    "function": null,
    "comment": "CBO is greater than 5, Blender, 9",
    "tags": ["metrics","nasa-satc","ros","coupling"]
  },
  {
    "rule": "Maximum coupling between objects: 5",
    "file": "Blender.h",
    "line": null,
    "function": null,
    "comment": "CBO is greater than 5, BlenderMultiband, 10",
    "tags": ["metrics","nasa-satc","ros","coupling"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "ImageMolecule.h",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "ImageMolecule.h",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "callbacks.h",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "Extrinsics.h",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Maximum coupling between objects: 5",
    "file": "Extrinsics.h",
    "line": null,
    "function": null,
    "comment": "CBO is greater than 5, Extrinsics, 6",
    "tags": ["metrics","nasa-satc","ros","coupling"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "CaptureEngine.h",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "CaptureEngine.h",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "Features.h",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "Projector.h",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "Projector.h",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "PairNode.h",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "PairNode.h",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "feature_utils.h",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "ImageAtom.h",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "pano_interfaces.h",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "BlurDetector.h",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "BlurDetector.h",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "Projector.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "Camera.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Maximum coupling between objects: 5",
    "file": "Camera.cpp",
    "line": null,
    "function": null,
    "comment": "CBO is greater than 5, Camera, 6",
    "tags": ["metrics","nasa-satc","ros","coupling"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "pano_core.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "Blender.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "MoleculeProcessor.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "MoleculeProcessor.cpp",
    "line": 45,
    "function": "queryWithAtom",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum coupling between objects: 5",
    "file": "MoleculeProcessor.cpp",
    "line": null,
    "function": null,
    "comment": "CBO is greater than 5, MoleculeGlob, 8",
    "tags": ["metrics","nasa-satc","ros","coupling"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "SVDRSolver.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "SVDRSolver.cpp",
    "line": 123,
    "function": "ransacSolveR",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 15",
    "file": "SVDRSolver.cpp",
    "line": 123,
    "function": "ransacSolveR",
    "comment": "CC is greater than 15",
    "tags": ["metrics","ros","cyclomatic-complexity","kth"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "CaptureEngine.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "CaptureEngine.cpp",
    "line": 98,
    "function": "onNewFrame",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "ImageAtom.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Maximum coupling between objects: 5",
    "file": "ImageAtom.cpp",
    "line": null,
    "function": null,
    "comment": "CBO is greater than 5, ImageAtom, 7",
    "tags": ["metrics","nasa-satc","ros","coupling"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "feature_utils.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "BlenderMultiband.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "ImageMolecule.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "Features.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Maximum coupling between objects: 5",
    "file": "Features.cpp",
    "line": null,
    "function": null,
    "comment": "CBO is greater than 5, Features, 6",
    "tags": ["metrics","nasa-satc","ros","coupling"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "Extrinsics.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "Images.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "ModelFitter.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Maximum coupling between objects: 5",
    "file": "ModelFitter.cpp",
    "line": null,
    "function": null,
    "comment": "CBO is greater than 5, FitterResult, 6",
    "tags": ["metrics","nasa-satc","ros","coupling"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "BlurDetector.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "BlenderSimple.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "video_stitcher.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "stitcher.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "video_tracker.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "video_tracker.cpp",
    "line": 56,
    "function": "main",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 15",
    "file": "video_tracker.cpp",
    "line": 56,
    "function": "main",
    "comment": "CC is greater than 15",
    "tags": ["metrics","ros","cyclomatic-complexity","kth"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "video_stitcher.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "video_stitcher.cpp",
    "line": 40,
    "function": "main",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 15",
    "file": "video_stitcher.cpp",
    "line": 40,
    "function": "main",
    "comment": "CC is greater than 15",
    "tags": ["metrics","ros","cyclomatic-complexity","kth"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "medical_test.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "glob_deserial.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "imagelist_matcher.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "molecule_builder.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "molecule_builder.cpp",
    "line": 22,
    "function": "main",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 15",
    "file": "molecule_builder.cpp",
    "line": 22,
    "function": "main",
    "comment": "CC is greater than 15",
    "tags": ["metrics","ros","cyclomatic-complexity","kth"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "w2d_time.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  }
]