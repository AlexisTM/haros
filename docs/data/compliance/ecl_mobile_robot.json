[
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "mobile_robot.hpp",
    "line": null,
    "function": null,
    "comment": "mobile_robot.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "differential_drive.hpp",
    "line": null,
    "function": null,
    "comment": "differential_drive.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "differential_drive.hpp",
    "line": 26,
    "function": null,
    "comment": "differential_drive.hpp:26:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "differential_drive.hpp",
    "line": 38,
    "function": null,
    "comment": "differential_drive.hpp:38:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "differential_drive.hpp",
    "line": 39,
    "function": null,
    "comment": "differential_drive.hpp:39:  public: should be indented +1 space inside class ecl_mobile_robot_PUBLIC  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "differential_drive.hpp",
    "line": 40,
    "function": null,
    "comment": "differential_drive.hpp:40:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "differential_drive.hpp",
    "line": 43,
    "function": null,
    "comment": "differential_drive.hpp:43:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "macros.hpp",
    "line": null,
    "function": null,
    "comment": "macros.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "macros.hpp",
    "line": 20,
    "function": null,
    "comment": "macros.hpp:20:  Include 'ecl/config/ecl.hpp' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "macros.hpp",
    "line": 29,
    "function": null,
    "comment": "macros.hpp:29:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "macros.hpp",
    "line": 30,
    "function": null,
    "comment": "macros.hpp:30:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "macros.hpp",
    "line": 32,
    "function": null,
    "comment": "macros.hpp:32:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "macros.hpp",
    "line": 36,
    "function": null,
    "comment": "macros.hpp:36:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "differential_drive.hpp",
    "line": null,
    "function": null,
    "comment": "differential_drive.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "differential_drive.hpp",
    "line": 21,
    "function": null,
    "comment": "differential_drive.hpp:21:  Include 'ecl/geometry/pose2d.hpp' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "differential_drive.hpp",
    "line": 28,
    "function": null,
    "comment": "differential_drive.hpp:28:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "differential_drive.hpp",
    "line": 29,
    "function": null,
    "comment": "differential_drive.hpp:29:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "differential_drive.hpp",
    "line": 63,
    "function": null,
    "comment": "differential_drive.hpp:63:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "differential_drive.hpp",
    "line": 64,
    "function": null,
    "comment": "differential_drive.hpp:64:  public: should be indented +1 space inside class ecl_mobile_robot_PUBLIC  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "differential_drive.hpp",
    "line": 71,
    "function": null,
    "comment": "differential_drive.hpp:71:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "differential_drive.hpp",
    "line": 72,
    "function": null,
    "comment": "differential_drive.hpp:72:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "differential_drive.hpp",
    "line": 73,
    "function": null,
    "comment": "differential_drive.hpp:73:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "differential_drive.hpp",
    "line": 74,
    "function": null,
    "comment": "differential_drive.hpp:74:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "differential_drive.hpp",
    "line": 75,
    "function": null,
    "comment": "differential_drive.hpp:75:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "differential_drive.hpp",
    "line": 76,
    "function": null,
    "comment": "differential_drive.hpp:76:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "differential_drive.hpp",
    "line": 76,
    "function": null,
    "comment": "differential_drive.hpp:76:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "differential_drive.hpp",
    "line": 95,
    "function": null,
    "comment": "differential_drive.hpp:95:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "differential_drive.hpp",
    "line": 113,
    "function": null,
    "comment": "differential_drive.hpp:113:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "differential_drive.hpp",
    "line": 113,
    "function": null,
    "comment": "differential_drive.hpp:113:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "differential_drive.hpp",
    "line": 113,
    "function": null,
    "comment": "differential_drive.hpp:113:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "differential_drive.hpp",
    "line": 125,
    "function": null,
    "comment": "differential_drive.hpp:125:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "differential_drive.hpp",
    "line": 125,
    "function": null,
    "comment": "differential_drive.hpp:125:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "differential_drive.hpp",
    "line": 154,
    "function": null,
    "comment": "differential_drive.hpp:154:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "differential_drive.hpp",
    "line": 154,
    "function": null,
    "comment": "differential_drive.hpp:154:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "differential_drive.hpp",
    "line": 183,
    "function": null,
    "comment": "differential_drive.hpp:183:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "differential_drive.hpp",
    "line": 183,
    "function": null,
    "comment": "differential_drive.hpp:183:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "differential_drive.hpp",
    "line": 184,
    "function": null,
    "comment": "differential_drive.hpp:184:  private: should be indented +1 space inside class ecl_mobile_robot_PUBLIC  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The line before an access modifier (public, private, protected) should be blank, unless it is the beginning of the class.",
    "file": "differential_drive.hpp",
    "line": 184,
    "function": null,
    "comment": "differential_drive.hpp:184:  'private:' should be preceded by a blank line  [whitespace/blank_line] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","access-modifiers"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "differential_drive.hpp",
    "line": 185,
    "function": null,
    "comment": "differential_drive.hpp:185:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "differential_drive.hpp",
    "line": 188,
    "function": null,
    "comment": "differential_drive.hpp:188:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "differential_drive.hpp",
    "line": 189,
    "function": null,
    "comment": "differential_drive.hpp:189:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "differential_drive.cpp",
    "line": null,
    "function": null,
    "comment": "differential_drive.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "differential_drive.cpp",
    "line": 21,
    "function": null,
    "comment": "differential_drive.cpp:21:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "differential_drive.cpp",
    "line": 22,
    "function": null,
    "comment": "differential_drive.cpp:22:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "differential_drive.cpp",
    "line": 38,
    "function": null,
    "comment": "differential_drive.cpp:38:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "differential_drive.cpp",
    "line": 38,
    "function": null,
    "comment": "differential_drive.cpp:38:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "differential_drive.cpp",
    "line": 39,
    "function": null,
    "comment": "differential_drive.cpp:39:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "differential_drive.cpp",
    "line": 40,
    "function": null,
    "comment": "differential_drive.cpp:40:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "differential_drive.cpp",
    "line": 41,
    "function": null,
    "comment": "differential_drive.cpp:41:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "differential_drive.cpp",
    "line": 42,
    "function": null,
    "comment": "differential_drive.cpp:42:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "differential_drive.cpp",
    "line": 43,
    "function": null,
    "comment": "differential_drive.cpp:43:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "differential_drive.cpp",
    "line": 44,
    "function": null,
    "comment": "differential_drive.cpp:44:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "differential_drive.cpp",
    "line": 44,
    "function": null,
    "comment": "differential_drive.cpp:44:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "differential_drive.cpp",
    "line": 45,
    "function": null,
    "comment": "differential_drive.cpp:45:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "differential_drive.cpp",
    "line": 46,
    "function": null,
    "comment": "differential_drive.cpp:46:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "differential_drive.cpp",
    "line": 47,
    "function": null,
    "comment": "differential_drive.cpp:47:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "differential_drive.cpp",
    "line": 50,
    "function": null,
    "comment": "differential_drive.cpp:50:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "differential_drive.cpp",
    "line": 50,
    "function": null,
    "comment": "differential_drive.cpp:50:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "differential_drive.cpp",
    "line": 51,
    "function": null,
    "comment": "differential_drive.cpp:51:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "differential_drive.cpp",
    "line": 52,
    "function": null,
    "comment": "differential_drive.cpp:52:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "differential_drive.cpp",
    "line": 53,
    "function": null,
    "comment": "differential_drive.cpp:53:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "differential_drive.cpp",
    "line": 54,
    "function": null,
    "comment": "differential_drive.cpp:54:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "differential_drive.cpp",
    "line": 54,
    "function": null,
    "comment": "differential_drive.cpp:54:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "differential_drive.cpp",
    "line": 55,
    "function": null,
    "comment": "differential_drive.cpp:55:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "differential_drive.cpp",
    "line": 56,
    "function": null,
    "comment": "differential_drive.cpp:56:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "differential_drive.cpp",
    "line": 57,
    "function": null,
    "comment": "differential_drive.cpp:57:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "differential_drive.cpp",
    "line": 60,
    "function": null,
    "comment": "differential_drive.cpp:60:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "differential_drive.cpp",
    "line": 60,
    "function": null,
    "comment": "differential_drive.cpp:60:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "differential_drive.cpp",
    "line": 61,
    "function": null,
    "comment": "differential_drive.cpp:61:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "differential_drive.cpp",
    "line": 61,
    "function": null,
    "comment": "differential_drive.cpp:61:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "differential_drive.cpp",
    "line": 62,
    "function": null,
    "comment": "differential_drive.cpp:62:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "differential_drive.cpp",
    "line": 62,
    "function": null,
    "comment": "differential_drive.cpp:62:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "differential_drive.cpp",
    "line": 63,
    "function": null,
    "comment": "differential_drive.cpp:63:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "differential_drive.cpp",
    "line": 64,
    "function": null,
    "comment": "differential_drive.cpp:64:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "differential_drive.cpp",
    "line": 65,
    "function": null,
    "comment": "differential_drive.cpp:65:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "differential_drive.cpp",
    "line": 66,
    "function": null,
    "comment": "differential_drive.cpp:66:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "differential_drive.cpp",
    "line": 67,
    "function": null,
    "comment": "differential_drive.cpp:67:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "differential_drive.cpp",
    "line": 70,
    "function": null,
    "comment": "differential_drive.cpp:70:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "differential_drive.cpp",
    "line": 70,
    "function": null,
    "comment": "differential_drive.cpp:70:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "differential_drive.cpp",
    "line": 71,
    "function": null,
    "comment": "differential_drive.cpp:71:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "differential_drive.cpp",
    "line": 72,
    "function": null,
    "comment": "differential_drive.cpp:72:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "differential_drive.cpp",
    "line": 75,
    "function": null,
    "comment": "differential_drive.cpp:75:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "differential_drive.cpp",
    "line": 76,
    "function": null,
    "comment": "differential_drive.cpp:76:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "differential_drive.cpp",
    "line": 77,
    "function": null,
    "comment": "differential_drive.cpp:77:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "differential_drive.cpp",
    "line": 77,
    "function": null,
    "comment": "differential_drive.cpp:77:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "differential_drive.cpp",
    "line": 78,
    "function": null,
    "comment": "differential_drive.cpp:78:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "differential_drive.cpp",
    "line": 79,
    "function": null,
    "comment": "differential_drive.cpp:79:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "differential_drive.cpp",
    "line": 80,
    "function": null,
    "comment": "differential_drive.cpp:80:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "differential_drive.cpp",
    "line": 80,
    "function": null,
    "comment": "differential_drive.cpp:80:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "differential_drive.cpp",
    "line": 81,
    "function": null,
    "comment": "differential_drive.cpp:81:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "differential_drive.cpp",
    "line": 83,
    "function": null,
    "comment": "differential_drive.cpp:83:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "differential_drive.cpp",
    "line": 83,
    "function": null,
    "comment": "differential_drive.cpp:83:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "differential_drive.cpp",
    "line": 84,
    "function": null,
    "comment": "differential_drive.cpp:84:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "differential_drive.cpp",
    "line": 89,
    "function": null,
    "comment": "differential_drive.cpp:89:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "differential_drive.cpp",
    "line": 89,
    "function": null,
    "comment": "differential_drive.cpp:89:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "differential_drive.cpp",
    "line": 90,
    "function": null,
    "comment": "differential_drive.cpp:90:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "differential_drive.cpp",
    "line": 91,
    "function": null,
    "comment": "differential_drive.cpp:91:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "differential_drive.cpp",
    "line": 92,
    "function": null,
    "comment": "differential_drive.cpp:92:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "differential_drive.cpp",
    "line": 93,
    "function": null,
    "comment": "differential_drive.cpp:93:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "differential_drive.cpp",
    "line": 94,
    "function": null,
    "comment": "differential_drive.cpp:94:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "differential_drive.cpp",
    "line": 97,
    "function": null,
    "comment": "differential_drive.cpp:97:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "differential_drive.cpp",
    "line": 98,
    "function": null,
    "comment": "differential_drive.cpp:98:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "differential_drive.cpp",
    "line": 100,
    "function": null,
    "comment": "differential_drive.cpp:100:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "differential_drive.cpp",
    "line": 100,
    "function": null,
    "comment": "differential_drive.cpp:100:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "differential_drive.cpp",
    "line": 101,
    "function": null,
    "comment": "differential_drive.cpp:101:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "differential_drive.cpp",
    "line": 102,
    "function": null,
    "comment": "differential_drive.cpp:102:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "differential_drive.cpp",
    "line": 102,
    "function": null,
    "comment": "differential_drive.cpp:102:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "differential_drive.cpp",
    "line": 103,
    "function": null,
    "comment": "differential_drive.cpp:103:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "differential_drive.cpp",
    "line": 104,
    "function": null,
    "comment": "differential_drive.cpp:104:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "differential_drive.cpp",
    "line": 105,
    "function": null,
    "comment": "differential_drive.cpp:105:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "differential_drive.cpp",
    "line": 105,
    "function": null,
    "comment": "differential_drive.cpp:105:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "differential_drive.cpp",
    "line": 106,
    "function": null,
    "comment": "differential_drive.cpp:106:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "differential_drive.cpp",
    "line": 108,
    "function": null,
    "comment": "differential_drive.cpp:108:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "differential_drive.cpp",
    "line": 109,
    "function": null,
    "comment": "differential_drive.cpp:109:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "differential_drive.cpp",
    "line": 112,
    "function": null,
    "comment": "differential_drive.cpp:112:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "differential_drive.cpp",
    "line": 113,
    "function": null,
    "comment": "differential_drive.cpp:113:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "partial_inverse.cpp",
    "line": null,
    "function": null,
    "comment": "partial_inverse.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "partial_inverse.cpp",
    "line": 13,
    "function": null,
    "comment": "partial_inverse.cpp:13:  Found C system header after C++ system header. Should be: partial_inverse.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "partial_inverse.cpp",
    "line": 14,
    "function": null,
    "comment": "partial_inverse.cpp:14:  Found C system header after C++ system header. Should be: partial_inverse.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "partial_inverse.cpp",
    "line": 15,
    "function": null,
    "comment": "partial_inverse.cpp:15:  Found C system header after C++ system header. Should be: partial_inverse.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "partial_inverse.cpp",
    "line": 16,
    "function": null,
    "comment": "partial_inverse.cpp:16:  Found C system header after C++ system header. Should be: partial_inverse.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "partial_inverse.cpp",
    "line": 17,
    "function": null,
    "comment": "partial_inverse.cpp:17:  Found C system header after C++ system header. Should be: partial_inverse.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "partial_inverse.cpp",
    "line": 36,
    "function": null,
    "comment": "partial_inverse.cpp:36:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "partial_inverse.cpp",
    "line": 36,
    "function": null,
    "comment": "partial_inverse.cpp:36:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "partial_inverse.cpp",
    "line": 37,
    "function": null,
    "comment": "partial_inverse.cpp:37:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "partial_inverse.cpp",
    "line": 38,
    "function": null,
    "comment": "partial_inverse.cpp:38:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "partial_inverse.cpp",
    "line": 44,
    "function": null,
    "comment": "partial_inverse.cpp:44:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "partial_inverse.cpp",
    "line": 45,
    "function": null,
    "comment": "partial_inverse.cpp:45:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "partial_inverse.cpp",
    "line": 46,
    "function": null,
    "comment": "partial_inverse.cpp:46:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "partial_inverse.cpp",
    "line": 49,
    "function": null,
    "comment": "partial_inverse.cpp:49:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "partial_inverse.cpp",
    "line": 51,
    "function": null,
    "comment": "partial_inverse.cpp:51:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "partial_inverse.cpp",
    "line": 60,
    "function": null,
    "comment": "partial_inverse.cpp:60:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "partial_inverse.cpp",
    "line": 66,
    "function": null,
    "comment": "partial_inverse.cpp:66:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "partial_inverse.cpp",
    "line": 68,
    "function": null,
    "comment": "partial_inverse.cpp:68:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "partial_inverse.cpp",
    "line": 71,
    "function": null,
    "comment": "partial_inverse.cpp:71:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "partial_inverse.cpp",
    "line": null,
    "function": null,
    "comment": "partial_inverse.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "partial_inverse.cpp",
    "line": 19,
    "function": null,
    "comment": "partial_inverse.cpp:19:  Found C system header after C++ system header. Should be: partial_inverse.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "partial_inverse.cpp",
    "line": 20,
    "function": null,
    "comment": "partial_inverse.cpp:20:  Found C system header after C++ system header. Should be: partial_inverse.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "partial_inverse.cpp",
    "line": 21,
    "function": null,
    "comment": "partial_inverse.cpp:21:  Found C system header after C++ system header. Should be: partial_inverse.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "partial_inverse.cpp",
    "line": 22,
    "function": null,
    "comment": "partial_inverse.cpp:22:  Found C system header after C++ system header. Should be: partial_inverse.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "partial_inverse.cpp",
    "line": 41,
    "function": null,
    "comment": "partial_inverse.cpp:41:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "partial_inverse.cpp",
    "line": 42,
    "function": null,
    "comment": "partial_inverse.cpp:42:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "partial_inverse.cpp",
    "line": 43,
    "function": null,
    "comment": "partial_inverse.cpp:43:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "partial_inverse.cpp",
    "line": 46,
    "function": null,
    "comment": "partial_inverse.cpp:46:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "partial_inverse.cpp",
    "line": 48,
    "function": null,
    "comment": "partial_inverse.cpp:48:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "partial_inverse.cpp",
    "line": 57,
    "function": null,
    "comment": "partial_inverse.cpp:57:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "partial_inverse.cpp",
    "line": 63,
    "function": null,
    "comment": "partial_inverse.cpp:63:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "partial_inverse.cpp",
    "line": 65,
    "function": null,
    "comment": "partial_inverse.cpp:65:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "partial_inverse.cpp",
    "line": 41,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "partial_inverse.cpp",
    "line": 44,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "differential_drive.cpp",
    "line": 89,
    "function": null,
    "comment": "The function 'Inverse' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "differential_drive.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "differential_drive.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "differential_drive.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "differential_drive.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "partial_inverse.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "partial_inverse.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "partial_inverse.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "partial_inverse.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  }
]