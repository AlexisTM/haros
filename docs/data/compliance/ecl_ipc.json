[
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "ipc.hpp",
    "line": null,
    "function": null,
    "comment": "ipc.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "shared_memory_pos.hpp",
    "line": null,
    "function": null,
    "comment": "shared_memory_pos.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "shared_memory_pos.hpp",
    "line": 24,
    "function": null,
    "comment": "shared_memory_pos.hpp:24:  Include 'bits/posix_opt.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "shared_memory_pos.hpp",
    "line": 45,
    "function": null,
    "comment": "shared_memory_pos.hpp:45:  Found C system header after C++ system header. Should be: shared_memory_pos.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "shared_memory_pos.hpp",
    "line": 46,
    "function": null,
    "comment": "shared_memory_pos.hpp:46:  Found C system header after C++ system header. Should be: shared_memory_pos.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "shared_memory_pos.hpp",
    "line": 47,
    "function": null,
    "comment": "shared_memory_pos.hpp:47:  Found C system header after C++ system header. Should be: shared_memory_pos.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "shared_memory_pos.hpp",
    "line": 48,
    "function": null,
    "comment": "shared_memory_pos.hpp:48:  Found C system header after C++ system header. Should be: shared_memory_pos.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "shared_memory_pos.hpp",
    "line": 49,
    "function": null,
    "comment": "shared_memory_pos.hpp:49:  Found C system header after C++ system header. Should be: shared_memory_pos.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "shared_memory_pos.hpp",
    "line": 55,
    "function": null,
    "comment": "shared_memory_pos.hpp:55:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "shared_memory_pos.hpp",
    "line": 61,
    "function": null,
    "comment": "shared_memory_pos.hpp:61:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "shared_memory_pos.hpp",
    "line": 92,
    "function": null,
    "comment": "shared_memory_pos.hpp:92:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "shared_memory_pos.hpp",
    "line": 93,
    "function": null,
    "comment": "shared_memory_pos.hpp:93:  public: should be indented +1 space inside class SharedMemoryBase  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.hpp",
    "line": 99,
    "function": null,
    "comment": "shared_memory_pos.hpp:99:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "shared_memory_pos.hpp",
    "line": 101,
    "function": null,
    "comment": "shared_memory_pos.hpp:101:  protected: should be indented +1 space inside class SharedMemoryBase  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.hpp",
    "line": 102,
    "function": null,
    "comment": "shared_memory_pos.hpp:102:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "shared_memory_pos.hpp",
    "line": 102,
    "function": null,
    "comment": "shared_memory_pos.hpp:102:  Single-parameter constructors should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.hpp",
    "line": 103,
    "function": null,
    "comment": "shared_memory_pos.hpp:103:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.hpp",
    "line": 104,
    "function": null,
    "comment": "shared_memory_pos.hpp:104:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.hpp",
    "line": 105,
    "function": null,
    "comment": "shared_memory_pos.hpp:105:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.hpp",
    "line": 113,
    "function": null,
    "comment": "shared_memory_pos.hpp:113:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.hpp",
    "line": 115,
    "function": null,
    "comment": "shared_memory_pos.hpp:115:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.hpp",
    "line": 116,
    "function": null,
    "comment": "shared_memory_pos.hpp:116:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "shared_memory_pos.hpp",
    "line": 119,
    "function": null,
    "comment": "shared_memory_pos.hpp:119:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "shared_memory_pos.hpp",
    "line": 137,
    "function": null,
    "comment": "shared_memory_pos.hpp:137:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "shared_memory_pos.hpp",
    "line": 138,
    "function": null,
    "comment": "shared_memory_pos.hpp:138:  public: should be indented +1 space inside class SharedMemory  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.hpp",
    "line": 142,
    "function": null,
    "comment": "shared_memory_pos.hpp:142:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "shared_memory_pos.hpp",
    "line": 142,
    "function": null,
    "comment": "shared_memory_pos.hpp:142:  Single-parameter constructors should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.hpp",
    "line": 143,
    "function": null,
    "comment": "shared_memory_pos.hpp:143:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.hpp",
    "line": 145,
    "function": null,
    "comment": "shared_memory_pos.hpp:145:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "shared_memory_pos.hpp",
    "line": 147,
    "function": null,
    "comment": "shared_memory_pos.hpp:147:  private: should be indented +1 space inside class SharedMemory  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.hpp",
    "line": 148,
    "function": null,
    "comment": "shared_memory_pos.hpp:148:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.hpp",
    "line": 149,
    "function": null,
    "comment": "shared_memory_pos.hpp:149:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.hpp",
    "line": 150,
    "function": null,
    "comment": "shared_memory_pos.hpp:150:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "shared_memory_pos.hpp",
    "line": 169,
    "function": null,
    "comment": "shared_memory_pos.hpp:169:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "shared_memory_pos.hpp",
    "line": 169,
    "function": null,
    "comment": "shared_memory_pos.hpp:169:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.hpp",
    "line": 170,
    "function": null,
    "comment": "shared_memory_pos.hpp:170:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.hpp",
    "line": 171,
    "function": null,
    "comment": "shared_memory_pos.hpp:171:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.hpp",
    "line": 172,
    "function": null,
    "comment": "shared_memory_pos.hpp:172:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "shared_memory_pos.hpp",
    "line": 173,
    "function": null,
    "comment": "shared_memory_pos.hpp:173:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.hpp",
    "line": 174,
    "function": null,
    "comment": "shared_memory_pos.hpp:174:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Whitespace inside parenthesis should be consistent, and should consist of either zero or one space.",
    "file": "shared_memory_pos.hpp",
    "line": 175,
    "function": null,
    "comment": "shared_memory_pos.hpp:175:  Mismatching spaces inside () in if  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "shared_memory_pos.hpp",
    "line": 176,
    "function": null,
    "comment": "shared_memory_pos.hpp:176:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "shared_memory_pos.hpp",
    "line": 194,
    "function": null,
    "comment": "shared_memory_pos.hpp:194:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "shared_memory_pos.hpp",
    "line": 194,
    "function": null,
    "comment": "shared_memory_pos.hpp:194:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "shared_memory_pos.hpp",
    "line": 194,
    "function": null,
    "comment": "shared_memory_pos.hpp:194:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "shared_memory_pos.hpp",
    "line": 195,
    "function": null,
    "comment": "shared_memory_pos.hpp:195:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "shared_memory_pos.hpp",
    "line": 199,
    "function": null,
    "comment": "shared_memory_pos.hpp:199:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "shared_memory_pos.hpp",
    "line": 205,
    "function": null,
    "comment": "shared_memory_pos.hpp:205:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "shared_memory_pos.hpp",
    "line": 206,
    "function": null,
    "comment": "shared_memory_pos.hpp:206:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "shared_memory_pos.hpp",
    "line": 210,
    "function": null,
    "comment": "shared_memory_pos.hpp:210:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "shared_memory_pos.hpp",
    "line": 210,
    "function": null,
    "comment": "shared_memory_pos.hpp:210:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "shared_memory_pos.hpp",
    "line": 222,
    "function": null,
    "comment": "shared_memory_pos.hpp:222:  Using C-style cast.  Use reinterpret_cast<Storage*>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "shared_memory_pos.hpp",
    "line": 225,
    "function": null,
    "comment": "shared_memory_pos.hpp:225:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "shared_memory_pos.hpp",
    "line": 236,
    "function": null,
    "comment": "shared_memory_pos.hpp:236:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "shared_memory_pos.hpp",
    "line": 238,
    "function": null,
    "comment": "shared_memory_pos.hpp:238:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "shared_memory_pos.hpp",
    "line": 238,
    "function": null,
    "comment": "shared_memory_pos.hpp:238:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "shared_memory_pos.hpp",
    "line": 238,
    "function": null,
    "comment": "shared_memory_pos.hpp:238:  Using C-style cast.  Use reinterpret_cast<void*>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "shared_memory_pos.hpp",
    "line": 241,
    "function": null,
    "comment": "shared_memory_pos.hpp:241:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "shared_memory_pos.hpp",
    "line": 246,
    "function": null,
    "comment": "shared_memory_pos.hpp:246:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "shared_memory.hpp",
    "line": null,
    "function": null,
    "comment": "shared_memory.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "shared_memory.hpp",
    "line": 19,
    "function": null,
    "comment": "shared_memory.hpp:19:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "semaphore_pos.hpp",
    "line": null,
    "function": null,
    "comment": "semaphore_pos.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "semaphore_pos.hpp",
    "line": 42,
    "function": null,
    "comment": "semaphore_pos.hpp:42:  Found C system header after C++ system header. Should be: semaphore_pos.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "semaphore_pos.hpp",
    "line": 43,
    "function": null,
    "comment": "semaphore_pos.hpp:43:  Found C system header after C++ system header. Should be: semaphore_pos.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "semaphore_pos.hpp",
    "line": 44,
    "function": null,
    "comment": "semaphore_pos.hpp:44:  Found C system header after C++ system header. Should be: semaphore_pos.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "semaphore_pos.hpp",
    "line": 45,
    "function": null,
    "comment": "semaphore_pos.hpp:45:  Found C system header after C++ system header. Should be: semaphore_pos.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "semaphore_pos.hpp",
    "line": 51,
    "function": null,
    "comment": "semaphore_pos.hpp:51:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "semaphore_pos.hpp",
    "line": 61,
    "function": null,
    "comment": "semaphore_pos.hpp:61:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "semaphore_pos.hpp",
    "line": 75,
    "function": null,
    "comment": "semaphore_pos.hpp:75:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "semaphore_pos.hpp",
    "line": 87,
    "function": null,
    "comment": "semaphore_pos.hpp:87:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "semaphore_pos.hpp",
    "line": 111,
    "function": null,
    "comment": "semaphore_pos.hpp:111:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "semaphore_pos.hpp",
    "line": 112,
    "function": null,
    "comment": "semaphore_pos.hpp:112:  public: should be indented +1 space inside class Semaphore  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.hpp",
    "line": 123,
    "function": null,
    "comment": "semaphore_pos.hpp:123:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.hpp",
    "line": 136,
    "function": null,
    "comment": "semaphore_pos.hpp:136:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "semaphore_pos.hpp",
    "line": 136,
    "function": null,
    "comment": "semaphore_pos.hpp:136:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "semaphore_pos.hpp",
    "line": 136,
    "function": null,
    "comment": "semaphore_pos.hpp:136:  Single-parameter constructors should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.hpp",
    "line": 142,
    "function": null,
    "comment": "semaphore_pos.hpp:142:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.hpp",
    "line": 152,
    "function": null,
    "comment": "semaphore_pos.hpp:152:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.hpp",
    "line": 158,
    "function": null,
    "comment": "semaphore_pos.hpp:158:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.hpp",
    "line": 165,
    "function": null,
    "comment": "semaphore_pos.hpp:165:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.hpp",
    "line": 181,
    "function": null,
    "comment": "semaphore_pos.hpp:181:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "semaphore_pos.hpp",
    "line": 181,
    "function": null,
    "comment": "semaphore_pos.hpp:181:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "semaphore_pos.hpp",
    "line": 181,
    "function": null,
    "comment": "semaphore_pos.hpp:181:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "semaphore_pos.hpp",
    "line": 181,
    "function": null,
    "comment": "semaphore_pos.hpp:181:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "semaphore_pos.hpp",
    "line": 183,
    "function": null,
    "comment": "semaphore_pos.hpp:183:  private: should be indented +1 space inside class Semaphore  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.hpp",
    "line": 184,
    "function": null,
    "comment": "semaphore_pos.hpp:184:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.hpp",
    "line": 185,
    "function": null,
    "comment": "semaphore_pos.hpp:185:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.hpp",
    "line": 193,
    "function": null,
    "comment": "semaphore_pos.hpp:193:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "semaphore_pos.hpp",
    "line": 197,
    "function": null,
    "comment": "semaphore_pos.hpp:197:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "semaphore.hpp",
    "line": null,
    "function": null,
    "comment": "semaphore.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "semaphore.hpp",
    "line": 19,
    "function": null,
    "comment": "semaphore.hpp:19:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "semaphore_pos.cpp",
    "line": null,
    "function": null,
    "comment": "semaphore_pos.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Do not include the C standard headers. Use the C++ headers instead.",
    "file": "semaphore_pos.cpp",
    "line": 17,
    "function": null,
    "comment": "semaphore_pos.cpp:17:  Include 'cerrno' instead of 'errno.h'.  [build/include] [5]",
    "tags": ["hicpp","code-standards","headers","include","preprocessor","deprecation","c"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "semaphore_pos.cpp",
    "line": 19,
    "function": null,
    "comment": "semaphore_pos.cpp:19:  Found C system header after C++ system header. Should be: semaphore_pos.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "semaphore_pos.cpp",
    "line": 20,
    "function": null,
    "comment": "semaphore_pos.cpp:20:  Found C system header after C++ system header. Should be: semaphore_pos.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "semaphore_pos.cpp",
    "line": 21,
    "function": null,
    "comment": "semaphore_pos.cpp:21:  Found C system header after C++ system header. Should be: semaphore_pos.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "semaphore_pos.cpp",
    "line": 27,
    "function": null,
    "comment": "semaphore_pos.cpp:27:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "semaphore_pos.cpp",
    "line": 40,
    "function": null,
    "comment": "semaphore_pos.cpp:40:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 41,
    "function": null,
    "comment": "semaphore_pos.cpp:41:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 42,
    "function": null,
    "comment": "semaphore_pos.cpp:42:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "semaphore_pos.cpp",
    "line": 45,
    "function": null,
    "comment": "semaphore_pos.cpp:45:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 46,
    "function": null,
    "comment": "semaphore_pos.cpp:46:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 47,
    "function": null,
    "comment": "semaphore_pos.cpp:47:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "semaphore_pos.cpp",
    "line": 48,
    "function": null,
    "comment": "semaphore_pos.cpp:48:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "semaphore_pos.cpp",
    "line": 92,
    "function": null,
    "comment": "semaphore_pos.cpp:92:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "semaphore_pos.cpp",
    "line": 92,
    "function": null,
    "comment": "semaphore_pos.cpp:92:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "semaphore_pos.cpp",
    "line": 97,
    "function": null,
    "comment": "semaphore_pos.cpp:97:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 98,
    "function": null,
    "comment": "semaphore_pos.cpp:98:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "semaphore_pos.cpp",
    "line": 98,
    "function": null,
    "comment": "semaphore_pos.cpp:98:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 100,
    "function": null,
    "comment": "semaphore_pos.cpp:100:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "semaphore_pos.cpp",
    "line": 105,
    "function": null,
    "comment": "semaphore_pos.cpp:105:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 106,
    "function": null,
    "comment": "semaphore_pos.cpp:106:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "semaphore_pos.cpp",
    "line": 110,
    "function": null,
    "comment": "semaphore_pos.cpp:110:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 111,
    "function": null,
    "comment": "semaphore_pos.cpp:111:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "semaphore_pos.cpp",
    "line": 111,
    "function": null,
    "comment": "semaphore_pos.cpp:111:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "semaphore_pos.cpp",
    "line": 113,
    "function": null,
    "comment": "semaphore_pos.cpp:113:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "semaphore_pos.cpp",
    "line": 118,
    "function": null,
    "comment": "semaphore_pos.cpp:118:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 119,
    "function": null,
    "comment": "semaphore_pos.cpp:119:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "semaphore_pos.cpp",
    "line": 119,
    "function": null,
    "comment": "semaphore_pos.cpp:119:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 120,
    "function": null,
    "comment": "semaphore_pos.cpp:120:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "semaphore_pos.cpp",
    "line": 120,
    "function": null,
    "comment": "semaphore_pos.cpp:120:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "semaphore_pos.cpp",
    "line": 121,
    "function": null,
    "comment": "semaphore_pos.cpp:121:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "semaphore_pos.cpp",
    "line": 123,
    "function": null,
    "comment": "semaphore_pos.cpp:123:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "semaphore_pos.cpp",
    "line": 123,
    "function": null,
    "comment": "semaphore_pos.cpp:123:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "semaphore_pos.cpp",
    "line": 129,
    "function": null,
    "comment": "semaphore_pos.cpp:129:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 130,
    "function": null,
    "comment": "semaphore_pos.cpp:130:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 131,
    "function": null,
    "comment": "semaphore_pos.cpp:131:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Whitespace inside parenthesis should be consistent, and should consist of either zero or one space.",
    "file": "semaphore_pos.cpp",
    "line": 131,
    "function": null,
    "comment": "semaphore_pos.cpp:131:  Mismatching spaces inside () in if  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Whitespace inside parenthesis should be consistent, and should consist of either zero or one space.",
    "file": "semaphore_pos.cpp",
    "line": 131,
    "function": null,
    "comment": "semaphore_pos.cpp:131:  Should have zero or one spaces inside ( and ) in if  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "semaphore_pos.cpp",
    "line": 131,
    "function": null,
    "comment": "semaphore_pos.cpp:131:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "semaphore_pos.cpp",
    "line": 131,
    "function": null,
    "comment": "semaphore_pos.cpp:131:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 132,
    "function": null,
    "comment": "semaphore_pos.cpp:132:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 133,
    "function": null,
    "comment": "semaphore_pos.cpp:133:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "semaphore_pos.cpp",
    "line": 133,
    "function": null,
    "comment": "semaphore_pos.cpp:133:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "semaphore_pos.cpp",
    "line": 133,
    "function": null,
    "comment": "semaphore_pos.cpp:133:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 134,
    "function": null,
    "comment": "semaphore_pos.cpp:134:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "semaphore_pos.cpp",
    "line": 134,
    "function": null,
    "comment": "semaphore_pos.cpp:134:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 135,
    "function": null,
    "comment": "semaphore_pos.cpp:135:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 136,
    "function": null,
    "comment": "semaphore_pos.cpp:136:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 137,
    "function": null,
    "comment": "semaphore_pos.cpp:137:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "semaphore_pos.cpp",
    "line": 140,
    "function": null,
    "comment": "semaphore_pos.cpp:140:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "semaphore_pos.cpp",
    "line": 140,
    "function": null,
    "comment": "semaphore_pos.cpp:140:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "semaphore_pos.cpp",
    "line": 140,
    "function": null,
    "comment": "semaphore_pos.cpp:140:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "semaphore_pos.cpp",
    "line": 140,
    "function": null,
    "comment": "semaphore_pos.cpp:140:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "semaphore_pos.cpp",
    "line": 141,
    "function": null,
    "comment": "semaphore_pos.cpp:141:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 143,
    "function": null,
    "comment": "semaphore_pos.cpp:143:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "semaphore_pos.cpp",
    "line": 143,
    "function": null,
    "comment": "semaphore_pos.cpp:143:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 144,
    "function": null,
    "comment": "semaphore_pos.cpp:144:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 146,
    "function": null,
    "comment": "semaphore_pos.cpp:146:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 148,
    "function": null,
    "comment": "semaphore_pos.cpp:148:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 150,
    "function": null,
    "comment": "semaphore_pos.cpp:150:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 151,
    "function": null,
    "comment": "semaphore_pos.cpp:151:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 152,
    "function": null,
    "comment": "semaphore_pos.cpp:152:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 153,
    "function": null,
    "comment": "semaphore_pos.cpp:153:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 155,
    "function": null,
    "comment": "semaphore_pos.cpp:155:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 156,
    "function": null,
    "comment": "semaphore_pos.cpp:156:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 157,
    "function": null,
    "comment": "semaphore_pos.cpp:157:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 158,
    "function": null,
    "comment": "semaphore_pos.cpp:158:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "semaphore_pos.cpp",
    "line": 158,
    "function": null,
    "comment": "semaphore_pos.cpp:158:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "semaphore_pos.cpp",
    "line": 158,
    "function": null,
    "comment": "semaphore_pos.cpp:158:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 159,
    "function": null,
    "comment": "semaphore_pos.cpp:159:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 160,
    "function": null,
    "comment": "semaphore_pos.cpp:160:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 161,
    "function": null,
    "comment": "semaphore_pos.cpp:161:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 162,
    "function": null,
    "comment": "semaphore_pos.cpp:162:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 163,
    "function": null,
    "comment": "semaphore_pos.cpp:163:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "semaphore_pos.cpp",
    "line": 163,
    "function": null,
    "comment": "semaphore_pos.cpp:163:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "semaphore_pos.cpp",
    "line": 163,
    "function": null,
    "comment": "semaphore_pos.cpp:163:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 164,
    "function": null,
    "comment": "semaphore_pos.cpp:164:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "semaphore_pos.cpp",
    "line": 164,
    "function": null,
    "comment": "semaphore_pos.cpp:164:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 165,
    "function": null,
    "comment": "semaphore_pos.cpp:165:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 166,
    "function": null,
    "comment": "semaphore_pos.cpp:166:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 167,
    "function": null,
    "comment": "semaphore_pos.cpp:167:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 168,
    "function": null,
    "comment": "semaphore_pos.cpp:168:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 169,
    "function": null,
    "comment": "semaphore_pos.cpp:169:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 170,
    "function": null,
    "comment": "semaphore_pos.cpp:170:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 171,
    "function": null,
    "comment": "semaphore_pos.cpp:171:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "semaphore_pos.cpp",
    "line": 171,
    "function": null,
    "comment": "semaphore_pos.cpp:171:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 172,
    "function": null,
    "comment": "semaphore_pos.cpp:172:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 173,
    "function": null,
    "comment": "semaphore_pos.cpp:173:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "semaphore_pos.cpp",
    "line": 182,
    "function": null,
    "comment": "semaphore_pos.cpp:182:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "semaphore_pos.cpp",
    "line": 184,
    "function": null,
    "comment": "semaphore_pos.cpp:184:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 185,
    "function": null,
    "comment": "semaphore_pos.cpp:185:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "semaphore_pos.cpp",
    "line": 186,
    "function": null,
    "comment": "semaphore_pos.cpp:186:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "semaphore_pos.cpp",
    "line": 187,
    "function": null,
    "comment": "semaphore_pos.cpp:187:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "semaphore_pos.cpp",
    "line": 187,
    "function": null,
    "comment": "semaphore_pos.cpp:187:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "semaphore_pos.cpp",
    "line": 187,
    "function": null,
    "comment": "semaphore_pos.cpp:187:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "semaphore_pos.cpp",
    "line": 188,
    "function": null,
    "comment": "semaphore_pos.cpp:188:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "semaphore_pos.cpp",
    "line": 188,
    "function": null,
    "comment": "semaphore_pos.cpp:188:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "semaphore_pos.cpp",
    "line": 190,
    "function": null,
    "comment": "semaphore_pos.cpp:190:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "semaphore_pos.cpp",
    "line": 190,
    "function": null,
    "comment": "semaphore_pos.cpp:190:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "semaphore_pos.cpp",
    "line": 190,
    "function": null,
    "comment": "semaphore_pos.cpp:190:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "semaphore_pos.cpp",
    "line": 191,
    "function": null,
    "comment": "semaphore_pos.cpp:191:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "semaphore_pos.cpp",
    "line": 191,
    "function": null,
    "comment": "semaphore_pos.cpp:191:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "semaphore_pos.cpp",
    "line": 193,
    "function": null,
    "comment": "semaphore_pos.cpp:193:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "semaphore_pos.cpp",
    "line": 193,
    "function": null,
    "comment": "semaphore_pos.cpp:193:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "semaphore_pos.cpp",
    "line": 193,
    "function": null,
    "comment": "semaphore_pos.cpp:193:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "semaphore_pos.cpp",
    "line": 194,
    "function": null,
    "comment": "semaphore_pos.cpp:194:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "semaphore_pos.cpp",
    "line": 194,
    "function": null,
    "comment": "semaphore_pos.cpp:194:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "semaphore_pos.cpp",
    "line": 196,
    "function": null,
    "comment": "semaphore_pos.cpp:196:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "semaphore_pos.cpp",
    "line": 196,
    "function": null,
    "comment": "semaphore_pos.cpp:196:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "semaphore_pos.cpp",
    "line": 196,
    "function": null,
    "comment": "semaphore_pos.cpp:196:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "semaphore_pos.cpp",
    "line": 197,
    "function": null,
    "comment": "semaphore_pos.cpp:197:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "semaphore_pos.cpp",
    "line": 199,
    "function": null,
    "comment": "semaphore_pos.cpp:199:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "semaphore_pos.cpp",
    "line": 199,
    "function": null,
    "comment": "semaphore_pos.cpp:199:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "semaphore_pos.cpp",
    "line": 199,
    "function": null,
    "comment": "semaphore_pos.cpp:199:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "semaphore_pos.cpp",
    "line": 200,
    "function": null,
    "comment": "semaphore_pos.cpp:200:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "semaphore_pos.cpp",
    "line": 200,
    "function": null,
    "comment": "semaphore_pos.cpp:200:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "semaphore_pos.cpp",
    "line": 202,
    "function": null,
    "comment": "semaphore_pos.cpp:202:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "semaphore_pos.cpp",
    "line": 202,
    "function": null,
    "comment": "semaphore_pos.cpp:202:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "semaphore_pos.cpp",
    "line": 202,
    "function": null,
    "comment": "semaphore_pos.cpp:202:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 203,
    "function": null,
    "comment": "semaphore_pos.cpp:203:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "semaphore_pos.cpp",
    "line": 203,
    "function": null,
    "comment": "semaphore_pos.cpp:203:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "semaphore_pos.cpp",
    "line": 203,
    "function": null,
    "comment": "semaphore_pos.cpp:203:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 204,
    "function": null,
    "comment": "semaphore_pos.cpp:204:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "semaphore_pos.cpp",
    "line": 205,
    "function": null,
    "comment": "semaphore_pos.cpp:205:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "semaphore_pos.cpp",
    "line": 205,
    "function": null,
    "comment": "semaphore_pos.cpp:205:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "semaphore_pos.cpp",
    "line": 205,
    "function": null,
    "comment": "semaphore_pos.cpp:205:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 206,
    "function": null,
    "comment": "semaphore_pos.cpp:206:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "semaphore_pos.cpp",
    "line": 206,
    "function": null,
    "comment": "semaphore_pos.cpp:206:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "semaphore_pos.cpp",
    "line": 206,
    "function": null,
    "comment": "semaphore_pos.cpp:206:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 207,
    "function": null,
    "comment": "semaphore_pos.cpp:207:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "semaphore_pos.cpp",
    "line": 208,
    "function": null,
    "comment": "semaphore_pos.cpp:208:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "semaphore_pos.cpp",
    "line": 208,
    "function": null,
    "comment": "semaphore_pos.cpp:208:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "semaphore_pos.cpp",
    "line": 208,
    "function": null,
    "comment": "semaphore_pos.cpp:208:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 209,
    "function": null,
    "comment": "semaphore_pos.cpp:209:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "semaphore_pos.cpp",
    "line": 209,
    "function": null,
    "comment": "semaphore_pos.cpp:209:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "semaphore_pos.cpp",
    "line": 209,
    "function": null,
    "comment": "semaphore_pos.cpp:209:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 210,
    "function": null,
    "comment": "semaphore_pos.cpp:210:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 211,
    "function": null,
    "comment": "semaphore_pos.cpp:211:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 212,
    "function": null,
    "comment": "semaphore_pos.cpp:212:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "semaphore_pos.cpp",
    "line": 212,
    "function": null,
    "comment": "semaphore_pos.cpp:212:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 213,
    "function": null,
    "comment": "semaphore_pos.cpp:213:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 214,
    "function": null,
    "comment": "semaphore_pos.cpp:214:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "semaphore_pos.cpp",
    "line": 214,
    "function": null,
    "comment": "semaphore_pos.cpp:214:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 215,
    "function": null,
    "comment": "semaphore_pos.cpp:215:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 216,
    "function": null,
    "comment": "semaphore_pos.cpp:216:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "semaphore_pos.cpp",
    "line": 220,
    "function": null,
    "comment": "semaphore_pos.cpp:220:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 221,
    "function": null,
    "comment": "semaphore_pos.cpp:221:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "semaphore_pos.cpp",
    "line": 222,
    "function": null,
    "comment": "semaphore_pos.cpp:222:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "semaphore_pos.cpp",
    "line": 223,
    "function": null,
    "comment": "semaphore_pos.cpp:223:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "semaphore_pos.cpp",
    "line": 223,
    "function": null,
    "comment": "semaphore_pos.cpp:223:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "semaphore_pos.cpp",
    "line": 223,
    "function": null,
    "comment": "semaphore_pos.cpp:223:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "semaphore_pos.cpp",
    "line": 224,
    "function": null,
    "comment": "semaphore_pos.cpp:224:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "semaphore_pos.cpp",
    "line": 224,
    "function": null,
    "comment": "semaphore_pos.cpp:224:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "semaphore_pos.cpp",
    "line": 226,
    "function": null,
    "comment": "semaphore_pos.cpp:226:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "semaphore_pos.cpp",
    "line": 226,
    "function": null,
    "comment": "semaphore_pos.cpp:226:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "semaphore_pos.cpp",
    "line": 226,
    "function": null,
    "comment": "semaphore_pos.cpp:226:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "semaphore_pos.cpp",
    "line": 227,
    "function": null,
    "comment": "semaphore_pos.cpp:227:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "semaphore_pos.cpp",
    "line": 227,
    "function": null,
    "comment": "semaphore_pos.cpp:227:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "semaphore_pos.cpp",
    "line": 229,
    "function": null,
    "comment": "semaphore_pos.cpp:229:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "semaphore_pos.cpp",
    "line": 229,
    "function": null,
    "comment": "semaphore_pos.cpp:229:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "semaphore_pos.cpp",
    "line": 229,
    "function": null,
    "comment": "semaphore_pos.cpp:229:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "semaphore_pos.cpp",
    "line": 230,
    "function": null,
    "comment": "semaphore_pos.cpp:230:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "semaphore_pos.cpp",
    "line": 230,
    "function": null,
    "comment": "semaphore_pos.cpp:230:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 232,
    "function": null,
    "comment": "semaphore_pos.cpp:232:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 233,
    "function": null,
    "comment": "semaphore_pos.cpp:233:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "semaphore_pos.cpp",
    "line": 233,
    "function": null,
    "comment": "semaphore_pos.cpp:233:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 234,
    "function": null,
    "comment": "semaphore_pos.cpp:234:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 235,
    "function": null,
    "comment": "semaphore_pos.cpp:235:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "semaphore_pos.cpp",
    "line": 235,
    "function": null,
    "comment": "semaphore_pos.cpp:235:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 236,
    "function": null,
    "comment": "semaphore_pos.cpp:236:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphore_pos.cpp",
    "line": 237,
    "function": null,
    "comment": "semaphore_pos.cpp:237:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "semaphore_pos.cpp",
    "line": 241,
    "function": null,
    "comment": "semaphore_pos.cpp:241:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "semaphore_pos.cpp",
    "line": 245,
    "function": null,
    "comment": "semaphore_pos.cpp:245:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "semaphore_pos.cpp",
    "line": 46,
    "function": null,
    "comment": "semaphore_pos.cpp:46:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "shared_memory_pos.cpp",
    "line": null,
    "function": null,
    "comment": "shared_memory_pos.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "shared_memory_pos.cpp",
    "line": 27,
    "function": null,
    "comment": "shared_memory_pos.cpp:27:  Found C system header after C++ system header. Should be: shared_memory_pos.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "shared_memory_pos.cpp",
    "line": 28,
    "function": null,
    "comment": "shared_memory_pos.cpp:28:  Found C system header after C++ system header. Should be: shared_memory_pos.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "shared_memory_pos.cpp",
    "line": 29,
    "function": null,
    "comment": "shared_memory_pos.cpp:29:  Found C system header after C++ system header. Should be: shared_memory_pos.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not include the C standard headers. Use the C++ headers instead.",
    "file": "shared_memory_pos.cpp",
    "line": 29,
    "function": null,
    "comment": "shared_memory_pos.cpp:29:  Include 'cerrno' instead of 'errno.h'.  [build/include] [5]",
    "tags": ["hicpp","code-standards","headers","include","preprocessor","deprecation","c"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "shared_memory_pos.cpp",
    "line": 30,
    "function": null,
    "comment": "shared_memory_pos.cpp:30:  Found C system header after C++ system header. Should be: shared_memory_pos.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "shared_memory_pos.cpp",
    "line": 36,
    "function": null,
    "comment": "shared_memory_pos.cpp:36:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "shared_memory_pos.cpp",
    "line": 37,
    "function": null,
    "comment": "shared_memory_pos.cpp:37:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "shared_memory_pos.cpp",
    "line": 39,
    "function": null,
    "comment": "shared_memory_pos.cpp:39:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 40,
    "function": null,
    "comment": "shared_memory_pos.cpp:40:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "shared_memory_pos.cpp",
    "line": 43,
    "function": null,
    "comment": "shared_memory_pos.cpp:43:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "shared_memory_pos.cpp",
    "line": 90,
    "function": null,
    "comment": "shared_memory_pos.cpp:90:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "shared_memory_pos.cpp",
    "line": 91,
    "function": null,
    "comment": "shared_memory_pos.cpp:91:  Extra space after (  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "shared_memory_pos.cpp",
    "line": 91,
    "function": null,
    "comment": "shared_memory_pos.cpp:91:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "shared_memory_pos.cpp",
    "line": 93,
    "function": null,
    "comment": "shared_memory_pos.cpp:93:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "shared_memory_pos.cpp",
    "line": 94,
    "function": null,
    "comment": "shared_memory_pos.cpp:94:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "shared_memory_pos.cpp",
    "line": 94,
    "function": null,
    "comment": "shared_memory_pos.cpp:94:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 95,
    "function": null,
    "comment": "shared_memory_pos.cpp:95:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Whitespace inside parenthesis should be consistent, and should consist of either zero or one space.",
    "file": "shared_memory_pos.cpp",
    "line": 97,
    "function": null,
    "comment": "shared_memory_pos.cpp:97:  Mismatching spaces inside () in if  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 99,
    "function": null,
    "comment": "shared_memory_pos.cpp:99:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "shared_memory_pos.cpp",
    "line": 109,
    "function": null,
    "comment": "shared_memory_pos.cpp:109:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 110,
    "function": null,
    "comment": "shared_memory_pos.cpp:110:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 111,
    "function": null,
    "comment": "shared_memory_pos.cpp:111:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "shared_memory_pos.cpp",
    "line": 111,
    "function": null,
    "comment": "shared_memory_pos.cpp:111:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 112,
    "function": null,
    "comment": "shared_memory_pos.cpp:112:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "shared_memory_pos.cpp",
    "line": 112,
    "function": null,
    "comment": "shared_memory_pos.cpp:112:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "shared_memory_pos.cpp",
    "line": 112,
    "function": null,
    "comment": "shared_memory_pos.cpp:112:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "shared_memory_pos.cpp",
    "line": 112,
    "function": null,
    "comment": "shared_memory_pos.cpp:112:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 113,
    "function": null,
    "comment": "shared_memory_pos.cpp:113:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "shared_memory_pos.cpp",
    "line": 113,
    "function": null,
    "comment": "shared_memory_pos.cpp:113:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "shared_memory_pos.cpp",
    "line": 113,
    "function": null,
    "comment": "shared_memory_pos.cpp:113:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 114,
    "function": null,
    "comment": "shared_memory_pos.cpp:114:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 115,
    "function": null,
    "comment": "shared_memory_pos.cpp:115:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 116,
    "function": null,
    "comment": "shared_memory_pos.cpp:116:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 117,
    "function": null,
    "comment": "shared_memory_pos.cpp:117:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 118,
    "function": null,
    "comment": "shared_memory_pos.cpp:118:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 119,
    "function": null,
    "comment": "shared_memory_pos.cpp:119:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 120,
    "function": null,
    "comment": "shared_memory_pos.cpp:120:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "shared_memory_pos.cpp",
    "line": 120,
    "function": null,
    "comment": "shared_memory_pos.cpp:120:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "shared_memory_pos.cpp",
    "line": 120,
    "function": null,
    "comment": "shared_memory_pos.cpp:120:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "shared_memory_pos.cpp",
    "line": 120,
    "function": null,
    "comment": "shared_memory_pos.cpp:120:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 121,
    "function": null,
    "comment": "shared_memory_pos.cpp:121:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "shared_memory_pos.cpp",
    "line": 121,
    "function": null,
    "comment": "shared_memory_pos.cpp:121:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "shared_memory_pos.cpp",
    "line": 121,
    "function": null,
    "comment": "shared_memory_pos.cpp:121:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 122,
    "function": null,
    "comment": "shared_memory_pos.cpp:122:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 123,
    "function": null,
    "comment": "shared_memory_pos.cpp:123:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 124,
    "function": null,
    "comment": "shared_memory_pos.cpp:124:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "shared_memory_pos.cpp",
    "line": 124,
    "function": null,
    "comment": "shared_memory_pos.cpp:124:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "shared_memory_pos.cpp",
    "line": 124,
    "function": null,
    "comment": "shared_memory_pos.cpp:124:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "shared_memory_pos.cpp",
    "line": 124,
    "function": null,
    "comment": "shared_memory_pos.cpp:124:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 125,
    "function": null,
    "comment": "shared_memory_pos.cpp:125:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "shared_memory_pos.cpp",
    "line": 125,
    "function": null,
    "comment": "shared_memory_pos.cpp:125:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "shared_memory_pos.cpp",
    "line": 125,
    "function": null,
    "comment": "shared_memory_pos.cpp:125:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 126,
    "function": null,
    "comment": "shared_memory_pos.cpp:126:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 127,
    "function": null,
    "comment": "shared_memory_pos.cpp:127:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 128,
    "function": null,
    "comment": "shared_memory_pos.cpp:128:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "shared_memory_pos.cpp",
    "line": 128,
    "function": null,
    "comment": "shared_memory_pos.cpp:128:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "shared_memory_pos.cpp",
    "line": 128,
    "function": null,
    "comment": "shared_memory_pos.cpp:128:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "shared_memory_pos.cpp",
    "line": 128,
    "function": null,
    "comment": "shared_memory_pos.cpp:128:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 129,
    "function": null,
    "comment": "shared_memory_pos.cpp:129:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "shared_memory_pos.cpp",
    "line": 129,
    "function": null,
    "comment": "shared_memory_pos.cpp:129:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "shared_memory_pos.cpp",
    "line": 129,
    "function": null,
    "comment": "shared_memory_pos.cpp:129:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 130,
    "function": null,
    "comment": "shared_memory_pos.cpp:130:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 131,
    "function": null,
    "comment": "shared_memory_pos.cpp:131:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 132,
    "function": null,
    "comment": "shared_memory_pos.cpp:132:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 133,
    "function": null,
    "comment": "shared_memory_pos.cpp:133:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "shared_memory_pos.cpp",
    "line": 133,
    "function": null,
    "comment": "shared_memory_pos.cpp:133:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 134,
    "function": null,
    "comment": "shared_memory_pos.cpp:134:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 135,
    "function": null,
    "comment": "shared_memory_pos.cpp:135:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "shared_memory_pos.cpp",
    "line": 135,
    "function": null,
    "comment": "shared_memory_pos.cpp:135:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 136,
    "function": null,
    "comment": "shared_memory_pos.cpp:136:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 137,
    "function": null,
    "comment": "shared_memory_pos.cpp:137:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 138,
    "function": null,
    "comment": "shared_memory_pos.cpp:138:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "shared_memory_pos.cpp",
    "line": 141,
    "function": null,
    "comment": "shared_memory_pos.cpp:141:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 142,
    "function": null,
    "comment": "shared_memory_pos.cpp:142:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 143,
    "function": null,
    "comment": "shared_memory_pos.cpp:143:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "shared_memory_pos.cpp",
    "line": 143,
    "function": null,
    "comment": "shared_memory_pos.cpp:143:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 144,
    "function": null,
    "comment": "shared_memory_pos.cpp:144:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "shared_memory_pos.cpp",
    "line": 144,
    "function": null,
    "comment": "shared_memory_pos.cpp:144:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "shared_memory_pos.cpp",
    "line": 144,
    "function": null,
    "comment": "shared_memory_pos.cpp:144:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "shared_memory_pos.cpp",
    "line": 144,
    "function": null,
    "comment": "shared_memory_pos.cpp:144:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 145,
    "function": null,
    "comment": "shared_memory_pos.cpp:145:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "shared_memory_pos.cpp",
    "line": 145,
    "function": null,
    "comment": "shared_memory_pos.cpp:145:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "shared_memory_pos.cpp",
    "line": 145,
    "function": null,
    "comment": "shared_memory_pos.cpp:145:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 146,
    "function": null,
    "comment": "shared_memory_pos.cpp:146:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 147,
    "function": null,
    "comment": "shared_memory_pos.cpp:147:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "shared_memory_pos.cpp",
    "line": 147,
    "function": null,
    "comment": "shared_memory_pos.cpp:147:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "shared_memory_pos.cpp",
    "line": 147,
    "function": null,
    "comment": "shared_memory_pos.cpp:147:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "shared_memory_pos.cpp",
    "line": 147,
    "function": null,
    "comment": "shared_memory_pos.cpp:147:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 148,
    "function": null,
    "comment": "shared_memory_pos.cpp:148:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "shared_memory_pos.cpp",
    "line": 148,
    "function": null,
    "comment": "shared_memory_pos.cpp:148:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "shared_memory_pos.cpp",
    "line": 148,
    "function": null,
    "comment": "shared_memory_pos.cpp:148:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 149,
    "function": null,
    "comment": "shared_memory_pos.cpp:149:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 150,
    "function": null,
    "comment": "shared_memory_pos.cpp:150:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "shared_memory_pos.cpp",
    "line": 150,
    "function": null,
    "comment": "shared_memory_pos.cpp:150:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "shared_memory_pos.cpp",
    "line": 150,
    "function": null,
    "comment": "shared_memory_pos.cpp:150:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "shared_memory_pos.cpp",
    "line": 150,
    "function": null,
    "comment": "shared_memory_pos.cpp:150:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 151,
    "function": null,
    "comment": "shared_memory_pos.cpp:151:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "shared_memory_pos.cpp",
    "line": 151,
    "function": null,
    "comment": "shared_memory_pos.cpp:151:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "shared_memory_pos.cpp",
    "line": 151,
    "function": null,
    "comment": "shared_memory_pos.cpp:151:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 152,
    "function": null,
    "comment": "shared_memory_pos.cpp:152:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 153,
    "function": null,
    "comment": "shared_memory_pos.cpp:153:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "shared_memory_pos.cpp",
    "line": 153,
    "function": null,
    "comment": "shared_memory_pos.cpp:153:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "shared_memory_pos.cpp",
    "line": 153,
    "function": null,
    "comment": "shared_memory_pos.cpp:153:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "shared_memory_pos.cpp",
    "line": 153,
    "function": null,
    "comment": "shared_memory_pos.cpp:153:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 154,
    "function": null,
    "comment": "shared_memory_pos.cpp:154:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "shared_memory_pos.cpp",
    "line": 154,
    "function": null,
    "comment": "shared_memory_pos.cpp:154:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "shared_memory_pos.cpp",
    "line": 154,
    "function": null,
    "comment": "shared_memory_pos.cpp:154:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 155,
    "function": null,
    "comment": "shared_memory_pos.cpp:155:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 156,
    "function": null,
    "comment": "shared_memory_pos.cpp:156:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "shared_memory_pos.cpp",
    "line": 156,
    "function": null,
    "comment": "shared_memory_pos.cpp:156:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "shared_memory_pos.cpp",
    "line": 156,
    "function": null,
    "comment": "shared_memory_pos.cpp:156:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "shared_memory_pos.cpp",
    "line": 156,
    "function": null,
    "comment": "shared_memory_pos.cpp:156:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 157,
    "function": null,
    "comment": "shared_memory_pos.cpp:157:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "shared_memory_pos.cpp",
    "line": 157,
    "function": null,
    "comment": "shared_memory_pos.cpp:157:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "shared_memory_pos.cpp",
    "line": 157,
    "function": null,
    "comment": "shared_memory_pos.cpp:157:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 158,
    "function": null,
    "comment": "shared_memory_pos.cpp:158:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 159,
    "function": null,
    "comment": "shared_memory_pos.cpp:159:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "shared_memory_pos.cpp",
    "line": 159,
    "function": null,
    "comment": "shared_memory_pos.cpp:159:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "shared_memory_pos.cpp",
    "line": 159,
    "function": null,
    "comment": "shared_memory_pos.cpp:159:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "shared_memory_pos.cpp",
    "line": 159,
    "function": null,
    "comment": "shared_memory_pos.cpp:159:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 160,
    "function": null,
    "comment": "shared_memory_pos.cpp:160:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "shared_memory_pos.cpp",
    "line": 160,
    "function": null,
    "comment": "shared_memory_pos.cpp:160:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "shared_memory_pos.cpp",
    "line": 160,
    "function": null,
    "comment": "shared_memory_pos.cpp:160:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 161,
    "function": null,
    "comment": "shared_memory_pos.cpp:161:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 162,
    "function": null,
    "comment": "shared_memory_pos.cpp:162:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "shared_memory_pos.cpp",
    "line": 162,
    "function": null,
    "comment": "shared_memory_pos.cpp:162:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "shared_memory_pos.cpp",
    "line": 162,
    "function": null,
    "comment": "shared_memory_pos.cpp:162:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "shared_memory_pos.cpp",
    "line": 162,
    "function": null,
    "comment": "shared_memory_pos.cpp:162:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 163,
    "function": null,
    "comment": "shared_memory_pos.cpp:163:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "shared_memory_pos.cpp",
    "line": 163,
    "function": null,
    "comment": "shared_memory_pos.cpp:163:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "shared_memory_pos.cpp",
    "line": 163,
    "function": null,
    "comment": "shared_memory_pos.cpp:163:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 164,
    "function": null,
    "comment": "shared_memory_pos.cpp:164:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 165,
    "function": null,
    "comment": "shared_memory_pos.cpp:165:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "shared_memory_pos.cpp",
    "line": 165,
    "function": null,
    "comment": "shared_memory_pos.cpp:165:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "shared_memory_pos.cpp",
    "line": 165,
    "function": null,
    "comment": "shared_memory_pos.cpp:165:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "shared_memory_pos.cpp",
    "line": 165,
    "function": null,
    "comment": "shared_memory_pos.cpp:165:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 166,
    "function": null,
    "comment": "shared_memory_pos.cpp:166:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "shared_memory_pos.cpp",
    "line": 166,
    "function": null,
    "comment": "shared_memory_pos.cpp:166:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "shared_memory_pos.cpp",
    "line": 166,
    "function": null,
    "comment": "shared_memory_pos.cpp:166:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 167,
    "function": null,
    "comment": "shared_memory_pos.cpp:167:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 168,
    "function": null,
    "comment": "shared_memory_pos.cpp:168:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "shared_memory_pos.cpp",
    "line": 168,
    "function": null,
    "comment": "shared_memory_pos.cpp:168:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 169,
    "function": null,
    "comment": "shared_memory_pos.cpp:169:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "shared_memory_pos.cpp",
    "line": 169,
    "function": null,
    "comment": "shared_memory_pos.cpp:169:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "shared_memory_pos.cpp",
    "line": 169,
    "function": null,
    "comment": "shared_memory_pos.cpp:169:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 170,
    "function": null,
    "comment": "shared_memory_pos.cpp:170:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "shared_memory_pos.cpp",
    "line": 170,
    "function": null,
    "comment": "shared_memory_pos.cpp:170:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 171,
    "function": null,
    "comment": "shared_memory_pos.cpp:171:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 172,
    "function": null,
    "comment": "shared_memory_pos.cpp:172:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 173,
    "function": null,
    "comment": "shared_memory_pos.cpp:173:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "shared_memory_pos.cpp",
    "line": 173,
    "function": null,
    "comment": "shared_memory_pos.cpp:173:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 174,
    "function": null,
    "comment": "shared_memory_pos.cpp:174:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 175,
    "function": null,
    "comment": "shared_memory_pos.cpp:175:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "shared_memory_pos.cpp",
    "line": 175,
    "function": null,
    "comment": "shared_memory_pos.cpp:175:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 176,
    "function": null,
    "comment": "shared_memory_pos.cpp:176:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 177,
    "function": null,
    "comment": "shared_memory_pos.cpp:177:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory_pos.cpp",
    "line": 178,
    "function": null,
    "comment": "shared_memory_pos.cpp:178:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "shared_memory_pos.cpp",
    "line": 182,
    "function": null,
    "comment": "shared_memory_pos.cpp:182:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "shared_memory_pos.cpp",
    "line": 183,
    "function": null,
    "comment": "shared_memory_pos.cpp:183:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "shared_memory.cpp",
    "line": null,
    "function": null,
    "comment": "shared_memory.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "shared_memory.cpp",
    "line": 18,
    "function": null,
    "comment": "shared_memory.cpp:18:  Include 'cstdlib' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "shared_memory.cpp",
    "line": 19,
    "function": null,
    "comment": "shared_memory.cpp:19:  Found C system header after C++ system header. Should be: shared_memory.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "shared_memory.cpp",
    "line": 20,
    "function": null,
    "comment": "shared_memory.cpp:20:  Found C system header after C++ system header. Should be: shared_memory.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "shared_memory.cpp",
    "line": 21,
    "function": null,
    "comment": "shared_memory.cpp:21:  Found C system header after C++ system header. Should be: shared_memory.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "shared_memory.cpp",
    "line": 51,
    "function": null,
    "comment": "shared_memory.cpp:51:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "shared_memory.cpp",
    "line": 52,
    "function": null,
    "comment": "shared_memory.cpp:52:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "shared_memory.cpp",
    "line": 53,
    "function": null,
    "comment": "shared_memory.cpp:53:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "shared_memory.cpp",
    "line": 59,
    "function": null,
    "comment": "shared_memory.cpp:59:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "shared_memory.cpp",
    "line": 60,
    "function": null,
    "comment": "shared_memory.cpp:60:  public: should be indented +1 space inside class Data  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "shared_memory.cpp",
    "line": 61,
    "function": null,
    "comment": "shared_memory.cpp:61:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "shared_memory.cpp",
    "line": 61,
    "function": null,
    "comment": "shared_memory.cpp:61:  Constructors callable with one argument should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "shared_memory.cpp",
    "line": 65,
    "function": null,
    "comment": "shared_memory.cpp:65:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "shared_memory.cpp",
    "line": 66,
    "function": null,
    "comment": "shared_memory.cpp:66:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "shared_memory.cpp",
    "line": 67,
    "function": null,
    "comment": "shared_memory.cpp:67:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "shared_memory.cpp",
    "line": 87,
    "function": null,
    "comment": "shared_memory.cpp:87:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "shared_memory.cpp",
    "line": 87,
    "function": null,
    "comment": "shared_memory.cpp:87:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "shared_memory.cpp",
    "line": 88,
    "function": null,
    "comment": "shared_memory.cpp:88:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "shared_memory.cpp",
    "line": 89,
    "function": null,
    "comment": "shared_memory.cpp:89:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "shared_memory.cpp",
    "line": 94,
    "function": null,
    "comment": "shared_memory.cpp:94:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "shared_memory.cpp",
    "line": 99,
    "function": null,
    "comment": "shared_memory.cpp:99:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "shared_memory.cpp",
    "line": 102,
    "function": null,
    "comment": "shared_memory.cpp:102:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "shared_memory.cpp",
    "line": 103,
    "function": null,
    "comment": "shared_memory.cpp:103:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "shared_memory.cpp",
    "line": 104,
    "function": null,
    "comment": "shared_memory.cpp:104:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "shared_memory.cpp",
    "line": 105,
    "function": null,
    "comment": "shared_memory.cpp:105:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "shared_memory.cpp",
    "line": 105,
    "function": null,
    "comment": "shared_memory.cpp:105:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "shared_memory.cpp",
    "line": 106,
    "function": null,
    "comment": "shared_memory.cpp:106:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "shared_memory.cpp",
    "line": 110,
    "function": null,
    "comment": "shared_memory.cpp:110:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "shared_memory.cpp",
    "line": 111,
    "function": null,
    "comment": "shared_memory.cpp:111:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "shared_memory.cpp",
    "line": 115,
    "function": null,
    "comment": "shared_memory.cpp:115:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "shared_memory.cpp",
    "line": 116,
    "function": null,
    "comment": "shared_memory.cpp:116:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "shared_memory.cpp",
    "line": 120,
    "function": null,
    "comment": "shared_memory.cpp:120:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "shared_memory.cpp",
    "line": 125,
    "function": null,
    "comment": "shared_memory.cpp:125:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "shared_memory.cpp",
    "line": 126,
    "function": null,
    "comment": "shared_memory.cpp:126:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "shared_memory.cpp",
    "line": 127,
    "function": null,
    "comment": "shared_memory.cpp:127:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "shared_memory.cpp",
    "line": 129,
    "function": null,
    "comment": "shared_memory.cpp:129:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "shared_memory.cpp",
    "line": 129,
    "function": null,
    "comment": "shared_memory.cpp:129:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "shared_memory.cpp",
    "line": 130,
    "function": null,
    "comment": "shared_memory.cpp:130:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "shared_memory.cpp",
    "line": 140,
    "function": null,
    "comment": "shared_memory.cpp:140:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "shared_memory.cpp",
    "line": 141,
    "function": null,
    "comment": "shared_memory.cpp:141:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "shared_memory.cpp",
    "line": 142,
    "function": null,
    "comment": "shared_memory.cpp:142:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "shared_memory.cpp",
    "line": 152,
    "function": null,
    "comment": "shared_memory.cpp:152:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "shared_memory.cpp",
    "line": 154,
    "function": null,
    "comment": "shared_memory.cpp:154:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "shared_memory.cpp",
    "line": 89,
    "function": null,
    "comment": "shared_memory.cpp:89:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "semaphores_timed.cpp",
    "line": null,
    "function": null,
    "comment": "semaphores_timed.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "semaphores_timed.cpp",
    "line": 14,
    "function": null,
    "comment": "semaphores_timed.cpp:14:  Include 'cstdlib' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "semaphores_timed.cpp",
    "line": 15,
    "function": null,
    "comment": "semaphores_timed.cpp:15:  Found C system header after C++ system header. Should be: semaphores_timed.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "semaphores_timed.cpp",
    "line": 16,
    "function": null,
    "comment": "semaphores_timed.cpp:16:  Found C system header after C++ system header. Should be: semaphores_timed.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "semaphores_timed.cpp",
    "line": 17,
    "function": null,
    "comment": "semaphores_timed.cpp:17:  Found C system header after C++ system header. Should be: semaphores_timed.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "semaphores_timed.cpp",
    "line": 45,
    "function": null,
    "comment": "semaphores_timed.cpp:45:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "semaphores_timed.cpp",
    "line": 46,
    "function": null,
    "comment": "semaphores_timed.cpp:46:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "semaphores_timed.cpp",
    "line": 47,
    "function": null,
    "comment": "semaphores_timed.cpp:47:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "semaphores_timed.cpp",
    "line": 53,
    "function": null,
    "comment": "semaphores_timed.cpp:53:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "semaphores_timed.cpp",
    "line": 54,
    "function": null,
    "comment": "semaphores_timed.cpp:54:  public: should be indented +1 space inside class SemaphoreTimedData  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "semaphores_timed.cpp",
    "line": 56,
    "function": null,
    "comment": "semaphores_timed.cpp:56:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "Do not use meaningless empty statements.",
    "file": "semaphores_timed.cpp",
    "line": 56,
    "function": null,
    "comment": "semaphores_timed.cpp:56:  You don't need a ; after a }  [readability/braces] [4]",
    "tags": ["code-standards","google-cpp","empty-statement","ambiguous-code"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "semaphores_timed.cpp",
    "line": 59,
    "function": null,
    "comment": "semaphores_timed.cpp:59:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "semaphores_timed.cpp",
    "line": 60,
    "function": null,
    "comment": "semaphores_timed.cpp:60:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "semaphores_timed.cpp",
    "line": 61,
    "function": null,
    "comment": "semaphores_timed.cpp:61:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "semaphores_timed.cpp",
    "line": 81,
    "function": null,
    "comment": "semaphores_timed.cpp:81:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "semaphores_timed.cpp",
    "line": 81,
    "function": null,
    "comment": "semaphores_timed.cpp:81:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "semaphores_timed.cpp",
    "line": 82,
    "function": null,
    "comment": "semaphores_timed.cpp:82:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "semaphores_timed.cpp",
    "line": 86,
    "function": null,
    "comment": "semaphores_timed.cpp:86:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "semaphores_timed.cpp",
    "line": 90,
    "function": null,
    "comment": "semaphores_timed.cpp:90:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "semaphores_timed.cpp",
    "line": 96,
    "function": null,
    "comment": "semaphores_timed.cpp:96:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "semaphores_timed.cpp",
    "line": 102,
    "function": null,
    "comment": "semaphores_timed.cpp:102:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphores_timed.cpp",
    "line": 103,
    "function": null,
    "comment": "semaphores_timed.cpp:103:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "semaphores_timed.cpp",
    "line": 104,
    "function": null,
    "comment": "semaphores_timed.cpp:104:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "semaphores_timed.cpp",
    "line": 104,
    "function": null,
    "comment": "semaphores_timed.cpp:104:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphores_timed.cpp",
    "line": 105,
    "function": null,
    "comment": "semaphores_timed.cpp:105:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphores_timed.cpp",
    "line": 109,
    "function": null,
    "comment": "semaphores_timed.cpp:109:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "semaphores_timed.cpp",
    "line": 110,
    "function": null,
    "comment": "semaphores_timed.cpp:110:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "semaphores_timed.cpp",
    "line": 110,
    "function": null,
    "comment": "semaphores_timed.cpp:110:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphores_timed.cpp",
    "line": 111,
    "function": null,
    "comment": "semaphores_timed.cpp:111:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "semaphores_timed.cpp",
    "line": 115,
    "function": null,
    "comment": "semaphores_timed.cpp:115:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "semaphores_timed.cpp",
    "line": 115,
    "function": null,
    "comment": "semaphores_timed.cpp:115:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "semaphores_timed.cpp",
    "line": 116,
    "function": null,
    "comment": "semaphores_timed.cpp:116:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "semaphores_timed.cpp",
    "line": 120,
    "function": null,
    "comment": "semaphores_timed.cpp:120:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "semaphores_timed.cpp",
    "line": 121,
    "function": null,
    "comment": "semaphores_timed.cpp:121:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphores_timed.cpp",
    "line": 122,
    "function": null,
    "comment": "semaphores_timed.cpp:122:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "semaphores_timed.cpp",
    "line": 125,
    "function": null,
    "comment": "semaphores_timed.cpp:125:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "semaphores_timed.cpp",
    "line": 126,
    "function": null,
    "comment": "semaphores_timed.cpp:126:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "semaphores_timed.cpp",
    "line": 130,
    "function": null,
    "comment": "semaphores_timed.cpp:130:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "semaphores_timed.cpp",
    "line": 137,
    "function": null,
    "comment": "semaphores_timed.cpp:137:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "semaphores_timed.cpp",
    "line": 138,
    "function": null,
    "comment": "semaphores_timed.cpp:138:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "semaphores_timed.cpp",
    "line": 145,
    "function": null,
    "comment": "semaphores_timed.cpp:145:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "semaphores_timed.cpp",
    "line": 145,
    "function": null,
    "comment": "semaphores_timed.cpp:145:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "semaphores_timed.cpp",
    "line": 146,
    "function": null,
    "comment": "semaphores_timed.cpp:146:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "semaphores_timed.cpp",
    "line": 156,
    "function": null,
    "comment": "semaphores_timed.cpp:156:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "semaphores_timed.cpp",
    "line": 157,
    "function": null,
    "comment": "semaphores_timed.cpp:157:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "semaphores_timed.cpp",
    "line": 162,
    "function": null,
    "comment": "semaphores_timed.cpp:162:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "semaphores_timed.cpp",
    "line": 163,
    "function": null,
    "comment": "semaphores_timed.cpp:163:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "semaphores_timed.cpp",
    "line": 168,
    "function": null,
    "comment": "semaphores_timed.cpp:168:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "semaphores_timed.cpp",
    "line": 178,
    "function": null,
    "comment": "semaphores_timed.cpp:178:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "semaphores_timed.cpp",
    "line": 180,
    "function": null,
    "comment": "semaphores_timed.cpp:180:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "semaphores_timed.cpp",
    "line": 84,
    "function": null,
    "comment": "semaphores_timed.cpp:84:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "semaphores.cpp",
    "line": null,
    "function": null,
    "comment": "semaphores.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "semaphores.cpp",
    "line": 14,
    "function": null,
    "comment": "semaphores.cpp:14:  Include 'cstdlib' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "semaphores.cpp",
    "line": 15,
    "function": null,
    "comment": "semaphores.cpp:15:  Found C system header after C++ system header. Should be: semaphores.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "semaphores.cpp",
    "line": 16,
    "function": null,
    "comment": "semaphores.cpp:16:  Found C system header after C++ system header. Should be: semaphores.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "semaphores.cpp",
    "line": 43,
    "function": null,
    "comment": "semaphores.cpp:43:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "semaphores.cpp",
    "line": 44,
    "function": null,
    "comment": "semaphores.cpp:44:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "semaphores.cpp",
    "line": 45,
    "function": null,
    "comment": "semaphores.cpp:45:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "semaphores.cpp",
    "line": 51,
    "function": null,
    "comment": "semaphores.cpp:51:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "semaphores.cpp",
    "line": 52,
    "function": null,
    "comment": "semaphores.cpp:52:  public: should be indented +1 space inside class SemaphoreTestData  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "semaphores.cpp",
    "line": 54,
    "function": null,
    "comment": "semaphores.cpp:54:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "Do not use meaningless empty statements.",
    "file": "semaphores.cpp",
    "line": 54,
    "function": null,
    "comment": "semaphores.cpp:54:  You don't need a ; after a }  [readability/braces] [4]",
    "tags": ["code-standards","google-cpp","empty-statement","ambiguous-code"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "semaphores.cpp",
    "line": 57,
    "function": null,
    "comment": "semaphores.cpp:57:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "semaphores.cpp",
    "line": 58,
    "function": null,
    "comment": "semaphores.cpp:58:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "semaphores.cpp",
    "line": 59,
    "function": null,
    "comment": "semaphores.cpp:59:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "semaphores.cpp",
    "line": 79,
    "function": null,
    "comment": "semaphores.cpp:79:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "semaphores.cpp",
    "line": 79,
    "function": null,
    "comment": "semaphores.cpp:79:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "semaphores.cpp",
    "line": 80,
    "function": null,
    "comment": "semaphores.cpp:80:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "semaphores.cpp",
    "line": 87,
    "function": null,
    "comment": "semaphores.cpp:87:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "semaphores.cpp",
    "line": 92,
    "function": null,
    "comment": "semaphores.cpp:92:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "semaphores.cpp",
    "line": 97,
    "function": null,
    "comment": "semaphores.cpp:97:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphores.cpp",
    "line": 98,
    "function": null,
    "comment": "semaphores.cpp:98:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "semaphores.cpp",
    "line": 98,
    "function": null,
    "comment": "semaphores.cpp:98:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "semaphores.cpp",
    "line": 103,
    "function": null,
    "comment": "semaphores.cpp:103:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "semaphores.cpp",
    "line": 104,
    "function": null,
    "comment": "semaphores.cpp:104:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "semaphores.cpp",
    "line": 105,
    "function": null,
    "comment": "semaphores.cpp:105:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "semaphores.cpp",
    "line": 107,
    "function": null,
    "comment": "semaphores.cpp:107:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "semaphores.cpp",
    "line": 107,
    "function": null,
    "comment": "semaphores.cpp:107:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "semaphores.cpp",
    "line": 108,
    "function": null,
    "comment": "semaphores.cpp:108:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "semaphores.cpp",
    "line": 112,
    "function": null,
    "comment": "semaphores.cpp:112:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "semaphores.cpp",
    "line": 113,
    "function": null,
    "comment": "semaphores.cpp:113:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "semaphores.cpp",
    "line": 114,
    "function": null,
    "comment": "semaphores.cpp:114:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "semaphores.cpp",
    "line": 117,
    "function": null,
    "comment": "semaphores.cpp:117:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "semaphores.cpp",
    "line": 118,
    "function": null,
    "comment": "semaphores.cpp:118:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "semaphores.cpp",
    "line": 122,
    "function": null,
    "comment": "semaphores.cpp:122:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "semaphores.cpp",
    "line": 131,
    "function": null,
    "comment": "semaphores.cpp:131:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "semaphores.cpp",
    "line": 132,
    "function": null,
    "comment": "semaphores.cpp:132:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "semaphores.cpp",
    "line": 133,
    "function": null,
    "comment": "semaphores.cpp:133:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "semaphores.cpp",
    "line": 137,
    "function": null,
    "comment": "semaphores.cpp:137:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "semaphores.cpp",
    "line": 137,
    "function": null,
    "comment": "semaphores.cpp:137:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "semaphores.cpp",
    "line": 138,
    "function": null,
    "comment": "semaphores.cpp:138:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "semaphores.cpp",
    "line": 143,
    "function": null,
    "comment": "semaphores.cpp:143:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "semaphores.cpp",
    "line": 150,
    "function": null,
    "comment": "semaphores.cpp:150:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "semaphores.cpp",
    "line": 151,
    "function": null,
    "comment": "semaphores.cpp:151:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "semaphores.cpp",
    "line": 156,
    "function": null,
    "comment": "semaphores.cpp:156:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "semaphores.cpp",
    "line": 157,
    "function": null,
    "comment": "semaphores.cpp:157:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "semaphores.cpp",
    "line": 158,
    "function": null,
    "comment": "semaphores.cpp:158:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "semaphores.cpp",
    "line": 159,
    "function": null,
    "comment": "semaphores.cpp:159:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "semaphores.cpp",
    "line": 160,
    "function": null,
    "comment": "semaphores.cpp:160:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "semaphores.cpp",
    "line": 164,
    "function": null,
    "comment": "semaphores.cpp:164:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "semaphores.cpp",
    "line": 174,
    "function": null,
    "comment": "semaphores.cpp:174:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "semaphores.cpp",
    "line": 176,
    "function": null,
    "comment": "semaphores.cpp:176:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "semaphores.cpp",
    "line": 82,
    "function": null,
    "comment": "semaphores.cpp:82:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "semaphores.cpp",
    "line": 174,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "semaphores_timed.cpp",
    "line": 178,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "shared_memory.cpp",
    "line": 152,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "shared_memory_pos.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "shared_memory_pos.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "semaphore_pos.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "semaphore_pos.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "semaphore_pos.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "semaphore_pos.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "shared_memory_pos.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "shared_memory_pos.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "shared_memory.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "shared_memory.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "semaphores_timed.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "semaphores_timed.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "semaphores.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "semaphores.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  }
]