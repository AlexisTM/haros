[
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "converters.hpp",
    "line": null,
    "function": null,
    "comment": "converters.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "converters.hpp",
    "line": 28,
    "function": null,
    "comment": "converters.hpp:28:  Include 'converters/from_byte_array.hpp' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not include the same file twice.",
    "file": "converters.hpp",
    "line": 29,
    "function": null,
    "comment": "converters.hpp:29:  'converters/converter.hpp' already included at converters.hpp:21  [build/include] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "converters.hpp",
    "line": 30,
    "function": null,
    "comment": "converters.hpp:30:  Include 'converters/char.hpp' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "converters.hpp",
    "line": 32,
    "function": null,
    "comment": "converters.hpp:32:  Include 'converters/char_strings.hpp' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "string.hpp",
    "line": null,
    "function": null,
    "comment": "string.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "string.hpp",
    "line": 29,
    "function": null,
    "comment": "string.hpp:29:  Include 'char.hpp' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "string.hpp",
    "line": 35,
    "function": null,
    "comment": "string.hpp:35:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "string.hpp",
    "line": 51,
    "function": null,
    "comment": "string.hpp:51:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "string.hpp",
    "line": 51,
    "function": null,
    "comment": "string.hpp:51:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "string.hpp",
    "line": 52,
    "function": null,
    "comment": "string.hpp:52:  public: should be indented +1 space inside class Converter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "string.hpp",
    "line": 63,
    "function": null,
    "comment": "string.hpp:63:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "string.hpp",
    "line": 63,
    "function": null,
    "comment": "string.hpp:63:  Extra space before ( in function call  [whitespace/parens] [0]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "string.hpp",
    "line": 64,
    "function": null,
    "comment": "string.hpp:64:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "string.hpp",
    "line": 64,
    "function": null,
    "comment": "string.hpp:64:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "string.hpp",
    "line": 65,
    "function": null,
    "comment": "string.hpp:65:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "string.hpp",
    "line": 66,
    "function": null,
    "comment": "string.hpp:66:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "string.hpp",
    "line": 67,
    "function": null,
    "comment": "string.hpp:67:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "string.hpp",
    "line": 68,
    "function": null,
    "comment": "string.hpp:68:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "string.hpp",
    "line": 69,
    "function": null,
    "comment": "string.hpp:69:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "string.hpp",
    "line": 70,
    "function": null,
    "comment": "string.hpp:70:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "string.hpp",
    "line": 71,
    "function": null,
    "comment": "string.hpp:71:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "string.hpp",
    "line": 72,
    "function": null,
    "comment": "string.hpp:72:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "string.hpp",
    "line": 72,
    "function": null,
    "comment": "string.hpp:72:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "string.hpp",
    "line": 73,
    "function": null,
    "comment": "string.hpp:73:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "string.hpp",
    "line": 74,
    "function": null,
    "comment": "string.hpp:74:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "string.hpp",
    "line": 75,
    "function": null,
    "comment": "string.hpp:75:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "string.hpp",
    "line": 76,
    "function": null,
    "comment": "string.hpp:76:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "string.hpp",
    "line": 77,
    "function": null,
    "comment": "string.hpp:77:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "string.hpp",
    "line": 81,
    "function": null,
    "comment": "string.hpp:81:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "string.hpp",
    "line": 81,
    "function": null,
    "comment": "string.hpp:81:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Whitespace inside parenthesis should be consistent, and should consist of either zero or one space.",
    "file": "string.hpp",
    "line": 81,
    "function": null,
    "comment": "string.hpp:81:  Mismatching spaces inside () in if  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "string.hpp",
    "line": 82,
    "function": null,
    "comment": "string.hpp:82:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "string.hpp",
    "line": 83,
    "function": null,
    "comment": "string.hpp:83:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "string.hpp",
    "line": 84,
    "function": null,
    "comment": "string.hpp:84:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "string.hpp",
    "line": 85,
    "function": null,
    "comment": "string.hpp:85:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "string.hpp",
    "line": 86,
    "function": null,
    "comment": "string.hpp:86:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "string.hpp",
    "line": 86,
    "function": null,
    "comment": "string.hpp:86:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "string.hpp",
    "line": 86,
    "function": null,
    "comment": "string.hpp:86:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "string.hpp",
    "line": 87,
    "function": null,
    "comment": "string.hpp:87:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "string.hpp",
    "line": 88,
    "function": null,
    "comment": "string.hpp:88:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "string.hpp",
    "line": 89,
    "function": null,
    "comment": "string.hpp:89:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "string.hpp",
    "line": 90,
    "function": null,
    "comment": "string.hpp:90:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "string.hpp",
    "line": 90,
    "function": null,
    "comment": "string.hpp:90:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "string.hpp",
    "line": 91,
    "function": null,
    "comment": "string.hpp:91:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "string.hpp",
    "line": 91,
    "function": null,
    "comment": "string.hpp:91:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "string.hpp",
    "line": 92,
    "function": null,
    "comment": "string.hpp:92:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "string.hpp",
    "line": 92,
    "function": null,
    "comment": "string.hpp:92:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "string.hpp",
    "line": 93,
    "function": null,
    "comment": "string.hpp:93:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "string.hpp",
    "line": 94,
    "function": null,
    "comment": "string.hpp:94:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "string.hpp",
    "line": 95,
    "function": null,
    "comment": "string.hpp:95:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "string.hpp",
    "line": 96,
    "function": null,
    "comment": "string.hpp:96:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "string.hpp",
    "line": 97,
    "function": null,
    "comment": "string.hpp:97:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "string.hpp",
    "line": 101,
    "function": null,
    "comment": "string.hpp:101:  private: should be indented +1 space inside class Converter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "string.hpp",
    "line": 102,
    "function": null,
    "comment": "string.hpp:102:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "string.hpp",
    "line": 103,
    "function": null,
    "comment": "string.hpp:103:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "string.hpp",
    "line": 104,
    "function": null,
    "comment": "string.hpp:104:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "string.hpp",
    "line": 105,
    "function": null,
    "comment": "string.hpp:105:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "string.hpp",
    "line": 106,
    "function": null,
    "comment": "string.hpp:106:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "string.hpp",
    "line": 106,
    "function": null,
    "comment": "string.hpp:106:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "string.hpp",
    "line": 107,
    "function": null,
    "comment": "string.hpp:107:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "string.hpp",
    "line": 121,
    "function": null,
    "comment": "string.hpp:121:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "string.hpp",
    "line": 122,
    "function": null,
    "comment": "string.hpp:122:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "string.hpp",
    "line": 123,
    "function": null,
    "comment": "string.hpp:123:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "string.hpp",
    "line": 124,
    "function": null,
    "comment": "string.hpp:124:  public: should be indented +1 space inside class Converter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "string.hpp",
    "line": 127,
    "function": null,
    "comment": "string.hpp:127:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "string.hpp",
    "line": 127,
    "function": null,
    "comment": "string.hpp:127:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "string.hpp",
    "line": 131,
    "function": null,
    "comment": "string.hpp:131:  Namespace should be terminated with '// namespace ecl'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "string.hpp",
    "line": 131,
    "function": null,
    "comment": "string.hpp:131:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "char.hpp",
    "line": null,
    "function": null,
    "comment": "char.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "char.hpp",
    "line": 24,
    "function": null,
    "comment": "char.hpp:24:  Found C system header after other header. Should be: char.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "char.hpp",
    "line": 30,
    "function": null,
    "comment": "char.hpp:30:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "char.hpp",
    "line": 41,
    "function": null,
    "comment": "char.hpp:41:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char.hpp",
    "line": 41,
    "function": null,
    "comment": "char.hpp:41:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "char.hpp",
    "line": 42,
    "function": null,
    "comment": "char.hpp:42:  public: should be indented +1 space inside class Converter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "char.hpp",
    "line": 43,
    "function": null,
    "comment": "char.hpp:43:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "char.hpp",
    "line": 57,
    "function": null,
    "comment": "char.hpp:57:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "char.hpp",
    "line": 57,
    "function": null,
    "comment": "char.hpp:57:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "char.hpp",
    "line": 57,
    "function": null,
    "comment": "char.hpp:57:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "char.hpp",
    "line": 58,
    "function": null,
    "comment": "char.hpp:58:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "char.hpp",
    "line": 58,
    "function": null,
    "comment": "char.hpp:58:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "char.hpp",
    "line": 59,
    "function": null,
    "comment": "char.hpp:59:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char.hpp",
    "line": 59,
    "function": null,
    "comment": "char.hpp:59:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "char.hpp",
    "line": 60,
    "function": null,
    "comment": "char.hpp:60:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "char.hpp",
    "line": 61,
    "function": null,
    "comment": "char.hpp:61:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "char.hpp",
    "line": 62,
    "function": null,
    "comment": "char.hpp:62:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "char.hpp",
    "line": 63,
    "function": null,
    "comment": "char.hpp:63:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "char.hpp",
    "line": 71,
    "function": null,
    "comment": "char.hpp:71:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char.hpp",
    "line": 71,
    "function": null,
    "comment": "char.hpp:71:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "char.hpp",
    "line": 72,
    "function": null,
    "comment": "char.hpp:72:  public: should be indented +1 space inside class Converter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "char.hpp",
    "line": 73,
    "function": null,
    "comment": "char.hpp:73:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "char.hpp",
    "line": 87,
    "function": null,
    "comment": "char.hpp:87:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "char.hpp",
    "line": 87,
    "function": null,
    "comment": "char.hpp:87:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "char.hpp",
    "line": 88,
    "function": null,
    "comment": "char.hpp:88:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "char.hpp",
    "line": 88,
    "function": null,
    "comment": "char.hpp:88:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "char.hpp",
    "line": 88,
    "function": null,
    "comment": "char.hpp:88:  Extra space after (  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "char.hpp",
    "line": 88,
    "function": null,
    "comment": "char.hpp:88:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "char.hpp",
    "line": 89,
    "function": null,
    "comment": "char.hpp:89:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char.hpp",
    "line": 89,
    "function": null,
    "comment": "char.hpp:89:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "char.hpp",
    "line": 90,
    "function": null,
    "comment": "char.hpp:90:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "char.hpp",
    "line": 91,
    "function": null,
    "comment": "char.hpp:91:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "char.hpp",
    "line": 92,
    "function": null,
    "comment": "char.hpp:92:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "char.hpp",
    "line": 93,
    "function": null,
    "comment": "char.hpp:93:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char.hpp",
    "line": 108,
    "function": null,
    "comment": "char.hpp:108:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char.hpp",
    "line": 109,
    "function": null,
    "comment": "char.hpp:109:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char.hpp",
    "line": 110,
    "function": null,
    "comment": "char.hpp:110:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "char.hpp",
    "line": 111,
    "function": null,
    "comment": "char.hpp:111:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "char.hpp",
    "line": 112,
    "function": null,
    "comment": "char.hpp:112:  public: should be indented +1 space inside class Converter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char.hpp",
    "line": 115,
    "function": null,
    "comment": "char.hpp:115:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char.hpp",
    "line": 116,
    "function": null,
    "comment": "char.hpp:116:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "char.hpp",
    "line": 119,
    "function": null,
    "comment": "char.hpp:119:  Namespace should be terminated with '// namespace ecl'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "char.hpp",
    "line": 119,
    "function": null,
    "comment": "char.hpp:119:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "integers.hpp",
    "line": null,
    "function": null,
    "comment": "integers.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "integers.hpp",
    "line": 22,
    "function": null,
    "comment": "integers.hpp:22:  Include 'sstream' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "integers.hpp",
    "line": 23,
    "function": null,
    "comment": "integers.hpp:23:  Found C system header after C++ system header. Should be: integers.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "integers.hpp",
    "line": 30,
    "function": null,
    "comment": "integers.hpp:30:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "integers.hpp",
    "line": 43,
    "function": null,
    "comment": "integers.hpp:43:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "integers.hpp",
    "line": 43,
    "function": null,
    "comment": "integers.hpp:43:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "integers.hpp",
    "line": 44,
    "function": null,
    "comment": "integers.hpp:44:  public: should be indented +1 space inside class Converter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 45,
    "function": null,
    "comment": "integers.hpp:45:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Do not use meaningless empty statements.",
    "file": "integers.hpp",
    "line": 45,
    "function": null,
    "comment": "integers.hpp:45:  You don't need a ; after a }  [readability/braces] [4]",
    "tags": ["code-standards","google-cpp","empty-statement","ambiguous-code"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 57,
    "function": null,
    "comment": "integers.hpp:57:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "integers.hpp",
    "line": 57,
    "function": null,
    "comment": "integers.hpp:57:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "integers.hpp",
    "line": 57,
    "function": null,
    "comment": "integers.hpp:57:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 58,
    "function": null,
    "comment": "integers.hpp:58:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 59,
    "function": null,
    "comment": "integers.hpp:59:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 60,
    "function": null,
    "comment": "integers.hpp:60:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 61,
    "function": null,
    "comment": "integers.hpp:61:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "integers.hpp",
    "line": 61,
    "function": null,
    "comment": "integers.hpp:61:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "integers.hpp",
    "line": 61,
    "function": null,
    "comment": "integers.hpp:61:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "integers.hpp",
    "line": 61,
    "function": null,
    "comment": "integers.hpp:61:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Whitespace inside parenthesis should be consistent, and should consist of either zero or one space.",
    "file": "integers.hpp",
    "line": 61,
    "function": null,
    "comment": "integers.hpp:61:  Mismatching spaces inside () in if  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "integers.hpp",
    "line": 61,
    "function": null,
    "comment": "integers.hpp:61:  Extra space after (  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "integers.hpp",
    "line": 61,
    "function": null,
    "comment": "integers.hpp:61:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 62,
    "function": null,
    "comment": "integers.hpp:62:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "integers.hpp",
    "line": 62,
    "function": null,
    "comment": "integers.hpp:62:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 63,
    "function": null,
    "comment": "integers.hpp:63:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 64,
    "function": null,
    "comment": "integers.hpp:64:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 65,
    "function": null,
    "comment": "integers.hpp:65:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 66,
    "function": null,
    "comment": "integers.hpp:66:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "integers.hpp",
    "line": 76,
    "function": null,
    "comment": "integers.hpp:76:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "integers.hpp",
    "line": 76,
    "function": null,
    "comment": "integers.hpp:76:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "integers.hpp",
    "line": 77,
    "function": null,
    "comment": "integers.hpp:77:  public: should be indented +1 space inside class Converter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 88,
    "function": null,
    "comment": "integers.hpp:88:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "integers.hpp",
    "line": 88,
    "function": null,
    "comment": "integers.hpp:88:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 89,
    "function": null,
    "comment": "integers.hpp:89:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "integers.hpp",
    "line": 89,
    "function": null,
    "comment": "integers.hpp:89:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "integers.hpp",
    "line": 89,
    "function": null,
    "comment": "integers.hpp:89:  Extra space after (  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "integers.hpp",
    "line": 89,
    "function": null,
    "comment": "integers.hpp:89:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 90,
    "function": null,
    "comment": "integers.hpp:90:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "integers.hpp",
    "line": 90,
    "function": null,
    "comment": "integers.hpp:90:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 91,
    "function": null,
    "comment": "integers.hpp:91:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 92,
    "function": null,
    "comment": "integers.hpp:92:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 93,
    "function": null,
    "comment": "integers.hpp:93:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 94,
    "function": null,
    "comment": "integers.hpp:94:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "integers.hpp",
    "line": 106,
    "function": null,
    "comment": "integers.hpp:106:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "integers.hpp",
    "line": 106,
    "function": null,
    "comment": "integers.hpp:106:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "integers.hpp",
    "line": 107,
    "function": null,
    "comment": "integers.hpp:107:  private: should be indented +1 space inside class Converter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 108,
    "function": null,
    "comment": "integers.hpp:108:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "integers.hpp",
    "line": 108,
    "function": null,
    "comment": "integers.hpp:108:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 109,
    "function": null,
    "comment": "integers.hpp:109:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "integers.hpp",
    "line": 109,
    "function": null,
    "comment": "integers.hpp:109:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 110,
    "function": null,
    "comment": "integers.hpp:110:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "integers.hpp",
    "line": 111,
    "function": null,
    "comment": "integers.hpp:111:  public: should be indented +1 space inside class Converter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 112,
    "function": null,
    "comment": "integers.hpp:112:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 113,
    "function": null,
    "comment": "integers.hpp:113:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 114,
    "function": null,
    "comment": "integers.hpp:114:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 115,
    "function": null,
    "comment": "integers.hpp:115:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 116,
    "function": null,
    "comment": "integers.hpp:116:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 117,
    "function": null,
    "comment": "integers.hpp:117:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 118,
    "function": null,
    "comment": "integers.hpp:118:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 119,
    "function": null,
    "comment": "integers.hpp:119:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 120,
    "function": null,
    "comment": "integers.hpp:120:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 121,
    "function": null,
    "comment": "integers.hpp:121:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "integers.hpp",
    "line": 121,
    "function": null,
    "comment": "integers.hpp:121:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 122,
    "function": null,
    "comment": "integers.hpp:122:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "integers.hpp",
    "line": 122,
    "function": null,
    "comment": "integers.hpp:122:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 123,
    "function": null,
    "comment": "integers.hpp:123:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "integers.hpp",
    "line": 123,
    "function": null,
    "comment": "integers.hpp:123:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 124,
    "function": null,
    "comment": "integers.hpp:124:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "integers.hpp",
    "line": 124,
    "function": null,
    "comment": "integers.hpp:124:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 125,
    "function": null,
    "comment": "integers.hpp:125:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 126,
    "function": null,
    "comment": "integers.hpp:126:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "integers.hpp",
    "line": 126,
    "function": null,
    "comment": "integers.hpp:126:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 127,
    "function": null,
    "comment": "integers.hpp:127:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "integers.hpp",
    "line": 138,
    "function": null,
    "comment": "integers.hpp:138:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "integers.hpp",
    "line": 138,
    "function": null,
    "comment": "integers.hpp:138:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "integers.hpp",
    "line": 139,
    "function": null,
    "comment": "integers.hpp:139:  private: should be indented +1 space inside class Converter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 140,
    "function": null,
    "comment": "integers.hpp:140:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "integers.hpp",
    "line": 140,
    "function": null,
    "comment": "integers.hpp:140:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 141,
    "function": null,
    "comment": "integers.hpp:141:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "integers.hpp",
    "line": 141,
    "function": null,
    "comment": "integers.hpp:141:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 142,
    "function": null,
    "comment": "integers.hpp:142:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "integers.hpp",
    "line": 143,
    "function": null,
    "comment": "integers.hpp:143:  public: should be indented +1 space inside class Converter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The line before an access modifier (public, private, protected) should be blank, unless it is the beginning of the class.",
    "file": "integers.hpp",
    "line": 143,
    "function": null,
    "comment": "integers.hpp:143:  'public:' should be preceded by a blank line  [whitespace/blank_line] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "integers.hpp",
    "line": 155,
    "function": null,
    "comment": "integers.hpp:155:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "integers.hpp",
    "line": 157,
    "function": null,
    "comment": "integers.hpp:157:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 158,
    "function": null,
    "comment": "integers.hpp:158:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 159,
    "function": null,
    "comment": "integers.hpp:159:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 160,
    "function": null,
    "comment": "integers.hpp:160:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 161,
    "function": null,
    "comment": "integers.hpp:161:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 162,
    "function": null,
    "comment": "integers.hpp:162:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 163,
    "function": null,
    "comment": "integers.hpp:163:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 164,
    "function": null,
    "comment": "integers.hpp:164:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 165,
    "function": null,
    "comment": "integers.hpp:165:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 166,
    "function": null,
    "comment": "integers.hpp:166:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 167,
    "function": null,
    "comment": "integers.hpp:167:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 174,
    "function": null,
    "comment": "integers.hpp:174:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 175,
    "function": null,
    "comment": "integers.hpp:175:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 176,
    "function": null,
    "comment": "integers.hpp:176:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 177,
    "function": null,
    "comment": "integers.hpp:177:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 181,
    "function": null,
    "comment": "integers.hpp:181:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 182,
    "function": null,
    "comment": "integers.hpp:182:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 183,
    "function": null,
    "comment": "integers.hpp:183:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 184,
    "function": null,
    "comment": "integers.hpp:184:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 185,
    "function": null,
    "comment": "integers.hpp:185:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 186,
    "function": null,
    "comment": "integers.hpp:186:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 187,
    "function": null,
    "comment": "integers.hpp:187:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 188,
    "function": null,
    "comment": "integers.hpp:188:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 189,
    "function": null,
    "comment": "integers.hpp:189:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 190,
    "function": null,
    "comment": "integers.hpp:190:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "integers.hpp",
    "line": 190,
    "function": null,
    "comment": "integers.hpp:190:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "integers.hpp",
    "line": 190,
    "function": null,
    "comment": "integers.hpp:190:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 191,
    "function": null,
    "comment": "integers.hpp:191:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "integers.hpp",
    "line": 191,
    "function": null,
    "comment": "integers.hpp:191:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 192,
    "function": null,
    "comment": "integers.hpp:192:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "integers.hpp",
    "line": 192,
    "function": null,
    "comment": "integers.hpp:192:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "integers.hpp",
    "line": 192,
    "function": null,
    "comment": "integers.hpp:192:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 193,
    "function": null,
    "comment": "integers.hpp:193:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 194,
    "function": null,
    "comment": "integers.hpp:194:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "integers.hpp",
    "line": 194,
    "function": null,
    "comment": "integers.hpp:194:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 195,
    "function": null,
    "comment": "integers.hpp:195:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "integers.hpp",
    "line": 195,
    "function": null,
    "comment": "integers.hpp:195:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 196,
    "function": null,
    "comment": "integers.hpp:196:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "integers.hpp",
    "line": 196,
    "function": null,
    "comment": "integers.hpp:196:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 197,
    "function": null,
    "comment": "integers.hpp:197:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 198,
    "function": null,
    "comment": "integers.hpp:198:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "integers.hpp",
    "line": 198,
    "function": null,
    "comment": "integers.hpp:198:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "integers.hpp",
    "line": 199,
    "function": null,
    "comment": "integers.hpp:199:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "integers.hpp",
    "line": 212,
    "function": null,
    "comment": "integers.hpp:212:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "integers.hpp",
    "line": 213,
    "function": null,
    "comment": "integers.hpp:213:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "integers.hpp",
    "line": 214,
    "function": null,
    "comment": "integers.hpp:214:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "integers.hpp",
    "line": 217,
    "function": null,
    "comment": "integers.hpp:217:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "integers.hpp",
    "line": 218,
    "function": null,
    "comment": "integers.hpp:218:  public: should be indented +1 space inside class Converter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "integers.hpp",
    "line": 219,
    "function": null,
    "comment": "integers.hpp:219:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "integers.hpp",
    "line": 220,
    "function": null,
    "comment": "integers.hpp:220:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "integers.hpp",
    "line": 226,
    "function": null,
    "comment": "integers.hpp:226:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "char_strings.hpp",
    "line": null,
    "function": null,
    "comment": "char_strings.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "char_strings.hpp",
    "line": 23,
    "function": null,
    "comment": "char_strings.hpp:23:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "char_strings.hpp",
    "line": 24,
    "function": null,
    "comment": "char_strings.hpp:24:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "char_strings.hpp",
    "line": 24,
    "function": null,
    "comment": "char_strings.hpp:24:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "char_strings.hpp",
    "line": 27,
    "function": null,
    "comment": "char_strings.hpp:27:  Found C system header after other header. Should be: char_strings.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "char_strings.hpp",
    "line": 28,
    "function": null,
    "comment": "char_strings.hpp:28:  Found C system header after other header. Should be: char_strings.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "char_strings.hpp",
    "line": 29,
    "function": null,
    "comment": "char_strings.hpp:29:  Found C system header after other header. Should be: char_strings.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "char_strings.hpp",
    "line": 39,
    "function": null,
    "comment": "char_strings.hpp:39:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "char_strings.hpp",
    "line": 44,
    "function": null,
    "comment": "char_strings.hpp:44:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "char_strings.hpp",
    "line": 57,
    "function": null,
    "comment": "char_strings.hpp:57:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "char_strings.hpp",
    "line": 58,
    "function": null,
    "comment": "char_strings.hpp:58:  protected: should be indented +1 space inside class CharStringBuffer  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "char_strings.hpp",
    "line": 67,
    "function": null,
    "comment": "char_strings.hpp:67:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 67,
    "function": null,
    "comment": "char_strings.hpp:67:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "char_strings.hpp",
    "line": 77,
    "function": null,
    "comment": "char_strings.hpp:77:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "char_strings.hpp",
    "line": 77,
    "function": null,
    "comment": "char_strings.hpp:77:  Constructors callable with one argument should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "char_strings.hpp",
    "line": 78,
    "function": null,
    "comment": "char_strings.hpp:78:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "char_strings.hpp",
    "line": 79,
    "function": null,
    "comment": "char_strings.hpp:79:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "char_strings.hpp",
    "line": 80,
    "function": null,
    "comment": "char_strings.hpp:80:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "char_strings.hpp",
    "line": 81,
    "function": null,
    "comment": "char_strings.hpp:81:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "char_strings.hpp",
    "line": 81,
    "function": null,
    "comment": "char_strings.hpp:81:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 81,
    "function": null,
    "comment": "char_strings.hpp:81:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "char_strings.hpp",
    "line": 82,
    "function": null,
    "comment": "char_strings.hpp:82:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "char_strings.hpp",
    "line": 83,
    "function": null,
    "comment": "char_strings.hpp:83:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "char_strings.hpp",
    "line": 88,
    "function": null,
    "comment": "char_strings.hpp:88:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "char_strings.hpp",
    "line": 89,
    "function": null,
    "comment": "char_strings.hpp:89:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "char_strings.hpp",
    "line": 89,
    "function": null,
    "comment": "char_strings.hpp:89:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "char_strings.hpp",
    "line": 90,
    "function": null,
    "comment": "char_strings.hpp:90:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "char_strings.hpp",
    "line": 91,
    "function": null,
    "comment": "char_strings.hpp:91:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "char_strings.hpp",
    "line": 92,
    "function": null,
    "comment": "char_strings.hpp:92:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "char_strings.hpp",
    "line": 115,
    "function": null,
    "comment": "char_strings.hpp:115:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "char_strings.hpp",
    "line": 116,
    "function": null,
    "comment": "char_strings.hpp:116:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "char_strings.hpp",
    "line": 117,
    "function": null,
    "comment": "char_strings.hpp:117:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "char_strings.hpp",
    "line": 121,
    "function": null,
    "comment": "char_strings.hpp:121:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "char_strings.hpp",
    "line": 122,
    "function": null,
    "comment": "char_strings.hpp:122:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "char_strings.hpp",
    "line": 123,
    "function": null,
    "comment": "char_strings.hpp:123:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "char_strings.hpp",
    "line": 127,
    "function": null,
    "comment": "char_strings.hpp:127:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "char_strings.hpp",
    "line": 140,
    "function": null,
    "comment": "char_strings.hpp:140:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "char_strings.hpp",
    "line": 141,
    "function": null,
    "comment": "char_strings.hpp:141:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "char_strings.hpp",
    "line": 146,
    "function": null,
    "comment": "char_strings.hpp:146:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 146,
    "function": null,
    "comment": "char_strings.hpp:146:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "char_strings.hpp",
    "line": 147,
    "function": null,
    "comment": "char_strings.hpp:147:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "char_strings.hpp",
    "line": 147,
    "function": null,
    "comment": "char_strings.hpp:147:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "char_strings.hpp",
    "line": 148,
    "function": null,
    "comment": "char_strings.hpp:148:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 148,
    "function": null,
    "comment": "char_strings.hpp:148:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "char_strings.hpp",
    "line": 156,
    "function": null,
    "comment": "char_strings.hpp:156:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "char_strings.hpp",
    "line": 180,
    "function": null,
    "comment": "char_strings.hpp:180:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 180,
    "function": null,
    "comment": "char_strings.hpp:180:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "char_strings.hpp",
    "line": 181,
    "function": null,
    "comment": "char_strings.hpp:181:  public: should be indented +1 space inside class Converter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "char_strings.hpp",
    "line": 190,
    "function": null,
    "comment": "char_strings.hpp:190:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 190,
    "function": null,
    "comment": "char_strings.hpp:190:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "char_strings.hpp",
    "line": 196,
    "function": null,
    "comment": "char_strings.hpp:196:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "char_strings.hpp",
    "line": 196,
    "function": null,
    "comment": "char_strings.hpp:196:  Constructors callable with one argument should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "char_strings.hpp",
    "line": 197,
    "function": null,
    "comment": "char_strings.hpp:197:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "char_strings.hpp",
    "line": 209,
    "function": null,
    "comment": "char_strings.hpp:209:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "char_strings.hpp",
    "line": 209,
    "function": null,
    "comment": "char_strings.hpp:209:  Extra space before ( in function call  [whitespace/parens] [0]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "char_strings.hpp",
    "line": 210,
    "function": null,
    "comment": "char_strings.hpp:210:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 210,
    "function": null,
    "comment": "char_strings.hpp:210:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "char_strings.hpp",
    "line": 231,
    "function": null,
    "comment": "char_strings.hpp:231:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "char_strings.hpp",
    "line": 231,
    "function": null,
    "comment": "char_strings.hpp:231:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 231,
    "function": null,
    "comment": "char_strings.hpp:231:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "char_strings.hpp",
    "line": 232,
    "function": null,
    "comment": "char_strings.hpp:232:  public: should be indented +1 space inside class Converter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "char_strings.hpp",
    "line": 241,
    "function": null,
    "comment": "char_strings.hpp:241:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 241,
    "function": null,
    "comment": "char_strings.hpp:241:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "char_strings.hpp",
    "line": 247,
    "function": null,
    "comment": "char_strings.hpp:247:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "char_strings.hpp",
    "line": 247,
    "function": null,
    "comment": "char_strings.hpp:247:  Constructors callable with one argument should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "char_strings.hpp",
    "line": 259,
    "function": null,
    "comment": "char_strings.hpp:259:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 259,
    "function": null,
    "comment": "char_strings.hpp:259:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "char_strings.hpp",
    "line": 279,
    "function": null,
    "comment": "char_strings.hpp:279:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 279,
    "function": null,
    "comment": "char_strings.hpp:279:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "char_strings.hpp",
    "line": 279,
    "function": null,
    "comment": "char_strings.hpp:279:  Use int16/int64/etc, rather than the C type short  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "char_strings.hpp",
    "line": 280,
    "function": null,
    "comment": "char_strings.hpp:280:  public: should be indented +1 space inside class Converter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "char_strings.hpp",
    "line": 289,
    "function": null,
    "comment": "char_strings.hpp:289:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 289,
    "function": null,
    "comment": "char_strings.hpp:289:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "char_strings.hpp",
    "line": 295,
    "function": null,
    "comment": "char_strings.hpp:295:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "char_strings.hpp",
    "line": 295,
    "function": null,
    "comment": "char_strings.hpp:295:  Constructors callable with one argument should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "char_strings.hpp",
    "line": 307,
    "function": null,
    "comment": "char_strings.hpp:307:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 307,
    "function": null,
    "comment": "char_strings.hpp:307:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "char_strings.hpp",
    "line": 307,
    "function": null,
    "comment": "char_strings.hpp:307:  Use int16/int64/etc, rather than the C type short  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "char_strings.hpp",
    "line": 327,
    "function": null,
    "comment": "char_strings.hpp:327:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "char_strings.hpp",
    "line": 327,
    "function": null,
    "comment": "char_strings.hpp:327:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 327,
    "function": null,
    "comment": "char_strings.hpp:327:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "char_strings.hpp",
    "line": 327,
    "function": null,
    "comment": "char_strings.hpp:327:  Use int16/int64/etc, rather than the C type short  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "char_strings.hpp",
    "line": 328,
    "function": null,
    "comment": "char_strings.hpp:328:  public: should be indented +1 space inside class Converter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "char_strings.hpp",
    "line": 337,
    "function": null,
    "comment": "char_strings.hpp:337:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 337,
    "function": null,
    "comment": "char_strings.hpp:337:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "char_strings.hpp",
    "line": 343,
    "function": null,
    "comment": "char_strings.hpp:343:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "char_strings.hpp",
    "line": 343,
    "function": null,
    "comment": "char_strings.hpp:343:  Constructors callable with one argument should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "char_strings.hpp",
    "line": 355,
    "function": null,
    "comment": "char_strings.hpp:355:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 355,
    "function": null,
    "comment": "char_strings.hpp:355:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "char_strings.hpp",
    "line": 355,
    "function": null,
    "comment": "char_strings.hpp:355:  Use int16/int64/etc, rather than the C type short  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "char_strings.hpp",
    "line": 376,
    "function": null,
    "comment": "char_strings.hpp:376:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 376,
    "function": null,
    "comment": "char_strings.hpp:376:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "char_strings.hpp",
    "line": 377,
    "function": null,
    "comment": "char_strings.hpp:377:  public: should be indented +1 space inside class Converter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "char_strings.hpp",
    "line": 383,
    "function": null,
    "comment": "char_strings.hpp:383:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 383,
    "function": null,
    "comment": "char_strings.hpp:383:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "char_strings.hpp",
    "line": 389,
    "function": null,
    "comment": "char_strings.hpp:389:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "char_strings.hpp",
    "line": 389,
    "function": null,
    "comment": "char_strings.hpp:389:  Constructors callable with one argument should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "char_strings.hpp",
    "line": 398,
    "function": null,
    "comment": "char_strings.hpp:398:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 398,
    "function": null,
    "comment": "char_strings.hpp:398:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "char_strings.hpp",
    "line": 418,
    "function": null,
    "comment": "char_strings.hpp:418:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "char_strings.hpp",
    "line": 418,
    "function": null,
    "comment": "char_strings.hpp:418:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 418,
    "function": null,
    "comment": "char_strings.hpp:418:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "char_strings.hpp",
    "line": 419,
    "function": null,
    "comment": "char_strings.hpp:419:  public: should be indented +1 space inside class Converter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "char_strings.hpp",
    "line": 428,
    "function": null,
    "comment": "char_strings.hpp:428:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 428,
    "function": null,
    "comment": "char_strings.hpp:428:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "char_strings.hpp",
    "line": 434,
    "function": null,
    "comment": "char_strings.hpp:434:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "char_strings.hpp",
    "line": 434,
    "function": null,
    "comment": "char_strings.hpp:434:  Constructors callable with one argument should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "char_strings.hpp",
    "line": 446,
    "function": null,
    "comment": "char_strings.hpp:446:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 446,
    "function": null,
    "comment": "char_strings.hpp:446:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "char_strings.hpp",
    "line": 467,
    "function": null,
    "comment": "char_strings.hpp:467:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 467,
    "function": null,
    "comment": "char_strings.hpp:467:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "char_strings.hpp",
    "line": 467,
    "function": null,
    "comment": "char_strings.hpp:467:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "char_strings.hpp",
    "line": 468,
    "function": null,
    "comment": "char_strings.hpp:468:  public: should be indented +1 space inside class Converter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "char_strings.hpp",
    "line": 477,
    "function": null,
    "comment": "char_strings.hpp:477:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 477,
    "function": null,
    "comment": "char_strings.hpp:477:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "char_strings.hpp",
    "line": 483,
    "function": null,
    "comment": "char_strings.hpp:483:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "char_strings.hpp",
    "line": 483,
    "function": null,
    "comment": "char_strings.hpp:483:  Constructors callable with one argument should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "char_strings.hpp",
    "line": 495,
    "function": null,
    "comment": "char_strings.hpp:495:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 495,
    "function": null,
    "comment": "char_strings.hpp:495:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "char_strings.hpp",
    "line": 495,
    "function": null,
    "comment": "char_strings.hpp:495:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "char_strings.hpp",
    "line": 515,
    "function": null,
    "comment": "char_strings.hpp:515:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "char_strings.hpp",
    "line": 515,
    "function": null,
    "comment": "char_strings.hpp:515:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 515,
    "function": null,
    "comment": "char_strings.hpp:515:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "char_strings.hpp",
    "line": 515,
    "function": null,
    "comment": "char_strings.hpp:515:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "char_strings.hpp",
    "line": 516,
    "function": null,
    "comment": "char_strings.hpp:516:  public: should be indented +1 space inside class Converter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "char_strings.hpp",
    "line": 522,
    "function": null,
    "comment": "char_strings.hpp:522:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 522,
    "function": null,
    "comment": "char_strings.hpp:522:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "char_strings.hpp",
    "line": 528,
    "function": null,
    "comment": "char_strings.hpp:528:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "char_strings.hpp",
    "line": 528,
    "function": null,
    "comment": "char_strings.hpp:528:  Constructors callable with one argument should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "char_strings.hpp",
    "line": 537,
    "function": null,
    "comment": "char_strings.hpp:537:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 537,
    "function": null,
    "comment": "char_strings.hpp:537:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "char_strings.hpp",
    "line": 537,
    "function": null,
    "comment": "char_strings.hpp:537:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "char_strings.hpp",
    "line": 557,
    "function": null,
    "comment": "char_strings.hpp:557:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 557,
    "function": null,
    "comment": "char_strings.hpp:557:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "char_strings.hpp",
    "line": 557,
    "function": null,
    "comment": "char_strings.hpp:557:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "char_strings.hpp",
    "line": 558,
    "function": null,
    "comment": "char_strings.hpp:558:  public: should be indented +1 space inside class Converter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "char_strings.hpp",
    "line": 564,
    "function": null,
    "comment": "char_strings.hpp:564:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 564,
    "function": null,
    "comment": "char_strings.hpp:564:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "char_strings.hpp",
    "line": 570,
    "function": null,
    "comment": "char_strings.hpp:570:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "char_strings.hpp",
    "line": 570,
    "function": null,
    "comment": "char_strings.hpp:570:  Constructors callable with one argument should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "char_strings.hpp",
    "line": 579,
    "function": null,
    "comment": "char_strings.hpp:579:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 579,
    "function": null,
    "comment": "char_strings.hpp:579:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "char_strings.hpp",
    "line": 579,
    "function": null,
    "comment": "char_strings.hpp:579:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "char_strings.hpp",
    "line": 579,
    "function": null,
    "comment": "char_strings.hpp:579:  Is this a non-const reference? If so, make const or use a pointer: long &input  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "char_strings.hpp",
    "line": 599,
    "function": null,
    "comment": "char_strings.hpp:599:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "char_strings.hpp",
    "line": 599,
    "function": null,
    "comment": "char_strings.hpp:599:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 599,
    "function": null,
    "comment": "char_strings.hpp:599:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "char_strings.hpp",
    "line": 599,
    "function": null,
    "comment": "char_strings.hpp:599:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "char_strings.hpp",
    "line": 600,
    "function": null,
    "comment": "char_strings.hpp:600:  public: should be indented +1 space inside class Converter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "char_strings.hpp",
    "line": 606,
    "function": null,
    "comment": "char_strings.hpp:606:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "char_strings.hpp",
    "line": 606,
    "function": null,
    "comment": "char_strings.hpp:606:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 606,
    "function": null,
    "comment": "char_strings.hpp:606:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "char_strings.hpp",
    "line": 613,
    "function": null,
    "comment": "char_strings.hpp:613:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "char_strings.hpp",
    "line": 613,
    "function": null,
    "comment": "char_strings.hpp:613:  Constructors callable with one argument should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "char_strings.hpp",
    "line": 623,
    "function": null,
    "comment": "char_strings.hpp:623:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 623,
    "function": null,
    "comment": "char_strings.hpp:623:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "char_strings.hpp",
    "line": 623,
    "function": null,
    "comment": "char_strings.hpp:623:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "char_strings.hpp",
    "line": 623,
    "function": null,
    "comment": "char_strings.hpp:623:  Is this a non-const reference? If so, make const or use a pointer: long &input  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "char_strings.hpp",
    "line": 638,
    "function": null,
    "comment": "char_strings.hpp:638:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 638,
    "function": null,
    "comment": "char_strings.hpp:638:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "char_strings.hpp",
    "line": 639,
    "function": null,
    "comment": "char_strings.hpp:639:  public: should be indented +1 space inside class Converter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "char_strings.hpp",
    "line": 648,
    "function": null,
    "comment": "char_strings.hpp:648:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "char_strings.hpp",
    "line": 648,
    "function": null,
    "comment": "char_strings.hpp:648:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 648,
    "function": null,
    "comment": "char_strings.hpp:648:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "char_strings.hpp",
    "line": 649,
    "function": null,
    "comment": "char_strings.hpp:649:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "char_strings.hpp",
    "line": 650,
    "function": null,
    "comment": "char_strings.hpp:650:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "char_strings.hpp",
    "line": 651,
    "function": null,
    "comment": "char_strings.hpp:651:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "char_strings.hpp",
    "line": 652,
    "function": null,
    "comment": "char_strings.hpp:652:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "char_strings.hpp",
    "line": 653,
    "function": null,
    "comment": "char_strings.hpp:653:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "char_strings.hpp",
    "line": 654,
    "function": null,
    "comment": "char_strings.hpp:654:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "char_strings.hpp",
    "line": 661,
    "function": null,
    "comment": "char_strings.hpp:661:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "char_strings.hpp",
    "line": 661,
    "function": null,
    "comment": "char_strings.hpp:661:  Constructors callable with one argument should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "char_strings.hpp",
    "line": 662,
    "function": null,
    "comment": "char_strings.hpp:662:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "char_strings.hpp",
    "line": 663,
    "function": null,
    "comment": "char_strings.hpp:663:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "char_strings.hpp",
    "line": 664,
    "function": null,
    "comment": "char_strings.hpp:664:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "char_strings.hpp",
    "line": 665,
    "function": null,
    "comment": "char_strings.hpp:665:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "char_strings.hpp",
    "line": 666,
    "function": null,
    "comment": "char_strings.hpp:666:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "char_strings.hpp",
    "line": 667,
    "function": null,
    "comment": "char_strings.hpp:667:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "char_strings.hpp",
    "line": 686,
    "function": null,
    "comment": "char_strings.hpp:686:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "char_strings.hpp",
    "line": 686,
    "function": null,
    "comment": "char_strings.hpp:686:  Extra space before ( in function call  [whitespace/parens] [0]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "char_strings.hpp",
    "line": 687,
    "function": null,
    "comment": "char_strings.hpp:687:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "char_strings.hpp",
    "line": 687,
    "function": null,
    "comment": "char_strings.hpp:687:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "char_strings.hpp",
    "line": 690,
    "function": null,
    "comment": "char_strings.hpp:690:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "char_strings.hpp",
    "line": 690,
    "function": null,
    "comment": "char_strings.hpp:690:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "char_strings.hpp",
    "line": 690,
    "function": null,
    "comment": "char_strings.hpp:690:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "char_strings.hpp",
    "line": 695,
    "function": null,
    "comment": "char_strings.hpp:695:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "char_strings.hpp",
    "line": 695,
    "function": null,
    "comment": "char_strings.hpp:695:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "char_strings.hpp",
    "line": 700,
    "function": null,
    "comment": "char_strings.hpp:700:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "char_strings.hpp",
    "line": 700,
    "function": null,
    "comment": "char_strings.hpp:700:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "char_strings.hpp",
    "line": 707,
    "function": null,
    "comment": "char_strings.hpp:707:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "char_strings.hpp",
    "line": 709,
    "function": null,
    "comment": "char_strings.hpp:709:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "char_strings.hpp",
    "line": 711,
    "function": null,
    "comment": "char_strings.hpp:711:  private: should be indented +1 space inside class Converter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The line before an access modifier (public, private, protected) should be blank, unless it is the beginning of the class.",
    "file": "char_strings.hpp",
    "line": 711,
    "function": null,
    "comment": "char_strings.hpp:711:  'private:' should be preceded by a blank line  [whitespace/blank_line] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","access-modifiers"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "char_strings.hpp",
    "line": 727,
    "function": null,
    "comment": "char_strings.hpp:727:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 727,
    "function": null,
    "comment": "char_strings.hpp:727:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "char_strings.hpp",
    "line": 728,
    "function": null,
    "comment": "char_strings.hpp:728:  public: should be indented +1 space inside class Converter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "char_strings.hpp",
    "line": 737,
    "function": null,
    "comment": "char_strings.hpp:737:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "char_strings.hpp",
    "line": 737,
    "function": null,
    "comment": "char_strings.hpp:737:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 737,
    "function": null,
    "comment": "char_strings.hpp:737:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "char_strings.hpp",
    "line": 738,
    "function": null,
    "comment": "char_strings.hpp:738:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "char_strings.hpp",
    "line": 739,
    "function": null,
    "comment": "char_strings.hpp:739:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "char_strings.hpp",
    "line": 740,
    "function": null,
    "comment": "char_strings.hpp:740:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "char_strings.hpp",
    "line": 741,
    "function": null,
    "comment": "char_strings.hpp:741:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "char_strings.hpp",
    "line": 742,
    "function": null,
    "comment": "char_strings.hpp:742:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "char_strings.hpp",
    "line": 743,
    "function": null,
    "comment": "char_strings.hpp:743:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "char_strings.hpp",
    "line": 750,
    "function": null,
    "comment": "char_strings.hpp:750:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "char_strings.hpp",
    "line": 750,
    "function": null,
    "comment": "char_strings.hpp:750:  Constructors callable with one argument should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "char_strings.hpp",
    "line": 751,
    "function": null,
    "comment": "char_strings.hpp:751:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "char_strings.hpp",
    "line": 752,
    "function": null,
    "comment": "char_strings.hpp:752:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "char_strings.hpp",
    "line": 753,
    "function": null,
    "comment": "char_strings.hpp:753:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "char_strings.hpp",
    "line": 754,
    "function": null,
    "comment": "char_strings.hpp:754:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "char_strings.hpp",
    "line": 755,
    "function": null,
    "comment": "char_strings.hpp:755:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "char_strings.hpp",
    "line": 756,
    "function": null,
    "comment": "char_strings.hpp:756:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "char_strings.hpp",
    "line": 775,
    "function": null,
    "comment": "char_strings.hpp:775:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "char_strings.hpp",
    "line": 775,
    "function": null,
    "comment": "char_strings.hpp:775:  Extra space before ( in function call  [whitespace/parens] [0]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "char_strings.hpp",
    "line": 776,
    "function": null,
    "comment": "char_strings.hpp:776:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "char_strings.hpp",
    "line": 776,
    "function": null,
    "comment": "char_strings.hpp:776:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "char_strings.hpp",
    "line": 779,
    "function": null,
    "comment": "char_strings.hpp:779:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "char_strings.hpp",
    "line": 779,
    "function": null,
    "comment": "char_strings.hpp:779:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "char_strings.hpp",
    "line": 779,
    "function": null,
    "comment": "char_strings.hpp:779:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "char_strings.hpp",
    "line": 784,
    "function": null,
    "comment": "char_strings.hpp:784:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "char_strings.hpp",
    "line": 784,
    "function": null,
    "comment": "char_strings.hpp:784:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "char_strings.hpp",
    "line": 789,
    "function": null,
    "comment": "char_strings.hpp:789:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "char_strings.hpp",
    "line": 789,
    "function": null,
    "comment": "char_strings.hpp:789:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "char_strings.hpp",
    "line": 795,
    "function": null,
    "comment": "char_strings.hpp:795:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "char_strings.hpp",
    "line": 797,
    "function": null,
    "comment": "char_strings.hpp:797:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "char_strings.hpp",
    "line": 799,
    "function": null,
    "comment": "char_strings.hpp:799:  private: should be indented +1 space inside class Converter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The line before an access modifier (public, private, protected) should be blank, unless it is the beginning of the class.",
    "file": "char_strings.hpp",
    "line": 799,
    "function": null,
    "comment": "char_strings.hpp:799:  'private:' should be preceded by a blank line  [whitespace/blank_line] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","access-modifiers"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "char_strings.hpp",
    "line": 819,
    "function": null,
    "comment": "char_strings.hpp:819:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 819,
    "function": null,
    "comment": "char_strings.hpp:819:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "char_strings.hpp",
    "line": 820,
    "function": null,
    "comment": "char_strings.hpp:820:  public: should be indented +1 space inside class Converter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "char_strings.hpp",
    "line": 833,
    "function": null,
    "comment": "char_strings.hpp:833:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "char_strings.hpp",
    "line": 833,
    "function": null,
    "comment": "char_strings.hpp:833:  Extra space before ( in function call  [whitespace/parens] [0]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 835,
    "function": null,
    "comment": "char_strings.hpp:835:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "char_strings.hpp",
    "line": 835,
    "function": null,
    "comment": "char_strings.hpp:835:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Avoid string printing C functions (sprintf, strcpy, strcat). Use snprintf instead.",
    "file": "char_strings.hpp",
    "line": 835,
    "function": null,
    "comment": "char_strings.hpp:835:  Almost always, snprintf is better than strcat  [runtime/printf] [4]",
    "tags": ["code-standards","google-cpp","strings","deprecation","library"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 854,
    "function": null,
    "comment": "char_strings.hpp:854:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 855,
    "function": null,
    "comment": "char_strings.hpp:855:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 856,
    "function": null,
    "comment": "char_strings.hpp:856:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "char_strings.hpp",
    "line": 856,
    "function": null,
    "comment": "char_strings.hpp:856:  Use int16/int64/etc, rather than the C type short  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 857,
    "function": null,
    "comment": "char_strings.hpp:857:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 858,
    "function": null,
    "comment": "char_strings.hpp:858:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "char_strings.hpp",
    "line": 858,
    "function": null,
    "comment": "char_strings.hpp:858:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 859,
    "function": null,
    "comment": "char_strings.hpp:859:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 860,
    "function": null,
    "comment": "char_strings.hpp:860:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "char_strings.hpp",
    "line": 860,
    "function": null,
    "comment": "char_strings.hpp:860:  Use int16/int64/etc, rather than the C type short  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 861,
    "function": null,
    "comment": "char_strings.hpp:861:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 862,
    "function": null,
    "comment": "char_strings.hpp:862:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "char_strings.hpp",
    "line": 862,
    "function": null,
    "comment": "char_strings.hpp:862:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 863,
    "function": null,
    "comment": "char_strings.hpp:863:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 864,
    "function": null,
    "comment": "char_strings.hpp:864:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 865,
    "function": null,
    "comment": "char_strings.hpp:865:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "char_strings.hpp",
    "line": 865,
    "function": null,
    "comment": "char_strings.hpp:865:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 866,
    "function": null,
    "comment": "char_strings.hpp:866:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "char_strings.hpp",
    "line": 866,
    "function": null,
    "comment": "char_strings.hpp:866:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 867,
    "function": null,
    "comment": "char_strings.hpp:867:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "char_strings.hpp",
    "line": 868,
    "function": null,
    "comment": "char_strings.hpp:868:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "char_strings.hpp",
    "line": 869,
    "function": null,
    "comment": "char_strings.hpp:869:  public: should be indented +1 space inside class Converter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "char_strings.hpp",
    "line": 875,
    "function": null,
    "comment": "char_strings.hpp:875:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "char_strings.hpp",
    "line": 875,
    "function": null,
    "comment": "char_strings.hpp:875:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 875,
    "function": null,
    "comment": "char_strings.hpp:875:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "char_strings.hpp",
    "line": 883,
    "function": null,
    "comment": "char_strings.hpp:883:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "char_strings.hpp",
    "line": 883,
    "function": null,
    "comment": "char_strings.hpp:883:  Constructors callable with one argument should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 888,
    "function": null,
    "comment": "char_strings.hpp:888:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 889,
    "function": null,
    "comment": "char_strings.hpp:889:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "char_strings.hpp",
    "line": 889,
    "function": null,
    "comment": "char_strings.hpp:889:  Use int16/int64/etc, rather than the C type short  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 890,
    "function": null,
    "comment": "char_strings.hpp:890:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 891,
    "function": null,
    "comment": "char_strings.hpp:891:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "char_strings.hpp",
    "line": 891,
    "function": null,
    "comment": "char_strings.hpp:891:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 892,
    "function": null,
    "comment": "char_strings.hpp:892:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 893,
    "function": null,
    "comment": "char_strings.hpp:893:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "char_strings.hpp",
    "line": 893,
    "function": null,
    "comment": "char_strings.hpp:893:  Use int16/int64/etc, rather than the C type short  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 894,
    "function": null,
    "comment": "char_strings.hpp:894:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 895,
    "function": null,
    "comment": "char_strings.hpp:895:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "char_strings.hpp",
    "line": 895,
    "function": null,
    "comment": "char_strings.hpp:895:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 896,
    "function": null,
    "comment": "char_strings.hpp:896:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 897,
    "function": null,
    "comment": "char_strings.hpp:897:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 898,
    "function": null,
    "comment": "char_strings.hpp:898:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "char_strings.hpp",
    "line": 898,
    "function": null,
    "comment": "char_strings.hpp:898:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 899,
    "function": null,
    "comment": "char_strings.hpp:899:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "char_strings.hpp",
    "line": 899,
    "function": null,
    "comment": "char_strings.hpp:899:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "char_strings.hpp",
    "line": 900,
    "function": null,
    "comment": "char_strings.hpp:900:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "char_strings.hpp",
    "line": 903,
    "function": null,
    "comment": "char_strings.hpp:903:  Namespace should be terminated with '// namespace ecl'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "char_strings.hpp",
    "line": 903,
    "function": null,
    "comment": "char_strings.hpp:903:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "converter.hpp",
    "line": null,
    "function": null,
    "comment": "converter.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "converter.hpp",
    "line": 25,
    "function": null,
    "comment": "converter.hpp:25:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "converter.hpp",
    "line": 29,
    "function": null,
    "comment": "converter.hpp:29:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "converter.hpp",
    "line": 31,
    "function": null,
    "comment": "converter.hpp:31:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "converter.hpp",
    "line": 32,
    "function": null,
    "comment": "converter.hpp:32:  public: should be indented +1 space inside class ConverterBase  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "converter.hpp",
    "line": 33,
    "function": null,
    "comment": "converter.hpp:33:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Do not use meaningless empty statements.",
    "file": "converter.hpp",
    "line": 33,
    "function": null,
    "comment": "converter.hpp:33:  You don't need a ; after a }  [readability/braces] [4]",
    "tags": ["code-standards","google-cpp","empty-statement","ambiguous-code"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "converter.hpp",
    "line": 34,
    "function": null,
    "comment": "converter.hpp:34:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "converter.hpp",
    "line": 35,
    "function": null,
    "comment": "converter.hpp:35:  protected: should be indented +1 space inside class ConverterBase  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "converter.hpp",
    "line": 36,
    "function": null,
    "comment": "converter.hpp:36:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "converter.hpp",
    "line": 38,
    "function": null,
    "comment": "converter.hpp:38:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "converter.hpp",
    "line": 56,
    "function": null,
    "comment": "converter.hpp:56:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "converter.hpp",
    "line": 57,
    "function": null,
    "comment": "converter.hpp:57:  public: should be indented +1 space inside class Converter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "converter.hpp",
    "line": 58,
    "function": null,
    "comment": "converter.hpp:58:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "converter.hpp",
    "line": 59,
    "function": null,
    "comment": "converter.hpp:59:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "converter.hpp",
    "line": 71,
    "function": null,
    "comment": "converter.hpp:71:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "converter.hpp",
    "line": 71,
    "function": null,
    "comment": "converter.hpp:71:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "converter.hpp",
    "line": 72,
    "function": null,
    "comment": "converter.hpp:72:  public: should be indented +1 space inside class Converter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "converter.hpp",
    "line": 75,
    "function": null,
    "comment": "converter.hpp:75:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "converter.hpp",
    "line": 76,
    "function": null,
    "comment": "converter.hpp:76:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "converter.hpp",
    "line": 91,
    "function": null,
    "comment": "converter.hpp:91:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "converter.hpp",
    "line": 91,
    "function": null,
    "comment": "converter.hpp:91:  Extra space before ( in function call  [whitespace/parens] [0]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "converter.hpp",
    "line": 92,
    "function": null,
    "comment": "converter.hpp:92:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "converter.hpp",
    "line": 106,
    "function": null,
    "comment": "converter.hpp:106:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "converter.hpp",
    "line": 106,
    "function": null,
    "comment": "converter.hpp:106:  Extra space before ( in function call  [whitespace/parens] [0]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "converter.hpp",
    "line": 107,
    "function": null,
    "comment": "converter.hpp:107:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "converter.hpp",
    "line": 111,
    "function": null,
    "comment": "converter.hpp:111:  Namespace should be terminated with '// namespace ecl'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "converter.hpp",
    "line": 111,
    "function": null,
    "comment": "converter.hpp:111:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "to_byte_array.hpp",
    "line": null,
    "function": null,
    "comment": "to_byte_array.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "to_byte_array.hpp",
    "line": 20,
    "function": null,
    "comment": "to_byte_array.hpp:20:  Found C system header after C++ system header. Should be: to_byte_array.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "to_byte_array.hpp",
    "line": 21,
    "function": null,
    "comment": "to_byte_array.hpp:21:  Found C system header after C++ system header. Should be: to_byte_array.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "to_byte_array.hpp",
    "line": 22,
    "function": null,
    "comment": "to_byte_array.hpp:22:  Found C system header after C++ system header. Should be: to_byte_array.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "to_byte_array.hpp",
    "line": 23,
    "function": null,
    "comment": "to_byte_array.hpp:23:  Found C system header after C++ system header. Should be: to_byte_array.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "to_byte_array.hpp",
    "line": 24,
    "function": null,
    "comment": "to_byte_array.hpp:24:  Found C system header after C++ system header. Should be: to_byte_array.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "to_byte_array.hpp",
    "line": 25,
    "function": null,
    "comment": "to_byte_array.hpp:25:  Found C system header after C++ system header. Should be: to_byte_array.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "to_byte_array.hpp",
    "line": 27,
    "function": null,
    "comment": "to_byte_array.hpp:27:  Found C++ system header after other header. Should be: to_byte_array.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "to_byte_array.hpp",
    "line": 33,
    "function": null,
    "comment": "to_byte_array.hpp:33:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "to_byte_array.hpp",
    "line": 39,
    "function": null,
    "comment": "to_byte_array.hpp:39:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "to_byte_array.hpp",
    "line": 57,
    "function": null,
    "comment": "to_byte_array.hpp:57:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "to_byte_array.hpp",
    "line": 58,
    "function": null,
    "comment": "to_byte_array.hpp:58:  public: should be indented +1 space inside class IntegralToByteArray  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "to_byte_array.hpp",
    "line": 78,
    "function": null,
    "comment": "to_byte_array.hpp:78:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "to_byte_array.hpp",
    "line": 78,
    "function": null,
    "comment": "to_byte_array.hpp:78:  Is this a non-const reference? If so, make const or use a pointer: ByteArray &byte_array  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "to_byte_array.hpp",
    "line": 79,
    "function": null,
    "comment": "to_byte_array.hpp:79:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "to_byte_array.hpp",
    "line": 90,
    "function": null,
    "comment": "to_byte_array.hpp:90:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "to_byte_array.hpp",
    "line": 93,
    "function": null,
    "comment": "to_byte_array.hpp:93:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "to_byte_array.hpp",
    "line": 93,
    "function": null,
    "comment": "to_byte_array.hpp:93:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "to_byte_array.hpp",
    "line": 102,
    "function": null,
    "comment": "to_byte_array.hpp:102:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "to_byte_array.hpp",
    "line": 103,
    "function": null,
    "comment": "to_byte_array.hpp:103:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "to_byte_array.hpp",
    "line": 105,
    "function": null,
    "comment": "to_byte_array.hpp:105:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "to_byte_array.hpp",
    "line": 115,
    "function": null,
    "comment": "to_byte_array.hpp:115:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "to_byte_array.hpp",
    "line": 127,
    "function": null,
    "comment": "to_byte_array.hpp:127:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "to_byte_array.hpp",
    "line": 128,
    "function": null,
    "comment": "to_byte_array.hpp:128:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "to_byte_array.hpp",
    "line": 135,
    "function": null,
    "comment": "to_byte_array.hpp:135:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "to_byte_array.hpp",
    "line": 137,
    "function": null,
    "comment": "to_byte_array.hpp:137:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "to_byte_array.hpp",
    "line": 144,
    "function": null,
    "comment": "to_byte_array.hpp:144:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "to_byte_array.hpp",
    "line": 145,
    "function": null,
    "comment": "to_byte_array.hpp:145:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "to_byte_array.hpp",
    "line": 152,
    "function": null,
    "comment": "to_byte_array.hpp:152:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "to_byte_array.hpp",
    "line": 154,
    "function": null,
    "comment": "to_byte_array.hpp:154:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "to_byte_array.hpp",
    "line": 161,
    "function": null,
    "comment": "to_byte_array.hpp:161:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "to_byte_array.hpp",
    "line": 163,
    "function": null,
    "comment": "to_byte_array.hpp:163:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "to_byte_array.hpp",
    "line": 170,
    "function": null,
    "comment": "to_byte_array.hpp:170:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "to_byte_array.hpp",
    "line": 172,
    "function": null,
    "comment": "to_byte_array.hpp:172:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "to_byte_array.hpp",
    "line": 179,
    "function": null,
    "comment": "to_byte_array.hpp:179:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "to_byte_array.hpp",
    "line": 179,
    "function": null,
    "comment": "to_byte_array.hpp:179:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "to_byte_array.hpp",
    "line": 180,
    "function": null,
    "comment": "to_byte_array.hpp:180:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "to_byte_array.hpp",
    "line": 187,
    "function": null,
    "comment": "to_byte_array.hpp:187:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "to_byte_array.hpp",
    "line": 187,
    "function": null,
    "comment": "to_byte_array.hpp:187:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "to_byte_array.hpp",
    "line": 188,
    "function": null,
    "comment": "to_byte_array.hpp:188:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "to_byte_array.hpp",
    "line": 189,
    "function": null,
    "comment": "to_byte_array.hpp:189:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "to_byte_array.hpp",
    "line": 196,
    "function": null,
    "comment": "to_byte_array.hpp:196:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "to_byte_array.hpp",
    "line": 196,
    "function": null,
    "comment": "to_byte_array.hpp:196:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "to_byte_array.hpp",
    "line": 197,
    "function": null,
    "comment": "to_byte_array.hpp:197:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "to_byte_array.hpp",
    "line": 204,
    "function": null,
    "comment": "to_byte_array.hpp:204:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "to_byte_array.hpp",
    "line": 204,
    "function": null,
    "comment": "to_byte_array.hpp:204:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "to_byte_array.hpp",
    "line": 205,
    "function": null,
    "comment": "to_byte_array.hpp:205:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "to_byte_array.hpp",
    "line": 206,
    "function": null,
    "comment": "to_byte_array.hpp:206:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "to_byte_array.hpp",
    "line": 213,
    "function": null,
    "comment": "to_byte_array.hpp:213:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "to_byte_array.hpp",
    "line": 213,
    "function": null,
    "comment": "to_byte_array.hpp:213:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "to_byte_array.hpp",
    "line": 214,
    "function": null,
    "comment": "to_byte_array.hpp:214:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "to_byte_array.hpp",
    "line": 215,
    "function": null,
    "comment": "to_byte_array.hpp:215:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "to_byte_array.hpp",
    "line": 222,
    "function": null,
    "comment": "to_byte_array.hpp:222:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "to_byte_array.hpp",
    "line": 222,
    "function": null,
    "comment": "to_byte_array.hpp:222:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "to_byte_array.hpp",
    "line": 223,
    "function": null,
    "comment": "to_byte_array.hpp:223:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "to_byte_array.hpp",
    "line": 224,
    "function": null,
    "comment": "to_byte_array.hpp:224:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "to_byte_array.hpp",
    "line": 231,
    "function": null,
    "comment": "to_byte_array.hpp:231:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "to_byte_array.hpp",
    "line": 231,
    "function": null,
    "comment": "to_byte_array.hpp:231:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "to_byte_array.hpp",
    "line": 232,
    "function": null,
    "comment": "to_byte_array.hpp:232:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "to_byte_array.hpp",
    "line": 239,
    "function": null,
    "comment": "to_byte_array.hpp:239:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "to_byte_array.hpp",
    "line": 239,
    "function": null,
    "comment": "to_byte_array.hpp:239:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "to_byte_array.hpp",
    "line": 240,
    "function": null,
    "comment": "to_byte_array.hpp:240:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "to_byte_array.hpp",
    "line": 241,
    "function": null,
    "comment": "to_byte_array.hpp:241:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "to_byte_array.hpp",
    "line": 248,
    "function": null,
    "comment": "to_byte_array.hpp:248:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "to_byte_array.hpp",
    "line": 248,
    "function": null,
    "comment": "to_byte_array.hpp:248:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "to_byte_array.hpp",
    "line": 249,
    "function": null,
    "comment": "to_byte_array.hpp:249:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "to_byte_array.hpp",
    "line": 264,
    "function": null,
    "comment": "to_byte_array.hpp:264:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "to_byte_array.hpp",
    "line": 265,
    "function": null,
    "comment": "to_byte_array.hpp:265:  public: should be indented +1 space inside class Converter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "to_byte_array.hpp",
    "line": 283,
    "function": null,
    "comment": "to_byte_array.hpp:283:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "to_byte_array.hpp",
    "line": 283,
    "function": null,
    "comment": "to_byte_array.hpp:283:  Extra space before ( in function call  [whitespace/parens] [0]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "to_byte_array.hpp",
    "line": 284,
    "function": null,
    "comment": "to_byte_array.hpp:284:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "to_byte_array.hpp",
    "line": 285,
    "function": null,
    "comment": "to_byte_array.hpp:285:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "to_byte_array.hpp",
    "line": 290,
    "function": null,
    "comment": "to_byte_array.hpp:290:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "to_byte_array.hpp",
    "line": 292,
    "function": null,
    "comment": "to_byte_array.hpp:292:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "to_byte_array.hpp",
    "line": 296,
    "function": null,
    "comment": "to_byte_array.hpp:296:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "to_byte_array.hpp",
    "line": 299,
    "function": null,
    "comment": "to_byte_array.hpp:299:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "to_byte_array.hpp",
    "line": 300,
    "function": null,
    "comment": "to_byte_array.hpp:300:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "to_byte_array.hpp",
    "line": 303,
    "function": null,
    "comment": "to_byte_array.hpp:303:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "to_byte_array.hpp",
    "line": 304,
    "function": null,
    "comment": "to_byte_array.hpp:304:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "to_byte_array.hpp",
    "line": 305,
    "function": null,
    "comment": "to_byte_array.hpp:305:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "to_byte_array.hpp",
    "line": 315,
    "function": null,
    "comment": "to_byte_array.hpp:315:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "to_byte_array.hpp",
    "line": 318,
    "function": null,
    "comment": "to_byte_array.hpp:318:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "to_byte_array.hpp",
    "line": 319,
    "function": null,
    "comment": "to_byte_array.hpp:319:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "to_byte_array.hpp",
    "line": 320,
    "function": null,
    "comment": "to_byte_array.hpp:320:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "to_byte_array.hpp",
    "line": 330,
    "function": null,
    "comment": "to_byte_array.hpp:330:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "to_byte_array.hpp",
    "line": 334,
    "function": null,
    "comment": "to_byte_array.hpp:334:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "to_byte_array.hpp",
    "line": 335,
    "function": null,
    "comment": "to_byte_array.hpp:335:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "to_byte_array.hpp",
    "line": 339,
    "function": null,
    "comment": "to_byte_array.hpp:339:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "to_byte_array.hpp",
    "line": 340,
    "function": null,
    "comment": "to_byte_array.hpp:340:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "to_byte_array.hpp",
    "line": 344,
    "function": null,
    "comment": "to_byte_array.hpp:344:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "to_byte_array.hpp",
    "line": 345,
    "function": null,
    "comment": "to_byte_array.hpp:345:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "to_byte_array.hpp",
    "line": 346,
    "function": null,
    "comment": "to_byte_array.hpp:346:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "to_byte_array.hpp",
    "line": 356,
    "function": null,
    "comment": "to_byte_array.hpp:356:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "to_byte_array.hpp",
    "line": 360,
    "function": null,
    "comment": "to_byte_array.hpp:360:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "to_byte_array.hpp",
    "line": 361,
    "function": null,
    "comment": "to_byte_array.hpp:361:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "to_byte_array.hpp",
    "line": 365,
    "function": null,
    "comment": "to_byte_array.hpp:365:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "to_byte_array.hpp",
    "line": 366,
    "function": null,
    "comment": "to_byte_array.hpp:366:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "to_byte_array.hpp",
    "line": 370,
    "function": null,
    "comment": "to_byte_array.hpp:370:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "to_byte_array.hpp",
    "line": 371,
    "function": null,
    "comment": "to_byte_array.hpp:371:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "to_byte_array.hpp",
    "line": 372,
    "function": null,
    "comment": "to_byte_array.hpp:372:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Don't use a semicolon to denote an empty statement. Use {} instead.",
    "file": "to_byte_array.hpp",
    "line": 390,
    "function": null,
    "comment": "to_byte_array.hpp:390:  Line contains only semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","google-cpp","semicolon","empty-statement","empty-block"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "to_byte_array.hpp",
    "line": 392,
    "function": null,
    "comment": "to_byte_array.hpp:392:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "to_byte_array.hpp",
    "line": 395,
    "function": null,
    "comment": "to_byte_array.hpp:395:  private: should be indented +1 space inside class Converter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "to_byte_array.hpp",
    "line": 411,
    "function": null,
    "comment": "to_byte_array.hpp:411:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "to_byte_array.hpp",
    "line": 413,
    "function": null,
    "comment": "to_byte_array.hpp:413:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "to_byte_array.hpp",
    "line": 414,
    "function": null,
    "comment": "to_byte_array.hpp:414:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "to_byte_array.hpp",
    "line": 415,
    "function": null,
    "comment": "to_byte_array.hpp:415:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "to_byte_array.hpp",
    "line": 415,
    "function": null,
    "comment": "to_byte_array.hpp:415:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "to_byte_array.hpp",
    "line": 416,
    "function": null,
    "comment": "to_byte_array.hpp:416:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "to_byte_array.hpp",
    "line": 417,
    "function": null,
    "comment": "to_byte_array.hpp:417:  public: should be indented +1 space inside class Converter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "to_byte_array.hpp",
    "line": 419,
    "function": null,
    "comment": "to_byte_array.hpp:419:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "to_byte_array.hpp",
    "line": 425,
    "function": null,
    "comment": "to_byte_array.hpp:425:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "to_byte_array.hpp",
    "line": 426,
    "function": null,
    "comment": "to_byte_array.hpp:426:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "to_byte_array.hpp",
    "line": 433,
    "function": null,
    "comment": "to_byte_array.hpp:433:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "to_byte_array.hpp",
    "line": 434,
    "function": null,
    "comment": "to_byte_array.hpp:434:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "to_byte_array.hpp",
    "line": 435,
    "function": null,
    "comment": "to_byte_array.hpp:435:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "to_byte_array.hpp",
    "line": 435,
    "function": null,
    "comment": "to_byte_array.hpp:435:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "to_byte_array.hpp",
    "line": 436,
    "function": null,
    "comment": "to_byte_array.hpp:436:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "to_byte_array.hpp",
    "line": 436,
    "function": null,
    "comment": "to_byte_array.hpp:436:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "to_byte_array.hpp",
    "line": 437,
    "function": null,
    "comment": "to_byte_array.hpp:437:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "to_byte_array.hpp",
    "line": 438,
    "function": null,
    "comment": "to_byte_array.hpp:438:  public: should be indented +1 space inside class Converter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "to_byte_array.hpp",
    "line": 440,
    "function": null,
    "comment": "to_byte_array.hpp:440:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "to_byte_array.hpp",
    "line": 445,
    "function": null,
    "comment": "to_byte_array.hpp:445:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "to_byte_array.hpp",
    "line": 446,
    "function": null,
    "comment": "to_byte_array.hpp:446:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "to_byte_array.hpp",
    "line": 453,
    "function": null,
    "comment": "to_byte_array.hpp:453:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "to_byte_array.hpp",
    "line": 454,
    "function": null,
    "comment": "to_byte_array.hpp:454:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "to_byte_array.hpp",
    "line": 455,
    "function": null,
    "comment": "to_byte_array.hpp:455:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "to_byte_array.hpp",
    "line": 455,
    "function": null,
    "comment": "to_byte_array.hpp:455:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "to_byte_array.hpp",
    "line": 456,
    "function": null,
    "comment": "to_byte_array.hpp:456:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "to_byte_array.hpp",
    "line": 456,
    "function": null,
    "comment": "to_byte_array.hpp:456:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "to_byte_array.hpp",
    "line": 457,
    "function": null,
    "comment": "to_byte_array.hpp:457:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "to_byte_array.hpp",
    "line": 458,
    "function": null,
    "comment": "to_byte_array.hpp:458:  public: should be indented +1 space inside class Converter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "to_byte_array.hpp",
    "line": 460,
    "function": null,
    "comment": "to_byte_array.hpp:460:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "to_byte_array.hpp",
    "line": 465,
    "function": null,
    "comment": "to_byte_array.hpp:465:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "to_byte_array.hpp",
    "line": 466,
    "function": null,
    "comment": "to_byte_array.hpp:466:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "to_byte_array.hpp",
    "line": 469,
    "function": null,
    "comment": "to_byte_array.hpp:469:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "to_byte_array.hpp",
    "line": 101,
    "function": null,
    "comment": "to_byte_array.hpp:101:  Add #include <limits> for numeric_limits<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "from_byte_array.hpp",
    "line": null,
    "function": null,
    "comment": "from_byte_array.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "from_byte_array.hpp",
    "line": 20,
    "function": null,
    "comment": "from_byte_array.hpp:20:  Found C system header after C++ system header. Should be: from_byte_array.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "from_byte_array.hpp",
    "line": 21,
    "function": null,
    "comment": "from_byte_array.hpp:21:  Found C system header after C++ system header. Should be: from_byte_array.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "from_byte_array.hpp",
    "line": 22,
    "function": null,
    "comment": "from_byte_array.hpp:22:  Found C system header after C++ system header. Should be: from_byte_array.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "from_byte_array.hpp",
    "line": 23,
    "function": null,
    "comment": "from_byte_array.hpp:23:  Found C system header after C++ system header. Should be: from_byte_array.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "from_byte_array.hpp",
    "line": 24,
    "function": null,
    "comment": "from_byte_array.hpp:24:  Found C system header after C++ system header. Should be: from_byte_array.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "from_byte_array.hpp",
    "line": 25,
    "function": null,
    "comment": "from_byte_array.hpp:25:  Found C system header after C++ system header. Should be: from_byte_array.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "from_byte_array.hpp",
    "line": 26,
    "function": null,
    "comment": "from_byte_array.hpp:26:  Found C system header after C++ system header. Should be: from_byte_array.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "from_byte_array.hpp",
    "line": 34,
    "function": null,
    "comment": "from_byte_array.hpp:34:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "from_byte_array.hpp",
    "line": 39,
    "function": null,
    "comment": "from_byte_array.hpp:39:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "from_byte_array.hpp",
    "line": 57,
    "function": null,
    "comment": "from_byte_array.hpp:57:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "from_byte_array.hpp",
    "line": 58,
    "function": null,
    "comment": "from_byte_array.hpp:58:  public: should be indented +1 space inside class FromByteArray  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "from_byte_array.hpp",
    "line": 76,
    "function": null,
    "comment": "from_byte_array.hpp:76:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "from_byte_array.hpp",
    "line": 77,
    "function": null,
    "comment": "from_byte_array.hpp:77:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "from_byte_array.hpp",
    "line": 84,
    "function": null,
    "comment": "from_byte_array.hpp:84:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "from_byte_array.hpp",
    "line": 86,
    "function": null,
    "comment": "from_byte_array.hpp:86:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "from_byte_array.hpp",
    "line": 86,
    "function": null,
    "comment": "from_byte_array.hpp:86:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "from_byte_array.hpp",
    "line": 94,
    "function": null,
    "comment": "from_byte_array.hpp:94:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "from_byte_array.hpp",
    "line": 98,
    "function": null,
    "comment": "from_byte_array.hpp:98:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "from_byte_array.hpp",
    "line": 102,
    "function": null,
    "comment": "from_byte_array.hpp:102:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "from_byte_array.hpp",
    "line": 103,
    "function": null,
    "comment": "from_byte_array.hpp:103:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "from_byte_array.hpp",
    "line": 113,
    "function": null,
    "comment": "from_byte_array.hpp:113:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "from_byte_array.hpp",
    "line": 125,
    "function": null,
    "comment": "from_byte_array.hpp:125:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "from_byte_array.hpp",
    "line": 131,
    "function": null,
    "comment": "from_byte_array.hpp:131:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "from_byte_array.hpp",
    "line": 133,
    "function": null,
    "comment": "from_byte_array.hpp:133:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "from_byte_array.hpp",
    "line": 139,
    "function": null,
    "comment": "from_byte_array.hpp:139:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "from_byte_array.hpp",
    "line": 141,
    "function": null,
    "comment": "from_byte_array.hpp:141:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "from_byte_array.hpp",
    "line": 144,
    "function": null,
    "comment": "from_byte_array.hpp:144:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "from_byte_array.hpp",
    "line": 83,
    "function": null,
    "comment": "from_byte_array.hpp:83:  Add #include <limits> for numeric_limits<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "byte_array_converters.cpp",
    "line": null,
    "function": null,
    "comment": "byte_array_converters.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "byte_array_converters.cpp",
    "line": 15,
    "function": null,
    "comment": "byte_array_converters.cpp:15:  Found C system header after C++ system header. Should be: byte_array_converters.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "byte_array_converters.cpp",
    "line": 16,
    "function": null,
    "comment": "byte_array_converters.cpp:16:  Found C system header after C++ system header. Should be: byte_array_converters.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "byte_array_converters.cpp",
    "line": 18,
    "function": null,
    "comment": "byte_array_converters.cpp:18:  Include '../../include/ecl/converters/from_byte_array.hpp' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "byte_array_converters.cpp",
    "line": 38,
    "function": null,
    "comment": "byte_array_converters.cpp:38:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "byte_array_converters.cpp",
    "line": 39,
    "function": null,
    "comment": "byte_array_converters.cpp:39:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "byte_array_converters.cpp",
    "line": 39,
    "function": null,
    "comment": "byte_array_converters.cpp:39:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "byte_array_converters.cpp",
    "line": 40,
    "function": null,
    "comment": "byte_array_converters.cpp:40:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "byte_array_converters.cpp",
    "line": 41,
    "function": null,
    "comment": "byte_array_converters.cpp:41:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "byte_array_converters.cpp",
    "line": 41,
    "function": null,
    "comment": "byte_array_converters.cpp:41:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "byte_array_converters.cpp",
    "line": 42,
    "function": null,
    "comment": "byte_array_converters.cpp:42:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "byte_array_converters.cpp",
    "line": 43,
    "function": null,
    "comment": "byte_array_converters.cpp:43:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "byte_array_converters.cpp",
    "line": 44,
    "function": null,
    "comment": "byte_array_converters.cpp:44:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "byte_array_converters.cpp",
    "line": 47,
    "function": null,
    "comment": "byte_array_converters.cpp:47:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "byte_array_converters.cpp",
    "line": 48,
    "function": null,
    "comment": "byte_array_converters.cpp:48:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "byte_array_converters.cpp",
    "line": 48,
    "function": null,
    "comment": "byte_array_converters.cpp:48:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "byte_array_converters.cpp",
    "line": 49,
    "function": null,
    "comment": "byte_array_converters.cpp:49:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "byte_array_converters.cpp",
    "line": 50,
    "function": null,
    "comment": "byte_array_converters.cpp:50:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "byte_array_converters.cpp",
    "line": 50,
    "function": null,
    "comment": "byte_array_converters.cpp:50:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "byte_array_converters.cpp",
    "line": 51,
    "function": null,
    "comment": "byte_array_converters.cpp:51:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "byte_array_converters.cpp",
    "line": 52,
    "function": null,
    "comment": "byte_array_converters.cpp:52:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "byte_array_converters.cpp",
    "line": 53,
    "function": null,
    "comment": "byte_array_converters.cpp:53:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "byte_array_converters.cpp",
    "line": 59,
    "function": null,
    "comment": "byte_array_converters.cpp:59:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "byte_array_converters.cpp",
    "line": 59,
    "function": null,
    "comment": "byte_array_converters.cpp:59:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "byte_array_converters.cpp",
    "line": 60,
    "function": null,
    "comment": "byte_array_converters.cpp:60:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "byte_array_converters.cpp",
    "line": 61,
    "function": null,
    "comment": "byte_array_converters.cpp:61:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "byte_array_converters.cpp",
    "line": 62,
    "function": null,
    "comment": "byte_array_converters.cpp:62:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "byte_array_converters.cpp",
    "line": 63,
    "function": null,
    "comment": "byte_array_converters.cpp:63:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "byte_array_converters.cpp",
    "line": 64,
    "function": null,
    "comment": "byte_array_converters.cpp:64:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "byte_array_converters.cpp",
    "line": 64,
    "function": null,
    "comment": "byte_array_converters.cpp:64:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "byte_array_converters.cpp",
    "line": 65,
    "function": null,
    "comment": "byte_array_converters.cpp:65:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "byte_array_converters.cpp",
    "line": 65,
    "function": null,
    "comment": "byte_array_converters.cpp:65:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "byte_array_converters.cpp",
    "line": 65,
    "function": null,
    "comment": "byte_array_converters.cpp:65:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "byte_array_converters.cpp",
    "line": 66,
    "function": null,
    "comment": "byte_array_converters.cpp:66:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "byte_array_converters.cpp",
    "line": 69,
    "function": null,
    "comment": "byte_array_converters.cpp:69:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "byte_array_converters.cpp",
    "line": 69,
    "function": null,
    "comment": "byte_array_converters.cpp:69:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "byte_array_converters.cpp",
    "line": 70,
    "function": null,
    "comment": "byte_array_converters.cpp:70:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "byte_array_converters.cpp",
    "line": 71,
    "function": null,
    "comment": "byte_array_converters.cpp:71:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "byte_array_converters.cpp",
    "line": 71,
    "function": null,
    "comment": "byte_array_converters.cpp:71:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "byte_array_converters.cpp",
    "line": 72,
    "function": null,
    "comment": "byte_array_converters.cpp:72:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "byte_array_converters.cpp",
    "line": 73,
    "function": null,
    "comment": "byte_array_converters.cpp:73:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "byte_array_converters.cpp",
    "line": 74,
    "function": null,
    "comment": "byte_array_converters.cpp:74:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "byte_array_converters.cpp",
    "line": 75,
    "function": null,
    "comment": "byte_array_converters.cpp:75:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "byte_array_converters.cpp",
    "line": 76,
    "function": null,
    "comment": "byte_array_converters.cpp:76:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "byte_array_converters.cpp",
    "line": 77,
    "function": null,
    "comment": "byte_array_converters.cpp:77:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "byte_array_converters.cpp",
    "line": 80,
    "function": null,
    "comment": "byte_array_converters.cpp:80:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "byte_array_converters.cpp",
    "line": 81,
    "function": null,
    "comment": "byte_array_converters.cpp:81:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "byte_array_converters.cpp",
    "line": 83,
    "function": null,
    "comment": "byte_array_converters.cpp:83:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "byte_array_converters.cpp",
    "line": 85,
    "function": null,
    "comment": "byte_array_converters.cpp:85:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "byte_array_converters.cpp",
    "line": 87,
    "function": null,
    "comment": "byte_array_converters.cpp:87:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "byte_array_converters.cpp",
    "line": 88,
    "function": null,
    "comment": "byte_array_converters.cpp:88:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "byte_array_converters.cpp",
    "line": 91,
    "function": null,
    "comment": "byte_array_converters.cpp:91:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "byte_array_converters.cpp",
    "line": 91,
    "function": null,
    "comment": "byte_array_converters.cpp:91:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "byte_array_converters.cpp",
    "line": 92,
    "function": null,
    "comment": "byte_array_converters.cpp:92:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "byte_array_converters.cpp",
    "line": 93,
    "function": null,
    "comment": "byte_array_converters.cpp:93:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "byte_array_converters.cpp",
    "line": 94,
    "function": null,
    "comment": "byte_array_converters.cpp:94:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "byte_array_converters.cpp",
    "line": 95,
    "function": null,
    "comment": "byte_array_converters.cpp:95:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "byte_array_converters.cpp",
    "line": 95,
    "function": null,
    "comment": "byte_array_converters.cpp:95:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "byte_array_converters.cpp",
    "line": 96,
    "function": null,
    "comment": "byte_array_converters.cpp:96:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "byte_array_converters.cpp",
    "line": 97,
    "function": null,
    "comment": "byte_array_converters.cpp:97:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "byte_array_converters.cpp",
    "line": 97,
    "function": null,
    "comment": "byte_array_converters.cpp:97:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "byte_array_converters.cpp",
    "line": 97,
    "function": null,
    "comment": "byte_array_converters.cpp:97:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "byte_array_converters.cpp",
    "line": 98,
    "function": null,
    "comment": "byte_array_converters.cpp:98:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "byte_array_converters.cpp",
    "line": 98,
    "function": null,
    "comment": "byte_array_converters.cpp:98:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "byte_array_converters.cpp",
    "line": 99,
    "function": null,
    "comment": "byte_array_converters.cpp:99:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "byte_array_converters.cpp",
    "line": 100,
    "function": null,
    "comment": "byte_array_converters.cpp:100:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "byte_array_converters.cpp",
    "line": 101,
    "function": null,
    "comment": "byte_array_converters.cpp:101:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "byte_array_converters.cpp",
    "line": 102,
    "function": null,
    "comment": "byte_array_converters.cpp:102:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "byte_array_converters.cpp",
    "line": 103,
    "function": null,
    "comment": "byte_array_converters.cpp:103:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "byte_array_converters.cpp",
    "line": 103,
    "function": null,
    "comment": "byte_array_converters.cpp:103:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "byte_array_converters.cpp",
    "line": 103,
    "function": null,
    "comment": "byte_array_converters.cpp:103:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "byte_array_converters.cpp",
    "line": 104,
    "function": null,
    "comment": "byte_array_converters.cpp:104:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "byte_array_converters.cpp",
    "line": 105,
    "function": null,
    "comment": "byte_array_converters.cpp:105:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "byte_array_converters.cpp",
    "line": 108,
    "function": null,
    "comment": "byte_array_converters.cpp:108:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "byte_array_converters.cpp",
    "line": 108,
    "function": null,
    "comment": "byte_array_converters.cpp:108:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "byte_array_converters.cpp",
    "line": 111,
    "function": null,
    "comment": "byte_array_converters.cpp:111:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "byte_array_converters.cpp",
    "line": 111,
    "function": null,
    "comment": "byte_array_converters.cpp:111:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "byte_array_converters.cpp",
    "line": 112,
    "function": null,
    "comment": "byte_array_converters.cpp:112:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "byte_array_converters.cpp",
    "line": 114,
    "function": null,
    "comment": "byte_array_converters.cpp:114:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "byte_array_converters.cpp",
    "line": 115,
    "function": null,
    "comment": "byte_array_converters.cpp:115:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "byte_array_converters.cpp",
    "line": 116,
    "function": null,
    "comment": "byte_array_converters.cpp:116:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "byte_array_converters.cpp",
    "line": 117,
    "function": null,
    "comment": "byte_array_converters.cpp:117:  Using deprecated casting style.  Use static_cast<int32>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "byte_array_converters.cpp",
    "line": 121,
    "function": null,
    "comment": "byte_array_converters.cpp:121:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "byte_array_converters.cpp",
    "line": 122,
    "function": null,
    "comment": "byte_array_converters.cpp:122:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "byte_array_converters.cpp",
    "line": 126,
    "function": null,
    "comment": "byte_array_converters.cpp:126:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "byte_array_converters.cpp",
    "line": 126,
    "function": null,
    "comment": "byte_array_converters.cpp:126:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "byte_array_converters.cpp",
    "line": 127,
    "function": null,
    "comment": "byte_array_converters.cpp:127:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "byte_array_converters.cpp",
    "line": 128,
    "function": null,
    "comment": "byte_array_converters.cpp:128:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "byte_array_converters.cpp",
    "line": 128,
    "function": null,
    "comment": "byte_array_converters.cpp:128:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "byte_array_converters.cpp",
    "line": 129,
    "function": null,
    "comment": "byte_array_converters.cpp:129:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "byte_array_converters.cpp",
    "line": 130,
    "function": null,
    "comment": "byte_array_converters.cpp:130:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "byte_array_converters.cpp",
    "line": 131,
    "function": null,
    "comment": "byte_array_converters.cpp:131:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "byte_array_converters.cpp",
    "line": 134,
    "function": null,
    "comment": "byte_array_converters.cpp:134:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "byte_array_converters.cpp",
    "line": 134,
    "function": null,
    "comment": "byte_array_converters.cpp:134:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "byte_array_converters.cpp",
    "line": 141,
    "function": null,
    "comment": "byte_array_converters.cpp:141:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "byte_array_converters.cpp",
    "line": 142,
    "function": null,
    "comment": "byte_array_converters.cpp:142:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "byte_array_converters.cpp",
    "line": 143,
    "function": null,
    "comment": "byte_array_converters.cpp:143:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "byte_array_converters.cpp",
    "line": 128,
    "function": null,
    "comment": "byte_array_converters.cpp:128:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "converters.cpp",
    "line": null,
    "function": null,
    "comment": "converters.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "converters.cpp",
    "line": 14,
    "function": null,
    "comment": "converters.cpp:14:  Found C system header after C++ system header. Should be: converters.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "converters.cpp",
    "line": 16,
    "function": null,
    "comment": "converters.cpp:16:  Include '../../include/ecl/converters/char.hpp' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "converters.cpp",
    "line": 19,
    "function": null,
    "comment": "converters.cpp:19:  Include '../../include/ecl/converters/integers.hpp' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "converters.cpp",
    "line": 33,
    "function": null,
    "comment": "converters.cpp:33:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "converters.cpp",
    "line": 39,
    "function": null,
    "comment": "converters.cpp:39:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "converters.cpp",
    "line": 39,
    "function": null,
    "comment": "converters.cpp:39:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "converters.cpp",
    "line": 40,
    "function": null,
    "comment": "converters.cpp:40:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "converters.cpp",
    "line": 41,
    "function": null,
    "comment": "converters.cpp:41:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "converters.cpp",
    "line": 44,
    "function": null,
    "comment": "converters.cpp:44:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "converters.cpp",
    "line": 44,
    "function": null,
    "comment": "converters.cpp:44:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "converters.cpp",
    "line": 45,
    "function": null,
    "comment": "converters.cpp:45:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "converters.cpp",
    "line": 46,
    "function": null,
    "comment": "converters.cpp:46:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "converters.cpp",
    "line": 47,
    "function": null,
    "comment": "converters.cpp:47:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "converters.cpp",
    "line": 48,
    "function": null,
    "comment": "converters.cpp:48:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "converters.cpp",
    "line": 51,
    "function": null,
    "comment": "converters.cpp:51:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "converters.cpp",
    "line": 52,
    "function": null,
    "comment": "converters.cpp:52:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "converters.cpp",
    "line": 53,
    "function": null,
    "comment": "converters.cpp:53:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "converters.cpp",
    "line": 54,
    "function": null,
    "comment": "converters.cpp:54:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "converters.cpp",
    "line": 57,
    "function": null,
    "comment": "converters.cpp:57:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "converters.cpp",
    "line": 57,
    "function": null,
    "comment": "converters.cpp:57:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "converters.cpp",
    "line": 58,
    "function": null,
    "comment": "converters.cpp:58:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "converters.cpp",
    "line": 59,
    "function": null,
    "comment": "converters.cpp:59:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "converters.cpp",
    "line": 59,
    "function": null,
    "comment": "converters.cpp:59:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "converters.cpp",
    "line": 60,
    "function": null,
    "comment": "converters.cpp:60:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "converters.cpp",
    "line": 61,
    "function": null,
    "comment": "converters.cpp:61:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "converters.cpp",
    "line": 63,
    "function": null,
    "comment": "converters.cpp:63:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "converters.cpp",
    "line": 64,
    "function": null,
    "comment": "converters.cpp:64:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "converters.cpp",
    "line": 67,
    "function": null,
    "comment": "converters.cpp:67:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "converters.cpp",
    "line": 67,
    "function": null,
    "comment": "converters.cpp:67:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "converters.cpp",
    "line": 68,
    "function": null,
    "comment": "converters.cpp:68:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "converters.cpp",
    "line": 69,
    "function": null,
    "comment": "converters.cpp:69:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "converters.cpp",
    "line": 69,
    "function": null,
    "comment": "converters.cpp:69:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "converters.cpp",
    "line": 70,
    "function": null,
    "comment": "converters.cpp:70:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "converters.cpp",
    "line": 71,
    "function": null,
    "comment": "converters.cpp:71:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "converters.cpp",
    "line": 72,
    "function": null,
    "comment": "converters.cpp:72:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "converters.cpp",
    "line": 72,
    "function": null,
    "comment": "converters.cpp:72:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "converters.cpp",
    "line": 73,
    "function": null,
    "comment": "converters.cpp:73:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "converters.cpp",
    "line": 75,
    "function": null,
    "comment": "converters.cpp:75:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "converters.cpp",
    "line": 76,
    "function": null,
    "comment": "converters.cpp:76:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "converters.cpp",
    "line": 77,
    "function": null,
    "comment": "converters.cpp:77:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "converters.cpp",
    "line": 77,
    "function": null,
    "comment": "converters.cpp:77:  Using deprecated casting style.  Use static_cast<char>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "converters.cpp",
    "line": 80,
    "function": null,
    "comment": "converters.cpp:80:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "converters.cpp",
    "line": 80,
    "function": null,
    "comment": "converters.cpp:80:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "converters.cpp",
    "line": 85,
    "function": null,
    "comment": "converters.cpp:85:  Use int16/int64/etc, rather than the C type short  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "converters.cpp",
    "line": 86,
    "function": null,
    "comment": "converters.cpp:86:  Use int16/int64/etc, rather than the C type short  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "converters.cpp",
    "line": 89,
    "function": null,
    "comment": "converters.cpp:89:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "converters.cpp",
    "line": 90,
    "function": null,
    "comment": "converters.cpp:90:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "converters.cpp",
    "line": 91,
    "function": null,
    "comment": "converters.cpp:91:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "converters.cpp",
    "line": 92,
    "function": null,
    "comment": "converters.cpp:92:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "converters.cpp",
    "line": 96,
    "function": null,
    "comment": "converters.cpp:96:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "converters.cpp",
    "line": 98,
    "function": null,
    "comment": "converters.cpp:98:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "converters.cpp",
    "line": 98,
    "function": null,
    "comment": "converters.cpp:98:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "converters.cpp",
    "line": 99,
    "function": null,
    "comment": "converters.cpp:99:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "converters.cpp",
    "line": 100,
    "function": null,
    "comment": "converters.cpp:100:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "converters.cpp",
    "line": 101,
    "function": null,
    "comment": "converters.cpp:101:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "converters.cpp",
    "line": 102,
    "function": null,
    "comment": "converters.cpp:102:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "converters.cpp",
    "line": 103,
    "function": null,
    "comment": "converters.cpp:103:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "converters.cpp",
    "line": 104,
    "function": null,
    "comment": "converters.cpp:104:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "converters.cpp",
    "line": 105,
    "function": null,
    "comment": "converters.cpp:105:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "converters.cpp",
    "line": 106,
    "function": null,
    "comment": "converters.cpp:106:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "converters.cpp",
    "line": 107,
    "function": null,
    "comment": "converters.cpp:107:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "converters.cpp",
    "line": 108,
    "function": null,
    "comment": "converters.cpp:108:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "converters.cpp",
    "line": 109,
    "function": null,
    "comment": "converters.cpp:109:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "converters.cpp",
    "line": 110,
    "function": null,
    "comment": "converters.cpp:110:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "converters.cpp",
    "line": 111,
    "function": null,
    "comment": "converters.cpp:111:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "converters.cpp",
    "line": 112,
    "function": null,
    "comment": "converters.cpp:112:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "converters.cpp",
    "line": 112,
    "function": null,
    "comment": "converters.cpp:112:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "converters.cpp",
    "line": 113,
    "function": null,
    "comment": "converters.cpp:113:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "converters.cpp",
    "line": 113,
    "function": null,
    "comment": "converters.cpp:113:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "converters.cpp",
    "line": 114,
    "function": null,
    "comment": "converters.cpp:114:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "converters.cpp",
    "line": 123,
    "function": null,
    "comment": "converters.cpp:123:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "converters.cpp",
    "line": 124,
    "function": null,
    "comment": "converters.cpp:124:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "converters.cpp",
    "line": 124,
    "function": null,
    "comment": "converters.cpp:124:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "converters.cpp",
    "line": 125,
    "function": null,
    "comment": "converters.cpp:125:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "float_converters.cpp",
    "line": null,
    "function": null,
    "comment": "float_converters.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "float_converters.cpp",
    "line": 15,
    "function": null,
    "comment": "float_converters.cpp:15:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "float_converters.cpp",
    "line": 16,
    "function": null,
    "comment": "float_converters.cpp:16:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "float_converters.cpp",
    "line": 19,
    "function": null,
    "comment": "float_converters.cpp:19:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "float_converters.cpp",
    "line": 21,
    "function": null,
    "comment": "float_converters.cpp:21:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "float_converters.cpp",
    "line": 24,
    "function": null,
    "comment": "float_converters.cpp:24:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "float_converters.cpp",
    "line": 25,
    "function": null,
    "comment": "float_converters.cpp:25:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "float_converters.cpp",
    "line": 25,
    "function": null,
    "comment": "float_converters.cpp:25:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "float_converters.cpp",
    "line": 26,
    "function": null,
    "comment": "float_converters.cpp:26:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "float_converters.cpp",
    "line": 27,
    "function": null,
    "comment": "float_converters.cpp:27:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "float_converters.cpp",
    "line": 27,
    "function": null,
    "comment": "float_converters.cpp:27:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "float_converters.cpp",
    "line": 30,
    "function": null,
    "comment": "float_converters.cpp:30:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "float_converters.cpp",
    "line": 32,
    "function": null,
    "comment": "float_converters.cpp:32:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "float_converters.cpp",
    "line": 35,
    "function": null,
    "comment": "float_converters.cpp:35:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "float_converters.cpp",
    "line": 36,
    "function": null,
    "comment": "float_converters.cpp:36:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "float_converters.cpp",
    "line": 36,
    "function": null,
    "comment": "float_converters.cpp:36:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "float_converters.cpp",
    "line": 37,
    "function": null,
    "comment": "float_converters.cpp:37:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "float_converters.cpp",
    "line": 38,
    "function": null,
    "comment": "float_converters.cpp:38:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "float_converters.cpp",
    "line": 38,
    "function": null,
    "comment": "float_converters.cpp:38:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "float_converters.cpp",
    "line": 39,
    "function": null,
    "comment": "float_converters.cpp:39:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "float_converters.cpp",
    "line": 39,
    "function": null,
    "comment": "float_converters.cpp:39:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "float_converters.cpp",
    "line": 40,
    "function": null,
    "comment": "float_converters.cpp:40:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "float_converters.cpp",
    "line": 41,
    "function": null,
    "comment": "float_converters.cpp:41:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "float_converters.cpp",
    "line": 41,
    "function": null,
    "comment": "float_converters.cpp:41:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "float_converters.cpp",
    "line": 44,
    "function": null,
    "comment": "float_converters.cpp:44:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "float_converters.cpp",
    "line": 46,
    "function": null,
    "comment": "float_converters.cpp:46:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "float_converters.cpp",
    "line": 49,
    "function": null,
    "comment": "float_converters.cpp:49:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "float_converters.cpp",
    "line": 50,
    "function": null,
    "comment": "float_converters.cpp:50:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "float_converters.cpp",
    "line": 51,
    "function": null,
    "comment": "float_converters.cpp:51:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "float_converters.cpp",
    "line": 52,
    "function": null,
    "comment": "float_converters.cpp:52:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "float_converters.cpp",
    "line": 54,
    "function": null,
    "comment": "float_converters.cpp:54:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "float_converters.cpp",
    "line": 54,
    "function": null,
    "comment": "float_converters.cpp:54:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "float_converters.cpp",
    "line": 55,
    "function": null,
    "comment": "float_converters.cpp:55:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "float_converters.cpp",
    "line": 58,
    "function": null,
    "comment": "float_converters.cpp:58:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "float_converters.cpp",
    "line": 60,
    "function": null,
    "comment": "float_converters.cpp:60:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "float_converters.cpp",
    "line": 50,
    "function": null,
    "comment": "float_converters.cpp:50:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "char_strings.hpp",
    "line": 77,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "char_strings.hpp",
    "line": 196,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "char_strings.hpp",
    "line": 247,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "char_strings.hpp",
    "line": 295,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "char_strings.hpp",
    "line": 307,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "char_strings.hpp",
    "line": 343,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "char_strings.hpp",
    "line": 355,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "char_strings.hpp",
    "line": 389,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "char_strings.hpp",
    "line": 398,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "char_strings.hpp",
    "line": 434,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "char_strings.hpp",
    "line": 446,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "char_strings.hpp",
    "line": 483,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "char_strings.hpp",
    "line": 495,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "char_strings.hpp",
    "line": 528,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "char_strings.hpp",
    "line": 537,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "char_strings.hpp",
    "line": 570,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "char_strings.hpp",
    "line": 579,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "char_strings.hpp",
    "line": 613,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "char_strings.hpp",
    "line": 623,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "char_strings.hpp",
    "line": 661,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "char_strings.hpp",
    "line": 686,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "char_strings.hpp",
    "line": 750,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "char_strings.hpp",
    "line": 775,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "char_strings.hpp",
    "line": 883,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "float_converters.cpp",
    "line": 15,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "to_byte_array.hpp",
    "line": 101,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "to_byte_array.hpp",
    "line": 396,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "from_byte_array.hpp",
    "line": 86,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "from_byte_array.hpp",
    "line": 93,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "byte_array_converters.cpp",
    "line": 40,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "byte_array_converters.cpp",
    "line": 49,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "byte_array_converters.cpp",
    "line": 79,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "byte_array_converters.cpp",
    "line": 129,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "byte_array_converters.cpp",
    "line": 141,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Declarations should be at the smallest feasible scope.",
    "file": "string.hpp",
    "line": 77,
    "function": null,
    "comment": "The scope of the variable 'lsd' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:void f(int x){    int i = 0;  ",
    "tags": ["code-standards","jsf-av-cpp","scope"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "char.hpp",
    "line": 57,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "char.hpp",
    "line": 87,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "string.hpp",
    "line": 63,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "string.hpp",
    "line": 76,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "string.hpp",
    "line": 77,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "integers.hpp",
    "line": 57,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "integers.hpp",
    "line": 58,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "integers.hpp",
    "line": 88,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "converters.cpp",
    "line": 85,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "converters.cpp",
    "line": 86,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "converters.cpp",
    "line": 87,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "converters.cpp",
    "line": 88,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "converters.cpp",
    "line": 89,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "converters.cpp",
    "line": 90,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "converters.cpp",
    "line": 91,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "converters.cpp",
    "line": 92,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "converters.cpp",
    "line": 108,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "converters.cpp",
    "line": 123,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "string.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "string.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "char.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "char.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "integers.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "integers.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "char_strings.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "char_strings.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "converter.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "converter.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "to_byte_array.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "to_byte_array.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "from_byte_array.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "from_byte_array.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "converters.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  }
]