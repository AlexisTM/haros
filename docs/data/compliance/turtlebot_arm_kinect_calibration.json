[
  {
    "rule": "The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_.",
    "file": "detect_calibration_pattern.h",
    "line": 30,
    "function": null,
    "comment": "detect_calibration_pattern.h:30:  #ifndef header guard has wrong style, please use: _HOME_ANDRE_ROS_HAROS_ANALYSER_DETECT_CALIBRATION_PATTERN_H_  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the symbol name should be <PACKAGE>_<PATH>_<FILE>_H.",
    "file": "detect_calibration_pattern.h",
    "line": 30,
    "function": null,
    "comment": "detect_calibration_pattern.h:30:  #ifndef header guard has wrong style, please use: DETECT_CALIBRATION_PATTERN_H  [build/header_guard] [5]",
    "tags": ["ros","code-standards","ros-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the guard's end should be '#endif  // <PROJECT>_<PATH>_<FILE>_H_' or '#endif  /* <PROJECT>_<PATH>_<FILE>_H_ */'.",
    "file": "detect_calibration_pattern.h",
    "line": 84,
    "function": null,
    "comment": "detect_calibration_pattern.h:84:  #endif line should be '#endif  // _HOME_ANDRE_ROS_HAROS_ANALYSER_DETECT_CALIBRATION_PATTERN_H_'  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "detect_calibration_pattern.h",
    "line": 34,
    "function": null,
    "comment": "detect_calibration_pattern.h:34:  Include 'opencv2/calib3d/calib3d.hpp' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not include the same file twice.",
    "file": "detect_calibration_pattern.h",
    "line": 35,
    "function": null,
    "comment": "detect_calibration_pattern.h:35:  'opencv2/calib3d/calib3d.hpp' already included at detect_calibration_pattern.h:34  [build/include] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "detect_calibration_pattern.h",
    "line": 40,
    "function": null,
    "comment": "detect_calibration_pattern.h:40:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "detect_calibration_pattern.h",
    "line": 46,
    "function": null,
    "comment": "detect_calibration_pattern.h:46:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "detect_calibration_pattern.h",
    "line": 49,
    "function": null,
    "comment": "detect_calibration_pattern.h:49:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "detect_calibration_pattern.h",
    "line": 56,
    "function": null,
    "comment": "detect_calibration_pattern.h:56:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "detect_calibration_pattern.h",
    "line": 56,
    "function": null,
    "comment": "detect_calibration_pattern.h:56:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& tvec  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "detect_calibration_pattern.h",
    "line": 56,
    "function": null,
    "comment": "detect_calibration_pattern.h:56:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& R  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "detect_calibration_pattern.h",
    "line": 56,
    "function": null,
    "comment": "detect_calibration_pattern.h:56:  Is this a non-const reference? If so, make const or use a pointer: Eigen::Vector3f& translation  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "detect_calibration_pattern.h",
    "line": 56,
    "function": null,
    "comment": "detect_calibration_pattern.h:56:  Is this a non-const reference? If so, make const or use a pointer: Eigen::Quaternionf& orientation  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "detect_calibration_pattern.h",
    "line": 59,
    "function": null,
    "comment": "detect_calibration_pattern.h:59:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "detect_calibration_pattern.h",
    "line": 60,
    "function": null,
    "comment": "detect_calibration_pattern.h:60:  public: should be indented +1 space inside class PatternDetector  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "detect_calibration_pattern.h",
    "line": 63,
    "function": null,
    "comment": "detect_calibration_pattern.h:63:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "detect_calibration_pattern.h",
    "line": 66,
    "function": null,
    "comment": "detect_calibration_pattern.h:66:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "detect_calibration_pattern.h",
    "line": 66,
    "function": null,
    "comment": "detect_calibration_pattern.h:66:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& image_in  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "detect_calibration_pattern.h",
    "line": 66,
    "function": null,
    "comment": "detect_calibration_pattern.h:66:  Is this a non-const reference? If so, make const or use a pointer: Eigen::Vector3f& translation  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "detect_calibration_pattern.h",
    "line": 66,
    "function": null,
    "comment": "detect_calibration_pattern.h:66:  Is this a non-const reference? If so, make const or use a pointer: Eigen::Quaternionf& orientation  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "detect_calibration_pattern.h",
    "line": 67,
    "function": null,
    "comment": "detect_calibration_pattern.h:67:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& image_out  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "detect_calibration_pattern.h",
    "line": 71,
    "function": null,
    "comment": "detect_calibration_pattern.h:71:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "detect_calibration_pattern.h",
    "line": 73,
    "function": null,
    "comment": "detect_calibration_pattern.h:73:  public: should be indented +1 space inside class PatternDetector  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "detect_calibration_pattern.h",
    "line": 54,
    "function": null,
    "comment": "detect_calibration_pattern.h:54:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "detect_calibration_pattern.cpp",
    "line": 33,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:33:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "detect_calibration_pattern.cpp",
    "line": 38,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:38:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "detect_calibration_pattern.cpp",
    "line": 39,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:39:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "detect_calibration_pattern.cpp",
    "line": 40,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:40:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "detect_calibration_pattern.cpp",
    "line": 46,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:46:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "detect_calibration_pattern.cpp",
    "line": 48,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:48:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "detect_calibration_pattern.cpp",
    "line": 51,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:51:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "detect_calibration_pattern.cpp",
    "line": 56,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:56:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "detect_calibration_pattern.cpp",
    "line": 56,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:56:  Using deprecated casting style.  Use static_cast<float>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "detect_calibration_pattern.cpp",
    "line": 61,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:61:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "detect_calibration_pattern.cpp",
    "line": 61,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:61:  Using deprecated casting style.  Use static_cast<float>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "detect_calibration_pattern.cpp",
    "line": 69,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:69:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "detect_calibration_pattern.cpp",
    "line": 71,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:71:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "detect_calibration_pattern.cpp",
    "line": 80,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:80:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "detect_calibration_pattern.cpp",
    "line": 83,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:83:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "detect_calibration_pattern.cpp",
    "line": 86,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:86:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "detect_calibration_pattern.cpp",
    "line": 89,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:89:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "detect_calibration_pattern.cpp",
    "line": 94,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:94:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "detect_calibration_pattern.cpp",
    "line": 97,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:97:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "detect_calibration_pattern.cpp",
    "line": 98,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:98:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "detect_calibration_pattern.cpp",
    "line": 99,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:99:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "detect_calibration_pattern.cpp",
    "line": 102,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:102:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "detect_calibration_pattern.cpp",
    "line": 103,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:103:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "detect_calibration_pattern.cpp",
    "line": 103,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:103:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "detect_calibration_pattern.cpp",
    "line": 103,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:103:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "detect_calibration_pattern.cpp",
    "line": 105,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:105:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "detect_calibration_pattern.cpp",
    "line": 113,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:113:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "detect_calibration_pattern.cpp",
    "line": 113,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:113:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& tvec  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "detect_calibration_pattern.cpp",
    "line": 113,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:113:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& R  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "detect_calibration_pattern.cpp",
    "line": 113,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:113:  Is this a non-const reference? If so, make const or use a pointer: Eigen::Vector3f& translation  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "detect_calibration_pattern.cpp",
    "line": 113,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:113:  Is this a non-const reference? If so, make const or use a pointer: Eigen::Quaternionf& orientation  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "detect_calibration_pattern.cpp",
    "line": 114,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:114:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "detect_calibration_pattern.cpp",
    "line": 115,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:115:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "detect_calibration_pattern.cpp",
    "line": 117,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:117:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 31,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:31:  Include 'image_transport/image_transport.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 36,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:36:  Include 'tf/transform_broadcaster.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 41,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:41:  Include 'pcl/registration/registration.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 45,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:45:  Include 'sensor_msgs/CameraInfo.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 46,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:46:  Include 'geometry_msgs/PointStamped.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 50,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:50:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 51,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:51:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 54,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:54:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 66,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:66:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 82,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:82:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 132,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:132:  public: should be indented +1 space inside class CalibrateKinectCheckerboard  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 135,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:135:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 139,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:139:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 147,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:147:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 151,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:151:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 154,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:154:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 158,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:158:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 159,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:159:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 163,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:163:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 164,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:164:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 165,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:165:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 166,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:166:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 178,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:178:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 182,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:182:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 185,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:185:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 190,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:190:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 191,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:191:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 201,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:201:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 203,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:203:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 208,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:208:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 216,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:216:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 217,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:217:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 218,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:218:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 225,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:225:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 229,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:229:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 230,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:230:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 232,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:232:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 235,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:235:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 246,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:246:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 255,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:255:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 255,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:255:  Is this a non-const reference? If so, make const or use a pointer: tf::Transform &transform  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 257,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:257:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 261,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:261:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 267,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:267:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 267,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:267:  Is this a non-const reference? If so, make const or use a pointer: tf::Transform &transform  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 268,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:268:  Is this a non-const reference? If so, make const or use a pointer: cv_bridge::CvImagePtr& image  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 269,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:269:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 273,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:273:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 281,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:281:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 293,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:293:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 295,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:295:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 296,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:296:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 301,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:301:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 305,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:305:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 308,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:308:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 311,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:311:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 314,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:314:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 322,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:322:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 323,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:323:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 325,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:325:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 326,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:326:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 329,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:329:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 332,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:332:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 333,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:333:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 336,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:336:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 345,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:345:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 347,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:347:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 353,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:353:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 353,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:353:  Is this a non-const reference? If so, make const or use a pointer: Eigen::Matrix4f& transform  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 354,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:354:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 360,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:360:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 361,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:361:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 362,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:362:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 371,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:371:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 380,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:380:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 381,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:381:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 382,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:382:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 383,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:383:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 384,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:384:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 385,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:385:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 386,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:386:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 391,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:391:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 395,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:395:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 399,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:399:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 404,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:404:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 408,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:408:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 411,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:411:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 418,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:418:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 422,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:422:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 369,
    "function": null,
    "comment": "calibrate_kinect_checkerboard.cpp:369:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 125,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 126,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 275,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 277,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 278,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 280,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 289,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 410,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 421,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Non-empty case blocks must not fall through to the next case.",
    "file": "detect_calibration_pattern.cpp",
    "line": 52,
    "function": null,
    "comment": "Non-empty case without a break statement.",
    "tags": ["hicpp","code-standards","switch","case","fall-through"]
  },
  {
    "rule": "Non-empty case blocks must not fall through to the next case.",
    "file": "detect_calibration_pattern.cpp",
    "line": 58,
    "function": null,
    "comment": "Non-empty case without a break statement.",
    "tags": ["hicpp","code-standards","switch","case","fall-through"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "detect_calibration_pattern.cpp",
    "line": 54,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "detect_calibration_pattern.cpp",
    "line": 55,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "detect_calibration_pattern.cpp",
    "line": 59,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "detect_calibration_pattern.cpp",
    "line": 60,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "detect_calibration_pattern.cpp",
    "line": 69,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 407,
    "function": null,
    "comment": "The function 'convertIdealPointstoPointcloud' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": 190,
    "function": null,
    "comment": "The function 'pointcloudCallback' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "detect_calibration_pattern.h",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "detect_calibration_pattern.h",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Maximum coupling between objects: 5",
    "file": "detect_calibration_pattern.h",
    "line": null,
    "function": null,
    "comment": "CBO is greater than 5, PatternDetector, 6",
    "tags": ["metrics","nasa-satc","ros","coupling"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "detect_calibration_pattern.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "detect_calibration_pattern.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Maximum coupling between objects: 5",
    "file": "detect_calibration_pattern.cpp",
    "line": null,
    "function": null,
    "comment": "CBO is greater than 5, PatternDetector, 7",
    "tags": ["metrics","nasa-satc","ros","coupling"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Maximum coupling between objects: 5",
    "file": "calibrate_kinect_checkerboard.cpp",
    "line": null,
    "function": null,
    "comment": "CBO is greater than 5, CalibrateKinectCheckerboard, 19",
    "tags": ["metrics","nasa-satc","ros","coupling"]
  }
]