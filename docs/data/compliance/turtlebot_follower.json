[
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "follower.cpp",
    "line": 31,
    "function": null,
    "comment": "follower.cpp:31:  Include 'pluginlib/class_list_macros.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "follower.cpp",
    "line": 32,
    "function": null,
    "comment": "follower.cpp:32:  Include 'nodelet/nodelet.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "follower.cpp",
    "line": 33,
    "function": null,
    "comment": "follower.cpp:33:  Include 'geometry_msgs/Twist.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "follower.cpp",
    "line": 35,
    "function": null,
    "comment": "follower.cpp:35:  Include 'pcl/point_types.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "follower.cpp",
    "line": 37,
    "function": null,
    "comment": "follower.cpp:37:  Include 'turtlebot_msgs/SetFollowState.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "follower.cpp",
    "line": 44,
    "function": null,
    "comment": "follower.cpp:44:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "follower.cpp",
    "line": 54,
    "function": null,
    "comment": "follower.cpp:54:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "follower.cpp",
    "line": 55,
    "function": null,
    "comment": "follower.cpp:55:  public: should be indented +1 space inside class TurtlebotFollower  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "follower.cpp",
    "line": 64,
    "function": null,
    "comment": "follower.cpp:64:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "follower.cpp",
    "line": 65,
    "function": null,
    "comment": "follower.cpp:65:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "follower.cpp",
    "line": 65,
    "function": null,
    "comment": "follower.cpp:65:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "follower.cpp",
    "line": 69,
    "function": null,
    "comment": "follower.cpp:69:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "follower.cpp",
    "line": 73,
    "function": null,
    "comment": "follower.cpp:73:  private: should be indented +1 space inside class TurtlebotFollower  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "follower.cpp",
    "line": 82,
    "function": null,
    "comment": "follower.cpp:82:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "follower.cpp",
    "line": 96,
    "function": null,
    "comment": "follower.cpp:96:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "follower.cpp",
    "line": 111,
    "function": null,
    "comment": "follower.cpp:111:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "follower.cpp",
    "line": 112,
    "function": null,
    "comment": "follower.cpp:112:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "follower.cpp",
    "line": 113,
    "function": null,
    "comment": "follower.cpp:113:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "follower.cpp",
    "line": 113,
    "function": null,
    "comment": "follower.cpp:113:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "follower.cpp",
    "line": 115,
    "function": null,
    "comment": "follower.cpp:115:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "follower.cpp",
    "line": 117,
    "function": null,
    "comment": "follower.cpp:117:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "follower.cpp",
    "line": 118,
    "function": null,
    "comment": "follower.cpp:118:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "follower.cpp",
    "line": 123,
    "function": null,
    "comment": "follower.cpp:123:  Is this a non-const reference? If so, make const or use a pointer: turtlebot_follower::FollowerConfig &config  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "follower.cpp",
    "line": 124,
    "function": null,
    "comment": "follower.cpp:124:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "follower.cpp",
    "line": 143,
    "function": null,
    "comment": "follower.cpp:143:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "follower.cpp",
    "line": 144,
    "function": null,
    "comment": "follower.cpp:144:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "follower.cpp",
    "line": 148,
    "function": null,
    "comment": "follower.cpp:148:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "follower.cpp",
    "line": 150,
    "function": null,
    "comment": "follower.cpp:150:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "follower.cpp",
    "line": 150,
    "function": null,
    "comment": "follower.cpp:150:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "follower.cpp",
    "line": 151,
    "function": null,
    "comment": "follower.cpp:151:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "follower.cpp",
    "line": 152,
    "function": null,
    "comment": "follower.cpp:152:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "follower.cpp",
    "line": 153,
    "function": null,
    "comment": "follower.cpp:153:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "follower.cpp",
    "line": 153,
    "function": null,
    "comment": "follower.cpp:153:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "follower.cpp",
    "line": 154,
    "function": null,
    "comment": "follower.cpp:154:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "follower.cpp",
    "line": 156,
    "function": null,
    "comment": "follower.cpp:156:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "follower.cpp",
    "line": 157,
    "function": null,
    "comment": "follower.cpp:157:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "follower.cpp",
    "line": 158,
    "function": null,
    "comment": "follower.cpp:158:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "follower.cpp",
    "line": 159,
    "function": null,
    "comment": "follower.cpp:159:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "follower.cpp",
    "line": 160,
    "function": null,
    "comment": "follower.cpp:160:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "follower.cpp",
    "line": 169,
    "function": null,
    "comment": "follower.cpp:169:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "follower.cpp",
    "line": 170,
    "function": null,
    "comment": "follower.cpp:170:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "follower.cpp",
    "line": 171,
    "function": null,
    "comment": "follower.cpp:171:  Missing spaces around >  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "follower.cpp",
    "line": 172,
    "function": null,
    "comment": "follower.cpp:172:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "follower.cpp",
    "line": 175,
    "function": null,
    "comment": "follower.cpp:175:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "follower.cpp",
    "line": 175,
    "function": null,
    "comment": "follower.cpp:175:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "follower.cpp",
    "line": 175,
    "function": null,
    "comment": "follower.cpp:175:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "follower.cpp",
    "line": 178,
    "function": null,
    "comment": "follower.cpp:178:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "follower.cpp",
    "line": 188,
    "function": null,
    "comment": "follower.cpp:188:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "follower.cpp",
    "line": 195,
    "function": null,
    "comment": "follower.cpp:195:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "follower.cpp",
    "line": 196,
    "function": null,
    "comment": "follower.cpp:196:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "follower.cpp",
    "line": 201,
    "function": null,
    "comment": "follower.cpp:201:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "follower.cpp",
    "line": 209,
    "function": null,
    "comment": "follower.cpp:209:  Is this a non-const reference? If so, make const or use a pointer: turtlebot_msgs::SetFollowState::Request& request  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "follower.cpp",
    "line": 210,
    "function": null,
    "comment": "follower.cpp:210:  Is this a non-const reference? If so, make const or use a pointer: turtlebot_msgs::SetFollowState::Response& response  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "follower.cpp",
    "line": 211,
    "function": null,
    "comment": "follower.cpp:211:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "follower.cpp",
    "line": 213,
    "function": null,
    "comment": "follower.cpp:213:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "follower.cpp",
    "line": 218,
    "function": null,
    "comment": "follower.cpp:218:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "follower.cpp",
    "line": 219,
    "function": null,
    "comment": "follower.cpp:219:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "follower.cpp",
    "line": 228,
    "function": null,
    "comment": "follower.cpp:228:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "follower.cpp",
    "line": 229,
    "function": null,
    "comment": "follower.cpp:229:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "follower.cpp",
    "line": 251,
    "function": null,
    "comment": "follower.cpp:251:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "follower.cpp",
    "line": 252,
    "function": null,
    "comment": "follower.cpp:252:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "follower.cpp",
    "line": 252,
    "function": null,
    "comment": "follower.cpp:252:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "follower.cpp",
    "line": 256,
    "function": null,
    "comment": "follower.cpp:256:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "follower.cpp",
    "line": 286,
    "function": null,
    "comment": "follower.cpp:286:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "follower.cpp",
    "line": 287,
    "function": null,
    "comment": "follower.cpp:287:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "follower.cpp",
    "line": 287,
    "function": null,
    "comment": "follower.cpp:287:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "follower.cpp",
    "line": 296,
    "function": null,
    "comment": "follower.cpp:296:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "follower.cpp",
    "line": 298,
    "function": null,
    "comment": "follower.cpp:298:  Namespace should be terminated with '// namespace turtlebot_follower'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "follower.cpp",
    "line": 163,
    "function": null,
    "comment": "follower.cpp:163:  Add #include <algorithm> for min  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "All member variables of a class should be initialized after calling the constructor.",
    "file": "follower.cpp",
    "line": 60,
    "function": null,
    "comment": "Member variable 'TurtlebotFollower::enabled_' is not initialized in the constructor.",
    "tags": ["hicpp","code-standards","google-cpp","misra-cpp","classes","member-variables","uninitialized-variables","constructors","jsf-av-cpp"]
  },
  {
    "rule": "All member variables of a class should be initialized after calling the constructor.",
    "file": "follower.cpp",
    "line": 60,
    "function": null,
    "comment": "Member variable 'TurtlebotFollower::config_srv_' is not initialized in the constructor.",
    "tags": ["hicpp","code-standards","google-cpp","misra-cpp","classes","member-variables","uninitialized-variables","constructors","jsf-av-cpp"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "follower.cpp",
    "line": 149,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "follower.cpp",
    "line": 95,
    "function": null,
    "comment": "The function 'onInit' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "follower.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum coupling between objects: 5",
    "file": "follower.cpp",
    "line": null,
    "function": null,
    "comment": "CBO is greater than 5, TurtlebotFollower, 11",
    "tags": ["metrics","nasa-satc","ros","coupling"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "follower.cpp",
    "line": 142,
    "function": "cloudcb",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  }
]