[
  {
    "rule": "Do not include the C standard headers. Use the C++ headers instead.",
    "file": "laser_footprint_filter.cpp",
    "line": 35,
    "function": null,
    "comment": "laser_footprint_filter.cpp:35:  Include 'cmath' instead of 'math.h'.  [build/include] [5]",
    "tags": ["hicpp","code-standards","headers","include","preprocessor","deprecation","c"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "laser_footprint_filter.cpp",
    "line": 41,
    "function": null,
    "comment": "laser_footprint_filter.cpp:41:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "laser_footprint_filter.cpp",
    "line": 42,
    "function": null,
    "comment": "laser_footprint_filter.cpp:42:  public: should be indented +1 space inside class LaserFootprintFilter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "laser_footprint_filter.cpp",
    "line": 45,
    "function": null,
    "comment": "laser_footprint_filter.cpp:45:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_footprint_filter.cpp",
    "line": 46,
    "function": null,
    "comment": "laser_footprint_filter.cpp:46:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_footprint_filter.cpp",
    "line": 47,
    "function": null,
    "comment": "laser_footprint_filter.cpp:47:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_footprint_filter.cpp",
    "line": 49,
    "function": null,
    "comment": "laser_footprint_filter.cpp:49:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "laser_footprint_filter.cpp",
    "line": 54,
    "function": null,
    "comment": "laser_footprint_filter.cpp:54:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "laser_footprint_filter.cpp",
    "line": 62,
    "function": null,
    "comment": "laser_footprint_filter.cpp:62:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "laser_footprint_filter.cpp",
    "line": 62,
    "function": null,
    "comment": "laser_footprint_filter.cpp:62:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "laser_footprint_filter.cpp",
    "line": 63,
    "function": null,
    "comment": "laser_footprint_filter.cpp:63:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "laser_footprint_filter.cpp",
    "line": 65,
    "function": null,
    "comment": "laser_footprint_filter.cpp:65:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "laser_footprint_filter.cpp",
    "line": 70,
    "function": null,
    "comment": "laser_footprint_filter.cpp:70:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "laser_footprint_filter.cpp",
    "line": 71,
    "function": null,
    "comment": "laser_footprint_filter.cpp:71:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "laser_footprint_filter.cpp",
    "line": 71,
    "function": null,
    "comment": "laser_footprint_filter.cpp:71:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "laser_footprint_filter.cpp",
    "line": 73,
    "function": null,
    "comment": "laser_footprint_filter.cpp:73:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "laser_footprint_filter.cpp",
    "line": 73,
    "function": null,
    "comment": "laser_footprint_filter.cpp:73:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "laser_footprint_filter.cpp",
    "line": 73,
    "function": null,
    "comment": "laser_footprint_filter.cpp:73:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_footprint_filter.cpp",
    "line": 74,
    "function": null,
    "comment": "laser_footprint_filter.cpp:74:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "laser_footprint_filter.cpp",
    "line": 77,
    "function": null,
    "comment": "laser_footprint_filter.cpp:77:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "laser_footprint_filter.cpp",
    "line": 78,
    "function": null,
    "comment": "laser_footprint_filter.cpp:78:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "laser_footprint_filter.cpp",
    "line": 79,
    "function": null,
    "comment": "laser_footprint_filter.cpp:79:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "laser_footprint_filter.cpp",
    "line": 82,
    "function": null,
    "comment": "laser_footprint_filter.cpp:82:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "laser_footprint_filter.cpp",
    "line": 90,
    "function": null,
    "comment": "laser_footprint_filter.cpp:90:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_footprint_filter.cpp",
    "line": 92,
    "function": null,
    "comment": "laser_footprint_filter.cpp:92:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "laser_footprint_filter.cpp",
    "line": 97,
    "function": null,
    "comment": "laser_footprint_filter.cpp:97:  private: should be indented +1 space inside class LaserFootprintFilter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "laser_footprint_filter.cpp",
    "line": 108,
    "function": null,
    "comment": "laser_footprint_filter.cpp:108:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "laser_footprint_filter.cpp",
    "line": 101,
    "function": null,
    "comment": "laser_footprint_filter.cpp:101:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "laser_footprint_filter.cpp",
    "line": 62,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "laser_footprint_filter.cpp",
    "line": 107,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "laser_footprint_filter.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "laser_footprint_filter.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Maximum coupling between objects: 5",
    "file": "laser_footprint_filter.cpp",
    "line": null,
    "function": null,
    "comment": "CBO is greater than 5, LaserFootprintFilter, 7",
    "tags": ["metrics","nasa-satc","ros","coupling"]
  }
]