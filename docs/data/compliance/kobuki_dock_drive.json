[
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "dock_drive.hpp",
    "line": 48,
    "function": null,
    "comment": "dock_drive.hpp:48:  Include 'iomanip' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "dock_drive.hpp",
    "line": 49,
    "function": null,
    "comment": "dock_drive.hpp:49:  Include 'cmath' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "dock_drive.hpp",
    "line": 51,
    "function": null,
    "comment": "dock_drive.hpp:51:  Found C system header after C++ system header. Should be: dock_drive.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "dock_drive.hpp",
    "line": 52,
    "function": null,
    "comment": "dock_drive.hpp:52:  Found C system header after C++ system header. Should be: dock_drive.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "dock_drive.hpp",
    "line": 60,
    "function": null,
    "comment": "dock_drive.hpp:60:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "dock_drive.hpp",
    "line": 66,
    "function": null,
    "comment": "dock_drive.hpp:66:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "dock_drive.hpp",
    "line": 67,
    "function": null,
    "comment": "dock_drive.hpp:67:  public: should be indented +1 space inside class DockDrive  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "dock_drive.hpp",
    "line": 71,
    "function": null,
    "comment": "dock_drive.hpp:71:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "dock_drive.hpp",
    "line": 105,
    "function": null,
    "comment": "dock_drive.hpp:105:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "dock_drive.hpp",
    "line": 106,
    "function": null,
    "comment": "dock_drive.hpp:106:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "dock_drive.hpp",
    "line": 106,
    "function": null,
    "comment": "dock_drive.hpp:106:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "dock_drive.hpp",
    "line": 107,
    "function": null,
    "comment": "dock_drive.hpp:107:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "dock_drive.hpp",
    "line": 108,
    "function": null,
    "comment": "dock_drive.hpp:108:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "dock_drive.hpp",
    "line": 112,
    "function": null,
    "comment": "dock_drive.hpp:112:  protected: should be indented +1 space inside class DockDrive  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "dock_drive.hpp",
    "line": 113,
    "function": null,
    "comment": "dock_drive.hpp:113:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "dock_drive.hpp",
    "line": 114,
    "function": null,
    "comment": "dock_drive.hpp:114:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "dock_drive.hpp",
    "line": 114,
    "function": null,
    "comment": "dock_drive.hpp:114:  Is this a non-const reference? If so, make const or use a pointer: ecl::Pose2D<double>& pose_update  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "dock_drive.hpp",
    "line": 115,
    "function": null,
    "comment": "dock_drive.hpp:115:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "dock_drive.hpp",
    "line": 115,
    "function": null,
    "comment": "dock_drive.hpp:115:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "dock_drive.hpp",
    "line": 115,
    "function": null,
    "comment": "dock_drive.hpp:115:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "dock_drive.hpp",
    "line": 115,
    "function": null,
    "comment": "dock_drive.hpp:115:  Is this a non-const reference? If so, make const or use a pointer: std::vector<unsigned char>& signal_filt  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "dock_drive.hpp",
    "line": 116,
    "function": null,
    "comment": "dock_drive.hpp:116:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "dock_drive.hpp",
    "line": 117,
    "function": null,
    "comment": "dock_drive.hpp:117:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "dock_drive.hpp",
    "line": 117,
    "function": null,
    "comment": "dock_drive.hpp:117:  Is this a non-const reference? If so, make const or use a pointer: std::string& debug_str  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "dock_drive.hpp",
    "line": 118,
    "function": null,
    "comment": "dock_drive.hpp:118:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "dock_drive.hpp",
    "line": 118,
    "function": null,
    "comment": "dock_drive.hpp:118:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "dock_drive.hpp",
    "line": 119,
    "function": null,
    "comment": "dock_drive.hpp:119:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "dock_drive.hpp",
    "line": 123,
    "function": null,
    "comment": "dock_drive.hpp:123:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "dock_drive.hpp",
    "line": 123,
    "function": null,
    "comment": "dock_drive.hpp:123:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "dock_drive.hpp",
    "line": 123,
    "function": null,
    "comment": "dock_drive.hpp:123:  Is this a non-const reference? If so, make const or use a pointer: RobotDockingState::State& state  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "dock_drive.hpp",
    "line": 123,
    "function": null,
    "comment": "dock_drive.hpp:123:  Is this a non-const reference? If so, make const or use a pointer: double& vx  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "dock_drive.hpp",
    "line": 123,
    "function": null,
    "comment": "dock_drive.hpp:123:  Is this a non-const reference? If so, make const or use a pointer: double& wz  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "dock_drive.hpp",
    "line": 124,
    "function": null,
    "comment": "dock_drive.hpp:124:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "dock_drive.hpp",
    "line": 124,
    "function": null,
    "comment": "dock_drive.hpp:124:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "dock_drive.hpp",
    "line": 124,
    "function": null,
    "comment": "dock_drive.hpp:124:  Is this a non-const reference? If so, make const or use a pointer: RobotDockingState::State& state  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "dock_drive.hpp",
    "line": 124,
    "function": null,
    "comment": "dock_drive.hpp:124:  Is this a non-const reference? If so, make const or use a pointer: double& vx  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "dock_drive.hpp",
    "line": 124,
    "function": null,
    "comment": "dock_drive.hpp:124:  Is this a non-const reference? If so, make const or use a pointer: double& wz  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "dock_drive.hpp",
    "line": 124,
    "function": null,
    "comment": "dock_drive.hpp:124:  Is this a non-const reference? If so, make const or use a pointer: std::string& debug_str  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "dock_drive.hpp",
    "line": 125,
    "function": null,
    "comment": "dock_drive.hpp:125:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "dock_drive.hpp",
    "line": 125,
    "function": null,
    "comment": "dock_drive.hpp:125:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "dock_drive.hpp",
    "line": 125,
    "function": null,
    "comment": "dock_drive.hpp:125:  Is this a non-const reference? If so, make const or use a pointer: RobotDockingState::State& state  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "dock_drive.hpp",
    "line": 125,
    "function": null,
    "comment": "dock_drive.hpp:125:  Is this a non-const reference? If so, make const or use a pointer: double& vx  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "dock_drive.hpp",
    "line": 125,
    "function": null,
    "comment": "dock_drive.hpp:125:  Is this a non-const reference? If so, make const or use a pointer: double& wz  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "dock_drive.hpp",
    "line": 126,
    "function": null,
    "comment": "dock_drive.hpp:126:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "dock_drive.hpp",
    "line": 126,
    "function": null,
    "comment": "dock_drive.hpp:126:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "dock_drive.hpp",
    "line": 126,
    "function": null,
    "comment": "dock_drive.hpp:126:  Is this a non-const reference? If so, make const or use a pointer: RobotDockingState::State& state  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "dock_drive.hpp",
    "line": 126,
    "function": null,
    "comment": "dock_drive.hpp:126:  Is this a non-const reference? If so, make const or use a pointer: double& vx  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "dock_drive.hpp",
    "line": 126,
    "function": null,
    "comment": "dock_drive.hpp:126:  Is this a non-const reference? If so, make const or use a pointer: double& wz  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "dock_drive.hpp",
    "line": 127,
    "function": null,
    "comment": "dock_drive.hpp:127:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "dock_drive.hpp",
    "line": 127,
    "function": null,
    "comment": "dock_drive.hpp:127:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "dock_drive.hpp",
    "line": 127,
    "function": null,
    "comment": "dock_drive.hpp:127:  Is this a non-const reference? If so, make const or use a pointer: RobotDockingState::State& state  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "dock_drive.hpp",
    "line": 127,
    "function": null,
    "comment": "dock_drive.hpp:127:  Is this a non-const reference? If so, make const or use a pointer: double& vx  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "dock_drive.hpp",
    "line": 127,
    "function": null,
    "comment": "dock_drive.hpp:127:  Is this a non-const reference? If so, make const or use a pointer: double& wz  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "dock_drive.hpp",
    "line": 127,
    "function": null,
    "comment": "dock_drive.hpp:127:  Is this a non-const reference? If so, make const or use a pointer: std::string& debug_str  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "dock_drive.hpp",
    "line": 128,
    "function": null,
    "comment": "dock_drive.hpp:128:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "dock_drive.hpp",
    "line": 128,
    "function": null,
    "comment": "dock_drive.hpp:128:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "dock_drive.hpp",
    "line": 128,
    "function": null,
    "comment": "dock_drive.hpp:128:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "dock_drive.hpp",
    "line": 128,
    "function": null,
    "comment": "dock_drive.hpp:128:  Is this a non-const reference? If so, make const or use a pointer: RobotDockingState::State& nstate  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "dock_drive.hpp",
    "line": 128,
    "function": null,
    "comment": "dock_drive.hpp:128:  Is this a non-const reference? If so, make const or use a pointer: double& nvx  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "dock_drive.hpp",
    "line": 128,
    "function": null,
    "comment": "dock_drive.hpp:128:  Is this a non-const reference? If so, make const or use a pointer: double& nwz  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "dock_drive.hpp",
    "line": 128,
    "function": null,
    "comment": "dock_drive.hpp:128:  Is this a non-const reference? If so, make const or use a pointer: int& bump_count  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "dock_drive.hpp",
    "line": 131,
    "function": null,
    "comment": "dock_drive.hpp:131:  private: should be indented +1 space inside class DockDrive  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "dock_drive.hpp",
    "line": 155,
    "function": null,
    "comment": "dock_drive.hpp:155:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "dock_drive.hpp",
    "line": 152,
    "function": null,
    "comment": "dock_drive.hpp:152:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "state.hpp",
    "line": 46,
    "function": null,
    "comment": "state.hpp:46:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not indent within a namespace.",
    "file": "state.hpp",
    "line": 49,
    "function": null,
    "comment": "state.hpp:49:  Do not indent within a namespace  [runtime/indentation_namespace] [4]",
    "tags": ["code-standards","formatting","google-cpp","indentation","namespace"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "state.hpp",
    "line": 49,
    "function": null,
    "comment": "state.hpp:49:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "state.hpp",
    "line": 50,
    "function": null,
    "comment": "state.hpp:50:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "state.hpp",
    "line": 51,
    "function": null,
    "comment": "state.hpp:51:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "state.hpp",
    "line": 52,
    "function": null,
    "comment": "state.hpp:52:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "state.hpp",
    "line": 53,
    "function": null,
    "comment": "state.hpp:53:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "state.hpp",
    "line": 54,
    "function": null,
    "comment": "state.hpp:54:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "state.hpp",
    "line": 55,
    "function": null,
    "comment": "state.hpp:55:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "state.hpp",
    "line": 56,
    "function": null,
    "comment": "state.hpp:56:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "state.hpp",
    "line": 57,
    "function": null,
    "comment": "state.hpp:57:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "state.hpp",
    "line": 58,
    "function": null,
    "comment": "state.hpp:58:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "state.hpp",
    "line": 59,
    "function": null,
    "comment": "state.hpp:59:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not indent within a namespace.",
    "file": "state.hpp",
    "line": 64,
    "function": null,
    "comment": "state.hpp:64:  Do not indent within a namespace  [runtime/indentation_namespace] [4]",
    "tags": ["code-standards","formatting","google-cpp","indentation","namespace"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "state.hpp",
    "line": 64,
    "function": null,
    "comment": "state.hpp:64:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "state.hpp",
    "line": 65,
    "function": null,
    "comment": "state.hpp:65:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "state.hpp",
    "line": 80,
    "function": null,
    "comment": "state.hpp:80:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "state.hpp",
    "line": 98,
    "function": null,
    "comment": "state.hpp:98:  Namespace should be terminated with '// namespace kobuki'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "state.hpp",
    "line": 100,
    "function": null,
    "comment": "state.hpp:100:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "state.hpp",
    "line": 100,
    "function": null,
    "comment": "state.hpp:100:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "dock_drive_debug.cpp",
    "line": 40,
    "function": null,
    "comment": "dock_drive_debug.cpp:40:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "dock_drive_debug.cpp",
    "line": 48,
    "function": null,
    "comment": "dock_drive_debug.cpp:48:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "dock_drive_debug.cpp",
    "line": 49,
    "function": null,
    "comment": "dock_drive_debug.cpp:49:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "dock_drive_debug.cpp",
    "line": 50,
    "function": null,
    "comment": "dock_drive_debug.cpp:50:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "dock_drive_debug.cpp",
    "line": 50,
    "function": null,
    "comment": "dock_drive_debug.cpp:50:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "dock_drive_debug.cpp",
    "line": 53,
    "function": null,
    "comment": "dock_drive_debug.cpp:53:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "dock_drive_debug.cpp",
    "line": 53,
    "function": null,
    "comment": "dock_drive_debug.cpp:53:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "dock_drive_debug.cpp",
    "line": 54,
    "function": null,
    "comment": "dock_drive_debug.cpp:54:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "dock_drive_debug.cpp",
    "line": 54,
    "function": null,
    "comment": "dock_drive_debug.cpp:54:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "dock_drive_debug.cpp",
    "line": 55,
    "function": null,
    "comment": "dock_drive_debug.cpp:55:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "dock_drive_debug.cpp",
    "line": 56,
    "function": null,
    "comment": "dock_drive_debug.cpp:56:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "dock_drive_debug.cpp",
    "line": 56,
    "function": null,
    "comment": "dock_drive_debug.cpp:56:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "The else clause of an else-if clause should be on its own line.",
    "file": "dock_drive_debug.cpp",
    "line": 56,
    "function": null,
    "comment": "dock_drive_debug.cpp:56:  Else clause should never be on same line as else (use 2 lines)  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","google-cpp","if-else"]
  },
  {
    "rule": "There should not be more than one semicolon statement in a single-line if or else statement, unless it is part of a lambda expression, or the if/else body is enclosed in curly braces.",
    "file": "dock_drive_debug.cpp",
    "line": 56,
    "function": null,
    "comment": "dock_drive_debug.cpp:56:  If/else bodies with multiple statements require braces  [readability/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","if-else","single-line-statements"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "dock_drive_debug.cpp",
    "line": 57,
    "function": null,
    "comment": "dock_drive_debug.cpp:57:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "dock_drive_debug.cpp",
    "line": 57,
    "function": null,
    "comment": "dock_drive_debug.cpp:57:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "The else clause of an else-if clause should be on its own line.",
    "file": "dock_drive_debug.cpp",
    "line": 57,
    "function": null,
    "comment": "dock_drive_debug.cpp:57:  Else clause should never be on same line as else (use 2 lines)  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","google-cpp","if-else"]
  },
  {
    "rule": "There should not be more than one semicolon statement in a single-line if or else statement, unless it is part of a lambda expression, or the if/else body is enclosed in curly braces.",
    "file": "dock_drive_debug.cpp",
    "line": 57,
    "function": null,
    "comment": "dock_drive_debug.cpp:57:  If/else bodies with multiple statements require braces  [readability/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","if-else","single-line-statements"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "dock_drive_debug.cpp",
    "line": 58,
    "function": null,
    "comment": "dock_drive_debug.cpp:58:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "dock_drive_debug.cpp",
    "line": 58,
    "function": null,
    "comment": "dock_drive_debug.cpp:58:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "The else clause of an else-if clause should be on its own line.",
    "file": "dock_drive_debug.cpp",
    "line": 58,
    "function": null,
    "comment": "dock_drive_debug.cpp:58:  Else clause should never be on same line as else (use 2 lines)  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","google-cpp","if-else"]
  },
  {
    "rule": "There should not be more than one semicolon statement in a single-line if or else statement, unless it is part of a lambda expression, or the if/else body is enclosed in curly braces.",
    "file": "dock_drive_debug.cpp",
    "line": 58,
    "function": null,
    "comment": "dock_drive_debug.cpp:58:  If/else bodies with multiple statements require braces  [readability/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","if-else","single-line-statements"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "dock_drive_debug.cpp",
    "line": 59,
    "function": null,
    "comment": "dock_drive_debug.cpp:59:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "dock_drive_debug.cpp",
    "line": 59,
    "function": null,
    "comment": "dock_drive_debug.cpp:59:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "The else clause of an else-if clause should be on its own line.",
    "file": "dock_drive_debug.cpp",
    "line": 59,
    "function": null,
    "comment": "dock_drive_debug.cpp:59:  Else clause should never be on same line as else (use 2 lines)  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","google-cpp","if-else"]
  },
  {
    "rule": "There should not be more than one semicolon statement in a single-line if or else statement, unless it is part of a lambda expression, or the if/else body is enclosed in curly braces.",
    "file": "dock_drive_debug.cpp",
    "line": 59,
    "function": null,
    "comment": "dock_drive_debug.cpp:59:  If/else bodies with multiple statements require braces  [readability/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","if-else","single-line-statements"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "dock_drive_debug.cpp",
    "line": 60,
    "function": null,
    "comment": "dock_drive_debug.cpp:60:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "dock_drive_debug.cpp",
    "line": 60,
    "function": null,
    "comment": "dock_drive_debug.cpp:60:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "The else clause of an else-if clause should be on its own line.",
    "file": "dock_drive_debug.cpp",
    "line": 60,
    "function": null,
    "comment": "dock_drive_debug.cpp:60:  Else clause should never be on same line as else (use 2 lines)  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","google-cpp","if-else"]
  },
  {
    "rule": "There should not be more than one semicolon statement in a single-line if or else statement, unless it is part of a lambda expression, or the if/else body is enclosed in curly braces.",
    "file": "dock_drive_debug.cpp",
    "line": 60,
    "function": null,
    "comment": "dock_drive_debug.cpp:60:  If/else bodies with multiple statements require braces  [readability/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","if-else","single-line-statements"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "dock_drive_debug.cpp",
    "line": 61,
    "function": null,
    "comment": "dock_drive_debug.cpp:61:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "dock_drive_debug.cpp",
    "line": 61,
    "function": null,
    "comment": "dock_drive_debug.cpp:61:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "The else clause of an else-if clause should be on its own line.",
    "file": "dock_drive_debug.cpp",
    "line": 61,
    "function": null,
    "comment": "dock_drive_debug.cpp:61:  Else clause should never be on same line as else (use 2 lines)  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","google-cpp","if-else"]
  },
  {
    "rule": "There should not be more than one semicolon statement in a single-line if or else statement, unless it is part of a lambda expression, or the if/else body is enclosed in curly braces.",
    "file": "dock_drive_debug.cpp",
    "line": 61,
    "function": null,
    "comment": "dock_drive_debug.cpp:61:  If/else bodies with multiple statements require braces  [readability/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","if-else","single-line-statements"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "dock_drive_debug.cpp",
    "line": 69,
    "function": null,
    "comment": "dock_drive_debug.cpp:69:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "dock_drive_debug.cpp",
    "line": 72,
    "function": null,
    "comment": "dock_drive_debug.cpp:72:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "The else clause of an else-if clause should be on its own line.",
    "file": "dock_drive_debug.cpp",
    "line": 72,
    "function": null,
    "comment": "dock_drive_debug.cpp:72:  Else clause should never be on same line as else (use 2 lines)  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","google-cpp","if-else"]
  },
  {
    "rule": "There should not be more than one semicolon statement in a single-line if or else statement, unless it is part of a lambda expression, or the if/else body is enclosed in curly braces.",
    "file": "dock_drive_debug.cpp",
    "line": 72,
    "function": null,
    "comment": "dock_drive_debug.cpp:72:  If/else bodies with multiple statements require braces  [readability/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","if-else","single-line-statements"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "dock_drive_debug.cpp",
    "line": 73,
    "function": null,
    "comment": "dock_drive_debug.cpp:73:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "The else clause of an else-if clause should be on its own line.",
    "file": "dock_drive_debug.cpp",
    "line": 73,
    "function": null,
    "comment": "dock_drive_debug.cpp:73:  Else clause should never be on same line as else (use 2 lines)  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","google-cpp","if-else"]
  },
  {
    "rule": "There should not be more than one semicolon statement in a single-line if or else statement, unless it is part of a lambda expression, or the if/else body is enclosed in curly braces.",
    "file": "dock_drive_debug.cpp",
    "line": 73,
    "function": null,
    "comment": "dock_drive_debug.cpp:73:  If/else bodies with multiple statements require braces  [readability/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","if-else","single-line-statements"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "dock_drive_debug.cpp",
    "line": 74,
    "function": null,
    "comment": "dock_drive_debug.cpp:74:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "The else clause of an else-if clause should be on its own line.",
    "file": "dock_drive_debug.cpp",
    "line": 74,
    "function": null,
    "comment": "dock_drive_debug.cpp:74:  Else clause should never be on same line as else (use 2 lines)  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","google-cpp","if-else"]
  },
  {
    "rule": "There should not be more than one semicolon statement in a single-line if or else statement, unless it is part of a lambda expression, or the if/else body is enclosed in curly braces.",
    "file": "dock_drive_debug.cpp",
    "line": 74,
    "function": null,
    "comment": "dock_drive_debug.cpp:74:  If/else bodies with multiple statements require braces  [readability/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","if-else","single-line-statements"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "dock_drive_debug.cpp",
    "line": 79,
    "function": null,
    "comment": "dock_drive_debug.cpp:79:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "dock_drive_debug.cpp",
    "line": 84,
    "function": null,
    "comment": "dock_drive_debug.cpp:84:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "The else clause of an else-if clause should be on its own line.",
    "file": "dock_drive_debug.cpp",
    "line": 84,
    "function": null,
    "comment": "dock_drive_debug.cpp:84:  Else clause should never be on same line as else (use 2 lines)  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","google-cpp","if-else"]
  },
  {
    "rule": "There should not be more than one semicolon statement in a single-line if or else statement, unless it is part of a lambda expression, or the if/else body is enclosed in curly braces.",
    "file": "dock_drive_debug.cpp",
    "line": 84,
    "function": null,
    "comment": "dock_drive_debug.cpp:84:  If/else bodies with multiple statements require braces  [readability/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","if-else","single-line-statements"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "dock_drive_debug.cpp",
    "line": 89,
    "function": null,
    "comment": "dock_drive_debug.cpp:89:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "dock_drive_debug.cpp",
    "line": 90,
    "function": null,
    "comment": "dock_drive_debug.cpp:90:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "dock_drive_debug.cpp",
    "line": 94,
    "function": null,
    "comment": "dock_drive_debug.cpp:94:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "dock_drive_debug.cpp",
    "line": 97,
    "function": null,
    "comment": "dock_drive_debug.cpp:97:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "dock_drive_debug.cpp",
    "line": 100,
    "function": null,
    "comment": "dock_drive_debug.cpp:100:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "dock_drive_debug.cpp",
    "line": 102,
    "function": null,
    "comment": "dock_drive_debug.cpp:102:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "dock_drive_debug.cpp",
    "line": 102,
    "function": null,
    "comment": "dock_drive_debug.cpp:102:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "dock_drive_debug.cpp",
    "line": 102,
    "function": null,
    "comment": "dock_drive_debug.cpp:102:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Whitespace inside parenthesis should be consistent, and should consist of either zero or one space.",
    "file": "dock_drive_debug.cpp",
    "line": 102,
    "function": null,
    "comment": "dock_drive_debug.cpp:102:  Mismatching spaces inside () in for  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space after a semicolon, if it does not end the line.",
    "file": "dock_drive_debug.cpp",
    "line": 102,
    "function": null,
    "comment": "dock_drive_debug.cpp:102:  Missing space after ;  [whitespace/semicolon] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "dock_drive_debug.cpp",
    "line": 102,
    "function": null,
    "comment": "dock_drive_debug.cpp:102:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "dock_drive_debug.cpp",
    "line": 110,
    "function": null,
    "comment": "dock_drive_debug.cpp:110:  Namespace should be terminated with '// namespace kobuki'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "dock_drive_debug.cpp",
    "line": 101,
    "function": null,
    "comment": "dock_drive_debug.cpp:101:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "dock_drive_debug.cpp",
    "line": 48,
    "function": null,
    "comment": "dock_drive_debug.cpp:48:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "dock_drive.cpp",
    "line": 44,
    "function": null,
    "comment": "dock_drive.cpp:44:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "dock_drive.cpp",
    "line": 44,
    "function": null,
    "comment": "dock_drive.cpp:44:  Missing spaces around >  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "dock_drive.cpp",
    "line": 46,
    "function": null,
    "comment": "dock_drive.cpp:46:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "dock_drive.cpp",
    "line": 47,
    "function": null,
    "comment": "dock_drive.cpp:47:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "dock_drive.cpp",
    "line": 47,
    "function": null,
    "comment": "dock_drive.cpp:47:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a semicolon, if it does not end the line.",
    "file": "dock_drive.cpp",
    "line": 47,
    "function": null,
    "comment": "dock_drive.cpp:47:  Missing space after ;  [whitespace/semicolon] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "dock_drive.cpp",
    "line": 53,
    "function": null,
    "comment": "dock_drive.cpp:53:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "dock_drive.cpp",
    "line": 59,
    "function": null,
    "comment": "dock_drive.cpp:59:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "dock_drive.cpp",
    "line": 70,
    "function": null,
    "comment": "dock_drive.cpp:70:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "dock_drive.cpp",
    "line": 87,
    "function": null,
    "comment": "dock_drive.cpp:87:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "dock_drive.cpp",
    "line": 90,
    "function": null,
    "comment": "dock_drive.cpp:90:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "dock_drive.cpp",
    "line": 96,
    "function": null,
    "comment": "dock_drive.cpp:96:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "dock_drive.cpp",
    "line": 97,
    "function": null,
    "comment": "dock_drive.cpp:97:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "dock_drive.cpp",
    "line": 97,
    "function": null,
    "comment": "dock_drive.cpp:97:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "dock_drive.cpp",
    "line": 98,
    "function": null,
    "comment": "dock_drive.cpp:98:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "dock_drive.cpp",
    "line": 117,
    "function": null,
    "comment": "dock_drive.cpp:117:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "dock_drive.cpp",
    "line": 118,
    "function": null,
    "comment": "dock_drive.cpp:118:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "dock_drive.cpp",
    "line": 124,
    "function": null,
    "comment": "dock_drive.cpp:124:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "dock_drive.cpp",
    "line": 125,
    "function": null,
    "comment": "dock_drive.cpp:125:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "dock_drive.cpp",
    "line": 125,
    "function": null,
    "comment": "dock_drive.cpp:125:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "dock_drive.cpp",
    "line": 128,
    "function": null,
    "comment": "dock_drive.cpp:128:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "dock_drive.cpp",
    "line": 128,
    "function": null,
    "comment": "dock_drive.cpp:128:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "dock_drive.cpp",
    "line": 128,
    "function": null,
    "comment": "dock_drive.cpp:128:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "dock_drive.cpp",
    "line": 148,
    "function": null,
    "comment": "dock_drive.cpp:148:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "dock_drive.cpp",
    "line": 149,
    "function": null,
    "comment": "dock_drive.cpp:149:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "dock_drive.cpp",
    "line": 152,
    "function": null,
    "comment": "dock_drive.cpp:152:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "dock_drive.cpp",
    "line": 152,
    "function": null,
    "comment": "dock_drive.cpp:152:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "dock_drive.cpp",
    "line": 153,
    "function": null,
    "comment": "dock_drive.cpp:153:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "dock_drive.cpp",
    "line": 154,
    "function": null,
    "comment": "dock_drive.cpp:154:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "dock_drive.cpp",
    "line": 154,
    "function": null,
    "comment": "dock_drive.cpp:154:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "dock_drive.cpp",
    "line": 156,
    "function": null,
    "comment": "dock_drive.cpp:156:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "dock_drive.cpp",
    "line": 167,
    "function": null,
    "comment": "dock_drive.cpp:167:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "dock_drive.cpp",
    "line": 167,
    "function": null,
    "comment": "dock_drive.cpp:167:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "dock_drive.cpp",
    "line": 168,
    "function": null,
    "comment": "dock_drive.cpp:168:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "dock_drive.cpp",
    "line": 169,
    "function": null,
    "comment": "dock_drive.cpp:169:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "dock_drive.cpp",
    "line": 171,
    "function": null,
    "comment": "dock_drive.cpp:171:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "dock_drive.cpp",
    "line": 172,
    "function": null,
    "comment": "dock_drive.cpp:172:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "dock_drive.cpp",
    "line": 172,
    "function": null,
    "comment": "dock_drive.cpp:172:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Whitespace inside parenthesis should be consistent, and should consist of either zero or one space.",
    "file": "dock_drive.cpp",
    "line": 175,
    "function": null,
    "comment": "dock_drive.cpp:175:  Mismatching spaces inside () in for  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "dock_drive.cpp",
    "line": 176,
    "function": null,
    "comment": "dock_drive.cpp:176:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "dock_drive.cpp",
    "line": 184,
    "function": null,
    "comment": "dock_drive.cpp:184:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "dock_drive.cpp",
    "line": 198,
    "function": null,
    "comment": "dock_drive.cpp:198:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "dock_drive.cpp",
    "line": 198,
    "function": null,
    "comment": "dock_drive.cpp:198:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "dock_drive.cpp",
    "line": 200,
    "function": null,
    "comment": "dock_drive.cpp:200:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "dock_drive.cpp",
    "line": 200,
    "function": null,
    "comment": "dock_drive.cpp:200:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "dock_drive.cpp",
    "line": 202,
    "function": null,
    "comment": "dock_drive.cpp:202:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "dock_drive.cpp",
    "line": 204,
    "function": null,
    "comment": "dock_drive.cpp:204:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "dock_drive.cpp",
    "line": 204,
    "function": null,
    "comment": "dock_drive.cpp:204:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "dock_drive.cpp",
    "line": 204,
    "function": null,
    "comment": "dock_drive.cpp:204:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "dock_drive.cpp",
    "line": 204,
    "function": null,
    "comment": "dock_drive.cpp:204:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "dock_drive.cpp",
    "line": 205,
    "function": null,
    "comment": "dock_drive.cpp:205:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "dock_drive.cpp",
    "line": 207,
    "function": null,
    "comment": "dock_drive.cpp:207:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "dock_drive.cpp",
    "line": 209,
    "function": null,
    "comment": "dock_drive.cpp:209:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "dock_drive.cpp",
    "line": 209,
    "function": null,
    "comment": "dock_drive.cpp:209:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "dock_drive.cpp",
    "line": 209,
    "function": null,
    "comment": "dock_drive.cpp:209:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "dock_drive.cpp",
    "line": 209,
    "function": null,
    "comment": "dock_drive.cpp:209:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "dock_drive.cpp",
    "line": 216,
    "function": null,
    "comment": "dock_drive.cpp:216:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "dock_drive.cpp",
    "line": 216,
    "function": null,
    "comment": "dock_drive.cpp:216:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "dock_drive.cpp",
    "line": 216,
    "function": null,
    "comment": "dock_drive.cpp:216:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "dock_drive.cpp",
    "line": 218,
    "function": null,
    "comment": "dock_drive.cpp:218:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "dock_drive.cpp",
    "line": 221,
    "function": null,
    "comment": "dock_drive.cpp:221:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "dock_drive.cpp",
    "line": 221,
    "function": null,
    "comment": "dock_drive.cpp:221:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "dock_drive.cpp",
    "line": 221,
    "function": null,
    "comment": "dock_drive.cpp:221:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "dock_drive.cpp",
    "line": 221,
    "function": null,
    "comment": "dock_drive.cpp:221:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "dock_drive.cpp",
    "line": 238,
    "function": null,
    "comment": "dock_drive.cpp:238:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "dock_drive.cpp",
    "line": 239,
    "function": null,
    "comment": "dock_drive.cpp:239:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "dock_drive.cpp",
    "line": 246,
    "function": null,
    "comment": "dock_drive.cpp:246:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "dock_drive.cpp",
    "line": 249,
    "function": null,
    "comment": "dock_drive.cpp:249:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "dock_drive.cpp",
    "line": 249,
    "function": null,
    "comment": "dock_drive.cpp:249:  Missing space before ( in switch(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "dock_drive.cpp",
    "line": 288,
    "function": null,
    "comment": "dock_drive.cpp:288:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "dock_drive.cpp",
    "line": 289,
    "function": null,
    "comment": "dock_drive.cpp:289:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "dock_drive.cpp",
    "line": 291,
    "function": null,
    "comment": "dock_drive.cpp:291:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "dock_drive.cpp",
    "line": 292,
    "function": null,
    "comment": "dock_drive.cpp:292:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "dock_drive.cpp",
    "line": 293,
    "function": null,
    "comment": "dock_drive.cpp:293:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "dock_drive.cpp",
    "line": 299,
    "function": null,
    "comment": "dock_drive.cpp:299:  Namespace should be terminated with '// namespace kobuki'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "dock_drive.cpp",
    "line": 299,
    "function": null,
    "comment": "dock_drive.cpp:299:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "dock_drive.cpp",
    "line": 238,
    "function": null,
    "comment": "dock_drive.cpp:238:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "dock_drive.cpp",
    "line": 92,
    "function": null,
    "comment": "dock_drive.cpp:92:  Add #include <algorithm> for max  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "dock_drive.cpp",
    "line": 288,
    "function": null,
    "comment": "dock_drive.cpp:288:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "dock_drive_states.cpp",
    "line": 44,
    "function": null,
    "comment": "dock_drive_states.cpp:44:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "dock_drive_states.cpp",
    "line": 61,
    "function": null,
    "comment": "dock_drive_states.cpp:61:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "dock_drive_states.cpp",
    "line": 61,
    "function": null,
    "comment": "dock_drive_states.cpp:61:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "dock_drive_states.cpp",
    "line": 61,
    "function": null,
    "comment": "dock_drive_states.cpp:61:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "dock_drive_states.cpp",
    "line": 78,
    "function": null,
    "comment": "dock_drive_states.cpp:78:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "dock_drive_states.cpp",
    "line": 78,
    "function": null,
    "comment": "dock_drive_states.cpp:78:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "dock_drive_states.cpp",
    "line": 78,
    "function": null,
    "comment": "dock_drive_states.cpp:78:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "dock_drive_states.cpp",
    "line": 89,
    "function": null,
    "comment": "dock_drive_states.cpp:89:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "dock_drive_states.cpp",
    "line": 94,
    "function": null,
    "comment": "dock_drive_states.cpp:94:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "dock_drive_states.cpp",
    "line": 94,
    "function": null,
    "comment": "dock_drive_states.cpp:94:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "dock_drive_states.cpp",
    "line": 95,
    "function": null,
    "comment": "dock_drive_states.cpp:95:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "dock_drive_states.cpp",
    "line": 101,
    "function": null,
    "comment": "dock_drive_states.cpp:101:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "dock_drive_states.cpp",
    "line": 101,
    "function": null,
    "comment": "dock_drive_states.cpp:101:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "dock_drive_states.cpp",
    "line": 101,
    "function": null,
    "comment": "dock_drive_states.cpp:101:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "dock_drive_states.cpp",
    "line": 101,
    "function": null,
    "comment": "dock_drive_states.cpp:101:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "dock_drive_states.cpp",
    "line": 102,
    "function": null,
    "comment": "dock_drive_states.cpp:102:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "dock_drive_states.cpp",
    "line": 103,
    "function": null,
    "comment": "dock_drive_states.cpp:103:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "dock_drive_states.cpp",
    "line": 109,
    "function": null,
    "comment": "dock_drive_states.cpp:109:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "dock_drive_states.cpp",
    "line": 109,
    "function": null,
    "comment": "dock_drive_states.cpp:109:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "dock_drive_states.cpp",
    "line": 109,
    "function": null,
    "comment": "dock_drive_states.cpp:109:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "dock_drive_states.cpp",
    "line": 110,
    "function": null,
    "comment": "dock_drive_states.cpp:110:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "dock_drive_states.cpp",
    "line": 115,
    "function": null,
    "comment": "dock_drive_states.cpp:115:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "dock_drive_states.cpp",
    "line": 116,
    "function": null,
    "comment": "dock_drive_states.cpp:116:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "dock_drive_states.cpp",
    "line": 117,
    "function": null,
    "comment": "dock_drive_states.cpp:117:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "dock_drive_states.cpp",
    "line": 117,
    "function": null,
    "comment": "dock_drive_states.cpp:117:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "dock_drive_states.cpp",
    "line": 117,
    "function": null,
    "comment": "dock_drive_states.cpp:117:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "dock_drive_states.cpp",
    "line": 117,
    "function": null,
    "comment": "dock_drive_states.cpp:117:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "dock_drive_states.cpp",
    "line": 117,
    "function": null,
    "comment": "dock_drive_states.cpp:117:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "dock_drive_states.cpp",
    "line": 122,
    "function": null,
    "comment": "dock_drive_states.cpp:122:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "dock_drive_states.cpp",
    "line": 122,
    "function": null,
    "comment": "dock_drive_states.cpp:122:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "dock_drive_states.cpp",
    "line": 122,
    "function": null,
    "comment": "dock_drive_states.cpp:122:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "dock_drive_states.cpp",
    "line": 123,
    "function": null,
    "comment": "dock_drive_states.cpp:123:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "dock_drive_states.cpp",
    "line": 128,
    "function": null,
    "comment": "dock_drive_states.cpp:128:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "dock_drive_states.cpp",
    "line": 128,
    "function": null,
    "comment": "dock_drive_states.cpp:128:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "dock_drive_states.cpp",
    "line": 128,
    "function": null,
    "comment": "dock_drive_states.cpp:128:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "dock_drive_states.cpp",
    "line": 128,
    "function": null,
    "comment": "dock_drive_states.cpp:128:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "dock_drive_states.cpp",
    "line": 135,
    "function": null,
    "comment": "dock_drive_states.cpp:135:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "dock_drive_states.cpp",
    "line": 147,
    "function": null,
    "comment": "dock_drive_states.cpp:147:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "dock_drive_states.cpp",
    "line": 147,
    "function": null,
    "comment": "dock_drive_states.cpp:147:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "dock_drive_states.cpp",
    "line": 147,
    "function": null,
    "comment": "dock_drive_states.cpp:147:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "dock_drive_states.cpp",
    "line": 155,
    "function": null,
    "comment": "dock_drive_states.cpp:155:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "dock_drive_states.cpp",
    "line": 155,
    "function": null,
    "comment": "dock_drive_states.cpp:155:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "dock_drive_states.cpp",
    "line": 155,
    "function": null,
    "comment": "dock_drive_states.cpp:155:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "dock_drive_states.cpp",
    "line": 156,
    "function": null,
    "comment": "dock_drive_states.cpp:156:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "dock_drive_states.cpp",
    "line": 158,
    "function": null,
    "comment": "dock_drive_states.cpp:158:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "dock_drive_states.cpp",
    "line": 158,
    "function": null,
    "comment": "dock_drive_states.cpp:158:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "dock_drive_states.cpp",
    "line": 158,
    "function": null,
    "comment": "dock_drive_states.cpp:158:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "dock_drive_states.cpp",
    "line": 163,
    "function": null,
    "comment": "dock_drive_states.cpp:163:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "dock_drive_states.cpp",
    "line": 163,
    "function": null,
    "comment": "dock_drive_states.cpp:163:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "dock_drive_states.cpp",
    "line": 163,
    "function": null,
    "comment": "dock_drive_states.cpp:163:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "dock_drive_states.cpp",
    "line": 169,
    "function": null,
    "comment": "dock_drive_states.cpp:169:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "dock_drive_states.cpp",
    "line": 169,
    "function": null,
    "comment": "dock_drive_states.cpp:169:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "dock_drive_states.cpp",
    "line": 169,
    "function": null,
    "comment": "dock_drive_states.cpp:169:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "dock_drive_states.cpp",
    "line": 170,
    "function": null,
    "comment": "dock_drive_states.cpp:170:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "dock_drive_states.cpp",
    "line": 172,
    "function": null,
    "comment": "dock_drive_states.cpp:172:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "dock_drive_states.cpp",
    "line": 173,
    "function": null,
    "comment": "dock_drive_states.cpp:173:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "dock_drive_states.cpp",
    "line": 176,
    "function": null,
    "comment": "dock_drive_states.cpp:176:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "dock_drive_states.cpp",
    "line": 178,
    "function": null,
    "comment": "dock_drive_states.cpp:178:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "dock_drive_states.cpp",
    "line": 178,
    "function": null,
    "comment": "dock_drive_states.cpp:178:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "dock_drive_states.cpp",
    "line": 178,
    "function": null,
    "comment": "dock_drive_states.cpp:178:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "dock_drive_states.cpp",
    "line": 198,
    "function": null,
    "comment": "dock_drive_states.cpp:198:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "dock_drive_states.cpp",
    "line": 198,
    "function": null,
    "comment": "dock_drive_states.cpp:198:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "dock_drive_states.cpp",
    "line": 198,
    "function": null,
    "comment": "dock_drive_states.cpp:198:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "dock_drive_states.cpp",
    "line": 199,
    "function": null,
    "comment": "dock_drive_states.cpp:199:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "dock_drive_states.cpp",
    "line": 207,
    "function": null,
    "comment": "dock_drive_states.cpp:207:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "dock_drive_states.cpp",
    "line": 207,
    "function": null,
    "comment": "dock_drive_states.cpp:207:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "dock_drive_states.cpp",
    "line": 207,
    "function": null,
    "comment": "dock_drive_states.cpp:207:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "dock_drive_states.cpp",
    "line": 208,
    "function": null,
    "comment": "dock_drive_states.cpp:208:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "dock_drive_states.cpp",
    "line": 208,
    "function": null,
    "comment": "dock_drive_states.cpp:208:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "dock_drive_states.cpp",
    "line": 215,
    "function": null,
    "comment": "dock_drive_states.cpp:215:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "dock_drive_states.cpp",
    "line": 215,
    "function": null,
    "comment": "dock_drive_states.cpp:215:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "dock_drive_states.cpp",
    "line": 215,
    "function": null,
    "comment": "dock_drive_states.cpp:215:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "dock_drive_states.cpp",
    "line": 221,
    "function": null,
    "comment": "dock_drive_states.cpp:221:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "dock_drive_states.cpp",
    "line": 221,
    "function": null,
    "comment": "dock_drive_states.cpp:221:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "dock_drive_states.cpp",
    "line": 221,
    "function": null,
    "comment": "dock_drive_states.cpp:221:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "dock_drive_states.cpp",
    "line": 221,
    "function": null,
    "comment": "dock_drive_states.cpp:221:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "dock_drive_states.cpp",
    "line": 221,
    "function": null,
    "comment": "dock_drive_states.cpp:221:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "dock_drive_states.cpp",
    "line": 222,
    "function": null,
    "comment": "dock_drive_states.cpp:222:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "dock_drive_states.cpp",
    "line": 222,
    "function": null,
    "comment": "dock_drive_states.cpp:222:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "dock_drive_states.cpp",
    "line": 222,
    "function": null,
    "comment": "dock_drive_states.cpp:222:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "dock_drive_states.cpp",
    "line": 229,
    "function": null,
    "comment": "dock_drive_states.cpp:229:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "dock_drive_states.cpp",
    "line": 229,
    "function": null,
    "comment": "dock_drive_states.cpp:229:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "dock_drive_states.cpp",
    "line": 229,
    "function": null,
    "comment": "dock_drive_states.cpp:229:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "dock_drive_states.cpp",
    "line": 250,
    "function": null,
    "comment": "dock_drive_states.cpp:250:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "dock_drive_states.cpp",
    "line": 250,
    "function": null,
    "comment": "dock_drive_states.cpp:250:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "dock_drive_states.cpp",
    "line": 250,
    "function": null,
    "comment": "dock_drive_states.cpp:250:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "dock_drive_states.cpp",
    "line": 251,
    "function": null,
    "comment": "dock_drive_states.cpp:251:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "dock_drive_states.cpp",
    "line": 259,
    "function": null,
    "comment": "dock_drive_states.cpp:259:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "dock_drive_states.cpp",
    "line": 259,
    "function": null,
    "comment": "dock_drive_states.cpp:259:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "dock_drive_states.cpp",
    "line": 260,
    "function": null,
    "comment": "dock_drive_states.cpp:260:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "dock_drive_states.cpp",
    "line": 261,
    "function": null,
    "comment": "dock_drive_states.cpp:261:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "dock_drive_states.cpp",
    "line": 261,
    "function": null,
    "comment": "dock_drive_states.cpp:261:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "dock_drive_states.cpp",
    "line": 262,
    "function": null,
    "comment": "dock_drive_states.cpp:262:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "dock_drive_states.cpp",
    "line": 268,
    "function": null,
    "comment": "dock_drive_states.cpp:268:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "dock_drive_states.cpp",
    "line": 268,
    "function": null,
    "comment": "dock_drive_states.cpp:268:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "dock_drive_states.cpp",
    "line": 268,
    "function": null,
    "comment": "dock_drive_states.cpp:268:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "dock_drive_states.cpp",
    "line": 268,
    "function": null,
    "comment": "dock_drive_states.cpp:268:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "dock_drive_states.cpp",
    "line": 274,
    "function": null,
    "comment": "dock_drive_states.cpp:274:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "dock_drive_states.cpp",
    "line": 274,
    "function": null,
    "comment": "dock_drive_states.cpp:274:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "dock_drive_states.cpp",
    "line": 274,
    "function": null,
    "comment": "dock_drive_states.cpp:274:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "dock_drive_states.cpp",
    "line": 274,
    "function": null,
    "comment": "dock_drive_states.cpp:274:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "dock_drive_states.cpp",
    "line": 280,
    "function": null,
    "comment": "dock_drive_states.cpp:280:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "dock_drive_states.cpp",
    "line": 280,
    "function": null,
    "comment": "dock_drive_states.cpp:280:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "dock_drive_states.cpp",
    "line": 280,
    "function": null,
    "comment": "dock_drive_states.cpp:280:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "dock_drive_states.cpp",
    "line": 280,
    "function": null,
    "comment": "dock_drive_states.cpp:280:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "dock_drive_states.cpp",
    "line": 286,
    "function": null,
    "comment": "dock_drive_states.cpp:286:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "dock_drive_states.cpp",
    "line": 286,
    "function": null,
    "comment": "dock_drive_states.cpp:286:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "dock_drive_states.cpp",
    "line": 286,
    "function": null,
    "comment": "dock_drive_states.cpp:286:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "dock_drive_states.cpp",
    "line": 286,
    "function": null,
    "comment": "dock_drive_states.cpp:286:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "dock_drive_states.cpp",
    "line": 292,
    "function": null,
    "comment": "dock_drive_states.cpp:292:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "dock_drive_states.cpp",
    "line": 292,
    "function": null,
    "comment": "dock_drive_states.cpp:292:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "dock_drive_states.cpp",
    "line": 292,
    "function": null,
    "comment": "dock_drive_states.cpp:292:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "dock_drive_states.cpp",
    "line": 292,
    "function": null,
    "comment": "dock_drive_states.cpp:292:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "dock_drive_states.cpp",
    "line": 298,
    "function": null,
    "comment": "dock_drive_states.cpp:298:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "dock_drive_states.cpp",
    "line": 298,
    "function": null,
    "comment": "dock_drive_states.cpp:298:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "dock_drive_states.cpp",
    "line": 298,
    "function": null,
    "comment": "dock_drive_states.cpp:298:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "dock_drive_states.cpp",
    "line": 306,
    "function": null,
    "comment": "dock_drive_states.cpp:306:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "dock_drive_states.cpp",
    "line": 306,
    "function": null,
    "comment": "dock_drive_states.cpp:306:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "dock_drive_states.cpp",
    "line": 306,
    "function": null,
    "comment": "dock_drive_states.cpp:306:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "dock_drive_states.cpp",
    "line": 323,
    "function": null,
    "comment": "dock_drive_states.cpp:323:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "dock_drive_states.cpp",
    "line": 323,
    "function": null,
    "comment": "dock_drive_states.cpp:323:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "dock_drive_states.cpp",
    "line": 323,
    "function": null,
    "comment": "dock_drive_states.cpp:323:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "dock_drive_states.cpp",
    "line": 324,
    "function": null,
    "comment": "dock_drive_states.cpp:324:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "dock_drive_states.cpp",
    "line": 325,
    "function": null,
    "comment": "dock_drive_states.cpp:325:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "dock_drive_states.cpp",
    "line": 326,
    "function": null,
    "comment": "dock_drive_states.cpp:326:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "dock_drive_states.cpp",
    "line": 331,
    "function": null,
    "comment": "dock_drive_states.cpp:331:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "dock_drive_states.cpp",
    "line": 331,
    "function": null,
    "comment": "dock_drive_states.cpp:331:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "dock_drive_states.cpp",
    "line": 331,
    "function": null,
    "comment": "dock_drive_states.cpp:331:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "dock_drive_states.cpp",
    "line": 337,
    "function": null,
    "comment": "dock_drive_states.cpp:337:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "dock_drive_states.cpp",
    "line": 339,
    "function": null,
    "comment": "dock_drive_states.cpp:339:  Namespace should be terminated with '// namespace kobuki'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "dock_drive_states.cpp",
    "line": 339,
    "function": null,
    "comment": "dock_drive_states.cpp:339:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "dock_drive_states.cpp",
    "line": 250,
    "function": null,
    "comment": "dock_drive_states.cpp:250:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "dock_drive_states.cpp",
    "line": 250,
    "function": null,
    "comment": "dock_drive_states.cpp:250:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "dock_drive.cpp",
    "line": 175,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "dock_drive.cpp",
    "line": 178,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "dock_drive.cpp",
    "line": 288,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "dock_drive.cpp",
    "line": 290,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "dock_drive_debug.cpp",
    "line": 55,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "dock_drive_debug.cpp",
    "line": 102,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Ensure that no expression is redundant.",
    "file": "dock_drive_states.cpp",
    "line": 79,
    "function": null,
    "comment": "Variable 'right' is assigned a value that is never used.",
    "tags": ["hicpp","code-standards","redundancy"]
  },
  {
    "rule": "Ensure that no expression is redundant.",
    "file": "dock_drive_states.cpp",
    "line": 81,
    "function": null,
    "comment": "Variable 'left' is assigned a value that is never used.",
    "tags": ["hicpp","code-standards","redundancy"]
  },
  {
    "rule": "Ensure that no expression is redundant.",
    "file": "dock_drive_states.cpp",
    "line": 149,
    "function": null,
    "comment": "Variable 'mid' is assigned a value that is never used.",
    "tags": ["hicpp","code-standards","redundancy"]
  },
  {
    "rule": "Ensure that no expression is redundant.",
    "file": "dock_drive_states.cpp",
    "line": 201,
    "function": null,
    "comment": "Variable 'mid' is assigned a value that is never used.",
    "tags": ["hicpp","code-standards","redundancy"]
  },
  {
    "rule": "Ensure that no expression is redundant.",
    "file": "dock_drive_states.cpp",
    "line": 252,
    "function": null,
    "comment": "Variable 'right' is assigned a value that is never used.",
    "tags": ["hicpp","code-standards","redundancy"]
  },
  {
    "rule": "Ensure that no expression is redundant.",
    "file": "dock_drive_states.cpp",
    "line": 254,
    "function": null,
    "comment": "Variable 'left' is assigned a value that is never used.",
    "tags": ["hicpp","code-standards","redundancy"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "dock_drive_states.cpp",
    "line": 323,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "dock_drive.cpp",
    "line": 95,
    "function": null,
    "comment": "The function 'modeShift' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "dock_drive.cpp",
    "line": 114,
    "function": null,
    "comment": "The function 'update' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "dock_drive.cpp",
    "line": 288,
    "function": null,
    "comment": "The function 'validateSignal' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "dock_drive.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "dock_drive.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "state.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "state.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "dock_drive_debug.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "dock_drive_debug.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "dock_drive_debug.cpp",
    "line": 48,
    "function": "generateDebugMessage",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "dock_drive.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "dock_drive.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "dock_drive_states.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "dock_drive_states.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  }
]