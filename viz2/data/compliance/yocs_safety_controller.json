[
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "safety_controller.hpp",
    "line": null,
    "function": null,
    "comment": "safety_controller.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "safety_controller.hpp",
    "line": 14,
    "function": null,
    "comment": "safety_controller.hpp:14:  Found C system header after C++ system header. Should be: safety_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "safety_controller.hpp",
    "line": 15,
    "function": null,
    "comment": "safety_controller.hpp:15:  Found C system header after C++ system header. Should be: safety_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "safety_controller.hpp",
    "line": 16,
    "function": null,
    "comment": "safety_controller.hpp:16:  Found C system header after C++ system header. Should be: safety_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "safety_controller.hpp",
    "line": 17,
    "function": null,
    "comment": "safety_controller.hpp:17:  Found C system header after C++ system header. Should be: safety_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "safety_controller.hpp",
    "line": 18,
    "function": null,
    "comment": "safety_controller.hpp:18:  Found C system header after C++ system header. Should be: safety_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "safety_controller.hpp",
    "line": 21,
    "function": null,
    "comment": "safety_controller.hpp:21:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "safety_controller.hpp",
    "line": 36,
    "function": null,
    "comment": "safety_controller.hpp:36:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "safety_controller.hpp",
    "line": 37,
    "function": null,
    "comment": "safety_controller.hpp:37:  public: should be indented +1 space inside class SafetyController  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "safety_controller.hpp",
    "line": 38,
    "function": null,
    "comment": "safety_controller.hpp:38:  Is this a non-const reference? If so, make const or use a pointer: ros::NodeHandle& nh_priv  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "safety_controller.hpp",
    "line": 38,
    "function": null,
    "comment": "safety_controller.hpp:38:  Is this a non-const reference? If so, make const or use a pointer: std::string& name  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Do not use meaningless empty statements.",
    "file": "safety_controller.hpp",
    "line": 39,
    "function": null,
    "comment": "safety_controller.hpp:39:  You don't need a ; after a }  [readability/braces] [4]",
    "tags": ["code-standards","google-cpp","empty-statement","ambiguous-code"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "safety_controller.hpp",
    "line": 52,
    "function": null,
    "comment": "safety_controller.hpp:52:  private: should be indented +1 space inside class SafetyController  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "safety_controller.hpp",
    "line": 55,
    "function": null,
    "comment": "safety_controller.hpp:55:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "safety_controller.hpp",
    "line": 57,
    "function": null,
    "comment": "safety_controller.hpp:57:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "safety_controller.hpp",
    "line": 108,
    "function": null,
    "comment": "safety_controller.hpp:108:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "safety_controller.hpp",
    "line": 110,
    "function": null,
    "comment": "safety_controller.hpp:110:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "library.cpp",
    "line": null,
    "function": null,
    "comment": "library.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "library.cpp",
    "line": 10,
    "function": null,
    "comment": "library.cpp:10:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "library.cpp",
    "line": 12,
    "function": null,
    "comment": "library.cpp:12:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "library.cpp",
    "line": 27,
    "function": null,
    "comment": "library.cpp:27:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "library.cpp",
    "line": 29,
    "function": null,
    "comment": "library.cpp:29:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "library.cpp",
    "line": 30,
    "function": null,
    "comment": "library.cpp:30:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "library.cpp",
    "line": 34,
    "function": null,
    "comment": "library.cpp:34:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "library.cpp",
    "line": 36,
    "function": null,
    "comment": "library.cpp:36:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "library.cpp",
    "line": 37,
    "function": null,
    "comment": "library.cpp:37:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "library.cpp",
    "line": 41,
    "function": null,
    "comment": "library.cpp:41:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "library.cpp",
    "line": 42,
    "function": null,
    "comment": "library.cpp:42:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "library.cpp",
    "line": 50,
    "function": null,
    "comment": "library.cpp:50:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "library.cpp",
    "line": 51,
    "function": null,
    "comment": "library.cpp:51:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "library.cpp",
    "line": 52,
    "function": null,
    "comment": "library.cpp:52:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "library.cpp",
    "line": 53,
    "function": null,
    "comment": "library.cpp:53:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "library.cpp",
    "line": 58,
    "function": null,
    "comment": "library.cpp:58:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "library.cpp",
    "line": 60,
    "function": null,
    "comment": "library.cpp:60:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "library.cpp",
    "line": 63,
    "function": null,
    "comment": "library.cpp:63:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "library.cpp",
    "line": 64,
    "function": null,
    "comment": "library.cpp:64:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "library.cpp",
    "line": 70,
    "function": null,
    "comment": "library.cpp:70:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "library.cpp",
    "line": 72,
    "function": null,
    "comment": "library.cpp:72:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "library.cpp",
    "line": 75,
    "function": null,
    "comment": "library.cpp:75:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "library.cpp",
    "line": 76,
    "function": null,
    "comment": "library.cpp:76:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "library.cpp",
    "line": 82,
    "function": null,
    "comment": "library.cpp:82:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "library.cpp",
    "line": 84,
    "function": null,
    "comment": "library.cpp:84:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "library.cpp",
    "line": 86,
    "function": null,
    "comment": "library.cpp:86:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "library.cpp",
    "line": 86,
    "function": null,
    "comment": "library.cpp:86:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "library.cpp",
    "line": 87,
    "function": null,
    "comment": "library.cpp:87:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "library.cpp",
    "line": 95,
    "function": null,
    "comment": "library.cpp:95:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "library.cpp",
    "line": 97,
    "function": null,
    "comment": "library.cpp:97:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "library.cpp",
    "line": 99,
    "function": null,
    "comment": "library.cpp:99:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "library.cpp",
    "line": 102,
    "function": null,
    "comment": "library.cpp:102:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "library.cpp",
    "line": 103,
    "function": null,
    "comment": "library.cpp:103:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "library.cpp",
    "line": 115,
    "function": null,
    "comment": "library.cpp:115:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "library.cpp",
    "line": 116,
    "function": null,
    "comment": "library.cpp:116:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "library.cpp",
    "line": 118,
    "function": null,
    "comment": "library.cpp:118:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "library.cpp",
    "line": 132,
    "function": null,
    "comment": "library.cpp:132:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "library.cpp",
    "line": 141,
    "function": null,
    "comment": "library.cpp:141:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "library.cpp",
    "line": 12,
    "function": null,
    "comment": "library.cpp:12:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "nodelet.cpp",
    "line": null,
    "function": null,
    "comment": "nodelet.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "nodelet.cpp",
    "line": 13,
    "function": null,
    "comment": "nodelet.cpp:13:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "nodelet.cpp",
    "line": 16,
    "function": null,
    "comment": "nodelet.cpp:16:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "nodelet.cpp",
    "line": 17,
    "function": null,
    "comment": "nodelet.cpp:17:  public: should be indented +1 space inside class SafetyControllerNodelet  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Do not use meaningless empty statements.",
    "file": "nodelet.cpp",
    "line": 18,
    "function": null,
    "comment": "nodelet.cpp:18:  You don't need a ; after a }  [readability/braces] [4]",
    "tags": ["code-standards","google-cpp","empty-statement","ambiguous-code"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "nodelet.cpp",
    "line": 20,
    "function": null,
    "comment": "nodelet.cpp:20:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "nodelet.cpp",
    "line": 26,
    "function": null,
    "comment": "nodelet.cpp:26:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "nodelet.cpp",
    "line": 35,
    "function": null,
    "comment": "nodelet.cpp:35:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "nodelet.cpp",
    "line": 36,
    "function": null,
    "comment": "nodelet.cpp:36:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "nodelet.cpp",
    "line": 40,
    "function": null,
    "comment": "nodelet.cpp:40:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "nodelet.cpp",
    "line": 41,
    "function": null,
    "comment": "nodelet.cpp:41:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "nodelet.cpp",
    "line": 42,
    "function": null,
    "comment": "nodelet.cpp:42:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "nodelet.cpp",
    "line": 45,
    "function": null,
    "comment": "nodelet.cpp:45:  private: should be indented +1 space inside class SafetyControllerNodelet  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "nodelet.cpp",
    "line": 47,
    "function": null,
    "comment": "nodelet.cpp:47:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "nodelet.cpp",
    "line": 49,
    "function": null,
    "comment": "nodelet.cpp:49:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Unary operators should have no whitespace around them.",
    "file": "nodelet.cpp",
    "line": 50,
    "function": null,
    "comment": "nodelet.cpp:50:  Extra space for operator !   [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","unary-operator"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "nodelet.cpp",
    "line": 51,
    "function": null,
    "comment": "nodelet.cpp:51:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "nodelet.cpp",
    "line": 62,
    "function": null,
    "comment": "nodelet.cpp:62:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "nodelet.cpp",
    "line": 29,
    "function": null,
    "comment": "nodelet.cpp:29:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "nodelet.cpp",
    "line": 30,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "nodelet.cpp",
    "line": 25,
    "function": null,
    "comment": "The function 'onInit' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "safety_controller.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "safety_controller.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Maximum coupling between objects: 5",
    "file": "safety_controller.hpp",
    "line": null,
    "function": null,
    "comment": "CBO is greater than 5, SafetyController, 11",
    "tags": ["metrics","nasa-satc","ros","coupling"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "library.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "nodelet.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  }
]