[
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "waypoint_provider.hpp",
    "line": null,
    "function": null,
    "comment": "waypoint_provider.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "waypoint_provider.hpp",
    "line": 22,
    "function": null,
    "comment": "waypoint_provider.hpp:22:  Include 'yocs_msgs/WaypointList.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "waypoint_provider.hpp",
    "line": 32,
    "function": null,
    "comment": "waypoint_provider.hpp:32:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not indent within a namespace.",
    "file": "waypoint_provider.hpp",
    "line": 33,
    "function": null,
    "comment": "waypoint_provider.hpp:33:  Do not indent within a namespace  [runtime/indentation_namespace] [4]",
    "tags": ["code-standards","formatting","google-cpp","indentation","namespace"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "waypoint_provider.hpp",
    "line": 33,
    "function": null,
    "comment": "waypoint_provider.hpp:33:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "waypoint_provider.hpp",
    "line": 34,
    "function": null,
    "comment": "waypoint_provider.hpp:34:  public: should be indented +1 space inside class WaypointProvider  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoint_provider.hpp",
    "line": 35,
    "function": null,
    "comment": "waypoint_provider.hpp:35:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "waypoint_provider.hpp",
    "line": 35,
    "function": null,
    "comment": "waypoint_provider.hpp:35:  Is this a non-const reference? If so, make const or use a pointer: ros::NodeHandle& n  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "waypoint_provider.hpp",
    "line": 35,
    "function": null,
    "comment": "waypoint_provider.hpp:35:  Is this a non-const reference? If so, make const or use a pointer: yocs_msgs::WaypointList& wps  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "waypoint_provider.hpp",
    "line": 35,
    "function": null,
    "comment": "waypoint_provider.hpp:35:  Is this a non-const reference? If so, make const or use a pointer: yocs_msgs::TrajectoryList& trajs  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "waypoint_provider.hpp",
    "line": 39,
    "function": null,
    "comment": "waypoint_provider.hpp:39:  protected: should be indented +1 space inside class WaypointProvider  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The line before an access modifier (public, private, protected) should be blank, unless it is the beginning of the class.",
    "file": "waypoint_provider.hpp",
    "line": 39,
    "function": null,
    "comment": "waypoint_provider.hpp:39:  'protected:' should be preceded by a blank line  [whitespace/blank_line] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoint_provider.hpp",
    "line": 41,
    "function": null,
    "comment": "waypoint_provider.hpp:41:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "waypoint_provider.hpp",
    "line": 41,
    "function": null,
    "comment": "waypoint_provider.hpp:41:  Is this a non-const reference? If so, make const or use a pointer: yocs_msgs::WaypointListService::Request& request  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoint_provider.hpp",
    "line": 42,
    "function": null,
    "comment": "waypoint_provider.hpp:42:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "waypoint_provider.hpp",
    "line": 42,
    "function": null,
    "comment": "waypoint_provider.hpp:42:  Is this a non-const reference? If so, make const or use a pointer: yocs_msgs::WaypointListService::Response& response  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoint_provider.hpp",
    "line": 43,
    "function": null,
    "comment": "waypoint_provider.hpp:43:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "waypoint_provider.hpp",
    "line": 43,
    "function": null,
    "comment": "waypoint_provider.hpp:43:  Is this a non-const reference? If so, make const or use a pointer: visualization_msgs::MarkerArray& wp_markers  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoint_provider.hpp",
    "line": 45,
    "function": null,
    "comment": "waypoint_provider.hpp:45:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "waypoint_provider.hpp",
    "line": 45,
    "function": null,
    "comment": "waypoint_provider.hpp:45:  Is this a non-const reference? If so, make const or use a pointer: visualization_msgs::MarkerArray& traj_markers  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoint_provider.hpp",
    "line": 46,
    "function": null,
    "comment": "waypoint_provider.hpp:46:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "waypoint_provider.hpp",
    "line": 46,
    "function": null,
    "comment": "waypoint_provider.hpp:46:  Is this a non-const reference? If so, make const or use a pointer: visualization_msgs::Marker& marker  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoint_provider.hpp",
    "line": 47,
    "function": null,
    "comment": "waypoint_provider.hpp:47:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "waypoint_provider.hpp",
    "line": 47,
    "function": null,
    "comment": "waypoint_provider.hpp:47:  Is this a non-const reference? If so, make const or use a pointer: visualization_msgs::Marker& marker  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "waypoint_provider.hpp",
    "line": 53,
    "function": null,
    "comment": "waypoint_provider.hpp:53:  Is this a non-const reference? If so, make const or use a pointer: visualization_msgs::Marker& marker  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "waypoint_provider.hpp",
    "line": 55,
    "function": null,
    "comment": "waypoint_provider.hpp:55:  private: should be indented +1 space inside class WaypointProvider  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "waypoint_provider.hpp",
    "line": 69,
    "function": null,
    "comment": "waypoint_provider.hpp:69:  Namespace should be terminated with '// namespace yocs'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "waypoint_provider.hpp",
    "line": 71,
    "function": null,
    "comment": "waypoint_provider.hpp:71:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "waypoint_provider.hpp",
    "line": 51,
    "function": null,
    "comment": "waypoint_provider.hpp:51:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "yaml_parser.hpp",
    "line": null,
    "function": null,
    "comment": "yaml_parser.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "yaml_parser.hpp",
    "line": 14,
    "function": null,
    "comment": "yaml_parser.hpp:14:  Found C system header after C++ system header. Should be: yaml_parser.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "yaml_parser.hpp",
    "line": 15,
    "function": null,
    "comment": "yaml_parser.hpp:15:  Found C system header after C++ system header. Should be: yaml_parser.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "yaml_parser.hpp",
    "line": 16,
    "function": null,
    "comment": "yaml_parser.hpp:16:  Found C system header after C++ system header. Should be: yaml_parser.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "yaml_parser.hpp",
    "line": 17,
    "function": null,
    "comment": "yaml_parser.hpp:17:  Found C system header after C++ system header. Should be: yaml_parser.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "yaml_parser.hpp",
    "line": 24,
    "function": null,
    "comment": "yaml_parser.hpp:24:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "yaml_parser.hpp",
    "line": 30,
    "function": null,
    "comment": "yaml_parser.hpp:30:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "yaml_parser.hpp",
    "line": 32,
    "function": null,
    "comment": "yaml_parser.hpp:32:  Is this a non-const reference? If so, make const or use a pointer: yocs_msgs::WaypointList& wps  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "yaml_parser.hpp",
    "line": 33,
    "function": null,
    "comment": "yaml_parser.hpp:33:  Is this a non-const reference? If so, make const or use a pointer: yocs_msgs::TrajectoryList& trajs  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "yaml_parser.hpp",
    "line": 34,
    "function": null,
    "comment": "yaml_parser.hpp:34:  Is this a non-const reference? If so, make const or use a pointer: YAML::Node& node  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "yaml_parser.hpp",
    "line": 35,
    "function": null,
    "comment": "yaml_parser.hpp:35:  Is this a non-const reference? If so, make const or use a pointer: yocs_msgs::WaypointList& wps  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "yaml_parser.hpp",
    "line": 36,
    "function": null,
    "comment": "yaml_parser.hpp:36:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "yaml_parser.hpp",
    "line": 36,
    "function": null,
    "comment": "yaml_parser.hpp:36:  Is this a non-const reference? If so, make const or use a pointer: yocs_msgs::TrajectoryList& trajs  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "yaml_parser.hpp",
    "line": 34,
    "function": null,
    "comment": "yaml_parser.hpp:34:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "waypoint_provider.cpp",
    "line": null,
    "function": null,
    "comment": "waypoint_provider.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "waypoint_provider.cpp",
    "line": 14,
    "function": null,
    "comment": "waypoint_provider.cpp:14:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoint_provider.cpp",
    "line": 18,
    "function": null,
    "comment": "waypoint_provider.cpp:18:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "waypoint_provider.cpp",
    "line": 19,
    "function": null,
    "comment": "waypoint_provider.cpp:19:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoint_provider.cpp",
    "line": 21,
    "function": null,
    "comment": "waypoint_provider.cpp:21:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoint_provider.cpp",
    "line": 22,
    "function": null,
    "comment": "waypoint_provider.cpp:22:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoint_provider.cpp",
    "line": 23,
    "function": null,
    "comment": "waypoint_provider.cpp:23:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoint_provider.cpp",
    "line": 24,
    "function": null,
    "comment": "waypoint_provider.cpp:24:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoint_provider.cpp",
    "line": 26,
    "function": null,
    "comment": "waypoint_provider.cpp:26:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoint_provider.cpp",
    "line": 40,
    "function": null,
    "comment": "waypoint_provider.cpp:40:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoint_provider.cpp",
    "line": 41,
    "function": null,
    "comment": "waypoint_provider.cpp:41:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoint_provider.cpp",
    "line": 42,
    "function": null,
    "comment": "waypoint_provider.cpp:42:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "waypoint_provider.cpp",
    "line": 44,
    "function": null,
    "comment": "waypoint_provider.cpp:44:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "waypoint_provider.cpp",
    "line": 44,
    "function": null,
    "comment": "waypoint_provider.cpp:44:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoint_provider.cpp",
    "line": 45,
    "function": null,
    "comment": "waypoint_provider.cpp:45:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "waypoint_provider.cpp",
    "line": 48,
    "function": null,
    "comment": "waypoint_provider.cpp:48:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "waypoint_provider.cpp",
    "line": 48,
    "function": null,
    "comment": "waypoint_provider.cpp:48:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "waypoint_provider.cpp",
    "line": 48,
    "function": null,
    "comment": "waypoint_provider.cpp:48:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoint_provider.cpp",
    "line": 55,
    "function": null,
    "comment": "waypoint_provider.cpp:55:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoint_provider.cpp",
    "line": 56,
    "function": null,
    "comment": "waypoint_provider.cpp:56:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoint_provider.cpp",
    "line": 57,
    "function": null,
    "comment": "waypoint_provider.cpp:57:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "waypoint_provider.cpp",
    "line": 62,
    "function": null,
    "comment": "waypoint_provider.cpp:62:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoint_provider.cpp",
    "line": 63,
    "function": null,
    "comment": "waypoint_provider.cpp:63:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoint_provider.cpp",
    "line": 80,
    "function": null,
    "comment": "waypoint_provider.cpp:80:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoint_provider.cpp",
    "line": 81,
    "function": null,
    "comment": "waypoint_provider.cpp:81:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoint_provider.cpp",
    "line": 82,
    "function": null,
    "comment": "waypoint_provider.cpp:82:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "waypoint_provider.cpp",
    "line": 84,
    "function": null,
    "comment": "waypoint_provider.cpp:84:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoint_provider.cpp",
    "line": 85,
    "function": null,
    "comment": "waypoint_provider.cpp:85:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoint_provider.cpp",
    "line": 89,
    "function": null,
    "comment": "waypoint_provider.cpp:89:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoint_provider.cpp",
    "line": 96,
    "function": null,
    "comment": "waypoint_provider.cpp:96:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "waypoint_provider.cpp",
    "line": 111,
    "function": null,
    "comment": "waypoint_provider.cpp:111:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoint_provider.cpp",
    "line": 120,
    "function": null,
    "comment": "waypoint_provider.cpp:120:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoint_provider.cpp",
    "line": 133,
    "function": null,
    "comment": "waypoint_provider.cpp:133:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoint_provider.cpp",
    "line": 140,
    "function": null,
    "comment": "waypoint_provider.cpp:140:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoint_provider.cpp",
    "line": 141,
    "function": null,
    "comment": "waypoint_provider.cpp:141:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoint_provider.cpp",
    "line": 142,
    "function": null,
    "comment": "waypoint_provider.cpp:142:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "waypoint_provider.cpp",
    "line": 157,
    "function": null,
    "comment": "waypoint_provider.cpp:157:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoint_provider.cpp",
    "line": 158,
    "function": null,
    "comment": "waypoint_provider.cpp:158:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "waypoint_provider.cpp",
    "line": 164,
    "function": null,
    "comment": "waypoint_provider.cpp:164:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "waypoint_provider.cpp",
    "line": 172,
    "function": null,
    "comment": "waypoint_provider.cpp:172:  Namespace should be terminated with '// namespace yocs'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "waypoint_provider.cpp",
    "line": 117,
    "function": null,
    "comment": "waypoint_provider.cpp:117:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "yaml_parser.cpp",
    "line": null,
    "function": null,
    "comment": "yaml_parser.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "yaml_parser.cpp",
    "line": 6,
    "function": null,
    "comment": "yaml_parser.cpp:6:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "yaml_parser.cpp",
    "line": 8,
    "function": null,
    "comment": "yaml_parser.cpp:8:  Is this a non-const reference? If so, make const or use a pointer: yocs_msgs::WaypointList& wps  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "yaml_parser.cpp",
    "line": 9,
    "function": null,
    "comment": "yaml_parser.cpp:9:  Is this a non-const reference? If so, make const or use a pointer: yocs_msgs::TrajectoryList& trajs  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "yaml_parser.cpp",
    "line": 10,
    "function": null,
    "comment": "yaml_parser.cpp:10:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "yaml_parser.cpp",
    "line": 16,
    "function": null,
    "comment": "yaml_parser.cpp:16:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "yaml_parser.cpp",
    "line": 24,
    "function": null,
    "comment": "yaml_parser.cpp:24:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "yaml_parser.cpp",
    "line": 29,
    "function": null,
    "comment": "yaml_parser.cpp:29:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "yaml_parser.cpp",
    "line": 33,
    "function": null,
    "comment": "yaml_parser.cpp:33:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "yaml_parser.cpp",
    "line": 34,
    "function": null,
    "comment": "yaml_parser.cpp:34:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "yaml_parser.cpp",
    "line": 40,
    "function": null,
    "comment": "yaml_parser.cpp:40:  Is this a non-const reference? If so, make const or use a pointer: YAML::Node& node  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "yaml_parser.cpp",
    "line": 41,
    "function": null,
    "comment": "yaml_parser.cpp:41:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "yaml_parser.cpp",
    "line": 44,
    "function": null,
    "comment": "yaml_parser.cpp:44:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "yaml_parser.cpp",
    "line": 56,
    "function": null,
    "comment": "yaml_parser.cpp:56:  Is this a non-const reference? If so, make const or use a pointer: yocs_msgs::WaypointList& wps  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "yaml_parser.cpp",
    "line": 57,
    "function": null,
    "comment": "yaml_parser.cpp:57:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "yaml_parser.cpp",
    "line": 65,
    "function": null,
    "comment": "yaml_parser.cpp:65:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "yaml_parser.cpp",
    "line": 66,
    "function": null,
    "comment": "yaml_parser.cpp:66:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "yaml_parser.cpp",
    "line": 67,
    "function": null,
    "comment": "yaml_parser.cpp:67:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "yaml_parser.cpp",
    "line": 68,
    "function": null,
    "comment": "yaml_parser.cpp:68:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "yaml_parser.cpp",
    "line": 86,
    "function": null,
    "comment": "yaml_parser.cpp:86:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "yaml_parser.cpp",
    "line": 87,
    "function": null,
    "comment": "yaml_parser.cpp:87:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "yaml_parser.cpp",
    "line": 94,
    "function": null,
    "comment": "yaml_parser.cpp:94:  Is this a non-const reference? If so, make const or use a pointer: yocs_msgs::TrajectoryList& trajs  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "yaml_parser.cpp",
    "line": 95,
    "function": null,
    "comment": "yaml_parser.cpp:95:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "yaml_parser.cpp",
    "line": 104,
    "function": null,
    "comment": "yaml_parser.cpp:104:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "yaml_parser.cpp",
    "line": 105,
    "function": null,
    "comment": "yaml_parser.cpp:105:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "yaml_parser.cpp",
    "line": 106,
    "function": null,
    "comment": "yaml_parser.cpp:106:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "yaml_parser.cpp",
    "line": 107,
    "function": null,
    "comment": "yaml_parser.cpp:107:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "yaml_parser.cpp",
    "line": 114,
    "function": null,
    "comment": "yaml_parser.cpp:114:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "yaml_parser.cpp",
    "line": 115,
    "function": null,
    "comment": "yaml_parser.cpp:115:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "yaml_parser.cpp",
    "line": 119,
    "function": null,
    "comment": "yaml_parser.cpp:119:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "yaml_parser.cpp",
    "line": 119,
    "function": null,
    "comment": "yaml_parser.cpp:119:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "yaml_parser.cpp",
    "line": 120,
    "function": null,
    "comment": "yaml_parser.cpp:120:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "yaml_parser.cpp",
    "line": 122,
    "function": null,
    "comment": "yaml_parser.cpp:122:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "yaml_parser.cpp",
    "line": 129,
    "function": null,
    "comment": "yaml_parser.cpp:129:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "yaml_parser.cpp",
    "line": 135,
    "function": null,
    "comment": "yaml_parser.cpp:135:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "yaml_parser.cpp",
    "line": 140,
    "function": null,
    "comment": "yaml_parser.cpp:140:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "yaml_parser.cpp",
    "line": 142,
    "function": null,
    "comment": "yaml_parser.cpp:142:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "yaml_parser.cpp",
    "line": 143,
    "function": null,
    "comment": "yaml_parser.cpp:143:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "yaml_parser.cpp",
    "line": 144,
    "function": null,
    "comment": "yaml_parser.cpp:144:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "yaml_parser.cpp",
    "line": 147,
    "function": null,
    "comment": "yaml_parser.cpp:147:  Namespace should be terminated with '// namespace yocs'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "yaml_parser.cpp",
    "line": 117,
    "function": null,
    "comment": "yaml_parser.cpp:117:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "main.cpp",
    "line": null,
    "function": null,
    "comment": "main.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "main.cpp",
    "line": 12,
    "function": null,
    "comment": "main.cpp:12:  Found C system header after other header. Should be: main.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "main.cpp",
    "line": 15,
    "function": null,
    "comment": "main.cpp:15:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "main.cpp",
    "line": 24,
    "function": null,
    "comment": "main.cpp:24:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "main.cpp",
    "line": 24,
    "function": null,
    "comment": "main.cpp:24:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "main.cpp",
    "line": 29,
    "function": null,
    "comment": "main.cpp:29:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "main.cpp",
    "line": 30,
    "function": null,
    "comment": "main.cpp:30:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "main.cpp",
    "line": 31,
    "function": null,
    "comment": "main.cpp:31:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "main.cpp",
    "line": 22,
    "function": null,
    "comment": "main.cpp:22:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "main.cpp",
    "line": 14,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "waypoint_provider.cpp",
    "line": 60,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "waypoint_provider.cpp",
    "line": 84,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "waypoint_provider.cpp",
    "line": 93,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "waypoint_provider.cpp",
    "line": 115,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "waypoint_provider.cpp",
    "line": 139,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "waypoint_provider.cpp",
    "line": 157,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Declarations should be at the smallest feasible scope.",
    "file": "yaml_parser.cpp",
    "line": 96,
    "function": null,
    "comment": "The scope of the variable 'i' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:void f(int x){    int i = 0;    ",
    "tags": ["code-standards","jsf-av-cpp","scope"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "yaml_parser.cpp",
    "line": 67,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "yaml_parser.cpp",
    "line": 96,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "yaml_parser.cpp",
    "line": 114,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "yaml_parser.cpp",
    "line": 119,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "waypoint_provider.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "waypoint_provider.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Maximum coupling between objects: 5",
    "file": "waypoint_provider.hpp",
    "line": null,
    "function": null,
    "comment": "CBO is greater than 5, WaypointProvider, 14",
    "tags": ["metrics","nasa-satc","ros","coupling"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "yaml_parser.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "yaml_parser.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "waypoint_provider.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Maximum coupling between objects: 5",
    "file": "waypoint_provider.cpp",
    "line": null,
    "function": null,
    "comment": "CBO is greater than 5, WaypointProvider, 11",
    "tags": ["metrics","nasa-satc","ros","coupling"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "yaml_parser.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "main.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  }
]