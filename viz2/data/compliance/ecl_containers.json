[
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "containers.hpp",
    "line": null,
    "function": null,
    "comment": "containers.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "containers.hpp",
    "line": 21,
    "function": null,
    "comment": "containers.hpp:21:  Include 'containers/array.hpp' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "initialiser.hpp",
    "line": null,
    "function": null,
    "comment": "initialiser.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "initialiser.hpp",
    "line": 21,
    "function": null,
    "comment": "initialiser.hpp:21:  Found C system header after other header. Should be: initialiser.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "initialiser.hpp",
    "line": 22,
    "function": null,
    "comment": "initialiser.hpp:22:  Found C system header after other header. Should be: initialiser.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "initialiser.hpp",
    "line": 28,
    "function": null,
    "comment": "initialiser.hpp:28:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "initialiser.hpp",
    "line": 29,
    "function": null,
    "comment": "initialiser.hpp:29:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "initialiser.hpp",
    "line": 49,
    "function": null,
    "comment": "initialiser.hpp:49:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "initialiser.hpp",
    "line": 50,
    "function": null,
    "comment": "initialiser.hpp:50:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "initialiser.hpp",
    "line": 51,
    "function": null,
    "comment": "initialiser.hpp:51:  public: should be indented +1 space inside class BoundedListInitialiser  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "initialiser.hpp",
    "line": 72,
    "function": null,
    "comment": "initialiser.hpp:72:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "initialiser.hpp",
    "line": 72,
    "function": null,
    "comment": "initialiser.hpp:72:  Is this a non-const reference? If so, make const or use a pointer: BoundedListInitialiser<Type, Iterator, N>& operator  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "initialiser.hpp",
    "line": 74,
    "function": null,
    "comment": "initialiser.hpp:74:  protected: should be indented +1 space inside class BoundedListInitialiser  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "initialiser.hpp",
    "line": 84,
    "function": null,
    "comment": "initialiser.hpp:84:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "initialiser.hpp",
    "line": 84,
    "function": null,
    "comment": "initialiser.hpp:84:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "initialiser.hpp",
    "line": 87,
    "function": null,
    "comment": "initialiser.hpp:87:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "initialiser.hpp",
    "line": 91,
    "function": null,
    "comment": "initialiser.hpp:91:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "initialiser.hpp",
    "line": 92,
    "function": null,
    "comment": "initialiser.hpp:92:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "initialiser.hpp",
    "line": 92,
    "function": null,
    "comment": "initialiser.hpp:92:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "initialiser.hpp",
    "line": 93,
    "function": null,
    "comment": "initialiser.hpp:93:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "initialiser.hpp",
    "line": 94,
    "function": null,
    "comment": "initialiser.hpp:94:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "initialiser.hpp",
    "line": 94,
    "function": null,
    "comment": "initialiser.hpp:94:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "initialiser.hpp",
    "line": 94,
    "function": null,
    "comment": "initialiser.hpp:94:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "initialiser.hpp",
    "line": 117,
    "function": null,
    "comment": "initialiser.hpp:117:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "initialiser.hpp",
    "line": 117,
    "function": null,
    "comment": "initialiser.hpp:117:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "initialiser.hpp",
    "line": 118,
    "function": null,
    "comment": "initialiser.hpp:118:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "initialiser.hpp",
    "line": 119,
    "function": null,
    "comment": "initialiser.hpp:119:  public: should be indented +1 space inside class BoundedListInitialiser  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "initialiser.hpp",
    "line": 129,
    "function": null,
    "comment": "initialiser.hpp:129:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "initialiser.hpp",
    "line": 142,
    "function": null,
    "comment": "initialiser.hpp:142:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "initialiser.hpp",
    "line": 142,
    "function": null,
    "comment": "initialiser.hpp:142:  Is this a non-const reference? If so, make const or use a pointer: BoundedListInitialiser<Type, Iterator, DynamicStorage>& operator  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "initialiser.hpp",
    "line": 144,
    "function": null,
    "comment": "initialiser.hpp:144:  protected: should be indented +1 space inside class BoundedListInitialiser  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "initialiser.hpp",
    "line": 155,
    "function": null,
    "comment": "initialiser.hpp:155:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "initialiser.hpp",
    "line": 155,
    "function": null,
    "comment": "initialiser.hpp:155:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "initialiser.hpp",
    "line": 159,
    "function": null,
    "comment": "initialiser.hpp:159:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "initialiser.hpp",
    "line": 160,
    "function": null,
    "comment": "initialiser.hpp:160:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "initialiser.hpp",
    "line": 160,
    "function": null,
    "comment": "initialiser.hpp:160:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "initialiser.hpp",
    "line": 160,
    "function": null,
    "comment": "initialiser.hpp:160:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "initialiser.hpp",
    "line": 164,
    "function": null,
    "comment": "initialiser.hpp:164:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "initialiser.hpp",
    "line": 165,
    "function": null,
    "comment": "initialiser.hpp:165:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "initialiser.hpp",
    "line": 165,
    "function": null,
    "comment": "initialiser.hpp:165:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "initialiser.hpp",
    "line": 166,
    "function": null,
    "comment": "initialiser.hpp:166:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "initialiser.hpp",
    "line": 167,
    "function": null,
    "comment": "initialiser.hpp:167:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "initialiser.hpp",
    "line": 167,
    "function": null,
    "comment": "initialiser.hpp:167:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "initialiser.hpp",
    "line": 167,
    "function": null,
    "comment": "initialiser.hpp:167:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "initialiser.hpp",
    "line": 174,
    "function": null,
    "comment": "initialiser.hpp:174:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "initialiser.hpp",
    "line": 175,
    "function": null,
    "comment": "initialiser.hpp:175:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "push_and_pop.hpp",
    "line": null,
    "function": null,
    "comment": "push_and_pop.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "stencil.hpp",
    "line": null,
    "function": null,
    "comment": "stencil.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "stencil.hpp",
    "line": 24,
    "function": null,
    "comment": "stencil.hpp:24:  Include 'stencil/converters.hpp' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "converters.hpp",
    "line": null,
    "function": null,
    "comment": "converters.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "fifo.hpp",
    "line": null,
    "function": null,
    "comment": "fifo.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "fifo.hpp",
    "line": 22,
    "function": null,
    "comment": "fifo.hpp:22:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "fifo.hpp",
    "line": 23,
    "function": null,
    "comment": "fifo.hpp:23:  Found C system header after C++ system header. Should be: fifo.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "fifo.hpp",
    "line": 24,
    "function": null,
    "comment": "fifo.hpp:24:  Found C system header after C++ system header. Should be: fifo.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "fifo.hpp",
    "line": 25,
    "function": null,
    "comment": "fifo.hpp:25:  Found C system header after C++ system header. Should be: fifo.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "fifo.hpp",
    "line": 32,
    "function": null,
    "comment": "fifo.hpp:32:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "fifo.hpp",
    "line": 83,
    "function": null,
    "comment": "fifo.hpp:83:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "fifo.hpp",
    "line": 84,
    "function": null,
    "comment": "fifo.hpp:84:  public: should be indented +1 space inside class FiFo  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.hpp",
    "line": 89,
    "function": null,
    "comment": "fifo.hpp:89:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "fifo.hpp",
    "line": 89,
    "function": null,
    "comment": "fifo.hpp:89:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "fifo.hpp",
    "line": 89,
    "function": null,
    "comment": "fifo.hpp:89:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "fifo.hpp",
    "line": 89,
    "function": null,
    "comment": "fifo.hpp:89:  Constructors callable with one argument should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.hpp",
    "line": 90,
    "function": null,
    "comment": "fifo.hpp:90:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.hpp",
    "line": 91,
    "function": null,
    "comment": "fifo.hpp:91:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.hpp",
    "line": 92,
    "function": null,
    "comment": "fifo.hpp:92:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "fifo.hpp",
    "line": 92,
    "function": null,
    "comment": "fifo.hpp:92:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "fifo.hpp",
    "line": 92,
    "function": null,
    "comment": "fifo.hpp:92:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.hpp",
    "line": 93,
    "function": null,
    "comment": "fifo.hpp:93:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "fifo.hpp",
    "line": 93,
    "function": null,
    "comment": "fifo.hpp:93:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.hpp",
    "line": 94,
    "function": null,
    "comment": "fifo.hpp:94:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "fifo.hpp",
    "line": 94,
    "function": null,
    "comment": "fifo.hpp:94:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "fifo.hpp",
    "line": 94,
    "function": null,
    "comment": "fifo.hpp:94:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.hpp",
    "line": 95,
    "function": null,
    "comment": "fifo.hpp:95:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.hpp",
    "line": 96,
    "function": null,
    "comment": "fifo.hpp:96:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.hpp",
    "line": 103,
    "function": null,
    "comment": "fifo.hpp:103:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "fifo.hpp",
    "line": 103,
    "function": null,
    "comment": "fifo.hpp:103:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "fifo.hpp",
    "line": 103,
    "function": null,
    "comment": "fifo.hpp:103:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.hpp",
    "line": 104,
    "function": null,
    "comment": "fifo.hpp:104:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.hpp",
    "line": 105,
    "function": null,
    "comment": "fifo.hpp:105:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.hpp",
    "line": 106,
    "function": null,
    "comment": "fifo.hpp:106:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "fifo.hpp",
    "line": 106,
    "function": null,
    "comment": "fifo.hpp:106:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "fifo.hpp",
    "line": 106,
    "function": null,
    "comment": "fifo.hpp:106:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.hpp",
    "line": 107,
    "function": null,
    "comment": "fifo.hpp:107:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "fifo.hpp",
    "line": 107,
    "function": null,
    "comment": "fifo.hpp:107:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.hpp",
    "line": 108,
    "function": null,
    "comment": "fifo.hpp:108:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "fifo.hpp",
    "line": 108,
    "function": null,
    "comment": "fifo.hpp:108:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.hpp",
    "line": 109,
    "function": null,
    "comment": "fifo.hpp:109:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.hpp",
    "line": 110,
    "function": null,
    "comment": "fifo.hpp:110:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.hpp",
    "line": 111,
    "function": null,
    "comment": "fifo.hpp:111:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.hpp",
    "line": 122,
    "function": null,
    "comment": "fifo.hpp:122:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "fifo.hpp",
    "line": 122,
    "function": null,
    "comment": "fifo.hpp:122:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.hpp",
    "line": 123,
    "function": null,
    "comment": "fifo.hpp:123:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.hpp",
    "line": 124,
    "function": null,
    "comment": "fifo.hpp:124:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.hpp",
    "line": 132,
    "function": null,
    "comment": "fifo.hpp:132:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "fifo.hpp",
    "line": 132,
    "function": null,
    "comment": "fifo.hpp:132:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.hpp",
    "line": 133,
    "function": null,
    "comment": "fifo.hpp:133:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.hpp",
    "line": 134,
    "function": null,
    "comment": "fifo.hpp:134:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.hpp",
    "line": 143,
    "function": null,
    "comment": "fifo.hpp:143:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "fifo.hpp",
    "line": 143,
    "function": null,
    "comment": "fifo.hpp:143:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "fifo.hpp",
    "line": 143,
    "function": null,
    "comment": "fifo.hpp:143:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.hpp",
    "line": 144,
    "function": null,
    "comment": "fifo.hpp:144:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.hpp",
    "line": 145,
    "function": null,
    "comment": "fifo.hpp:145:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.hpp",
    "line": 146,
    "function": null,
    "comment": "fifo.hpp:146:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.hpp",
    "line": 152,
    "function": null,
    "comment": "fifo.hpp:152:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "fifo.hpp",
    "line": 152,
    "function": null,
    "comment": "fifo.hpp:152:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "fifo.hpp",
    "line": 152,
    "function": null,
    "comment": "fifo.hpp:152:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.hpp",
    "line": 153,
    "function": null,
    "comment": "fifo.hpp:153:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "fifo.hpp",
    "line": 153,
    "function": null,
    "comment": "fifo.hpp:153:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "fifo.hpp",
    "line": 153,
    "function": null,
    "comment": "fifo.hpp:153:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.hpp",
    "line": 154,
    "function": null,
    "comment": "fifo.hpp:154:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.hpp",
    "line": 160,
    "function": null,
    "comment": "fifo.hpp:160:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.hpp",
    "line": 167,
    "function": null,
    "comment": "fifo.hpp:167:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "fifo.hpp",
    "line": 167,
    "function": null,
    "comment": "fifo.hpp:167:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "fifo.hpp",
    "line": 167,
    "function": null,
    "comment": "fifo.hpp:167:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "fifo.hpp",
    "line": 167,
    "function": null,
    "comment": "fifo.hpp:167:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.hpp",
    "line": 168,
    "function": null,
    "comment": "fifo.hpp:168:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.hpp",
    "line": 169,
    "function": null,
    "comment": "fifo.hpp:169:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "fifo.hpp",
    "line": 169,
    "function": null,
    "comment": "fifo.hpp:169:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "fifo.hpp",
    "line": 169,
    "function": null,
    "comment": "fifo.hpp:169:  Missing spaces around >  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "fifo.hpp",
    "line": 169,
    "function": null,
    "comment": "fifo.hpp:169:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.hpp",
    "line": 170,
    "function": null,
    "comment": "fifo.hpp:170:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "fifo.hpp",
    "line": 170,
    "function": null,
    "comment": "fifo.hpp:170:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "fifo.hpp",
    "line": 170,
    "function": null,
    "comment": "fifo.hpp:170:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.hpp",
    "line": 171,
    "function": null,
    "comment": "fifo.hpp:171:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "fifo.hpp",
    "line": 173,
    "function": null,
    "comment": "fifo.hpp:173:  private: should be indented +1 space inside class FiFo  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.hpp",
    "line": 174,
    "function": null,
    "comment": "fifo.hpp:174:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.hpp",
    "line": 175,
    "function": null,
    "comment": "fifo.hpp:175:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.hpp",
    "line": 176,
    "function": null,
    "comment": "fifo.hpp:176:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "fifo.hpp",
    "line": 179,
    "function": null,
    "comment": "fifo.hpp:179:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "array.hpp",
    "line": null,
    "function": null,
    "comment": "array.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "array.hpp",
    "line": 21,
    "function": null,
    "comment": "array.hpp:21:  Include 'array/array_dynamic_mem_check.hpp' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "array.hpp",
    "line": 24,
    "function": null,
    "comment": "array.hpp:24:  Include 'array/array_dynamic_no_mem_check.hpp' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "definitions.hpp",
    "line": null,
    "function": null,
    "comment": "definitions.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "definitions.hpp",
    "line": 19,
    "function": null,
    "comment": "definitions.hpp:19:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "definitions.hpp",
    "line": 31,
    "function": null,
    "comment": "definitions.hpp:31:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "definitions.hpp",
    "line": 36,
    "function": null,
    "comment": "definitions.hpp:36:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "converters.hpp",
    "line": null,
    "function": null,
    "comment": "converters.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "converters.hpp",
    "line": 21,
    "function": null,
    "comment": "converters.hpp:21:  Include 'array_dynamic_mem_check.hpp' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "converters.hpp",
    "line": 24,
    "function": null,
    "comment": "converters.hpp:24:  Include 'array_dynamic_no_mem_check.hpp' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "converters.hpp",
    "line": 27,
    "function": null,
    "comment": "converters.hpp:27:  Include 'ecl/converters/from_byte_array.hpp' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "converters.hpp",
    "line": 28,
    "function": null,
    "comment": "converters.hpp:28:  Include 'ecl/converters/converter.hpp' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "converters.hpp",
    "line": 29,
    "function": null,
    "comment": "converters.hpp:29:  Include 'ecl/config/macros.hpp' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "converters.hpp",
    "line": 35,
    "function": null,
    "comment": "converters.hpp:35:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "converters.hpp",
    "line": 48,
    "function": null,
    "comment": "converters.hpp:48:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "converters.hpp",
    "line": 57,
    "function": null,
    "comment": "converters.hpp:57:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "converters.hpp",
    "line": 67,
    "function": null,
    "comment": "converters.hpp:67:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "converters.hpp",
    "line": 72,
    "function": null,
    "comment": "converters.hpp:72:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "converters.hpp",
    "line": 72,
    "function": null,
    "comment": "converters.hpp:72:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "converters.hpp",
    "line": 78,
    "function": null,
    "comment": "converters.hpp:78:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "converters.hpp",
    "line": 78,
    "function": null,
    "comment": "converters.hpp:78:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "converters.hpp",
    "line": 83,
    "function": null,
    "comment": "converters.hpp:83:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "converters.hpp",
    "line": 83,
    "function": null,
    "comment": "converters.hpp:83:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "converters.hpp",
    "line": 85,
    "function": null,
    "comment": "converters.hpp:85:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "array_mem_check.hpp",
    "line": null,
    "function": null,
    "comment": "array_mem_check.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "array_mem_check.hpp",
    "line": 20,
    "function": null,
    "comment": "array_mem_check.hpp:20:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "array_mem_check.hpp",
    "line": 26,
    "function": null,
    "comment": "array_mem_check.hpp:26:  Found C system header after other header. Should be: array_mem_check.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "array_mem_check.hpp",
    "line": 27,
    "function": null,
    "comment": "array_mem_check.hpp:27:  Found C system header after other header. Should be: array_mem_check.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "array_mem_check.hpp",
    "line": 28,
    "function": null,
    "comment": "array_mem_check.hpp:28:  Found C system header after other header. Should be: array_mem_check.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "array_mem_check.hpp",
    "line": 29,
    "function": null,
    "comment": "array_mem_check.hpp:29:  Found C system header after other header. Should be: array_mem_check.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "array_mem_check.hpp",
    "line": 30,
    "function": null,
    "comment": "array_mem_check.hpp:30:  Found C system header after other header. Should be: array_mem_check.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "array_mem_check.hpp",
    "line": 31,
    "function": null,
    "comment": "array_mem_check.hpp:31:  Found C system header after other header. Should be: array_mem_check.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_mem_check.hpp",
    "line": 37,
    "function": null,
    "comment": "array_mem_check.hpp:37:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_mem_check.hpp",
    "line": 43,
    "function": null,
    "comment": "array_mem_check.hpp:43:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "array_mem_check.hpp",
    "line": 49,
    "function": null,
    "comment": "array_mem_check.hpp:49:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_mem_check.hpp",
    "line": 51,
    "function": null,
    "comment": "array_mem_check.hpp:51:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "array_mem_check.hpp",
    "line": 55,
    "function": null,
    "comment": "array_mem_check.hpp:55:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_mem_check.hpp",
    "line": 106,
    "function": null,
    "comment": "array_mem_check.hpp:106:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_mem_check.hpp",
    "line": 106,
    "function": null,
    "comment": "array_mem_check.hpp:106:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "array_mem_check.hpp",
    "line": 107,
    "function": null,
    "comment": "array_mem_check.hpp:107:  public: should be indented +1 space inside class Array  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_mem_check.hpp",
    "line": 113,
    "function": null,
    "comment": "array_mem_check.hpp:113:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_mem_check.hpp",
    "line": 114,
    "function": null,
    "comment": "array_mem_check.hpp:114:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_mem_check.hpp",
    "line": 115,
    "function": null,
    "comment": "array_mem_check.hpp:115:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_mem_check.hpp",
    "line": 116,
    "function": null,
    "comment": "array_mem_check.hpp:116:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_mem_check.hpp",
    "line": 118,
    "function": null,
    "comment": "array_mem_check.hpp:118:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_mem_check.hpp",
    "line": 119,
    "function": null,
    "comment": "array_mem_check.hpp:119:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_mem_check.hpp",
    "line": 120,
    "function": null,
    "comment": "array_mem_check.hpp:120:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_mem_check.hpp",
    "line": 120,
    "function": null,
    "comment": "array_mem_check.hpp:120:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_mem_check.hpp",
    "line": 121,
    "function": null,
    "comment": "array_mem_check.hpp:121:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_mem_check.hpp",
    "line": 121,
    "function": null,
    "comment": "array_mem_check.hpp:121:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "array_mem_check.hpp",
    "line": 130,
    "function": null,
    "comment": "array_mem_check.hpp:130:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "Do not use meaningless empty statements.",
    "file": "array_mem_check.hpp",
    "line": 130,
    "function": null,
    "comment": "array_mem_check.hpp:130:  You don't need a ; after a }  [readability/braces] [4]",
    "tags": ["code-standards","google-cpp","empty-statement","ambiguous-code"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_mem_check.hpp",
    "line": 154,
    "function": null,
    "comment": "array_mem_check.hpp:154:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "array_mem_check.hpp",
    "line": 154,
    "function": null,
    "comment": "array_mem_check.hpp:154:  Single-parameter constructors should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_mem_check.hpp",
    "line": 160,
    "function": null,
    "comment": "array_mem_check.hpp:160:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not use meaningless empty statements.",
    "file": "array_mem_check.hpp",
    "line": 160,
    "function": null,
    "comment": "array_mem_check.hpp:160:  You don't need a ; after a }  [readability/braces] [4]",
    "tags": ["code-standards","google-cpp","empty-statement","ambiguous-code"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "array_mem_check.hpp",
    "line": 160,
    "function": null,
    "comment": "array_mem_check.hpp:160:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_mem_check.hpp",
    "line": 178,
    "function": null,
    "comment": "array_mem_check.hpp:178:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_mem_check.hpp",
    "line": 178,
    "function": null,
    "comment": "array_mem_check.hpp:178:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_mem_check.hpp",
    "line": 178,
    "function": null,
    "comment": "array_mem_check.hpp:178:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_mem_check.hpp",
    "line": 179,
    "function": null,
    "comment": "array_mem_check.hpp:179:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_mem_check.hpp",
    "line": 179,
    "function": null,
    "comment": "array_mem_check.hpp:179:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_mem_check.hpp",
    "line": 214,
    "function": null,
    "comment": "array_mem_check.hpp:214:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_mem_check.hpp",
    "line": 224,
    "function": null,
    "comment": "array_mem_check.hpp:224:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_mem_check.hpp",
    "line": 264,
    "function": null,
    "comment": "array_mem_check.hpp:264:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_mem_check.hpp",
    "line": 264,
    "function": null,
    "comment": "array_mem_check.hpp:264:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_mem_check.hpp",
    "line": 264,
    "function": null,
    "comment": "array_mem_check.hpp:264:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_mem_check.hpp",
    "line": 265,
    "function": null,
    "comment": "array_mem_check.hpp:265:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_mem_check.hpp",
    "line": 265,
    "function": null,
    "comment": "array_mem_check.hpp:265:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_mem_check.hpp",
    "line": 266,
    "function": null,
    "comment": "array_mem_check.hpp:266:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_mem_check.hpp",
    "line": 266,
    "function": null,
    "comment": "array_mem_check.hpp:266:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_mem_check.hpp",
    "line": 267,
    "function": null,
    "comment": "array_mem_check.hpp:267:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_mem_check.hpp",
    "line": 267,
    "function": null,
    "comment": "array_mem_check.hpp:267:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_mem_check.hpp",
    "line": 267,
    "function": null,
    "comment": "array_mem_check.hpp:267:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_mem_check.hpp",
    "line": 278,
    "function": null,
    "comment": "array_mem_check.hpp:278:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_mem_check.hpp",
    "line": 278,
    "function": null,
    "comment": "array_mem_check.hpp:278:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "array_mem_check.hpp",
    "line": 279,
    "function": null,
    "comment": "array_mem_check.hpp:279:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_mem_check.hpp",
    "line": 279,
    "function": null,
    "comment": "array_mem_check.hpp:279:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "array_mem_check.hpp",
    "line": 279,
    "function": null,
    "comment": "array_mem_check.hpp:279:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_mem_check.hpp",
    "line": 293,
    "function": null,
    "comment": "array_mem_check.hpp:293:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_mem_check.hpp",
    "line": 293,
    "function": null,
    "comment": "array_mem_check.hpp:293:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "array_mem_check.hpp",
    "line": 294,
    "function": null,
    "comment": "array_mem_check.hpp:294:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_mem_check.hpp",
    "line": 294,
    "function": null,
    "comment": "array_mem_check.hpp:294:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "array_mem_check.hpp",
    "line": 294,
    "function": null,
    "comment": "array_mem_check.hpp:294:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_mem_check.hpp",
    "line": 307,
    "function": null,
    "comment": "array_mem_check.hpp:307:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "array_mem_check.hpp",
    "line": 308,
    "function": null,
    "comment": "array_mem_check.hpp:308:  Missing spaces around >=  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_mem_check.hpp",
    "line": 309,
    "function": null,
    "comment": "array_mem_check.hpp:309:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_mem_check.hpp",
    "line": 325,
    "function": null,
    "comment": "array_mem_check.hpp:325:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "array_mem_check.hpp",
    "line": 326,
    "function": null,
    "comment": "array_mem_check.hpp:326:  Missing spaces around >=  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_mem_check.hpp",
    "line": 327,
    "function": null,
    "comment": "array_mem_check.hpp:327:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_mem_check.hpp",
    "line": 353,
    "function": null,
    "comment": "array_mem_check.hpp:353:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_mem_check.hpp",
    "line": 353,
    "function": null,
    "comment": "array_mem_check.hpp:353:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "array_mem_check.hpp",
    "line": 362,
    "function": null,
    "comment": "array_mem_check.hpp:362:  private: should be indented +1 space inside class Array  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_mem_check.hpp",
    "line": 365,
    "function": null,
    "comment": "array_mem_check.hpp:365:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_mem_check.hpp",
    "line": 369,
    "function": null,
    "comment": "array_mem_check.hpp:369:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_mem_check.hpp",
    "line": 373,
    "function": null,
    "comment": "array_mem_check.hpp:373:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_mem_check.hpp",
    "line": 392,
    "function": null,
    "comment": "array_mem_check.hpp:392:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_mem_check.hpp",
    "line": 392,
    "function": null,
    "comment": "array_mem_check.hpp:392:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "array_mem_check.hpp",
    "line": 393,
    "function": null,
    "comment": "array_mem_check.hpp:393:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_mem_check.hpp",
    "line": 394,
    "function": null,
    "comment": "array_mem_check.hpp:394:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_mem_check.hpp",
    "line": 395,
    "function": null,
    "comment": "array_mem_check.hpp:395:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_mem_check.hpp",
    "line": 396,
    "function": null,
    "comment": "array_mem_check.hpp:396:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_mem_check.hpp",
    "line": 397,
    "function": null,
    "comment": "array_mem_check.hpp:397:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_mem_check.hpp",
    "line": 398,
    "function": null,
    "comment": "array_mem_check.hpp:398:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_mem_check.hpp",
    "line": 399,
    "function": null,
    "comment": "array_mem_check.hpp:399:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "array_mem_check.hpp",
    "line": 400,
    "function": null,
    "comment": "array_mem_check.hpp:400:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_mem_check.hpp",
    "line": 412,
    "function": null,
    "comment": "array_mem_check.hpp:412:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_mem_check.hpp",
    "line": 412,
    "function": null,
    "comment": "array_mem_check.hpp:412:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "array_mem_check.hpp",
    "line": 413,
    "function": null,
    "comment": "array_mem_check.hpp:413:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_mem_check.hpp",
    "line": 414,
    "function": null,
    "comment": "array_mem_check.hpp:414:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_mem_check.hpp",
    "line": 415,
    "function": null,
    "comment": "array_mem_check.hpp:415:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_mem_check.hpp",
    "line": 416,
    "function": null,
    "comment": "array_mem_check.hpp:416:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_mem_check.hpp",
    "line": 417,
    "function": null,
    "comment": "array_mem_check.hpp:417:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_mem_check.hpp",
    "line": 418,
    "function": null,
    "comment": "array_mem_check.hpp:418:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_mem_check.hpp",
    "line": 419,
    "function": null,
    "comment": "array_mem_check.hpp:419:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_mem_check.hpp",
    "line": 431,
    "function": null,
    "comment": "array_mem_check.hpp:431:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_mem_check.hpp",
    "line": 431,
    "function": null,
    "comment": "array_mem_check.hpp:431:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_mem_check.hpp",
    "line": 432,
    "function": null,
    "comment": "array_mem_check.hpp:432:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_mem_check.hpp",
    "line": 433,
    "function": null,
    "comment": "array_mem_check.hpp:433:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_mem_check.hpp",
    "line": 434,
    "function": null,
    "comment": "array_mem_check.hpp:434:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_mem_check.hpp",
    "line": 435,
    "function": null,
    "comment": "array_mem_check.hpp:435:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_mem_check.hpp",
    "line": 436,
    "function": null,
    "comment": "array_mem_check.hpp:436:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_mem_check.hpp",
    "line": 437,
    "function": null,
    "comment": "array_mem_check.hpp:437:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_mem_check.hpp",
    "line": 449,
    "function": null,
    "comment": "array_mem_check.hpp:449:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_mem_check.hpp",
    "line": 449,
    "function": null,
    "comment": "array_mem_check.hpp:449:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_mem_check.hpp",
    "line": 450,
    "function": null,
    "comment": "array_mem_check.hpp:450:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_mem_check.hpp",
    "line": 459,
    "function": null,
    "comment": "array_mem_check.hpp:459:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_mem_check.hpp",
    "line": 459,
    "function": null,
    "comment": "array_mem_check.hpp:459:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_mem_check.hpp",
    "line": 459,
    "function": null,
    "comment": "array_mem_check.hpp:459:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "array_mem_check.hpp",
    "line": 460,
    "function": null,
    "comment": "array_mem_check.hpp:460:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_mem_check.hpp",
    "line": 461,
    "function": null,
    "comment": "array_mem_check.hpp:461:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "array_mem_check.hpp",
    "line": 464,
    "function": null,
    "comment": "array_mem_check.hpp:464:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "array_mem_check.hpp",
    "line": 465,
    "function": null,
    "comment": "array_mem_check.hpp:465:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_mem_check.hpp",
    "line": 478,
    "function": null,
    "comment": "array_mem_check.hpp:478:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_mem_check.hpp",
    "line": 505,
    "function": null,
    "comment": "array_mem_check.hpp:505:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "array_mem_check.hpp",
    "line": 506,
    "function": null,
    "comment": "array_mem_check.hpp:506:  public: should be indented +1 space inside class ArrayBluePrint  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_mem_check.hpp",
    "line": 520,
    "function": null,
    "comment": "array_mem_check.hpp:520:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_mem_check.hpp",
    "line": 537,
    "function": null,
    "comment": "array_mem_check.hpp:537:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "array_mem_check.hpp",
    "line": 537,
    "function": null,
    "comment": "array_mem_check.hpp:537:  Is this a non-const reference? If so, make const or use a pointer: BaseType& array  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_mem_check.hpp",
    "line": 552,
    "function": null,
    "comment": "array_mem_check.hpp:552:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "array_mem_check.hpp",
    "line": 553,
    "function": null,
    "comment": "array_mem_check.hpp:553:  public: should be indented +1 space inside class ConstantArray  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_mem_check.hpp",
    "line": 557,
    "function": null,
    "comment": "array_mem_check.hpp:557:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "array_mem_check.hpp",
    "line": 566,
    "function": null,
    "comment": "array_mem_check.hpp:566:  Constructors callable with one argument should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "Do not use meaningless empty statements.",
    "file": "array_mem_check.hpp",
    "line": 568,
    "function": null,
    "comment": "array_mem_check.hpp:568:  You don't need a ; after a }  [readability/braces] [4]",
    "tags": ["code-standards","google-cpp","empty-statement","ambiguous-code"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_mem_check.hpp",
    "line": 580,
    "function": null,
    "comment": "array_mem_check.hpp:580:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_mem_check.hpp",
    "line": 581,
    "function": null,
    "comment": "array_mem_check.hpp:581:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_mem_check.hpp",
    "line": 582,
    "function": null,
    "comment": "array_mem_check.hpp:582:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_mem_check.hpp",
    "line": 590,
    "function": null,
    "comment": "array_mem_check.hpp:590:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "array_mem_check.hpp",
    "line": 590,
    "function": null,
    "comment": "array_mem_check.hpp:590:  Is this a non-const reference? If so, make const or use a pointer: base_type& array  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_mem_check.hpp",
    "line": 591,
    "function": null,
    "comment": "array_mem_check.hpp:591:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "array_mem_check.hpp",
    "line": 594,
    "function": null,
    "comment": "array_mem_check.hpp:594:  private: should be indented +1 space inside class ConstantArray  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_mem_check.hpp",
    "line": 607,
    "function": null,
    "comment": "array_mem_check.hpp:607:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "array_mem_check.hpp",
    "line": 608,
    "function": null,
    "comment": "array_mem_check.hpp:608:  public: should be indented +1 space inside class ArrayFactory  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_mem_check.hpp",
    "line": 615,
    "function": null,
    "comment": "array_mem_check.hpp:615:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_mem_check.hpp",
    "line": 615,
    "function": null,
    "comment": "array_mem_check.hpp:615:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_mem_check.hpp",
    "line": 616,
    "function": null,
    "comment": "array_mem_check.hpp:616:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not use meaningless empty statements.",
    "file": "array_mem_check.hpp",
    "line": 619,
    "function": null,
    "comment": "array_mem_check.hpp:619:  You don't need a ; after a }  [readability/braces] [4]",
    "tags": ["code-standards","google-cpp","empty-statement","ambiguous-code"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "array_mem_check.hpp",
    "line": 622,
    "function": null,
    "comment": "array_mem_check.hpp:622:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "array_mem_check.hpp",
    "line": 623,
    "function": null,
    "comment": "array_mem_check.hpp:623:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": null,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 20,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:20:  Found C system header after C++ system header. Should be: array_dynamic_no_mem_check.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 21,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:21:  Found C system header after C++ system header. Should be: array_dynamic_no_mem_check.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 31,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:31:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 37,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:37:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 39,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:39:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 43,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:43:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 45,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:45:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 49,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:49:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 63,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:63:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 63,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:63:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 64,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:64:  public: should be indented +1 space inside class BluePrintFactory  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 73,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:73:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 73,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:73:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 74,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:74:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not use meaningless empty statements.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 76,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:76:  You don't need a ; after a }  [readability/braces] [4]",
    "tags": ["code-standards","google-cpp","empty-statement","ambiguous-code"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 129,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:129:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 129,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:129:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 129,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:129:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 130,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:130:  public: should be indented +1 space inside class Array  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 136,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:136:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 137,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:137:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 138,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:138:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 139,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:139:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 141,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:141:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 142,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:142:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 143,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:143:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 143,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:143:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 146,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:146:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 156,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:156:  Zero-parameter constructors should not be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 165,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:165:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 165,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:165:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not use meaningless empty statements.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 167,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:167:  You don't need a ; after a }  [readability/braces] [4]",
    "tags": ["code-standards","google-cpp","empty-statement","ambiguous-code"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 166,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:166:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 175,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:175:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 176,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:176:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 177,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:177:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 178,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:178:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 179,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:179:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 179,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:179:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 179,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:179:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 180,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:180:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 181,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:181:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 182,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:182:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 182,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:182:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 183,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:183:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 206,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:206:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 206,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:206:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 206,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:206:  Single-parameter constructors should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 207,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:207:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 208,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:208:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 219,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:219:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 240,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:240:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 240,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:240:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 240,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:240:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 241,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:241:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 241,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:241:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 244,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:244:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 245,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:245:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 246,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:246:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 247,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:247:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 247,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:247:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 247,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:247:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 248,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:248:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 249,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:249:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 249,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:249:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 250,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:250:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 262,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:262:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 263,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:263:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 263,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:263:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 263,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:263:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 272,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:272:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 273,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:273:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 273,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:273:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 273,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:273:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 282,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:282:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 283,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:283:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 283,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:283:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 283,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:283:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 292,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:292:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 293,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:293:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 293,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:293:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 293,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:293:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 302,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:302:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 303,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:303:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 303,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:303:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 303,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:303:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 312,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:312:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 312,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:312:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 313,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:313:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 313,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:313:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 313,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:313:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 322,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:322:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 323,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:323:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 323,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:323:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 323,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:323:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 332,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:332:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 332,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:332:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 333,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:333:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 333,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:333:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 333,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:333:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 346,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:346:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 347,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:347:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 347,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:347:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 347,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:347:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 356,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:356:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 357,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:357:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 357,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:357:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 357,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:357:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 366,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:366:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 367,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:367:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 367,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:367:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 367,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:367:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 376,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:376:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 377,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:377:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 377,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:377:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 377,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:377:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 395,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:395:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 395,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:395:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 395,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:395:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 396,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:396:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 396,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:396:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 397,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:397:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 397,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:397:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 398,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:398:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 398,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:398:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 398,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:398:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 409,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:409:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 409,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:409:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 410,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:410:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 410,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:410:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 410,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:410:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 410,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:410:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 424,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:424:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 424,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:424:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 425,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:425:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 425,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:425:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 425,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:425:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 425,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:425:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 438,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:438:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 439,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:439:  Missing spaces around >=  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 440,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:440:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 456,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:456:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 457,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:457:  Missing spaces around >=  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 458,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:458:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 483,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:483:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 483,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:483:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 495,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:495:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 514,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:514:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 514,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:514:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 516,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:516:  private: should be indented +1 space inside class Array  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 519,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:519:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 527,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:527:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 527,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:527:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 527,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:527:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 528,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:528:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 530,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:530:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 531,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:531:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 544,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:544:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 558,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:558:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 558,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:558:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 559,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:559:  public: should be indented +1 space inside class ConstantDynamicArray  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 563,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:563:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not use meaningless empty statements.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 569,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:569:  You don't need a ; after a }  [readability/braces] [4]",
    "tags": ["code-standards","google-cpp","empty-statement","ambiguous-code"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 580,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:580:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Do not use meaningless empty statements.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 585,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:585:  You don't need a ; after a }  [readability/braces] [4]",
    "tags": ["code-standards","google-cpp","empty-statement","ambiguous-code"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 597,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:597:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 599,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:599:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 611,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:611:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 611,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:611:  Is this a non-const reference? If so, make const or use a pointer: base_type& array  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 613,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:613:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 616,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:616:  private: should be indented +1 space inside class ConstantDynamicArray  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 622,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:622:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 623,
    "function": null,
    "comment": "array_dynamic_no_mem_check.hpp:623:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "array_dynamic_mem_check.hpp",
    "line": null,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "array_dynamic_mem_check.hpp",
    "line": 21,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:21:  Include 'cstdio' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "array_dynamic_mem_check.hpp",
    "line": 22,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:22:  Found C system header after C++ system header. Should be: array_dynamic_mem_check.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "array_dynamic_mem_check.hpp",
    "line": 23,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:23:  Found C system header after C++ system header. Should be: array_dynamic_mem_check.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 33,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:33:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 39,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:39:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 41,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:41:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 45,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:45:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 47,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:47:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 51,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:51:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 62,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:62:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 62,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:62:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 63,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:63:  public: should be indented +1 space inside class BluePrintFactory  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 72,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:72:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 72,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:72:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 73,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:73:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not use meaningless empty statements.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 75,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:75:  You don't need a ; after a }  [readability/braces] [4]",
    "tags": ["code-standards","google-cpp","empty-statement","ambiguous-code"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 128,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:128:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 128,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:128:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 128,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:128:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 129,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:129:  public: should be indented +1 space inside class Array  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 135,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:135:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 136,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:136:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 137,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:137:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 138,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:138:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 140,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:140:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 141,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:141:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 142,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:142:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 142,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:142:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 145,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:145:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 155,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:155:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 155,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:155:  Zero-parameter constructors should not be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 164,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:164:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 165,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:165:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 166,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:166:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 167,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:167:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 168,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:168:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 169,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:169:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 169,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:169:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 170,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:170:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 170,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:170:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 170,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:170:  Using C-style cast.  Use reinterpret_cast<char*>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 171,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:171:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 171,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:171:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 171,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:171:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 172,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:172:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 172,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:172:  Using C-style cast.  Use reinterpret_cast<Type*>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 173,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:173:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 173,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:173:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 173,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:173:  Using C-style cast.  Use reinterpret_cast<char*>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 174,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:174:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 175,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:175:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 176,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:176:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 177,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:177:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 178,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:178:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 187,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:187:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 187,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:187:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 187,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:187:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 188,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:188:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 189,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:189:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 189,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:189:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 189,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:189:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 190,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:190:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 190,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:190:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 191,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:191:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 214,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:214:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 214,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:214:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 214,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:214:  Single-parameter constructors should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 215,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:215:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 216,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:216:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 228,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:228:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 229,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:229:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 253,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:253:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 253,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:253:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 253,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:253:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 254,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:254:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 254,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:254:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 257,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:257:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 258,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:258:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 259,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:259:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 260,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:260:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 260,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:260:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 260,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:260:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 261,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:261:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 261,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:261:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 261,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:261:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 262,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:262:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 262,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:262:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 263,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:263:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 275,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:275:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 276,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:276:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 276,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:276:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "array_dynamic_mem_check.hpp",
    "line": 276,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:276:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 285,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:285:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 286,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:286:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 286,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:286:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "array_dynamic_mem_check.hpp",
    "line": 286,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:286:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 295,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:295:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 296,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:296:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 296,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:296:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "array_dynamic_mem_check.hpp",
    "line": 296,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:296:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 305,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:305:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 306,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:306:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 306,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:306:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "array_dynamic_mem_check.hpp",
    "line": 306,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:306:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 315,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:315:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 316,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:316:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 316,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:316:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "array_dynamic_mem_check.hpp",
    "line": 316,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:316:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 325,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:325:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 325,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:325:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 326,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:326:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 326,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:326:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "array_dynamic_mem_check.hpp",
    "line": 326,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:326:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 335,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:335:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 336,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:336:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 336,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:336:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "array_dynamic_mem_check.hpp",
    "line": 336,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:336:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 345,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:345:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 345,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:345:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 346,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:346:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 346,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:346:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "array_dynamic_mem_check.hpp",
    "line": 346,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:346:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 359,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:359:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 360,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:360:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 360,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:360:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "array_dynamic_mem_check.hpp",
    "line": 360,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:360:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 369,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:369:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 370,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:370:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 370,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:370:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "array_dynamic_mem_check.hpp",
    "line": 370,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:370:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 379,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:379:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 380,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:380:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 380,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:380:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "array_dynamic_mem_check.hpp",
    "line": 380,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:380:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 389,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:389:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 390,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:390:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 390,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:390:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "array_dynamic_mem_check.hpp",
    "line": 390,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:390:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 408,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:408:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 408,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:408:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 408,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:408:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 409,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:409:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 409,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:409:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 410,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:410:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 410,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:410:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 411,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:411:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 411,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:411:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 411,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:411:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 422,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:422:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 422,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:422:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 423,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:423:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 423,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:423:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 423,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:423:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "array_dynamic_mem_check.hpp",
    "line": 423,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:423:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 437,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:437:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 437,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:437:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 438,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:438:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 438,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:438:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 438,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:438:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "array_dynamic_mem_check.hpp",
    "line": 438,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:438:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 451,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:451:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 452,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:452:  Missing spaces around >=  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 453,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:453:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 469,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:469:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 470,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:470:  Missing spaces around >=  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 471,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:471:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 496,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:496:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "array_dynamic_mem_check.hpp",
    "line": 496,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:496:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 496,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:496:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 497,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:497:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 498,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:498:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 499,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:499:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 501,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:501:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 501,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:501:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 501,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:501:  Using C-style cast.  Use reinterpret_cast<char*>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 502,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:502:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 502,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:502:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 502,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:502:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 503,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:503:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 503,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:503:  Using C-style cast.  Use reinterpret_cast<Type*>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 504,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:504:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 504,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:504:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 504,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:504:  Using C-style cast.  Use reinterpret_cast<char*>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 505,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:505:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 506,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:506:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 507,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:507:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 508,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:508:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 516,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:516:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 517,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:517:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 518,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:518:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 519,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:519:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 520,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:520:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 521,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:521:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 522,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:522:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 537,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:537:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 537,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:537:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 546,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:546:  private: should be indented +1 space inside class Array  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 549,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:549:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 553,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:553:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 557,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:557:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 577,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:577:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 577,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:577:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 578,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:578:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 579,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:579:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 579,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:579:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 580,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:580:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 581,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:581:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 582,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:582:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 583,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:583:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 584,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:584:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 585,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:585:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 596,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:596:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 596,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:596:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 597,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:597:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 598,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:598:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 599,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:599:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 600,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:600:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 601,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:601:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 602,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:602:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 603,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:603:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 604,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:604:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 616,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:616:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 616,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:616:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 617,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:617:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 618,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:618:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 619,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:619:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 620,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:620:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 621,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:621:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 622,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:622:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 623,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:623:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 624,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:624:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 625,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:625:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 638,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:638:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 638,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:638:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 639,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:639:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 648,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:648:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 648,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:648:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 648,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:648:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 649,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:649:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 651,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:651:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 652,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:652:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 665,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:665:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 679,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:679:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 679,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:679:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 680,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:680:  public: should be indented +1 space inside class ConstantDynamicArray  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 684,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:684:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not use meaningless empty statements.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 690,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:690:  You don't need a ; after a }  [readability/braces] [4]",
    "tags": ["code-standards","google-cpp","empty-statement","ambiguous-code"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 701,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:701:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Do not use meaningless empty statements.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 706,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:706:  You don't need a ; after a }  [readability/braces] [4]",
    "tags": ["code-standards","google-cpp","empty-statement","ambiguous-code"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 718,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:718:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 720,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:720:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 732,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:732:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 732,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:732:  Is this a non-const reference? If so, make const or use a pointer: base_type& array  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 734,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:734:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 737,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:737:  private: should be indented +1 space inside class ConstantDynamicArray  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 742,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:742:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 743,
    "function": null,
    "comment": "array_dynamic_mem_check.hpp:743:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "array_no_mem_check.hpp",
    "line": null,
    "function": null,
    "comment": "array_no_mem_check.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "array_no_mem_check.hpp",
    "line": 20,
    "function": null,
    "comment": "array_no_mem_check.hpp:20:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "array_no_mem_check.hpp",
    "line": 26,
    "function": null,
    "comment": "array_no_mem_check.hpp:26:  Found C system header after other header. Should be: array_no_mem_check.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "array_no_mem_check.hpp",
    "line": 27,
    "function": null,
    "comment": "array_no_mem_check.hpp:27:  Found C system header after other header. Should be: array_no_mem_check.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "array_no_mem_check.hpp",
    "line": 28,
    "function": null,
    "comment": "array_no_mem_check.hpp:28:  Found C system header after other header. Should be: array_no_mem_check.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "array_no_mem_check.hpp",
    "line": 29,
    "function": null,
    "comment": "array_no_mem_check.hpp:29:  Found C system header after other header. Should be: array_no_mem_check.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "array_no_mem_check.hpp",
    "line": 30,
    "function": null,
    "comment": "array_no_mem_check.hpp:30:  Found C system header after other header. Should be: array_no_mem_check.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "array_no_mem_check.hpp",
    "line": 31,
    "function": null,
    "comment": "array_no_mem_check.hpp:31:  Found C system header after other header. Should be: array_no_mem_check.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_no_mem_check.hpp",
    "line": 37,
    "function": null,
    "comment": "array_no_mem_check.hpp:37:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_no_mem_check.hpp",
    "line": 43,
    "function": null,
    "comment": "array_no_mem_check.hpp:43:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "array_no_mem_check.hpp",
    "line": 49,
    "function": null,
    "comment": "array_no_mem_check.hpp:49:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_no_mem_check.hpp",
    "line": 51,
    "function": null,
    "comment": "array_no_mem_check.hpp:51:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "array_no_mem_check.hpp",
    "line": 55,
    "function": null,
    "comment": "array_no_mem_check.hpp:55:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_no_mem_check.hpp",
    "line": 106,
    "function": null,
    "comment": "array_no_mem_check.hpp:106:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_no_mem_check.hpp",
    "line": 106,
    "function": null,
    "comment": "array_no_mem_check.hpp:106:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "array_no_mem_check.hpp",
    "line": 107,
    "function": null,
    "comment": "array_no_mem_check.hpp:107:  public: should be indented +1 space inside class Array  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_no_mem_check.hpp",
    "line": 113,
    "function": null,
    "comment": "array_no_mem_check.hpp:113:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_no_mem_check.hpp",
    "line": 114,
    "function": null,
    "comment": "array_no_mem_check.hpp:114:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_no_mem_check.hpp",
    "line": 115,
    "function": null,
    "comment": "array_no_mem_check.hpp:115:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_no_mem_check.hpp",
    "line": 116,
    "function": null,
    "comment": "array_no_mem_check.hpp:116:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_no_mem_check.hpp",
    "line": 118,
    "function": null,
    "comment": "array_no_mem_check.hpp:118:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_no_mem_check.hpp",
    "line": 119,
    "function": null,
    "comment": "array_no_mem_check.hpp:119:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_no_mem_check.hpp",
    "line": 120,
    "function": null,
    "comment": "array_no_mem_check.hpp:120:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_no_mem_check.hpp",
    "line": 120,
    "function": null,
    "comment": "array_no_mem_check.hpp:120:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_no_mem_check.hpp",
    "line": 121,
    "function": null,
    "comment": "array_no_mem_check.hpp:121:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_no_mem_check.hpp",
    "line": 121,
    "function": null,
    "comment": "array_no_mem_check.hpp:121:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not use meaningless empty statements.",
    "file": "array_no_mem_check.hpp",
    "line": 130,
    "function": null,
    "comment": "array_no_mem_check.hpp:130:  You don't need a ; after a }  [readability/braces] [4]",
    "tags": ["code-standards","google-cpp","empty-statement","ambiguous-code"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_no_mem_check.hpp",
    "line": 154,
    "function": null,
    "comment": "array_no_mem_check.hpp:154:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "array_no_mem_check.hpp",
    "line": 154,
    "function": null,
    "comment": "array_no_mem_check.hpp:154:  Single-parameter constructors should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "Do not use meaningless empty statements.",
    "file": "array_no_mem_check.hpp",
    "line": 159,
    "function": null,
    "comment": "array_no_mem_check.hpp:159:  You don't need a ; after a }  [readability/braces] [4]",
    "tags": ["code-standards","google-cpp","empty-statement","ambiguous-code"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_no_mem_check.hpp",
    "line": 177,
    "function": null,
    "comment": "array_no_mem_check.hpp:177:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_no_mem_check.hpp",
    "line": 177,
    "function": null,
    "comment": "array_no_mem_check.hpp:177:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_no_mem_check.hpp",
    "line": 177,
    "function": null,
    "comment": "array_no_mem_check.hpp:177:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_no_mem_check.hpp",
    "line": 178,
    "function": null,
    "comment": "array_no_mem_check.hpp:178:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_no_mem_check.hpp",
    "line": 178,
    "function": null,
    "comment": "array_no_mem_check.hpp:178:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_no_mem_check.hpp",
    "line": 213,
    "function": null,
    "comment": "array_no_mem_check.hpp:213:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_no_mem_check.hpp",
    "line": 223,
    "function": null,
    "comment": "array_no_mem_check.hpp:223:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_no_mem_check.hpp",
    "line": 263,
    "function": null,
    "comment": "array_no_mem_check.hpp:263:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_no_mem_check.hpp",
    "line": 263,
    "function": null,
    "comment": "array_no_mem_check.hpp:263:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_no_mem_check.hpp",
    "line": 263,
    "function": null,
    "comment": "array_no_mem_check.hpp:263:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_no_mem_check.hpp",
    "line": 264,
    "function": null,
    "comment": "array_no_mem_check.hpp:264:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_no_mem_check.hpp",
    "line": 264,
    "function": null,
    "comment": "array_no_mem_check.hpp:264:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_no_mem_check.hpp",
    "line": 265,
    "function": null,
    "comment": "array_no_mem_check.hpp:265:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_no_mem_check.hpp",
    "line": 265,
    "function": null,
    "comment": "array_no_mem_check.hpp:265:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_no_mem_check.hpp",
    "line": 266,
    "function": null,
    "comment": "array_no_mem_check.hpp:266:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_no_mem_check.hpp",
    "line": 266,
    "function": null,
    "comment": "array_no_mem_check.hpp:266:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_no_mem_check.hpp",
    "line": 266,
    "function": null,
    "comment": "array_no_mem_check.hpp:266:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_no_mem_check.hpp",
    "line": 278,
    "function": null,
    "comment": "array_no_mem_check.hpp:278:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_no_mem_check.hpp",
    "line": 278,
    "function": null,
    "comment": "array_no_mem_check.hpp:278:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "array_no_mem_check.hpp",
    "line": 279,
    "function": null,
    "comment": "array_no_mem_check.hpp:279:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_no_mem_check.hpp",
    "line": 279,
    "function": null,
    "comment": "array_no_mem_check.hpp:279:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "array_no_mem_check.hpp",
    "line": 279,
    "function": null,
    "comment": "array_no_mem_check.hpp:279:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_no_mem_check.hpp",
    "line": 293,
    "function": null,
    "comment": "array_no_mem_check.hpp:293:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_no_mem_check.hpp",
    "line": 293,
    "function": null,
    "comment": "array_no_mem_check.hpp:293:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "array_no_mem_check.hpp",
    "line": 294,
    "function": null,
    "comment": "array_no_mem_check.hpp:294:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_no_mem_check.hpp",
    "line": 294,
    "function": null,
    "comment": "array_no_mem_check.hpp:294:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "array_no_mem_check.hpp",
    "line": 294,
    "function": null,
    "comment": "array_no_mem_check.hpp:294:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_no_mem_check.hpp",
    "line": 307,
    "function": null,
    "comment": "array_no_mem_check.hpp:307:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "array_no_mem_check.hpp",
    "line": 308,
    "function": null,
    "comment": "array_no_mem_check.hpp:308:  Missing spaces around >=  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_no_mem_check.hpp",
    "line": 309,
    "function": null,
    "comment": "array_no_mem_check.hpp:309:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_no_mem_check.hpp",
    "line": 325,
    "function": null,
    "comment": "array_no_mem_check.hpp:325:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "array_no_mem_check.hpp",
    "line": 326,
    "function": null,
    "comment": "array_no_mem_check.hpp:326:  Missing spaces around >=  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_no_mem_check.hpp",
    "line": 327,
    "function": null,
    "comment": "array_no_mem_check.hpp:327:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_no_mem_check.hpp",
    "line": 353,
    "function": null,
    "comment": "array_no_mem_check.hpp:353:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_no_mem_check.hpp",
    "line": 353,
    "function": null,
    "comment": "array_no_mem_check.hpp:353:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "array_no_mem_check.hpp",
    "line": 355,
    "function": null,
    "comment": "array_no_mem_check.hpp:355:  private: should be indented +1 space inside class Array  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "array_no_mem_check.hpp",
    "line": 364,
    "function": null,
    "comment": "array_no_mem_check.hpp:364:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_no_mem_check.hpp",
    "line": 364,
    "function": null,
    "comment": "array_no_mem_check.hpp:364:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_no_mem_check.hpp",
    "line": 364,
    "function": null,
    "comment": "array_no_mem_check.hpp:364:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "array_no_mem_check.hpp",
    "line": 365,
    "function": null,
    "comment": "array_no_mem_check.hpp:365:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "array_no_mem_check.hpp",
    "line": 366,
    "function": null,
    "comment": "array_no_mem_check.hpp:366:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "array_no_mem_check.hpp",
    "line": 369,
    "function": null,
    "comment": "array_no_mem_check.hpp:369:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "array_no_mem_check.hpp",
    "line": 370,
    "function": null,
    "comment": "array_no_mem_check.hpp:370:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_no_mem_check.hpp",
    "line": 384,
    "function": null,
    "comment": "array_no_mem_check.hpp:384:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_no_mem_check.hpp",
    "line": 411,
    "function": null,
    "comment": "array_no_mem_check.hpp:411:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "array_no_mem_check.hpp",
    "line": 412,
    "function": null,
    "comment": "array_no_mem_check.hpp:412:  public: should be indented +1 space inside class ArrayBluePrint  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_no_mem_check.hpp",
    "line": 426,
    "function": null,
    "comment": "array_no_mem_check.hpp:426:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_no_mem_check.hpp",
    "line": 443,
    "function": null,
    "comment": "array_no_mem_check.hpp:443:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "array_no_mem_check.hpp",
    "line": 443,
    "function": null,
    "comment": "array_no_mem_check.hpp:443:  Is this a non-const reference? If so, make const or use a pointer: BaseType& array  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_no_mem_check.hpp",
    "line": 458,
    "function": null,
    "comment": "array_no_mem_check.hpp:458:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "array_no_mem_check.hpp",
    "line": 459,
    "function": null,
    "comment": "array_no_mem_check.hpp:459:  public: should be indented +1 space inside class ConstantArray  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_no_mem_check.hpp",
    "line": 463,
    "function": null,
    "comment": "array_no_mem_check.hpp:463:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "array_no_mem_check.hpp",
    "line": 472,
    "function": null,
    "comment": "array_no_mem_check.hpp:472:  Constructors callable with one argument should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "Do not use meaningless empty statements.",
    "file": "array_no_mem_check.hpp",
    "line": 474,
    "function": null,
    "comment": "array_no_mem_check.hpp:474:  You don't need a ; after a }  [readability/braces] [4]",
    "tags": ["code-standards","google-cpp","empty-statement","ambiguous-code"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_no_mem_check.hpp",
    "line": 486,
    "function": null,
    "comment": "array_no_mem_check.hpp:486:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_no_mem_check.hpp",
    "line": 487,
    "function": null,
    "comment": "array_no_mem_check.hpp:487:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_no_mem_check.hpp",
    "line": 488,
    "function": null,
    "comment": "array_no_mem_check.hpp:488:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_no_mem_check.hpp",
    "line": 496,
    "function": null,
    "comment": "array_no_mem_check.hpp:496:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "array_no_mem_check.hpp",
    "line": 496,
    "function": null,
    "comment": "array_no_mem_check.hpp:496:  Is this a non-const reference? If so, make const or use a pointer: base_type& array  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_no_mem_check.hpp",
    "line": 497,
    "function": null,
    "comment": "array_no_mem_check.hpp:497:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "array_no_mem_check.hpp",
    "line": 500,
    "function": null,
    "comment": "array_no_mem_check.hpp:500:  private: should be indented +1 space inside class ConstantArray  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_no_mem_check.hpp",
    "line": 513,
    "function": null,
    "comment": "array_no_mem_check.hpp:513:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "array_no_mem_check.hpp",
    "line": 514,
    "function": null,
    "comment": "array_no_mem_check.hpp:514:  public: should be indented +1 space inside class ArrayFactory  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "array_no_mem_check.hpp",
    "line": 521,
    "function": null,
    "comment": "array_no_mem_check.hpp:521:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_no_mem_check.hpp",
    "line": 521,
    "function": null,
    "comment": "array_no_mem_check.hpp:521:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "array_no_mem_check.hpp",
    "line": 522,
    "function": null,
    "comment": "array_no_mem_check.hpp:522:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not use meaningless empty statements.",
    "file": "array_no_mem_check.hpp",
    "line": 525,
    "function": null,
    "comment": "array_no_mem_check.hpp:525:  You don't need a ; after a }  [readability/braces] [4]",
    "tags": ["code-standards","google-cpp","empty-statement","ambiguous-code"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "array_no_mem_check.hpp",
    "line": 528,
    "function": null,
    "comment": "array_no_mem_check.hpp:528:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "array_no_mem_check.hpp",
    "line": 529,
    "function": null,
    "comment": "array_no_mem_check.hpp:529:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "formatters.hpp",
    "line": null,
    "function": null,
    "comment": "formatters.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "formatters.hpp",
    "line": 20,
    "function": null,
    "comment": "formatters.hpp:20:  Found C system header after C++ system header. Should be: formatters.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "formatters.hpp",
    "line": 21,
    "function": null,
    "comment": "formatters.hpp:21:  Found C system header after C++ system header. Should be: formatters.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "formatters.hpp",
    "line": 22,
    "function": null,
    "comment": "formatters.hpp:22:  Found C system header after C++ system header. Should be: formatters.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "formatters.hpp",
    "line": 23,
    "function": null,
    "comment": "formatters.hpp:23:  Found C system header after C++ system header. Should be: formatters.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "formatters.hpp",
    "line": 25,
    "function": null,
    "comment": "formatters.hpp:25:  Include '../array.hpp' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "formatters.hpp",
    "line": 32,
    "function": null,
    "comment": "formatters.hpp:32:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "formatters.hpp",
    "line": 34,
    "function": null,
    "comment": "formatters.hpp:34:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "formatters.hpp",
    "line": 65,
    "function": null,
    "comment": "formatters.hpp:65:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "formatters.hpp",
    "line": 66,
    "function": null,
    "comment": "formatters.hpp:66:  public: should be indented +1 space inside class ArrayFormatter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "formatters.hpp",
    "line": 75,
    "function": null,
    "comment": "formatters.hpp:75:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "formatters.hpp",
    "line": 75,
    "function": null,
    "comment": "formatters.hpp:75:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "formatters.hpp",
    "line": 75,
    "function": null,
    "comment": "formatters.hpp:75:  Is this a non-const reference? If so, make const or use a pointer: ecl::Array<Type,N> &array  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "formatters.hpp",
    "line": 108,
    "function": null,
    "comment": "formatters.hpp:108:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "formatters.hpp",
    "line": 109,
    "function": null,
    "comment": "formatters.hpp:109:  public: should be indented +1 space inside class ByteArrayFormatter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "formatters.hpp",
    "line": 126,
    "function": null,
    "comment": "formatters.hpp:126:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "formatters.hpp",
    "line": 127,
    "function": null,
    "comment": "formatters.hpp:127:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "formatters.hpp",
    "line": 140,
    "function": null,
    "comment": "formatters.hpp:140:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "formatters.hpp",
    "line": 140,
    "function": null,
    "comment": "formatters.hpp:140:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "formatters.hpp",
    "line": 141,
    "function": null,
    "comment": "formatters.hpp:141:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "formatters.hpp",
    "line": 158,
    "function": null,
    "comment": "formatters.hpp:158:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "formatters.hpp",
    "line": 158,
    "function": null,
    "comment": "formatters.hpp:158:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "formatters.hpp",
    "line": 159,
    "function": null,
    "comment": "formatters.hpp:159:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "formatters.hpp",
    "line": 160,
    "function": null,
    "comment": "formatters.hpp:160:  Closing ) should be moved to the previous line  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "formatters.hpp",
    "line": 161,
    "function": null,
    "comment": "formatters.hpp:161:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "formatters.hpp",
    "line": 162,
    "function": null,
    "comment": "formatters.hpp:162:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "formatters.hpp",
    "line": 182,
    "function": null,
    "comment": "formatters.hpp:182:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "formatters.hpp",
    "line": 182,
    "function": null,
    "comment": "formatters.hpp:182:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "formatters.hpp",
    "line": 184,
    "function": null,
    "comment": "formatters.hpp:184:  private: should be indented +1 space inside class ByteArrayFormatter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "formatters.hpp",
    "line": 185,
    "function": null,
    "comment": "formatters.hpp:185:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "formatters.hpp",
    "line": 186,
    "function": null,
    "comment": "formatters.hpp:186:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "formatters.hpp",
    "line": 195,
    "function": null,
    "comment": "formatters.hpp:195:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "formatters.hpp",
    "line": 197,
    "function": null,
    "comment": "formatters.hpp:197:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "formatters.hpp",
    "line": 198,
    "function": null,
    "comment": "formatters.hpp:198:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "formatters.hpp",
    "line": 198,
    "function": null,
    "comment": "formatters.hpp:198:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "formatters.hpp",
    "line": 207,
    "function": null,
    "comment": "formatters.hpp:207:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "formatters.hpp",
    "line": 208,
    "function": null,
    "comment": "formatters.hpp:208:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "formatters.hpp",
    "line": 233,
    "function": null,
    "comment": "formatters.hpp:233:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "formatters.hpp",
    "line": 233,
    "function": null,
    "comment": "formatters.hpp:233:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "formatters.hpp",
    "line": 250,
    "function": null,
    "comment": "formatters.hpp:250:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "formatters.hpp",
    "line": 267,
    "function": null,
    "comment": "formatters.hpp:267:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "formatters.hpp",
    "line": 267,
    "function": null,
    "comment": "formatters.hpp:267:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "formatters.hpp",
    "line": 268,
    "function": null,
    "comment": "formatters.hpp:268:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "formatters.hpp",
    "line": 281,
    "function": null,
    "comment": "formatters.hpp:281:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "formatters.hpp",
    "line": 281,
    "function": null,
    "comment": "formatters.hpp:281:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "formatters.hpp",
    "line": 282,
    "function": null,
    "comment": "formatters.hpp:282:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "formatters.hpp",
    "line": 283,
    "function": null,
    "comment": "formatters.hpp:283:  public: should be indented +1 space inside class ArrayFormatter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "formatters.hpp",
    "line": 292,
    "function": null,
    "comment": "formatters.hpp:292:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "formatters.hpp",
    "line": 292,
    "function": null,
    "comment": "formatters.hpp:292:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "formatters.hpp",
    "line": 292,
    "function": null,
    "comment": "formatters.hpp:292:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "formatters.hpp",
    "line": 292,
    "function": null,
    "comment": "formatters.hpp:292:  Constructors callable with one argument should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "formatters.hpp",
    "line": 308,
    "function": null,
    "comment": "formatters.hpp:308:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "formatters.hpp",
    "line": 308,
    "function": null,
    "comment": "formatters.hpp:308:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "formatters.hpp",
    "line": 309,
    "function": null,
    "comment": "formatters.hpp:309:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "formatters.hpp",
    "line": 310,
    "function": null,
    "comment": "formatters.hpp:310:  public: should be indented +1 space inside class ArrayFormatter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "formatters.hpp",
    "line": 319,
    "function": null,
    "comment": "formatters.hpp:319:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "formatters.hpp",
    "line": 319,
    "function": null,
    "comment": "formatters.hpp:319:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "formatters.hpp",
    "line": 319,
    "function": null,
    "comment": "formatters.hpp:319:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "formatters.hpp",
    "line": 319,
    "function": null,
    "comment": "formatters.hpp:319:  Constructors callable with one argument should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "formatters.hpp",
    "line": 325,
    "function": null,
    "comment": "formatters.hpp:325:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "formatters.hpp",
    "line": 326,
    "function": null,
    "comment": "formatters.hpp:326:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "push_and_pop_fixed.hpp",
    "line": null,
    "function": null,
    "comment": "push_and_pop_fixed.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "push_and_pop_fixed.hpp",
    "line": 22,
    "function": null,
    "comment": "push_and_pop_fixed.hpp:22:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "push_and_pop_fixed.hpp",
    "line": 22,
    "function": null,
    "comment": "push_and_pop_fixed.hpp:22:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "push_and_pop_fixed.hpp",
    "line": 23,
    "function": null,
    "comment": "push_and_pop_fixed.hpp:23:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "push_and_pop_fixed.hpp",
    "line": 23,
    "function": null,
    "comment": "push_and_pop_fixed.hpp:23:  Include 'algorithm' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "push_and_pop_fixed.hpp",
    "line": 24,
    "function": null,
    "comment": "push_and_pop_fixed.hpp:24:  Found C system header after C++ system header. Should be: push_and_pop_fixed.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "push_and_pop_fixed.hpp",
    "line": 25,
    "function": null,
    "comment": "push_and_pop_fixed.hpp:25:  Found C system header after C++ system header. Should be: push_and_pop_fixed.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "push_and_pop_fixed.hpp",
    "line": 26,
    "function": null,
    "comment": "push_and_pop_fixed.hpp:26:  Found C system header after C++ system header. Should be: push_and_pop_fixed.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "push_and_pop_fixed.hpp",
    "line": 34,
    "function": null,
    "comment": "push_and_pop_fixed.hpp:34:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "push_and_pop_fixed.hpp",
    "line": 41,
    "function": null,
    "comment": "push_and_pop_fixed.hpp:41:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "push_and_pop_fixed.hpp",
    "line": 45,
    "function": null,
    "comment": "push_and_pop_fixed.hpp:45:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "push_and_pop_fixed.hpp",
    "line": 75,
    "function": null,
    "comment": "push_and_pop_fixed.hpp:75:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "push_and_pop_fixed.hpp",
    "line": 77,
    "function": null,
    "comment": "push_and_pop_fixed.hpp:77:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "push_and_pop_fixed.hpp",
    "line": 78,
    "function": null,
    "comment": "push_and_pop_fixed.hpp:78:  public: should be indented +1 space inside class PushAndPop  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "push_and_pop_fixed.hpp",
    "line": 79,
    "function": null,
    "comment": "push_and_pop_fixed.hpp:79:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "push_and_pop_fixed.hpp",
    "line": 79,
    "function": null,
    "comment": "push_and_pop_fixed.hpp:79:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "push_and_pop_fixed.hpp",
    "line": 86,
    "function": null,
    "comment": "push_and_pop_fixed.hpp:86:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "push_and_pop_fixed.hpp",
    "line": 89,
    "function": null,
    "comment": "push_and_pop_fixed.hpp:89:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "push_and_pop_fixed.hpp",
    "line": 89,
    "function": null,
    "comment": "push_and_pop_fixed.hpp:89:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "push_and_pop_fixed.hpp",
    "line": 89,
    "function": null,
    "comment": "push_and_pop_fixed.hpp:89:  Single-parameter constructors should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "push_and_pop_fixed.hpp",
    "line": 94,
    "function": null,
    "comment": "push_and_pop_fixed.hpp:94:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "push_and_pop_fixed.hpp",
    "line": 95,
    "function": null,
    "comment": "push_and_pop_fixed.hpp:95:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "push_and_pop_fixed.hpp",
    "line": 95,
    "function": null,
    "comment": "push_and_pop_fixed.hpp:95:  Missing spaces around >  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "push_and_pop_fixed.hpp",
    "line": 95,
    "function": null,
    "comment": "push_and_pop_fixed.hpp:95:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "push_and_pop_fixed.hpp",
    "line": 96,
    "function": null,
    "comment": "push_and_pop_fixed.hpp:96:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "push_and_pop_fixed.hpp",
    "line": 96,
    "function": null,
    "comment": "push_and_pop_fixed.hpp:96:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "push_and_pop_fixed.hpp",
    "line": 102,
    "function": null,
    "comment": "push_and_pop_fixed.hpp:102:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "push_and_pop_fixed.hpp",
    "line": 107,
    "function": null,
    "comment": "push_and_pop_fixed.hpp:107:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "push_and_pop_fixed.hpp",
    "line": 111,
    "function": null,
    "comment": "push_and_pop_fixed.hpp:111:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "push_and_pop_fixed.hpp",
    "line": 112,
    "function": null,
    "comment": "push_and_pop_fixed.hpp:112:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "push_and_pop_fixed.hpp",
    "line": 115,
    "function": null,
    "comment": "push_and_pop_fixed.hpp:115:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "push_and_pop_fixed.hpp",
    "line": 115,
    "function": null,
    "comment": "push_and_pop_fixed.hpp:115:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "push_and_pop_fixed.hpp",
    "line": 115,
    "function": null,
    "comment": "push_and_pop_fixed.hpp:115:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "push_and_pop_fixed.hpp",
    "line": 116,
    "function": null,
    "comment": "push_and_pop_fixed.hpp:116:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "push_and_pop_fixed.hpp",
    "line": 127,
    "function": null,
    "comment": "push_and_pop_fixed.hpp:127:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "push_and_pop_fixed.hpp",
    "line": 128,
    "function": null,
    "comment": "push_and_pop_fixed.hpp:128:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "push_and_pop_fixed.hpp",
    "line": 131,
    "function": null,
    "comment": "push_and_pop_fixed.hpp:131:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "push_and_pop_fixed.hpp",
    "line": 132,
    "function": null,
    "comment": "push_and_pop_fixed.hpp:132:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "push_and_pop_fixed.hpp",
    "line": 135,
    "function": null,
    "comment": "push_and_pop_fixed.hpp:135:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "push_and_pop_fixed.hpp",
    "line": 135,
    "function": null,
    "comment": "push_and_pop_fixed.hpp:135:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "push_and_pop_fixed.hpp",
    "line": 140,
    "function": null,
    "comment": "push_and_pop_fixed.hpp:140:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "push_and_pop_fixed.hpp",
    "line": 141,
    "function": null,
    "comment": "push_and_pop_fixed.hpp:141:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "push_and_pop_fixed.hpp",
    "line": 141,
    "function": null,
    "comment": "push_and_pop_fixed.hpp:141:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "push_and_pop_fixed.hpp",
    "line": 147,
    "function": null,
    "comment": "push_and_pop_fixed.hpp:147:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "push_and_pop_fixed.hpp",
    "line": 148,
    "function": null,
    "comment": "push_and_pop_fixed.hpp:148:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "push_and_pop_fixed.hpp",
    "line": 149,
    "function": null,
    "comment": "push_and_pop_fixed.hpp:149:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "push_and_pop_fixed.hpp",
    "line": 149,
    "function": null,
    "comment": "push_and_pop_fixed.hpp:149:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "push_and_pop_fixed.hpp",
    "line": 149,
    "function": null,
    "comment": "push_and_pop_fixed.hpp:149:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "push_and_pop_fixed.hpp",
    "line": 158,
    "function": null,
    "comment": "push_and_pop_fixed.hpp:158:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "push_and_pop_fixed.hpp",
    "line": 163,
    "function": null,
    "comment": "push_and_pop_fixed.hpp:163:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "push_and_pop_fixed.hpp",
    "line": 164,
    "function": null,
    "comment": "push_and_pop_fixed.hpp:164:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "push_and_pop_fixed.hpp",
    "line": 165,
    "function": null,
    "comment": "push_and_pop_fixed.hpp:165:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "push_and_pop_fixed.hpp",
    "line": 170,
    "function": null,
    "comment": "push_and_pop_fixed.hpp:170:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "push_and_pop_fixed.hpp",
    "line": 176,
    "function": null,
    "comment": "push_and_pop_fixed.hpp:176:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "push_and_pop_fixed.hpp",
    "line": 177,
    "function": null,
    "comment": "push_and_pop_fixed.hpp:177:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "push_and_pop_fixed.hpp",
    "line": 180,
    "function": null,
    "comment": "push_and_pop_fixed.hpp:180:  private: should be indented +1 space inside class PushAndPop  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "push_and_pop_fixed.hpp",
    "line": 181,
    "function": null,
    "comment": "push_and_pop_fixed.hpp:181:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "push_and_pop_fixed.hpp",
    "line": 187,
    "function": null,
    "comment": "push_and_pop_fixed.hpp:187:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "push_and_pop_dynamic.hpp",
    "line": null,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 30,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:30:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 36,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:36:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 40,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:40:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 71,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:71:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 72,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:72:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 73,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:73:  public: should be indented +1 space inside class PushAndPop  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 79,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:79:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 81,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:81:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 82,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:82:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 83,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:83:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 83,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:83:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 92,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:92:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "push_and_pop_dynamic.hpp",
    "line": 92,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:92:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 92,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:92:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 92,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:92:  Single-parameter constructors should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 94,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:94:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 95,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:95:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 95,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:95:  Missing spaces around >  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "push_and_pop_dynamic.hpp",
    "line": 95,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:95:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "push_and_pop_dynamic.hpp",
    "line": 96,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:96:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 96,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:96:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 99,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:99:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "push_and_pop_dynamic.hpp",
    "line": 99,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:99:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 99,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:99:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 103,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:103:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 104,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:104:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 104,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:104:  Missing spaces around >  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "push_and_pop_dynamic.hpp",
    "line": 104,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:104:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "push_and_pop_dynamic.hpp",
    "line": 105,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:105:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 105,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:105:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "push_and_pop_dynamic.hpp",
    "line": 106,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:106:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 106,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:106:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 114,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:114:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 125,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:125:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 126,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:126:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 126,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:126:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 134,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:134:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 135,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:135:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 135,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:135:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 143,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:143:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 144,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:144:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 144,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:144:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 152,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:152:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 153,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:153:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 153,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:153:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 161,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:161:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 170,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:170:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 170,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:170:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 179,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:179:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 188,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:188:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 196,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:196:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 199,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:199:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 204,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:204:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 208,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:208:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 209,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:209:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 212,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:212:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 212,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:212:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 212,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:212:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 213,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:213:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "push_and_pop_dynamic.hpp",
    "line": 224,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:224:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 225,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:225:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 228,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:228:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 229,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:229:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 237,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:237:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 238,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:238:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "push_and_pop_dynamic.hpp",
    "line": 238,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:238:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "push_and_pop_dynamic.hpp",
    "line": 244,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:244:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 245,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:245:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 246,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:246:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 246,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:246:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 246,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:246:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "push_and_pop_dynamic.hpp",
    "line": 249,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:249:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 250,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:250:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 252,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:252:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 252,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:252:  Missing spaces around >  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "push_and_pop_dynamic.hpp",
    "line": 252,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:252:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "push_and_pop_dynamic.hpp",
    "line": 253,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:253:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 253,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:253:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 264,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:264:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 269,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:269:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 270,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:270:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 271,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:271:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 276,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:276:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 281,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:281:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 288,
    "function": null,
    "comment": "push_and_pop_dynamic.hpp:288:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "formatters.hpp",
    "line": null,
    "function": null,
    "comment": "formatters.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "formatters.hpp",
    "line": 22,
    "function": null,
    "comment": "formatters.hpp:22:  Found C system header after C++ system header. Should be: formatters.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "formatters.hpp",
    "line": 23,
    "function": null,
    "comment": "formatters.hpp:23:  Found C system header after C++ system header. Should be: formatters.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "formatters.hpp",
    "line": 24,
    "function": null,
    "comment": "formatters.hpp:24:  Found C system header after C++ system header. Should be: formatters.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "formatters.hpp",
    "line": 25,
    "function": null,
    "comment": "formatters.hpp:25:  Found C system header after C++ system header. Should be: formatters.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "formatters.hpp",
    "line": 34,
    "function": null,
    "comment": "formatters.hpp:34:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "formatters.hpp",
    "line": 36,
    "function": null,
    "comment": "formatters.hpp:36:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "formatters.hpp",
    "line": 67,
    "function": null,
    "comment": "formatters.hpp:67:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "formatters.hpp",
    "line": 68,
    "function": null,
    "comment": "formatters.hpp:68:  public: should be indented +1 space inside class PushAndPopFormatter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "formatters.hpp",
    "line": 77,
    "function": null,
    "comment": "formatters.hpp:77:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "formatters.hpp",
    "line": 77,
    "function": null,
    "comment": "formatters.hpp:77:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "formatters.hpp",
    "line": 77,
    "function": null,
    "comment": "formatters.hpp:77:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "formatters.hpp",
    "line": 107,
    "function": null,
    "comment": "formatters.hpp:107:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "formatters.hpp",
    "line": 108,
    "function": null,
    "comment": "formatters.hpp:108:  public: should be indented +1 space inside class BytePushAndPopFormatter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "formatters.hpp",
    "line": 125,
    "function": null,
    "comment": "formatters.hpp:125:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "formatters.hpp",
    "line": 125,
    "function": null,
    "comment": "formatters.hpp:125:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "formatters.hpp",
    "line": 126,
    "function": null,
    "comment": "formatters.hpp:126:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "formatters.hpp",
    "line": 145,
    "function": null,
    "comment": "formatters.hpp:145:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "formatters.hpp",
    "line": 145,
    "function": null,
    "comment": "formatters.hpp:145:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "formatters.hpp",
    "line": 147,
    "function": null,
    "comment": "formatters.hpp:147:  private: should be indented +1 space inside class BytePushAndPopFormatter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "formatters.hpp",
    "line": 148,
    "function": null,
    "comment": "formatters.hpp:148:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "formatters.hpp",
    "line": 157,
    "function": null,
    "comment": "formatters.hpp:157:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "formatters.hpp",
    "line": 159,
    "function": null,
    "comment": "formatters.hpp:159:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "formatters.hpp",
    "line": 160,
    "function": null,
    "comment": "formatters.hpp:160:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "formatters.hpp",
    "line": 160,
    "function": null,
    "comment": "formatters.hpp:160:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "formatters.hpp",
    "line": 168,
    "function": null,
    "comment": "formatters.hpp:168:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "formatters.hpp",
    "line": 191,
    "function": null,
    "comment": "formatters.hpp:191:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "formatters.hpp",
    "line": 192,
    "function": null,
    "comment": "formatters.hpp:192:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "formatters.hpp",
    "line": 193,
    "function": null,
    "comment": "formatters.hpp:193:  public: should be indented +1 space inside class PushAndPopFormatter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "formatters.hpp",
    "line": 194,
    "function": null,
    "comment": "formatters.hpp:194:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "formatters.hpp",
    "line": 194,
    "function": null,
    "comment": "formatters.hpp:194:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "formatters.hpp",
    "line": 198,
    "function": null,
    "comment": "formatters.hpp:198:  private: should be indented +1 space inside class PushAndPopFormatter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "formatters.hpp",
    "line": 207,
    "function": null,
    "comment": "formatters.hpp:207:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "formatters.hpp",
    "line": 208,
    "function": null,
    "comment": "formatters.hpp:208:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "stencil.hpp",
    "line": null,
    "function": null,
    "comment": "stencil.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "stencil.hpp",
    "line": 22,
    "function": null,
    "comment": "stencil.hpp:22:  Found C system header after C++ system header. Should be: stencil.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "stencil.hpp",
    "line": 23,
    "function": null,
    "comment": "stencil.hpp:23:  Found C system header after C++ system header. Should be: stencil.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "stencil.hpp",
    "line": 24,
    "function": null,
    "comment": "stencil.hpp:24:  Found C system header after C++ system header. Should be: stencil.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "stencil.hpp",
    "line": 25,
    "function": null,
    "comment": "stencil.hpp:25:  Found C system header after C++ system header. Should be: stencil.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "stencil.hpp",
    "line": 34,
    "function": null,
    "comment": "stencil.hpp:34:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "stencil.hpp",
    "line": 73,
    "function": null,
    "comment": "stencil.hpp:73:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "stencil.hpp",
    "line": 74,
    "function": null,
    "comment": "stencil.hpp:74:  public: should be indented +1 space inside class Stencil  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stencil.hpp",
    "line": 78,
    "function": null,
    "comment": "stencil.hpp:78:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stencil.hpp",
    "line": 79,
    "function": null,
    "comment": "stencil.hpp:79:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stencil.hpp",
    "line": 80,
    "function": null,
    "comment": "stencil.hpp:80:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stencil.hpp",
    "line": 81,
    "function": null,
    "comment": "stencil.hpp:81:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stencil.hpp",
    "line": 82,
    "function": null,
    "comment": "stencil.hpp:82:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stencil.hpp",
    "line": 83,
    "function": null,
    "comment": "stencil.hpp:83:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stencil.hpp",
    "line": 84,
    "function": null,
    "comment": "stencil.hpp:84:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stencil.hpp",
    "line": 85,
    "function": null,
    "comment": "stencil.hpp:85:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stencil.hpp",
    "line": 86,
    "function": null,
    "comment": "stencil.hpp:86:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stencil.hpp",
    "line": 87,
    "function": null,
    "comment": "stencil.hpp:87:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stencil.hpp",
    "line": 88,
    "function": null,
    "comment": "stencil.hpp:88:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stencil.hpp",
    "line": 89,
    "function": null,
    "comment": "stencil.hpp:89:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stencil.hpp",
    "line": 91,
    "function": null,
    "comment": "stencil.hpp:91:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stencil.hpp",
    "line": 92,
    "function": null,
    "comment": "stencil.hpp:92:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.hpp",
    "line": 93,
    "function": null,
    "comment": "stencil.hpp:93:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stencil.hpp",
    "line": 113,
    "function": null,
    "comment": "stencil.hpp:113:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "stencil.hpp",
    "line": 113,
    "function": null,
    "comment": "stencil.hpp:113:  Is this a non-const reference? If so, make const or use a pointer: Array& underlying_array  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "stencil.hpp",
    "line": 117,
    "function": null,
    "comment": "stencil.hpp:117:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stencil.hpp",
    "line": 119,
    "function": null,
    "comment": "stencil.hpp:119:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stencil.hpp",
    "line": 120,
    "function": null,
    "comment": "stencil.hpp:120:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stencil.hpp",
    "line": 138,
    "function": null,
    "comment": "stencil.hpp:138:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "stencil.hpp",
    "line": 138,
    "function": null,
    "comment": "stencil.hpp:138:  Is this a non-const reference? If so, make const or use a pointer: Array& underlying_array  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "stencil.hpp",
    "line": 138,
    "function": null,
    "comment": "stencil.hpp:138:  Constructors callable with one argument should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "stencil.hpp",
    "line": 142,
    "function": null,
    "comment": "stencil.hpp:142:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stencil.hpp",
    "line": 144,
    "function": null,
    "comment": "stencil.hpp:144:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stencil.hpp",
    "line": 145,
    "function": null,
    "comment": "stencil.hpp:145:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stencil.hpp",
    "line": 163,
    "function": null,
    "comment": "stencil.hpp:163:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "stencil.hpp",
    "line": 164,
    "function": null,
    "comment": "stencil.hpp:164:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stencil.hpp",
    "line": 165,
    "function": null,
    "comment": "stencil.hpp:165:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "stencil.hpp",
    "line": 165,
    "function": null,
    "comment": "stencil.hpp:165:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stencil.hpp",
    "line": 166,
    "function": null,
    "comment": "stencil.hpp:166:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "stencil.hpp",
    "line": 166,
    "function": null,
    "comment": "stencil.hpp:166:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.hpp",
    "line": 167,
    "function": null,
    "comment": "stencil.hpp:167:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stencil.hpp",
    "line": 181,
    "function": null,
    "comment": "stencil.hpp:181:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "stencil.hpp",
    "line": 182,
    "function": null,
    "comment": "stencil.hpp:182:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "stencil.hpp",
    "line": 183,
    "function": null,
    "comment": "stencil.hpp:183:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stencil.hpp",
    "line": 186,
    "function": null,
    "comment": "stencil.hpp:186:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stencil.hpp",
    "line": 187,
    "function": null,
    "comment": "stencil.hpp:187:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stencil.hpp",
    "line": 206,
    "function": null,
    "comment": "stencil.hpp:206:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.hpp",
    "line": 206,
    "function": null,
    "comment": "stencil.hpp:206:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "stencil.hpp",
    "line": 207,
    "function": null,
    "comment": "stencil.hpp:207:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stencil.hpp",
    "line": 208,
    "function": null,
    "comment": "stencil.hpp:208:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.hpp",
    "line": 208,
    "function": null,
    "comment": "stencil.hpp:208:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stencil.hpp",
    "line": 240,
    "function": null,
    "comment": "stencil.hpp:240:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "stencil.hpp",
    "line": 241,
    "function": null,
    "comment": "stencil.hpp:241:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "stencil.hpp",
    "line": 243,
    "function": null,
    "comment": "stencil.hpp:243:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "stencil.hpp",
    "line": 247,
    "function": null,
    "comment": "stencil.hpp:247:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "stencil.hpp",
    "line": 248,
    "function": null,
    "comment": "stencil.hpp:248:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stencil.hpp",
    "line": 249,
    "function": null,
    "comment": "stencil.hpp:249:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "stencil.hpp",
    "line": 249,
    "function": null,
    "comment": "stencil.hpp:249:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "stencil.hpp",
    "line": 251,
    "function": null,
    "comment": "stencil.hpp:251:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "stencil.hpp",
    "line": 267,
    "function": null,
    "comment": "stencil.hpp:267:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stencil.hpp",
    "line": 268,
    "function": null,
    "comment": "stencil.hpp:268:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.hpp",
    "line": 268,
    "function": null,
    "comment": "stencil.hpp:268:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "stencil.hpp",
    "line": 268,
    "function": null,
    "comment": "stencil.hpp:268:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "stencil.hpp",
    "line": 277,
    "function": null,
    "comment": "stencil.hpp:277:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stencil.hpp",
    "line": 278,
    "function": null,
    "comment": "stencil.hpp:278:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.hpp",
    "line": 278,
    "function": null,
    "comment": "stencil.hpp:278:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "stencil.hpp",
    "line": 278,
    "function": null,
    "comment": "stencil.hpp:278:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "stencil.hpp",
    "line": 287,
    "function": null,
    "comment": "stencil.hpp:287:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stencil.hpp",
    "line": 288,
    "function": null,
    "comment": "stencil.hpp:288:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.hpp",
    "line": 288,
    "function": null,
    "comment": "stencil.hpp:288:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "stencil.hpp",
    "line": 288,
    "function": null,
    "comment": "stencil.hpp:288:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "stencil.hpp",
    "line": 297,
    "function": null,
    "comment": "stencil.hpp:297:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stencil.hpp",
    "line": 298,
    "function": null,
    "comment": "stencil.hpp:298:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.hpp",
    "line": 298,
    "function": null,
    "comment": "stencil.hpp:298:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "stencil.hpp",
    "line": 298,
    "function": null,
    "comment": "stencil.hpp:298:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "stencil.hpp",
    "line": 307,
    "function": null,
    "comment": "stencil.hpp:307:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stencil.hpp",
    "line": 308,
    "function": null,
    "comment": "stencil.hpp:308:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.hpp",
    "line": 308,
    "function": null,
    "comment": "stencil.hpp:308:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "stencil.hpp",
    "line": 308,
    "function": null,
    "comment": "stencil.hpp:308:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "stencil.hpp",
    "line": 317,
    "function": null,
    "comment": "stencil.hpp:317:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stencil.hpp",
    "line": 318,
    "function": null,
    "comment": "stencil.hpp:318:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.hpp",
    "line": 318,
    "function": null,
    "comment": "stencil.hpp:318:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "stencil.hpp",
    "line": 318,
    "function": null,
    "comment": "stencil.hpp:318:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "stencil.hpp",
    "line": 327,
    "function": null,
    "comment": "stencil.hpp:327:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stencil.hpp",
    "line": 328,
    "function": null,
    "comment": "stencil.hpp:328:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.hpp",
    "line": 328,
    "function": null,
    "comment": "stencil.hpp:328:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "stencil.hpp",
    "line": 328,
    "function": null,
    "comment": "stencil.hpp:328:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "stencil.hpp",
    "line": 337,
    "function": null,
    "comment": "stencil.hpp:337:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stencil.hpp",
    "line": 338,
    "function": null,
    "comment": "stencil.hpp:338:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.hpp",
    "line": 338,
    "function": null,
    "comment": "stencil.hpp:338:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "stencil.hpp",
    "line": 338,
    "function": null,
    "comment": "stencil.hpp:338:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "stencil.hpp",
    "line": 351,
    "function": null,
    "comment": "stencil.hpp:351:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stencil.hpp",
    "line": 352,
    "function": null,
    "comment": "stencil.hpp:352:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.hpp",
    "line": 352,
    "function": null,
    "comment": "stencil.hpp:352:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "stencil.hpp",
    "line": 352,
    "function": null,
    "comment": "stencil.hpp:352:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "stencil.hpp",
    "line": 361,
    "function": null,
    "comment": "stencil.hpp:361:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stencil.hpp",
    "line": 362,
    "function": null,
    "comment": "stencil.hpp:362:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.hpp",
    "line": 362,
    "function": null,
    "comment": "stencil.hpp:362:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "stencil.hpp",
    "line": 362,
    "function": null,
    "comment": "stencil.hpp:362:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "stencil.hpp",
    "line": 371,
    "function": null,
    "comment": "stencil.hpp:371:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stencil.hpp",
    "line": 372,
    "function": null,
    "comment": "stencil.hpp:372:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.hpp",
    "line": 372,
    "function": null,
    "comment": "stencil.hpp:372:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "stencil.hpp",
    "line": 372,
    "function": null,
    "comment": "stencil.hpp:372:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "stencil.hpp",
    "line": 381,
    "function": null,
    "comment": "stencil.hpp:381:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stencil.hpp",
    "line": 382,
    "function": null,
    "comment": "stencil.hpp:382:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.hpp",
    "line": 382,
    "function": null,
    "comment": "stencil.hpp:382:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "stencil.hpp",
    "line": 382,
    "function": null,
    "comment": "stencil.hpp:382:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "stencil.hpp",
    "line": 399,
    "function": null,
    "comment": "stencil.hpp:399:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stencil.hpp",
    "line": 400,
    "function": null,
    "comment": "stencil.hpp:400:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.hpp",
    "line": 400,
    "function": null,
    "comment": "stencil.hpp:400:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "stencil.hpp",
    "line": 400,
    "function": null,
    "comment": "stencil.hpp:400:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stencil.hpp",
    "line": 401,
    "function": null,
    "comment": "stencil.hpp:401:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.hpp",
    "line": 401,
    "function": null,
    "comment": "stencil.hpp:401:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "stencil.hpp",
    "line": 401,
    "function": null,
    "comment": "stencil.hpp:401:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stencil.hpp",
    "line": 415,
    "function": null,
    "comment": "stencil.hpp:415:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "stencil.hpp",
    "line": 416,
    "function": null,
    "comment": "stencil.hpp:416:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stencil.hpp",
    "line": 417,
    "function": null,
    "comment": "stencil.hpp:417:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.hpp",
    "line": 417,
    "function": null,
    "comment": "stencil.hpp:417:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "stencil.hpp",
    "line": 417,
    "function": null,
    "comment": "stencil.hpp:417:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stencil.hpp",
    "line": 418,
    "function": null,
    "comment": "stencil.hpp:418:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.hpp",
    "line": 418,
    "function": null,
    "comment": "stencil.hpp:418:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "stencil.hpp",
    "line": 418,
    "function": null,
    "comment": "stencil.hpp:418:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "stencil.hpp",
    "line": 432,
    "function": null,
    "comment": "stencil.hpp:432:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "stencil.hpp",
    "line": 434,
    "function": null,
    "comment": "stencil.hpp:434:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.hpp",
    "line": 435,
    "function": null,
    "comment": "stencil.hpp:435:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "stencil.hpp",
    "line": 438,
    "function": null,
    "comment": "stencil.hpp:438:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.hpp",
    "line": 439,
    "function": null,
    "comment": "stencil.hpp:439:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "stencil.hpp",
    "line": 456,
    "function": null,
    "comment": "stencil.hpp:456:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "stencil.hpp",
    "line": 458,
    "function": null,
    "comment": "stencil.hpp:458:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.hpp",
    "line": 459,
    "function": null,
    "comment": "stencil.hpp:459:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "stencil.hpp",
    "line": 462,
    "function": null,
    "comment": "stencil.hpp:462:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.hpp",
    "line": 463,
    "function": null,
    "comment": "stencil.hpp:463:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stencil.hpp",
    "line": 498,
    "function": null,
    "comment": "stencil.hpp:498:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "stencil.hpp",
    "line": 500,
    "function": null,
    "comment": "stencil.hpp:500:  private: should be indented +1 space inside class Stencil  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stencil.hpp",
    "line": 510,
    "function": null,
    "comment": "stencil.hpp:510:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "stencil.hpp",
    "line": 511,
    "function": null,
    "comment": "stencil.hpp:511:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "stencil.hpp",
    "line": 512,
    "function": null,
    "comment": "stencil.hpp:512:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "stencil.hpp",
    "line": 513,
    "function": null,
    "comment": "stencil.hpp:513:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "stencil.hpp",
    "line": 513,
    "function": null,
    "comment": "stencil.hpp:513:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "stencil.hpp",
    "line": 517,
    "function": null,
    "comment": "stencil.hpp:517:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "stencil.hpp",
    "line": 526,
    "function": null,
    "comment": "stencil.hpp:526:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "converters.hpp",
    "line": null,
    "function": null,
    "comment": "converters.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "converters.hpp",
    "line": 28,
    "function": null,
    "comment": "converters.hpp:28:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "converters.hpp",
    "line": 44,
    "function": null,
    "comment": "converters.hpp:44:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "converters.hpp",
    "line": 44,
    "function": null,
    "comment": "converters.hpp:44:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "converters.hpp",
    "line": 50,
    "function": null,
    "comment": "converters.hpp:50:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "converters.hpp",
    "line": 50,
    "function": null,
    "comment": "converters.hpp:50:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "converters.hpp",
    "line": 56,
    "function": null,
    "comment": "converters.hpp:56:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "converters.hpp",
    "line": 56,
    "function": null,
    "comment": "converters.hpp:56:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "converters.hpp",
    "line": 62,
    "function": null,
    "comment": "converters.hpp:62:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "converters.hpp",
    "line": 62,
    "function": null,
    "comment": "converters.hpp:62:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "converters.hpp",
    "line": 68,
    "function": null,
    "comment": "converters.hpp:68:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "converters.hpp",
    "line": 68,
    "function": null,
    "comment": "converters.hpp:68:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "converters.hpp",
    "line": 74,
    "function": null,
    "comment": "converters.hpp:74:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "converters.hpp",
    "line": 74,
    "function": null,
    "comment": "converters.hpp:74:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "converters.hpp",
    "line": 80,
    "function": null,
    "comment": "converters.hpp:80:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "converters.hpp",
    "line": 86,
    "function": null,
    "comment": "converters.hpp:86:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "converters.hpp",
    "line": 92,
    "function": null,
    "comment": "converters.hpp:92:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "converters.hpp",
    "line": 92,
    "function": null,
    "comment": "converters.hpp:92:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "converters.hpp",
    "line": 98,
    "function": null,
    "comment": "converters.hpp:98:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "converters.hpp",
    "line": 98,
    "function": null,
    "comment": "converters.hpp:98:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "converters.hpp",
    "line": 104,
    "function": null,
    "comment": "converters.hpp:104:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "converters.hpp",
    "line": 107,
    "function": null,
    "comment": "converters.hpp:107:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "converters.hpp",
    "line": 98,
    "function": null,
    "comment": "converters.hpp:98:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "formatters.hpp",
    "line": null,
    "function": null,
    "comment": "formatters.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "formatters.hpp",
    "line": 20,
    "function": null,
    "comment": "formatters.hpp:20:  Found C system header after C++ system header. Should be: formatters.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "formatters.hpp",
    "line": 21,
    "function": null,
    "comment": "formatters.hpp:21:  Found C system header after C++ system header. Should be: formatters.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "formatters.hpp",
    "line": 22,
    "function": null,
    "comment": "formatters.hpp:22:  Found C system header after C++ system header. Should be: formatters.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "formatters.hpp",
    "line": 23,
    "function": null,
    "comment": "formatters.hpp:23:  Found C system header after C++ system header. Should be: formatters.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "formatters.hpp",
    "line": 24,
    "function": null,
    "comment": "formatters.hpp:24:  Found C system header after C++ system header. Should be: formatters.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "formatters.hpp",
    "line": 25,
    "function": null,
    "comment": "formatters.hpp:25:  Found C system header after C++ system header. Should be: formatters.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "formatters.hpp",
    "line": 33,
    "function": null,
    "comment": "formatters.hpp:33:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not indent within a namespace.",
    "file": "formatters.hpp",
    "line": 40,
    "function": null,
    "comment": "formatters.hpp:40:  Do not indent within a namespace  [runtime/indentation_namespace] [4]",
    "tags": ["code-standards","formatting","google-cpp","indentation","namespace"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "formatters.hpp",
    "line": 47,
    "function": null,
    "comment": "formatters.hpp:47:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "formatters.hpp",
    "line": 73,
    "function": null,
    "comment": "formatters.hpp:73:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "formatters.hpp",
    "line": 74,
    "function": null,
    "comment": "formatters.hpp:74:  public: should be indented +1 space inside class StencilFormatter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "formatters.hpp",
    "line": 83,
    "function": null,
    "comment": "formatters.hpp:83:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "formatters.hpp",
    "line": 83,
    "function": null,
    "comment": "formatters.hpp:83:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "formatters.hpp",
    "line": 86,
    "function": null,
    "comment": "formatters.hpp:86:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "formatters.hpp",
    "line": 86,
    "function": null,
    "comment": "formatters.hpp:86:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "formatters.hpp",
    "line": 103,
    "function": null,
    "comment": "formatters.hpp:103:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "formatters.hpp",
    "line": 104,
    "function": null,
    "comment": "formatters.hpp:104:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "formatters.hpp",
    "line": 105,
    "function": null,
    "comment": "formatters.hpp:105:  public: should be indented +1 space inside class StencilFormatter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "formatters.hpp",
    "line": 114,
    "function": null,
    "comment": "formatters.hpp:114:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not use meaningless empty statements.",
    "file": "formatters.hpp",
    "line": 114,
    "function": null,
    "comment": "formatters.hpp:114:  You don't need a ; after a }  [readability/braces] [4]",
    "tags": ["code-standards","google-cpp","empty-statement","ambiguous-code"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "formatters.hpp",
    "line": 114,
    "function": null,
    "comment": "formatters.hpp:114:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "formatters.hpp",
    "line": 114,
    "function": null,
    "comment": "formatters.hpp:114:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "formatters.hpp",
    "line": 114,
    "function": null,
    "comment": "formatters.hpp:114:  Constructors callable with one argument should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "formatters.hpp",
    "line": 119,
    "function": null,
    "comment": "formatters.hpp:119:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "formatters.hpp",
    "line": 120,
    "function": null,
    "comment": "formatters.hpp:120:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "specialisations.hpp",
    "line": null,
    "function": null,
    "comment": "specialisations.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "specialisations.hpp",
    "line": 23,
    "function": null,
    "comment": "specialisations.hpp:23:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "specialisations.hpp",
    "line": 40,
    "function": null,
    "comment": "specialisations.hpp:40:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "specialisations.hpp",
    "line": 41,
    "function": null,
    "comment": "specialisations.hpp:41:  public: should be indented +1 space inside class Stencil  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 45,
    "function": null,
    "comment": "specialisations.hpp:45:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 46,
    "function": null,
    "comment": "specialisations.hpp:46:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 47,
    "function": null,
    "comment": "specialisations.hpp:47:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 48,
    "function": null,
    "comment": "specialisations.hpp:48:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 49,
    "function": null,
    "comment": "specialisations.hpp:49:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 50,
    "function": null,
    "comment": "specialisations.hpp:50:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 52,
    "function": null,
    "comment": "specialisations.hpp:52:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 53,
    "function": null,
    "comment": "specialisations.hpp:53:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "specialisations.hpp",
    "line": 54,
    "function": null,
    "comment": "specialisations.hpp:54:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 72,
    "function": null,
    "comment": "specialisations.hpp:72:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "specialisations.hpp",
    "line": 77,
    "function": null,
    "comment": "specialisations.hpp:77:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 78,
    "function": null,
    "comment": "specialisations.hpp:78:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 79,
    "function": null,
    "comment": "specialisations.hpp:79:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 95,
    "function": null,
    "comment": "specialisations.hpp:95:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "specialisations.hpp",
    "line": 100,
    "function": null,
    "comment": "specialisations.hpp:100:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 101,
    "function": null,
    "comment": "specialisations.hpp:101:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 102,
    "function": null,
    "comment": "specialisations.hpp:102:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 120,
    "function": null,
    "comment": "specialisations.hpp:120:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "specialisations.hpp",
    "line": 121,
    "function": null,
    "comment": "specialisations.hpp:121:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 122,
    "function": null,
    "comment": "specialisations.hpp:122:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "specialisations.hpp",
    "line": 122,
    "function": null,
    "comment": "specialisations.hpp:122:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 123,
    "function": null,
    "comment": "specialisations.hpp:123:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "specialisations.hpp",
    "line": 123,
    "function": null,
    "comment": "specialisations.hpp:123:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 124,
    "function": null,
    "comment": "specialisations.hpp:124:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 125,
    "function": null,
    "comment": "specialisations.hpp:125:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "specialisations.hpp",
    "line": 125,
    "function": null,
    "comment": "specialisations.hpp:125:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 139,
    "function": null,
    "comment": "specialisations.hpp:139:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "specialisations.hpp",
    "line": 140,
    "function": null,
    "comment": "specialisations.hpp:140:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "specialisations.hpp",
    "line": 141,
    "function": null,
    "comment": "specialisations.hpp:141:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 144,
    "function": null,
    "comment": "specialisations.hpp:144:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 145,
    "function": null,
    "comment": "specialisations.hpp:145:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 164,
    "function": null,
    "comment": "specialisations.hpp:164:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "specialisations.hpp",
    "line": 164,
    "function": null,
    "comment": "specialisations.hpp:164:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "specialisations.hpp",
    "line": 165,
    "function": null,
    "comment": "specialisations.hpp:165:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 166,
    "function": null,
    "comment": "specialisations.hpp:166:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "specialisations.hpp",
    "line": 166,
    "function": null,
    "comment": "specialisations.hpp:166:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 181,
    "function": null,
    "comment": "specialisations.hpp:181:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "specialisations.hpp",
    "line": 182,
    "function": null,
    "comment": "specialisations.hpp:182:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "specialisations.hpp",
    "line": 199,
    "function": null,
    "comment": "specialisations.hpp:199:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 200,
    "function": null,
    "comment": "specialisations.hpp:200:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "specialisations.hpp",
    "line": 200,
    "function": null,
    "comment": "specialisations.hpp:200:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "specialisations.hpp",
    "line": 200,
    "function": null,
    "comment": "specialisations.hpp:200:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "specialisations.hpp",
    "line": 209,
    "function": null,
    "comment": "specialisations.hpp:209:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 210,
    "function": null,
    "comment": "specialisations.hpp:210:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "specialisations.hpp",
    "line": 210,
    "function": null,
    "comment": "specialisations.hpp:210:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "specialisations.hpp",
    "line": 210,
    "function": null,
    "comment": "specialisations.hpp:210:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "specialisations.hpp",
    "line": 219,
    "function": null,
    "comment": "specialisations.hpp:219:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 220,
    "function": null,
    "comment": "specialisations.hpp:220:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "specialisations.hpp",
    "line": 220,
    "function": null,
    "comment": "specialisations.hpp:220:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "specialisations.hpp",
    "line": 220,
    "function": null,
    "comment": "specialisations.hpp:220:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "specialisations.hpp",
    "line": 229,
    "function": null,
    "comment": "specialisations.hpp:229:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 230,
    "function": null,
    "comment": "specialisations.hpp:230:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "specialisations.hpp",
    "line": 230,
    "function": null,
    "comment": "specialisations.hpp:230:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "specialisations.hpp",
    "line": 230,
    "function": null,
    "comment": "specialisations.hpp:230:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "specialisations.hpp",
    "line": 239,
    "function": null,
    "comment": "specialisations.hpp:239:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 240,
    "function": null,
    "comment": "specialisations.hpp:240:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "specialisations.hpp",
    "line": 240,
    "function": null,
    "comment": "specialisations.hpp:240:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "specialisations.hpp",
    "line": 240,
    "function": null,
    "comment": "specialisations.hpp:240:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "specialisations.hpp",
    "line": 249,
    "function": null,
    "comment": "specialisations.hpp:249:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 250,
    "function": null,
    "comment": "specialisations.hpp:250:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "specialisations.hpp",
    "line": 250,
    "function": null,
    "comment": "specialisations.hpp:250:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "specialisations.hpp",
    "line": 250,
    "function": null,
    "comment": "specialisations.hpp:250:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "specialisations.hpp",
    "line": 259,
    "function": null,
    "comment": "specialisations.hpp:259:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 260,
    "function": null,
    "comment": "specialisations.hpp:260:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "specialisations.hpp",
    "line": 260,
    "function": null,
    "comment": "specialisations.hpp:260:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "specialisations.hpp",
    "line": 260,
    "function": null,
    "comment": "specialisations.hpp:260:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "specialisations.hpp",
    "line": 269,
    "function": null,
    "comment": "specialisations.hpp:269:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 270,
    "function": null,
    "comment": "specialisations.hpp:270:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "specialisations.hpp",
    "line": 270,
    "function": null,
    "comment": "specialisations.hpp:270:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "specialisations.hpp",
    "line": 270,
    "function": null,
    "comment": "specialisations.hpp:270:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "specialisations.hpp",
    "line": 283,
    "function": null,
    "comment": "specialisations.hpp:283:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 284,
    "function": null,
    "comment": "specialisations.hpp:284:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "specialisations.hpp",
    "line": 284,
    "function": null,
    "comment": "specialisations.hpp:284:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "specialisations.hpp",
    "line": 284,
    "function": null,
    "comment": "specialisations.hpp:284:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "specialisations.hpp",
    "line": 293,
    "function": null,
    "comment": "specialisations.hpp:293:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 294,
    "function": null,
    "comment": "specialisations.hpp:294:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "specialisations.hpp",
    "line": 294,
    "function": null,
    "comment": "specialisations.hpp:294:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "specialisations.hpp",
    "line": 294,
    "function": null,
    "comment": "specialisations.hpp:294:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "specialisations.hpp",
    "line": 303,
    "function": null,
    "comment": "specialisations.hpp:303:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 304,
    "function": null,
    "comment": "specialisations.hpp:304:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "specialisations.hpp",
    "line": 304,
    "function": null,
    "comment": "specialisations.hpp:304:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "specialisations.hpp",
    "line": 304,
    "function": null,
    "comment": "specialisations.hpp:304:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "specialisations.hpp",
    "line": 313,
    "function": null,
    "comment": "specialisations.hpp:313:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 314,
    "function": null,
    "comment": "specialisations.hpp:314:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "specialisations.hpp",
    "line": 314,
    "function": null,
    "comment": "specialisations.hpp:314:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "specialisations.hpp",
    "line": 314,
    "function": null,
    "comment": "specialisations.hpp:314:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "specialisations.hpp",
    "line": 331,
    "function": null,
    "comment": "specialisations.hpp:331:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 332,
    "function": null,
    "comment": "specialisations.hpp:332:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "specialisations.hpp",
    "line": 332,
    "function": null,
    "comment": "specialisations.hpp:332:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "specialisations.hpp",
    "line": 332,
    "function": null,
    "comment": "specialisations.hpp:332:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 333,
    "function": null,
    "comment": "specialisations.hpp:333:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "specialisations.hpp",
    "line": 333,
    "function": null,
    "comment": "specialisations.hpp:333:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "specialisations.hpp",
    "line": 333,
    "function": null,
    "comment": "specialisations.hpp:333:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 347,
    "function": null,
    "comment": "specialisations.hpp:347:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "specialisations.hpp",
    "line": 348,
    "function": null,
    "comment": "specialisations.hpp:348:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 349,
    "function": null,
    "comment": "specialisations.hpp:349:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "specialisations.hpp",
    "line": 349,
    "function": null,
    "comment": "specialisations.hpp:349:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "specialisations.hpp",
    "line": 349,
    "function": null,
    "comment": "specialisations.hpp:349:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 350,
    "function": null,
    "comment": "specialisations.hpp:350:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "specialisations.hpp",
    "line": 350,
    "function": null,
    "comment": "specialisations.hpp:350:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "specialisations.hpp",
    "line": 350,
    "function": null,
    "comment": "specialisations.hpp:350:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "specialisations.hpp",
    "line": 364,
    "function": null,
    "comment": "specialisations.hpp:364:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "specialisations.hpp",
    "line": 366,
    "function": null,
    "comment": "specialisations.hpp:366:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "specialisations.hpp",
    "line": 367,
    "function": null,
    "comment": "specialisations.hpp:367:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "specialisations.hpp",
    "line": 370,
    "function": null,
    "comment": "specialisations.hpp:370:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "specialisations.hpp",
    "line": 371,
    "function": null,
    "comment": "specialisations.hpp:371:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "specialisations.hpp",
    "line": 388,
    "function": null,
    "comment": "specialisations.hpp:388:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "specialisations.hpp",
    "line": 390,
    "function": null,
    "comment": "specialisations.hpp:390:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "specialisations.hpp",
    "line": 391,
    "function": null,
    "comment": "specialisations.hpp:391:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "specialisations.hpp",
    "line": 394,
    "function": null,
    "comment": "specialisations.hpp:394:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "specialisations.hpp",
    "line": 395,
    "function": null,
    "comment": "specialisations.hpp:395:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 430,
    "function": null,
    "comment": "specialisations.hpp:430:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "specialisations.hpp",
    "line": 432,
    "function": null,
    "comment": "specialisations.hpp:432:  private: should be indented +1 space inside class Stencil  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "specialisations.hpp",
    "line": 454,
    "function": null,
    "comment": "specialisations.hpp:454:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "specialisations.hpp",
    "line": 455,
    "function": null,
    "comment": "specialisations.hpp:455:  public: should be indented +1 space inside class Stencil  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 459,
    "function": null,
    "comment": "specialisations.hpp:459:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 460,
    "function": null,
    "comment": "specialisations.hpp:460:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 461,
    "function": null,
    "comment": "specialisations.hpp:461:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 462,
    "function": null,
    "comment": "specialisations.hpp:462:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 463,
    "function": null,
    "comment": "specialisations.hpp:463:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 464,
    "function": null,
    "comment": "specialisations.hpp:464:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 466,
    "function": null,
    "comment": "specialisations.hpp:466:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 467,
    "function": null,
    "comment": "specialisations.hpp:467:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "specialisations.hpp",
    "line": 468,
    "function": null,
    "comment": "specialisations.hpp:468:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 486,
    "function": null,
    "comment": "specialisations.hpp:486:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "specialisations.hpp",
    "line": 491,
    "function": null,
    "comment": "specialisations.hpp:491:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 492,
    "function": null,
    "comment": "specialisations.hpp:492:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 493,
    "function": null,
    "comment": "specialisations.hpp:493:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 509,
    "function": null,
    "comment": "specialisations.hpp:509:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "specialisations.hpp",
    "line": 514,
    "function": null,
    "comment": "specialisations.hpp:514:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 515,
    "function": null,
    "comment": "specialisations.hpp:515:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 516,
    "function": null,
    "comment": "specialisations.hpp:516:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 534,
    "function": null,
    "comment": "specialisations.hpp:534:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "specialisations.hpp",
    "line": 535,
    "function": null,
    "comment": "specialisations.hpp:535:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 536,
    "function": null,
    "comment": "specialisations.hpp:536:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "specialisations.hpp",
    "line": 536,
    "function": null,
    "comment": "specialisations.hpp:536:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 537,
    "function": null,
    "comment": "specialisations.hpp:537:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "specialisations.hpp",
    "line": 537,
    "function": null,
    "comment": "specialisations.hpp:537:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 538,
    "function": null,
    "comment": "specialisations.hpp:538:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 539,
    "function": null,
    "comment": "specialisations.hpp:539:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "specialisations.hpp",
    "line": 539,
    "function": null,
    "comment": "specialisations.hpp:539:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 553,
    "function": null,
    "comment": "specialisations.hpp:553:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "specialisations.hpp",
    "line": 554,
    "function": null,
    "comment": "specialisations.hpp:554:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "specialisations.hpp",
    "line": 555,
    "function": null,
    "comment": "specialisations.hpp:555:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 558,
    "function": null,
    "comment": "specialisations.hpp:558:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 559,
    "function": null,
    "comment": "specialisations.hpp:559:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 574,
    "function": null,
    "comment": "specialisations.hpp:574:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "specialisations.hpp",
    "line": 575,
    "function": null,
    "comment": "specialisations.hpp:575:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "specialisations.hpp",
    "line": 592,
    "function": null,
    "comment": "specialisations.hpp:592:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 593,
    "function": null,
    "comment": "specialisations.hpp:593:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "specialisations.hpp",
    "line": 593,
    "function": null,
    "comment": "specialisations.hpp:593:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "specialisations.hpp",
    "line": 593,
    "function": null,
    "comment": "specialisations.hpp:593:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "specialisations.hpp",
    "line": 602,
    "function": null,
    "comment": "specialisations.hpp:602:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 603,
    "function": null,
    "comment": "specialisations.hpp:603:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "specialisations.hpp",
    "line": 603,
    "function": null,
    "comment": "specialisations.hpp:603:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "specialisations.hpp",
    "line": 603,
    "function": null,
    "comment": "specialisations.hpp:603:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "specialisations.hpp",
    "line": 612,
    "function": null,
    "comment": "specialisations.hpp:612:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 613,
    "function": null,
    "comment": "specialisations.hpp:613:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "specialisations.hpp",
    "line": 613,
    "function": null,
    "comment": "specialisations.hpp:613:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "specialisations.hpp",
    "line": 613,
    "function": null,
    "comment": "specialisations.hpp:613:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "specialisations.hpp",
    "line": 622,
    "function": null,
    "comment": "specialisations.hpp:622:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 623,
    "function": null,
    "comment": "specialisations.hpp:623:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "specialisations.hpp",
    "line": 623,
    "function": null,
    "comment": "specialisations.hpp:623:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "specialisations.hpp",
    "line": 623,
    "function": null,
    "comment": "specialisations.hpp:623:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "specialisations.hpp",
    "line": 632,
    "function": null,
    "comment": "specialisations.hpp:632:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 633,
    "function": null,
    "comment": "specialisations.hpp:633:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "specialisations.hpp",
    "line": 633,
    "function": null,
    "comment": "specialisations.hpp:633:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "specialisations.hpp",
    "line": 633,
    "function": null,
    "comment": "specialisations.hpp:633:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "specialisations.hpp",
    "line": 642,
    "function": null,
    "comment": "specialisations.hpp:642:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 643,
    "function": null,
    "comment": "specialisations.hpp:643:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "specialisations.hpp",
    "line": 643,
    "function": null,
    "comment": "specialisations.hpp:643:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "specialisations.hpp",
    "line": 643,
    "function": null,
    "comment": "specialisations.hpp:643:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "specialisations.hpp",
    "line": 652,
    "function": null,
    "comment": "specialisations.hpp:652:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 653,
    "function": null,
    "comment": "specialisations.hpp:653:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "specialisations.hpp",
    "line": 653,
    "function": null,
    "comment": "specialisations.hpp:653:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "specialisations.hpp",
    "line": 653,
    "function": null,
    "comment": "specialisations.hpp:653:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "specialisations.hpp",
    "line": 662,
    "function": null,
    "comment": "specialisations.hpp:662:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 663,
    "function": null,
    "comment": "specialisations.hpp:663:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "specialisations.hpp",
    "line": 663,
    "function": null,
    "comment": "specialisations.hpp:663:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "specialisations.hpp",
    "line": 663,
    "function": null,
    "comment": "specialisations.hpp:663:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "specialisations.hpp",
    "line": 676,
    "function": null,
    "comment": "specialisations.hpp:676:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 677,
    "function": null,
    "comment": "specialisations.hpp:677:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "specialisations.hpp",
    "line": 677,
    "function": null,
    "comment": "specialisations.hpp:677:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "specialisations.hpp",
    "line": 677,
    "function": null,
    "comment": "specialisations.hpp:677:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "specialisations.hpp",
    "line": 686,
    "function": null,
    "comment": "specialisations.hpp:686:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 687,
    "function": null,
    "comment": "specialisations.hpp:687:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "specialisations.hpp",
    "line": 687,
    "function": null,
    "comment": "specialisations.hpp:687:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "specialisations.hpp",
    "line": 687,
    "function": null,
    "comment": "specialisations.hpp:687:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "specialisations.hpp",
    "line": 696,
    "function": null,
    "comment": "specialisations.hpp:696:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 697,
    "function": null,
    "comment": "specialisations.hpp:697:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "specialisations.hpp",
    "line": 697,
    "function": null,
    "comment": "specialisations.hpp:697:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "specialisations.hpp",
    "line": 697,
    "function": null,
    "comment": "specialisations.hpp:697:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "specialisations.hpp",
    "line": 706,
    "function": null,
    "comment": "specialisations.hpp:706:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 707,
    "function": null,
    "comment": "specialisations.hpp:707:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "specialisations.hpp",
    "line": 707,
    "function": null,
    "comment": "specialisations.hpp:707:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "specialisations.hpp",
    "line": 707,
    "function": null,
    "comment": "specialisations.hpp:707:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "specialisations.hpp",
    "line": 724,
    "function": null,
    "comment": "specialisations.hpp:724:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 725,
    "function": null,
    "comment": "specialisations.hpp:725:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "specialisations.hpp",
    "line": 725,
    "function": null,
    "comment": "specialisations.hpp:725:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "specialisations.hpp",
    "line": 725,
    "function": null,
    "comment": "specialisations.hpp:725:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 726,
    "function": null,
    "comment": "specialisations.hpp:726:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "specialisations.hpp",
    "line": 726,
    "function": null,
    "comment": "specialisations.hpp:726:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "specialisations.hpp",
    "line": 726,
    "function": null,
    "comment": "specialisations.hpp:726:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 740,
    "function": null,
    "comment": "specialisations.hpp:740:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "specialisations.hpp",
    "line": 741,
    "function": null,
    "comment": "specialisations.hpp:741:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 742,
    "function": null,
    "comment": "specialisations.hpp:742:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "specialisations.hpp",
    "line": 742,
    "function": null,
    "comment": "specialisations.hpp:742:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "specialisations.hpp",
    "line": 742,
    "function": null,
    "comment": "specialisations.hpp:742:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 743,
    "function": null,
    "comment": "specialisations.hpp:743:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "specialisations.hpp",
    "line": 743,
    "function": null,
    "comment": "specialisations.hpp:743:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "specialisations.hpp",
    "line": 743,
    "function": null,
    "comment": "specialisations.hpp:743:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "specialisations.hpp",
    "line": 757,
    "function": null,
    "comment": "specialisations.hpp:757:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "specialisations.hpp",
    "line": 759,
    "function": null,
    "comment": "specialisations.hpp:759:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "specialisations.hpp",
    "line": 760,
    "function": null,
    "comment": "specialisations.hpp:760:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "specialisations.hpp",
    "line": 763,
    "function": null,
    "comment": "specialisations.hpp:763:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "specialisations.hpp",
    "line": 764,
    "function": null,
    "comment": "specialisations.hpp:764:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "specialisations.hpp",
    "line": 781,
    "function": null,
    "comment": "specialisations.hpp:781:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "specialisations.hpp",
    "line": 783,
    "function": null,
    "comment": "specialisations.hpp:783:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "specialisations.hpp",
    "line": 784,
    "function": null,
    "comment": "specialisations.hpp:784:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "specialisations.hpp",
    "line": 787,
    "function": null,
    "comment": "specialisations.hpp:787:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "specialisations.hpp",
    "line": 788,
    "function": null,
    "comment": "specialisations.hpp:788:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "specialisations.hpp",
    "line": 823,
    "function": null,
    "comment": "specialisations.hpp:823:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "specialisations.hpp",
    "line": 825,
    "function": null,
    "comment": "specialisations.hpp:825:  private: should be indented +1 space inside class Stencil  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "specialisations.hpp",
    "line": 831,
    "function": null,
    "comment": "specialisations.hpp:831:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "formatters.hpp",
    "line": null,
    "function": null,
    "comment": "formatters.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "formatters.hpp",
    "line": 20,
    "function": null,
    "comment": "formatters.hpp:20:  Found C system header after C++ system header. Should be: formatters.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "formatters.hpp",
    "line": 21,
    "function": null,
    "comment": "formatters.hpp:21:  Found C system header after C++ system header. Should be: formatters.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "formatters.hpp",
    "line": 22,
    "function": null,
    "comment": "formatters.hpp:22:  Found C system header after C++ system header. Should be: formatters.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "formatters.hpp",
    "line": 23,
    "function": null,
    "comment": "formatters.hpp:23:  Found C system header after C++ system header. Should be: formatters.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "formatters.hpp",
    "line": 29,
    "function": null,
    "comment": "formatters.hpp:29:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "formatters.hpp",
    "line": 30,
    "function": null,
    "comment": "formatters.hpp:30:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "formatters.hpp",
    "line": 67,
    "function": null,
    "comment": "formatters.hpp:67:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "formatters.hpp",
    "line": 68,
    "function": null,
    "comment": "formatters.hpp:68:  public: should be indented +1 space inside class FloatContainerFormatter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "formatters.hpp",
    "line": 72,
    "function": null,
    "comment": "formatters.hpp:72:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "formatters.hpp",
    "line": 80,
    "function": null,
    "comment": "formatters.hpp:80:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "formatters.hpp",
    "line": 80,
    "function": null,
    "comment": "formatters.hpp:80:  Constructors callable with one argument should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "formatters.hpp",
    "line": 85,
    "function": null,
    "comment": "formatters.hpp:85:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "formatters.hpp",
    "line": 90,
    "function": null,
    "comment": "formatters.hpp:90:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "formatters.hpp",
    "line": 100,
    "function": null,
    "comment": "formatters.hpp:100:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "formatters.hpp",
    "line": 100,
    "function": null,
    "comment": "formatters.hpp:100:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "formatters.hpp",
    "line": 111,
    "function": null,
    "comment": "formatters.hpp:111:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "formatters.hpp",
    "line": 111,
    "function": null,
    "comment": "formatters.hpp:111:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "formatters.hpp",
    "line": 111,
    "function": null,
    "comment": "formatters.hpp:111:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "formatters.hpp",
    "line": 126,
    "function": null,
    "comment": "formatters.hpp:126:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "formatters.hpp",
    "line": 126,
    "function": null,
    "comment": "formatters.hpp:126:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "formatters.hpp",
    "line": 137,
    "function": null,
    "comment": "formatters.hpp:137:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "formatters.hpp",
    "line": 151,
    "function": null,
    "comment": "formatters.hpp:151:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "formatters.hpp",
    "line": 151,
    "function": null,
    "comment": "formatters.hpp:151:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "formatters.hpp",
    "line": 151,
    "function": null,
    "comment": "formatters.hpp:151:  Is this a non-const reference? If so, make const or use a pointer: Container &c  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "formatters.hpp",
    "line": 159,
    "function": null,
    "comment": "formatters.hpp:159:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "formatters.hpp",
    "line": 159,
    "function": null,
    "comment": "formatters.hpp:159:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "formatters.hpp",
    "line": 171,
    "function": null,
    "comment": "formatters.hpp:171:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "formatters.hpp",
    "line": 173,
    "function": null,
    "comment": "formatters.hpp:173:  private: should be indented +1 space inside class FloatContainerFormatter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "formatters.hpp",
    "line": 174,
    "function": null,
    "comment": "formatters.hpp:174:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "formatters.hpp",
    "line": 193,
    "function": null,
    "comment": "formatters.hpp:193:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "formatters.hpp",
    "line": 193,
    "function": null,
    "comment": "formatters.hpp:193:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "formatters.hpp",
    "line": 193,
    "function": null,
    "comment": "formatters.hpp:193:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "formatters.hpp",
    "line": 194,
    "function": null,
    "comment": "formatters.hpp:194:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "formatters.hpp",
    "line": 195,
    "function": null,
    "comment": "formatters.hpp:195:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "formatters.hpp",
    "line": 196,
    "function": null,
    "comment": "formatters.hpp:196:  Extra space after (  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "formatters.hpp",
    "line": 196,
    "function": null,
    "comment": "formatters.hpp:196:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "formatters.hpp",
    "line": 197,
    "function": null,
    "comment": "formatters.hpp:197:  Extra space after (  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "formatters.hpp",
    "line": 197,
    "function": null,
    "comment": "formatters.hpp:197:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "formatters.hpp",
    "line": 198,
    "function": null,
    "comment": "formatters.hpp:198:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "formatters.hpp",
    "line": 200,
    "function": null,
    "comment": "formatters.hpp:200:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "formatters.hpp",
    "line": 200,
    "function": null,
    "comment": "formatters.hpp:200:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "formatters.hpp",
    "line": 201,
    "function": null,
    "comment": "formatters.hpp:201:  Extra space after (  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "formatters.hpp",
    "line": 201,
    "function": null,
    "comment": "formatters.hpp:201:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "formatters.hpp",
    "line": 216,
    "function": null,
    "comment": "formatters.hpp:216:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "formatters.hpp",
    "line": 216,
    "function": null,
    "comment": "formatters.hpp:216:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "formatters.hpp",
    "line": 217,
    "function": null,
    "comment": "formatters.hpp:217:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "formatters.hpp",
    "line": 217,
    "function": null,
    "comment": "formatters.hpp:217:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Whitespace inside parenthesis should be consistent, and should consist of either zero or one space.",
    "file": "formatters.hpp",
    "line": 233,
    "function": null,
    "comment": "formatters.hpp:233:  Mismatching spaces inside () in for  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "formatters.hpp",
    "line": 241,
    "function": null,
    "comment": "formatters.hpp:241:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "formatters.hpp",
    "line": 242,
    "function": null,
    "comment": "formatters.hpp:242:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "formatters.hpp",
    "line": 242,
    "function": null,
    "comment": "formatters.hpp:242:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "formatters.hpp",
    "line": 251,
    "function": null,
    "comment": "formatters.hpp:251:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "formatters.hpp",
    "line": 262,
    "function": null,
    "comment": "formatters.hpp:262:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "formatters.hpp",
    "line": 271,
    "function": null,
    "comment": "formatters.hpp:271:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "formatters.hpp",
    "line": 272,
    "function": null,
    "comment": "formatters.hpp:272:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "arrays_mem_check.cpp",
    "line": null,
    "function": null,
    "comment": "arrays_mem_check.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "arrays_mem_check.cpp",
    "line": 12,
    "function": null,
    "comment": "arrays_mem_check.cpp:12:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "arrays_mem_check.cpp",
    "line": 12,
    "function": null,
    "comment": "arrays_mem_check.cpp:12:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "arrays_mem_check.cpp",
    "line": 19,
    "function": null,
    "comment": "arrays_mem_check.cpp:19:  Found C system header after C++ system header. Should be: arrays_mem_check.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "arrays_mem_check.cpp",
    "line": 35,
    "function": null,
    "comment": "arrays_mem_check.cpp:35:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 35,
    "function": null,
    "comment": "arrays_mem_check.cpp:35:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 36,
    "function": null,
    "comment": "arrays_mem_check.cpp:36:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 37,
    "function": null,
    "comment": "arrays_mem_check.cpp:37:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 38,
    "function": null,
    "comment": "arrays_mem_check.cpp:38:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 39,
    "function": null,
    "comment": "arrays_mem_check.cpp:39:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 40,
    "function": null,
    "comment": "arrays_mem_check.cpp:40:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 41,
    "function": null,
    "comment": "arrays_mem_check.cpp:41:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 42,
    "function": null,
    "comment": "arrays_mem_check.cpp:42:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 43,
    "function": null,
    "comment": "arrays_mem_check.cpp:43:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 44,
    "function": null,
    "comment": "arrays_mem_check.cpp:44:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 45,
    "function": null,
    "comment": "arrays_mem_check.cpp:45:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 46,
    "function": null,
    "comment": "arrays_mem_check.cpp:46:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 47,
    "function": null,
    "comment": "arrays_mem_check.cpp:47:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 48,
    "function": null,
    "comment": "arrays_mem_check.cpp:48:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 49,
    "function": null,
    "comment": "arrays_mem_check.cpp:49:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 50,
    "function": null,
    "comment": "arrays_mem_check.cpp:50:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 52,
    "function": null,
    "comment": "arrays_mem_check.cpp:52:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 53,
    "function": null,
    "comment": "arrays_mem_check.cpp:53:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 54,
    "function": null,
    "comment": "arrays_mem_check.cpp:54:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 55,
    "function": null,
    "comment": "arrays_mem_check.cpp:55:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 56,
    "function": null,
    "comment": "arrays_mem_check.cpp:56:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "arrays_mem_check.cpp",
    "line": 60,
    "function": null,
    "comment": "arrays_mem_check.cpp:60:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 60,
    "function": null,
    "comment": "arrays_mem_check.cpp:60:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "arrays_mem_check.cpp",
    "line": 61,
    "function": null,
    "comment": "arrays_mem_check.cpp:61:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 62,
    "function": null,
    "comment": "arrays_mem_check.cpp:62:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 63,
    "function": null,
    "comment": "arrays_mem_check.cpp:63:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 65,
    "function": null,
    "comment": "arrays_mem_check.cpp:65:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays_mem_check.cpp",
    "line": 66,
    "function": null,
    "comment": "arrays_mem_check.cpp:66:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 68,
    "function": null,
    "comment": "arrays_mem_check.cpp:68:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 69,
    "function": null,
    "comment": "arrays_mem_check.cpp:69:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 70,
    "function": null,
    "comment": "arrays_mem_check.cpp:70:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 71,
    "function": null,
    "comment": "arrays_mem_check.cpp:71:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 73,
    "function": null,
    "comment": "arrays_mem_check.cpp:73:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 74,
    "function": null,
    "comment": "arrays_mem_check.cpp:74:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 75,
    "function": null,
    "comment": "arrays_mem_check.cpp:75:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 76,
    "function": null,
    "comment": "arrays_mem_check.cpp:76:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "arrays_mem_check.cpp",
    "line": 79,
    "function": null,
    "comment": "arrays_mem_check.cpp:79:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 79,
    "function": null,
    "comment": "arrays_mem_check.cpp:79:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "arrays_mem_check.cpp",
    "line": 80,
    "function": null,
    "comment": "arrays_mem_check.cpp:80:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays_mem_check.cpp",
    "line": 81,
    "function": null,
    "comment": "arrays_mem_check.cpp:81:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 81,
    "function": null,
    "comment": "arrays_mem_check.cpp:81:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays_mem_check.cpp",
    "line": 82,
    "function": null,
    "comment": "arrays_mem_check.cpp:82:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 82,
    "function": null,
    "comment": "arrays_mem_check.cpp:82:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 84,
    "function": null,
    "comment": "arrays_mem_check.cpp:84:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 85,
    "function": null,
    "comment": "arrays_mem_check.cpp:85:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 86,
    "function": null,
    "comment": "arrays_mem_check.cpp:86:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 87,
    "function": null,
    "comment": "arrays_mem_check.cpp:87:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "arrays_mem_check.cpp",
    "line": 89,
    "function": null,
    "comment": "arrays_mem_check.cpp:89:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 89,
    "function": null,
    "comment": "arrays_mem_check.cpp:89:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "arrays_mem_check.cpp",
    "line": 90,
    "function": null,
    "comment": "arrays_mem_check.cpp:90:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays_mem_check.cpp",
    "line": 91,
    "function": null,
    "comment": "arrays_mem_check.cpp:91:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 91,
    "function": null,
    "comment": "arrays_mem_check.cpp:91:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays_mem_check.cpp",
    "line": 93,
    "function": null,
    "comment": "arrays_mem_check.cpp:93:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 93,
    "function": null,
    "comment": "arrays_mem_check.cpp:93:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays_mem_check.cpp",
    "line": 94,
    "function": null,
    "comment": "arrays_mem_check.cpp:94:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 94,
    "function": null,
    "comment": "arrays_mem_check.cpp:94:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 96,
    "function": null,
    "comment": "arrays_mem_check.cpp:96:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 97,
    "function": null,
    "comment": "arrays_mem_check.cpp:97:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 98,
    "function": null,
    "comment": "arrays_mem_check.cpp:98:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 99,
    "function": null,
    "comment": "arrays_mem_check.cpp:99:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 101,
    "function": null,
    "comment": "arrays_mem_check.cpp:101:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 102,
    "function": null,
    "comment": "arrays_mem_check.cpp:102:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 103,
    "function": null,
    "comment": "arrays_mem_check.cpp:103:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 104,
    "function": null,
    "comment": "arrays_mem_check.cpp:104:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "arrays_mem_check.cpp",
    "line": 106,
    "function": null,
    "comment": "arrays_mem_check.cpp:106:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 106,
    "function": null,
    "comment": "arrays_mem_check.cpp:106:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "arrays_mem_check.cpp",
    "line": 107,
    "function": null,
    "comment": "arrays_mem_check.cpp:107:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays_mem_check.cpp",
    "line": 108,
    "function": null,
    "comment": "arrays_mem_check.cpp:108:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays_mem_check.cpp",
    "line": 109,
    "function": null,
    "comment": "arrays_mem_check.cpp:109:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 109,
    "function": null,
    "comment": "arrays_mem_check.cpp:109:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays_mem_check.cpp",
    "line": 111,
    "function": null,
    "comment": "arrays_mem_check.cpp:111:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 111,
    "function": null,
    "comment": "arrays_mem_check.cpp:111:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays_mem_check.cpp",
    "line": 112,
    "function": null,
    "comment": "arrays_mem_check.cpp:112:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 112,
    "function": null,
    "comment": "arrays_mem_check.cpp:112:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays_mem_check.cpp",
    "line": 114,
    "function": null,
    "comment": "arrays_mem_check.cpp:114:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays_mem_check.cpp",
    "line": 115,
    "function": null,
    "comment": "arrays_mem_check.cpp:115:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 115,
    "function": null,
    "comment": "arrays_mem_check.cpp:115:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays_mem_check.cpp",
    "line": 116,
    "function": null,
    "comment": "arrays_mem_check.cpp:116:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays_mem_check.cpp",
    "line": 117,
    "function": null,
    "comment": "arrays_mem_check.cpp:117:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 117,
    "function": null,
    "comment": "arrays_mem_check.cpp:117:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays_mem_check.cpp",
    "line": 118,
    "function": null,
    "comment": "arrays_mem_check.cpp:118:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays_mem_check.cpp",
    "line": 119,
    "function": null,
    "comment": "arrays_mem_check.cpp:119:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 119,
    "function": null,
    "comment": "arrays_mem_check.cpp:119:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays_mem_check.cpp",
    "line": 120,
    "function": null,
    "comment": "arrays_mem_check.cpp:120:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays_mem_check.cpp",
    "line": 121,
    "function": null,
    "comment": "arrays_mem_check.cpp:121:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 121,
    "function": null,
    "comment": "arrays_mem_check.cpp:121:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "arrays_mem_check.cpp",
    "line": 124,
    "function": null,
    "comment": "arrays_mem_check.cpp:124:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 124,
    "function": null,
    "comment": "arrays_mem_check.cpp:124:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "arrays_mem_check.cpp",
    "line": 125,
    "function": null,
    "comment": "arrays_mem_check.cpp:125:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays_mem_check.cpp",
    "line": 126,
    "function": null,
    "comment": "arrays_mem_check.cpp:126:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 126,
    "function": null,
    "comment": "arrays_mem_check.cpp:126:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 127,
    "function": null,
    "comment": "arrays_mem_check.cpp:127:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays_mem_check.cpp",
    "line": 128,
    "function": null,
    "comment": "arrays_mem_check.cpp:128:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays_mem_check.cpp",
    "line": 129,
    "function": null,
    "comment": "arrays_mem_check.cpp:129:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "arrays_mem_check.cpp",
    "line": 129,
    "function": null,
    "comment": "arrays_mem_check.cpp:129:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "arrays_mem_check.cpp",
    "line": 131,
    "function": null,
    "comment": "arrays_mem_check.cpp:131:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "arrays_mem_check.cpp",
    "line": 131,
    "function": null,
    "comment": "arrays_mem_check.cpp:131:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays_mem_check.cpp",
    "line": 132,
    "function": null,
    "comment": "arrays_mem_check.cpp:132:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "arrays_mem_check.cpp",
    "line": 137,
    "function": null,
    "comment": "arrays_mem_check.cpp:137:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "arrays_mem_check.cpp",
    "line": 139,
    "function": null,
    "comment": "arrays_mem_check.cpp:139:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "arrays_mem_check.cpp",
    "line": 139,
    "function": null,
    "comment": "arrays_mem_check.cpp:139:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays_mem_check.cpp",
    "line": 140,
    "function": null,
    "comment": "arrays_mem_check.cpp:140:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "arrays_mem_check.cpp",
    "line": 146,
    "function": null,
    "comment": "arrays_mem_check.cpp:146:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 146,
    "function": null,
    "comment": "arrays_mem_check.cpp:146:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "arrays_mem_check.cpp",
    "line": 147,
    "function": null,
    "comment": "arrays_mem_check.cpp:147:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 148,
    "function": null,
    "comment": "arrays_mem_check.cpp:148:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays_mem_check.cpp",
    "line": 149,
    "function": null,
    "comment": "arrays_mem_check.cpp:149:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 149,
    "function": null,
    "comment": "arrays_mem_check.cpp:149:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays_mem_check.cpp",
    "line": 150,
    "function": null,
    "comment": "arrays_mem_check.cpp:150:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays_mem_check.cpp",
    "line": 151,
    "function": null,
    "comment": "arrays_mem_check.cpp:151:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 151,
    "function": null,
    "comment": "arrays_mem_check.cpp:151:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays_mem_check.cpp",
    "line": 152,
    "function": null,
    "comment": "arrays_mem_check.cpp:152:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "arrays_mem_check.cpp",
    "line": 155,
    "function": null,
    "comment": "arrays_mem_check.cpp:155:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 155,
    "function": null,
    "comment": "arrays_mem_check.cpp:155:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 156,
    "function": null,
    "comment": "arrays_mem_check.cpp:156:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 158,
    "function": null,
    "comment": "arrays_mem_check.cpp:158:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays_mem_check.cpp",
    "line": 161,
    "function": null,
    "comment": "arrays_mem_check.cpp:161:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays_mem_check.cpp",
    "line": 162,
    "function": null,
    "comment": "arrays_mem_check.cpp:162:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 162,
    "function": null,
    "comment": "arrays_mem_check.cpp:162:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays_mem_check.cpp",
    "line": 163,
    "function": null,
    "comment": "arrays_mem_check.cpp:163:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays_mem_check.cpp",
    "line": 164,
    "function": null,
    "comment": "arrays_mem_check.cpp:164:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays_mem_check.cpp",
    "line": 165,
    "function": null,
    "comment": "arrays_mem_check.cpp:165:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "arrays_mem_check.cpp",
    "line": 168,
    "function": null,
    "comment": "arrays_mem_check.cpp:168:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 168,
    "function": null,
    "comment": "arrays_mem_check.cpp:168:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "arrays_mem_check.cpp",
    "line": 170,
    "function": null,
    "comment": "arrays_mem_check.cpp:170:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 170,
    "function": null,
    "comment": "arrays_mem_check.cpp:170:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "arrays_mem_check.cpp",
    "line": 171,
    "function": null,
    "comment": "arrays_mem_check.cpp:171:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 171,
    "function": null,
    "comment": "arrays_mem_check.cpp:171:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "arrays_mem_check.cpp",
    "line": 172,
    "function": null,
    "comment": "arrays_mem_check.cpp:172:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 172,
    "function": null,
    "comment": "arrays_mem_check.cpp:172:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "arrays_mem_check.cpp",
    "line": 203,
    "function": null,
    "comment": "arrays_mem_check.cpp:203:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "arrays_mem_check.cpp",
    "line": 204,
    "function": null,
    "comment": "arrays_mem_check.cpp:204:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "arrays_mem_check.cpp",
    "line": 205,
    "function": null,
    "comment": "arrays_mem_check.cpp:205:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "arrays_mem_check.cpp",
    "line": 235,
    "function": null,
    "comment": "arrays_mem_check.cpp:235:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "arrays_mem_check.cpp",
    "line": 236,
    "function": null,
    "comment": "arrays_mem_check.cpp:236:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays_mem_check.cpp",
    "line": 237,
    "function": null,
    "comment": "arrays_mem_check.cpp:237:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "arrays.cpp",
    "line": null,
    "function": null,
    "comment": "arrays.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "arrays.cpp",
    "line": 13,
    "function": null,
    "comment": "arrays.cpp:13:  Found C system header after C++ system header. Should be: arrays.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "arrays.cpp",
    "line": 30,
    "function": null,
    "comment": "arrays.cpp:30:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 30,
    "function": null,
    "comment": "arrays.cpp:30:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 31,
    "function": null,
    "comment": "arrays.cpp:31:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 32,
    "function": null,
    "comment": "arrays.cpp:32:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 33,
    "function": null,
    "comment": "arrays.cpp:33:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 34,
    "function": null,
    "comment": "arrays.cpp:34:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 35,
    "function": null,
    "comment": "arrays.cpp:35:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 36,
    "function": null,
    "comment": "arrays.cpp:36:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 37,
    "function": null,
    "comment": "arrays.cpp:37:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 38,
    "function": null,
    "comment": "arrays.cpp:38:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 39,
    "function": null,
    "comment": "arrays.cpp:39:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 40,
    "function": null,
    "comment": "arrays.cpp:40:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 41,
    "function": null,
    "comment": "arrays.cpp:41:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 42,
    "function": null,
    "comment": "arrays.cpp:42:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 43,
    "function": null,
    "comment": "arrays.cpp:43:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 44,
    "function": null,
    "comment": "arrays.cpp:44:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 45,
    "function": null,
    "comment": "arrays.cpp:45:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 47,
    "function": null,
    "comment": "arrays.cpp:47:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 48,
    "function": null,
    "comment": "arrays.cpp:48:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 49,
    "function": null,
    "comment": "arrays.cpp:49:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 50,
    "function": null,
    "comment": "arrays.cpp:50:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 51,
    "function": null,
    "comment": "arrays.cpp:51:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "arrays.cpp",
    "line": 55,
    "function": null,
    "comment": "arrays.cpp:55:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 55,
    "function": null,
    "comment": "arrays.cpp:55:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "arrays.cpp",
    "line": 56,
    "function": null,
    "comment": "arrays.cpp:56:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 57,
    "function": null,
    "comment": "arrays.cpp:57:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 58,
    "function": null,
    "comment": "arrays.cpp:58:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 60,
    "function": null,
    "comment": "arrays.cpp:60:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays.cpp",
    "line": 61,
    "function": null,
    "comment": "arrays.cpp:61:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 63,
    "function": null,
    "comment": "arrays.cpp:63:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 64,
    "function": null,
    "comment": "arrays.cpp:64:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 65,
    "function": null,
    "comment": "arrays.cpp:65:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 66,
    "function": null,
    "comment": "arrays.cpp:66:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 68,
    "function": null,
    "comment": "arrays.cpp:68:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 69,
    "function": null,
    "comment": "arrays.cpp:69:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 70,
    "function": null,
    "comment": "arrays.cpp:70:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 71,
    "function": null,
    "comment": "arrays.cpp:71:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "arrays.cpp",
    "line": 74,
    "function": null,
    "comment": "arrays.cpp:74:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 74,
    "function": null,
    "comment": "arrays.cpp:74:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "arrays.cpp",
    "line": 75,
    "function": null,
    "comment": "arrays.cpp:75:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays.cpp",
    "line": 76,
    "function": null,
    "comment": "arrays.cpp:76:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 76,
    "function": null,
    "comment": "arrays.cpp:76:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays.cpp",
    "line": 77,
    "function": null,
    "comment": "arrays.cpp:77:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 77,
    "function": null,
    "comment": "arrays.cpp:77:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 79,
    "function": null,
    "comment": "arrays.cpp:79:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 80,
    "function": null,
    "comment": "arrays.cpp:80:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 81,
    "function": null,
    "comment": "arrays.cpp:81:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 82,
    "function": null,
    "comment": "arrays.cpp:82:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "arrays.cpp",
    "line": 84,
    "function": null,
    "comment": "arrays.cpp:84:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 84,
    "function": null,
    "comment": "arrays.cpp:84:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "arrays.cpp",
    "line": 85,
    "function": null,
    "comment": "arrays.cpp:85:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays.cpp",
    "line": 86,
    "function": null,
    "comment": "arrays.cpp:86:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 86,
    "function": null,
    "comment": "arrays.cpp:86:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays.cpp",
    "line": 88,
    "function": null,
    "comment": "arrays.cpp:88:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 88,
    "function": null,
    "comment": "arrays.cpp:88:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays.cpp",
    "line": 89,
    "function": null,
    "comment": "arrays.cpp:89:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 89,
    "function": null,
    "comment": "arrays.cpp:89:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 91,
    "function": null,
    "comment": "arrays.cpp:91:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 92,
    "function": null,
    "comment": "arrays.cpp:92:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 93,
    "function": null,
    "comment": "arrays.cpp:93:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 94,
    "function": null,
    "comment": "arrays.cpp:94:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 96,
    "function": null,
    "comment": "arrays.cpp:96:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 97,
    "function": null,
    "comment": "arrays.cpp:97:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 98,
    "function": null,
    "comment": "arrays.cpp:98:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 99,
    "function": null,
    "comment": "arrays.cpp:99:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "arrays.cpp",
    "line": 101,
    "function": null,
    "comment": "arrays.cpp:101:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 101,
    "function": null,
    "comment": "arrays.cpp:101:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "arrays.cpp",
    "line": 102,
    "function": null,
    "comment": "arrays.cpp:102:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays.cpp",
    "line": 103,
    "function": null,
    "comment": "arrays.cpp:103:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays.cpp",
    "line": 104,
    "function": null,
    "comment": "arrays.cpp:104:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 104,
    "function": null,
    "comment": "arrays.cpp:104:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays.cpp",
    "line": 106,
    "function": null,
    "comment": "arrays.cpp:106:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 106,
    "function": null,
    "comment": "arrays.cpp:106:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays.cpp",
    "line": 107,
    "function": null,
    "comment": "arrays.cpp:107:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 107,
    "function": null,
    "comment": "arrays.cpp:107:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays.cpp",
    "line": 109,
    "function": null,
    "comment": "arrays.cpp:109:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays.cpp",
    "line": 110,
    "function": null,
    "comment": "arrays.cpp:110:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 110,
    "function": null,
    "comment": "arrays.cpp:110:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays.cpp",
    "line": 111,
    "function": null,
    "comment": "arrays.cpp:111:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays.cpp",
    "line": 112,
    "function": null,
    "comment": "arrays.cpp:112:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 112,
    "function": null,
    "comment": "arrays.cpp:112:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays.cpp",
    "line": 113,
    "function": null,
    "comment": "arrays.cpp:113:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays.cpp",
    "line": 114,
    "function": null,
    "comment": "arrays.cpp:114:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 114,
    "function": null,
    "comment": "arrays.cpp:114:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays.cpp",
    "line": 115,
    "function": null,
    "comment": "arrays.cpp:115:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays.cpp",
    "line": 116,
    "function": null,
    "comment": "arrays.cpp:116:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 116,
    "function": null,
    "comment": "arrays.cpp:116:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "arrays.cpp",
    "line": 119,
    "function": null,
    "comment": "arrays.cpp:119:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 119,
    "function": null,
    "comment": "arrays.cpp:119:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "arrays.cpp",
    "line": 120,
    "function": null,
    "comment": "arrays.cpp:120:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays.cpp",
    "line": 121,
    "function": null,
    "comment": "arrays.cpp:121:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 121,
    "function": null,
    "comment": "arrays.cpp:121:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 122,
    "function": null,
    "comment": "arrays.cpp:122:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays.cpp",
    "line": 123,
    "function": null,
    "comment": "arrays.cpp:123:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays.cpp",
    "line": 124,
    "function": null,
    "comment": "arrays.cpp:124:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "arrays.cpp",
    "line": 124,
    "function": null,
    "comment": "arrays.cpp:124:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "arrays.cpp",
    "line": 126,
    "function": null,
    "comment": "arrays.cpp:126:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "arrays.cpp",
    "line": 126,
    "function": null,
    "comment": "arrays.cpp:126:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays.cpp",
    "line": 127,
    "function": null,
    "comment": "arrays.cpp:127:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "arrays.cpp",
    "line": 132,
    "function": null,
    "comment": "arrays.cpp:132:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "arrays.cpp",
    "line": 134,
    "function": null,
    "comment": "arrays.cpp:134:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "arrays.cpp",
    "line": 134,
    "function": null,
    "comment": "arrays.cpp:134:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays.cpp",
    "line": 135,
    "function": null,
    "comment": "arrays.cpp:135:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "arrays.cpp",
    "line": 141,
    "function": null,
    "comment": "arrays.cpp:141:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 141,
    "function": null,
    "comment": "arrays.cpp:141:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "arrays.cpp",
    "line": 142,
    "function": null,
    "comment": "arrays.cpp:142:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 143,
    "function": null,
    "comment": "arrays.cpp:143:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays.cpp",
    "line": 144,
    "function": null,
    "comment": "arrays.cpp:144:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 144,
    "function": null,
    "comment": "arrays.cpp:144:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays.cpp",
    "line": 145,
    "function": null,
    "comment": "arrays.cpp:145:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays.cpp",
    "line": 146,
    "function": null,
    "comment": "arrays.cpp:146:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 146,
    "function": null,
    "comment": "arrays.cpp:146:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays.cpp",
    "line": 147,
    "function": null,
    "comment": "arrays.cpp:147:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "arrays.cpp",
    "line": 150,
    "function": null,
    "comment": "arrays.cpp:150:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 150,
    "function": null,
    "comment": "arrays.cpp:150:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 151,
    "function": null,
    "comment": "arrays.cpp:151:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 153,
    "function": null,
    "comment": "arrays.cpp:153:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays.cpp",
    "line": 156,
    "function": null,
    "comment": "arrays.cpp:156:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays.cpp",
    "line": 157,
    "function": null,
    "comment": "arrays.cpp:157:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 157,
    "function": null,
    "comment": "arrays.cpp:157:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays.cpp",
    "line": 158,
    "function": null,
    "comment": "arrays.cpp:158:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays.cpp",
    "line": 159,
    "function": null,
    "comment": "arrays.cpp:159:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays.cpp",
    "line": 160,
    "function": null,
    "comment": "arrays.cpp:160:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "arrays.cpp",
    "line": 163,
    "function": null,
    "comment": "arrays.cpp:163:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 163,
    "function": null,
    "comment": "arrays.cpp:163:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays.cpp",
    "line": 164,
    "function": null,
    "comment": "arrays.cpp:164:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 164,
    "function": null,
    "comment": "arrays.cpp:164:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays.cpp",
    "line": 165,
    "function": null,
    "comment": "arrays.cpp:165:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays.cpp",
    "line": 166,
    "function": null,
    "comment": "arrays.cpp:166:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "arrays.cpp",
    "line": 167,
    "function": null,
    "comment": "arrays.cpp:167:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "arrays.cpp",
    "line": 167,
    "function": null,
    "comment": "arrays.cpp:167:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "arrays.cpp",
    "line": 174,
    "function": null,
    "comment": "arrays.cpp:174:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "arrays.cpp",
    "line": 175,
    "function": null,
    "comment": "arrays.cpp:175:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "arrays.cpp",
    "line": 176,
    "function": null,
    "comment": "arrays.cpp:176:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "fifo.cpp",
    "line": null,
    "function": null,
    "comment": "fifo.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "fifo.cpp",
    "line": 13,
    "function": null,
    "comment": "fifo.cpp:13:  Found C system header after C++ system header. Should be: fifo.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "fifo.cpp",
    "line": 28,
    "function": null,
    "comment": "fifo.cpp:28:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "fifo.cpp",
    "line": 29,
    "function": null,
    "comment": "fifo.cpp:29:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 30,
    "function": null,
    "comment": "fifo.cpp:30:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 31,
    "function": null,
    "comment": "fifo.cpp:31:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 32,
    "function": null,
    "comment": "fifo.cpp:32:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 33,
    "function": null,
    "comment": "fifo.cpp:33:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 34,
    "function": null,
    "comment": "fifo.cpp:34:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "fifo.cpp",
    "line": 38,
    "function": null,
    "comment": "fifo.cpp:38:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 39,
    "function": null,
    "comment": "fifo.cpp:39:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 40,
    "function": null,
    "comment": "fifo.cpp:40:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "fifo.cpp",
    "line": 40,
    "function": null,
    "comment": "fifo.cpp:40:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "fifo.cpp",
    "line": 40,
    "function": null,
    "comment": "fifo.cpp:40:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 41,
    "function": null,
    "comment": "fifo.cpp:41:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "fifo.cpp",
    "line": 41,
    "function": null,
    "comment": "fifo.cpp:41:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "fifo.cpp",
    "line": 41,
    "function": null,
    "comment": "fifo.cpp:41:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 42,
    "function": null,
    "comment": "fifo.cpp:42:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "fifo.cpp",
    "line": 42,
    "function": null,
    "comment": "fifo.cpp:42:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "fifo.cpp",
    "line": 42,
    "function": null,
    "comment": "fifo.cpp:42:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "fifo.cpp",
    "line": 42,
    "function": null,
    "comment": "fifo.cpp:42:  Using C-style cast.  Use static_cast<double>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 43,
    "function": null,
    "comment": "fifo.cpp:43:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 45,
    "function": null,
    "comment": "fifo.cpp:45:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 46,
    "function": null,
    "comment": "fifo.cpp:46:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 47,
    "function": null,
    "comment": "fifo.cpp:47:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 48,
    "function": null,
    "comment": "fifo.cpp:48:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "fifo.cpp",
    "line": 55,
    "function": null,
    "comment": "fifo.cpp:55:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "fifo.cpp",
    "line": 56,
    "function": null,
    "comment": "fifo.cpp:56:  public: should be indented +1 space inside class movingAvg  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 57,
    "function": null,
    "comment": "fifo.cpp:57:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "fifo.cpp",
    "line": 57,
    "function": null,
    "comment": "fifo.cpp:57:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "fifo.cpp",
    "line": 57,
    "function": null,
    "comment": "fifo.cpp:57:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "fifo.cpp",
    "line": 57,
    "function": null,
    "comment": "fifo.cpp:57:  Single-parameter constructors should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 58,
    "function": null,
    "comment": "fifo.cpp:58:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 59,
    "function": null,
    "comment": "fifo.cpp:59:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 60,
    "function": null,
    "comment": "fifo.cpp:60:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 61,
    "function": null,
    "comment": "fifo.cpp:61:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 62,
    "function": null,
    "comment": "fifo.cpp:62:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "fifo.cpp",
    "line": 62,
    "function": null,
    "comment": "fifo.cpp:62:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "fifo.cpp",
    "line": 62,
    "function": null,
    "comment": "fifo.cpp:62:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 63,
    "function": null,
    "comment": "fifo.cpp:63:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "fifo.cpp",
    "line": 63,
    "function": null,
    "comment": "fifo.cpp:63:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "fifo.cpp",
    "line": 63,
    "function": null,
    "comment": "fifo.cpp:63:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 64,
    "function": null,
    "comment": "fifo.cpp:64:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 65,
    "function": null,
    "comment": "fifo.cpp:65:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 66,
    "function": null,
    "comment": "fifo.cpp:66:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "fifo.cpp",
    "line": 66,
    "function": null,
    "comment": "fifo.cpp:66:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "fifo.cpp",
    "line": 66,
    "function": null,
    "comment": "fifo.cpp:66:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 67,
    "function": null,
    "comment": "fifo.cpp:67:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 68,
    "function": null,
    "comment": "fifo.cpp:68:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 69,
    "function": null,
    "comment": "fifo.cpp:69:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 70,
    "function": null,
    "comment": "fifo.cpp:70:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 72,
    "function": null,
    "comment": "fifo.cpp:72:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "fifo.cpp",
    "line": 72,
    "function": null,
    "comment": "fifo.cpp:72:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 73,
    "function": null,
    "comment": "fifo.cpp:73:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "fifo.cpp",
    "line": 73,
    "function": null,
    "comment": "fifo.cpp:73:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "fifo.cpp",
    "line": 73,
    "function": null,
    "comment": "fifo.cpp:73:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 74,
    "function": null,
    "comment": "fifo.cpp:74:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 75,
    "function": null,
    "comment": "fifo.cpp:75:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "fifo.cpp",
    "line": 75,
    "function": null,
    "comment": "fifo.cpp:75:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "fifo.cpp",
    "line": 75,
    "function": null,
    "comment": "fifo.cpp:75:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 76,
    "function": null,
    "comment": "fifo.cpp:76:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "fifo.cpp",
    "line": 76,
    "function": null,
    "comment": "fifo.cpp:76:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "fifo.cpp",
    "line": 76,
    "function": null,
    "comment": "fifo.cpp:76:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 77,
    "function": null,
    "comment": "fifo.cpp:77:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 78,
    "function": null,
    "comment": "fifo.cpp:78:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 80,
    "function": null,
    "comment": "fifo.cpp:80:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 81,
    "function": null,
    "comment": "fifo.cpp:81:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 82,
    "function": null,
    "comment": "fifo.cpp:82:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "fifo.cpp",
    "line": 82,
    "function": null,
    "comment": "fifo.cpp:82:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "fifo.cpp",
    "line": 82,
    "function": null,
    "comment": "fifo.cpp:82:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 83,
    "function": null,
    "comment": "fifo.cpp:83:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "fifo.cpp",
    "line": 83,
    "function": null,
    "comment": "fifo.cpp:83:  Using C-style cast.  Use static_cast<double>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 84,
    "function": null,
    "comment": "fifo.cpp:84:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 85,
    "function": null,
    "comment": "fifo.cpp:85:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 86,
    "function": null,
    "comment": "fifo.cpp:86:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 87,
    "function": null,
    "comment": "fifo.cpp:87:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 88,
    "function": null,
    "comment": "fifo.cpp:88:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 89,
    "function": null,
    "comment": "fifo.cpp:89:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "fifo.cpp",
    "line": 98,
    "function": null,
    "comment": "fifo.cpp:98:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 99,
    "function": null,
    "comment": "fifo.cpp:99:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "fifo.cpp",
    "line": 99,
    "function": null,
    "comment": "fifo.cpp:99:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "fifo.cpp",
    "line": 99,
    "function": null,
    "comment": "fifo.cpp:99:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 101,
    "function": null,
    "comment": "fifo.cpp:101:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "fifo.cpp",
    "line": 101,
    "function": null,
    "comment": "fifo.cpp:101:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "fifo.cpp",
    "line": 101,
    "function": null,
    "comment": "fifo.cpp:101:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 102,
    "function": null,
    "comment": "fifo.cpp:102:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "fifo.cpp",
    "line": 102,
    "function": null,
    "comment": "fifo.cpp:102:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "fifo.cpp",
    "line": 102,
    "function": null,
    "comment": "fifo.cpp:102:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 103,
    "function": null,
    "comment": "fifo.cpp:103:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "fifo.cpp",
    "line": 103,
    "function": null,
    "comment": "fifo.cpp:103:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "fifo.cpp",
    "line": 103,
    "function": null,
    "comment": "fifo.cpp:103:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "fifo.cpp",
    "line": 103,
    "function": null,
    "comment": "fifo.cpp:103:  Using C-style cast.  Use static_cast<double>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 104,
    "function": null,
    "comment": "fifo.cpp:104:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "fifo.cpp",
    "line": 104,
    "function": null,
    "comment": "fifo.cpp:104:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 105,
    "function": null,
    "comment": "fifo.cpp:105:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 107,
    "function": null,
    "comment": "fifo.cpp:107:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "fifo.cpp",
    "line": 107,
    "function": null,
    "comment": "fifo.cpp:107:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "fifo.cpp",
    "line": 125,
    "function": null,
    "comment": "fifo.cpp:125:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "fifo.cpp",
    "line": 126,
    "function": null,
    "comment": "fifo.cpp:126:  public: should be indented +1 space inside class DifferentialOfGaussian1D  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 127,
    "function": null,
    "comment": "fifo.cpp:127:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 128,
    "function": null,
    "comment": "fifo.cpp:128:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "fifo.cpp",
    "line": 128,
    "function": null,
    "comment": "fifo.cpp:128:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "fifo.cpp",
    "line": 128,
    "function": null,
    "comment": "fifo.cpp:128:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 129,
    "function": null,
    "comment": "fifo.cpp:129:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 130,
    "function": null,
    "comment": "fifo.cpp:130:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 131,
    "function": null,
    "comment": "fifo.cpp:131:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 133,
    "function": null,
    "comment": "fifo.cpp:133:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "fifo.cpp",
    "line": 133,
    "function": null,
    "comment": "fifo.cpp:133:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "fifo.cpp",
    "line": 133,
    "function": null,
    "comment": "fifo.cpp:133:  Is this a non-const reference? If so, make const or use a pointer: N & resultOfDOG  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 134,
    "function": null,
    "comment": "fifo.cpp:134:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "fifo.cpp",
    "line": 134,
    "function": null,
    "comment": "fifo.cpp:134:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "fifo.cpp",
    "line": 134,
    "function": null,
    "comment": "fifo.cpp:134:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 135,
    "function": null,
    "comment": "fifo.cpp:135:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 136,
    "function": null,
    "comment": "fifo.cpp:136:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "fifo.cpp",
    "line": 136,
    "function": null,
    "comment": "fifo.cpp:136:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "fifo.cpp",
    "line": 136,
    "function": null,
    "comment": "fifo.cpp:136:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 137,
    "function": null,
    "comment": "fifo.cpp:137:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "fifo.cpp",
    "line": 137,
    "function": null,
    "comment": "fifo.cpp:137:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "fifo.cpp",
    "line": 137,
    "function": null,
    "comment": "fifo.cpp:137:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 138,
    "function": null,
    "comment": "fifo.cpp:138:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "fifo.cpp",
    "line": 138,
    "function": null,
    "comment": "fifo.cpp:138:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "fifo.cpp",
    "line": 138,
    "function": null,
    "comment": "fifo.cpp:138:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 139,
    "function": null,
    "comment": "fifo.cpp:139:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 140,
    "function": null,
    "comment": "fifo.cpp:140:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 142,
    "function": null,
    "comment": "fifo.cpp:142:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 143,
    "function": null,
    "comment": "fifo.cpp:143:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "fifo.cpp",
    "line": 143,
    "function": null,
    "comment": "fifo.cpp:143:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "fifo.cpp",
    "line": 143,
    "function": null,
    "comment": "fifo.cpp:143:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 144,
    "function": null,
    "comment": "fifo.cpp:144:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 145,
    "function": null,
    "comment": "fifo.cpp:145:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 146,
    "function": null,
    "comment": "fifo.cpp:146:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 148,
    "function": null,
    "comment": "fifo.cpp:148:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 149,
    "function": null,
    "comment": "fifo.cpp:149:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 151,
    "function": null,
    "comment": "fifo.cpp:151:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 152,
    "function": null,
    "comment": "fifo.cpp:152:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "fifo.cpp",
    "line": 152,
    "function": null,
    "comment": "fifo.cpp:152:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "fifo.cpp",
    "line": 152,
    "function": null,
    "comment": "fifo.cpp:152:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 153,
    "function": null,
    "comment": "fifo.cpp:153:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 154,
    "function": null,
    "comment": "fifo.cpp:154:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "fifo.cpp",
    "line": 156,
    "function": null,
    "comment": "fifo.cpp:156:  private: should be indented +1 space inside class DifferentialOfGaussian1D  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 157,
    "function": null,
    "comment": "fifo.cpp:157:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 158,
    "function": null,
    "comment": "fifo.cpp:158:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 159,
    "function": null,
    "comment": "fifo.cpp:159:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 161,
    "function": null,
    "comment": "fifo.cpp:161:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 162,
    "function": null,
    "comment": "fifo.cpp:162:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "fifo.cpp",
    "line": 162,
    "function": null,
    "comment": "fifo.cpp:162:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 163,
    "function": null,
    "comment": "fifo.cpp:163:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "fifo.cpp",
    "line": 163,
    "function": null,
    "comment": "fifo.cpp:163:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 164,
    "function": null,
    "comment": "fifo.cpp:164:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 165,
    "function": null,
    "comment": "fifo.cpp:165:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "fifo.cpp",
    "line": 165,
    "function": null,
    "comment": "fifo.cpp:165:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 166,
    "function": null,
    "comment": "fifo.cpp:166:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 167,
    "function": null,
    "comment": "fifo.cpp:167:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 168,
    "function": null,
    "comment": "fifo.cpp:168:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 169,
    "function": null,
    "comment": "fifo.cpp:169:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 170,
    "function": null,
    "comment": "fifo.cpp:170:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 171,
    "function": null,
    "comment": "fifo.cpp:171:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 172,
    "function": null,
    "comment": "fifo.cpp:172:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 173,
    "function": null,
    "comment": "fifo.cpp:173:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 174,
    "function": null,
    "comment": "fifo.cpp:174:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 176,
    "function": null,
    "comment": "fifo.cpp:176:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 177,
    "function": null,
    "comment": "fifo.cpp:177:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "fifo.cpp",
    "line": 177,
    "function": null,
    "comment": "fifo.cpp:177:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 178,
    "function": null,
    "comment": "fifo.cpp:178:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 179,
    "function": null,
    "comment": "fifo.cpp:179:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fifo.cpp",
    "line": 180,
    "function": null,
    "comment": "fifo.cpp:180:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "fifo.cpp",
    "line": 192,
    "function": null,
    "comment": "fifo.cpp:192:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "fifo.cpp",
    "line": 193,
    "function": null,
    "comment": "fifo.cpp:193:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "fifo.cpp",
    "line": 194,
    "function": null,
    "comment": "fifo.cpp:194:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "push_and_pop.cpp",
    "line": null,
    "function": null,
    "comment": "push_and_pop.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "push_and_pop.cpp",
    "line": 13,
    "function": null,
    "comment": "push_and_pop.cpp:13:  Found C system header after C++ system header. Should be: push_and_pop.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "push_and_pop.cpp",
    "line": 30,
    "function": null,
    "comment": "push_and_pop.cpp:30:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "push_and_pop.cpp",
    "line": 31,
    "function": null,
    "comment": "push_and_pop.cpp:31:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "push_and_pop.cpp",
    "line": 46,
    "function": null,
    "comment": "push_and_pop.cpp:46:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "push_and_pop.cpp",
    "line": 49,
    "function": null,
    "comment": "push_and_pop.cpp:49:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "push_and_pop.cpp",
    "line": 50,
    "function": null,
    "comment": "push_and_pop.cpp:50:  Using C-style cast.  Use static_cast<double>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "push_and_pop.cpp",
    "line": 68,
    "function": null,
    "comment": "push_and_pop.cpp:68:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "push_and_pop.cpp",
    "line": 71,
    "function": null,
    "comment": "push_and_pop.cpp:71:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "push_and_pop.cpp",
    "line": 75,
    "function": null,
    "comment": "push_and_pop.cpp:75:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "push_and_pop.cpp",
    "line": 78,
    "function": null,
    "comment": "push_and_pop.cpp:78:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "push_and_pop.cpp",
    "line": 80,
    "function": null,
    "comment": "push_and_pop.cpp:80:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "push_and_pop.cpp",
    "line": 85,
    "function": null,
    "comment": "push_and_pop.cpp:85:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "push_and_pop.cpp",
    "line": 89,
    "function": null,
    "comment": "push_and_pop.cpp:89:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "push_and_pop.cpp",
    "line": 92,
    "function": null,
    "comment": "push_and_pop.cpp:92:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "push_and_pop.cpp",
    "line": 94,
    "function": null,
    "comment": "push_and_pop.cpp:94:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "push_and_pop.cpp",
    "line": 99,
    "function": null,
    "comment": "push_and_pop.cpp:99:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "push_and_pop.cpp",
    "line": 103,
    "function": null,
    "comment": "push_and_pop.cpp:103:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "push_and_pop.cpp",
    "line": 107,
    "function": null,
    "comment": "push_and_pop.cpp:107:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "push_and_pop.cpp",
    "line": 110,
    "function": null,
    "comment": "push_and_pop.cpp:110:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "push_and_pop.cpp",
    "line": 112,
    "function": null,
    "comment": "push_and_pop.cpp:112:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "push_and_pop.cpp",
    "line": 116,
    "function": null,
    "comment": "push_and_pop.cpp:116:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "push_and_pop.cpp",
    "line": 116,
    "function": null,
    "comment": "push_and_pop.cpp:116:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "push_and_pop.cpp",
    "line": 117,
    "function": null,
    "comment": "push_and_pop.cpp:117:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "push_and_pop.cpp",
    "line": 118,
    "function": null,
    "comment": "push_and_pop.cpp:118:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "push_and_pop.cpp",
    "line": 118,
    "function": null,
    "comment": "push_and_pop.cpp:118:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "push_and_pop.cpp",
    "line": 119,
    "function": null,
    "comment": "push_and_pop.cpp:119:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "push_and_pop.cpp",
    "line": 119,
    "function": null,
    "comment": "push_and_pop.cpp:119:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "push_and_pop.cpp",
    "line": 120,
    "function": null,
    "comment": "push_and_pop.cpp:120:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "push_and_pop.cpp",
    "line": 125,
    "function": null,
    "comment": "push_and_pop.cpp:125:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "push_and_pop.cpp",
    "line": 129,
    "function": null,
    "comment": "push_and_pop.cpp:129:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "push_and_pop.cpp",
    "line": 132,
    "function": null,
    "comment": "push_and_pop.cpp:132:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "push_and_pop.cpp",
    "line": 134,
    "function": null,
    "comment": "push_and_pop.cpp:134:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "push_and_pop.cpp",
    "line": 138,
    "function": null,
    "comment": "push_and_pop.cpp:138:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "push_and_pop.cpp",
    "line": 138,
    "function": null,
    "comment": "push_and_pop.cpp:138:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "push_and_pop.cpp",
    "line": 139,
    "function": null,
    "comment": "push_and_pop.cpp:139:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "push_and_pop.cpp",
    "line": 140,
    "function": null,
    "comment": "push_and_pop.cpp:140:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "push_and_pop.cpp",
    "line": 140,
    "function": null,
    "comment": "push_and_pop.cpp:140:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "push_and_pop.cpp",
    "line": 141,
    "function": null,
    "comment": "push_and_pop.cpp:141:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "push_and_pop.cpp",
    "line": 141,
    "function": null,
    "comment": "push_and_pop.cpp:141:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "push_and_pop.cpp",
    "line": 142,
    "function": null,
    "comment": "push_and_pop.cpp:142:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "push_and_pop.cpp",
    "line": 145,
    "function": null,
    "comment": "push_and_pop.cpp:145:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "push_and_pop.cpp",
    "line": 146,
    "function": null,
    "comment": "push_and_pop.cpp:146:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "push_and_pop.cpp",
    "line": 148,
    "function": null,
    "comment": "push_and_pop.cpp:148:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "push_and_pop.cpp",
    "line": 148,
    "function": null,
    "comment": "push_and_pop.cpp:148:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "push_and_pop.cpp",
    "line": 150,
    "function": null,
    "comment": "push_and_pop.cpp:150:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "push_and_pop.cpp",
    "line": 150,
    "function": null,
    "comment": "push_and_pop.cpp:150:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "push_and_pop.cpp",
    "line": 152,
    "function": null,
    "comment": "push_and_pop.cpp:152:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "push_and_pop.cpp",
    "line": 161,
    "function": null,
    "comment": "push_and_pop.cpp:161:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "stencil.cpp",
    "line": null,
    "function": null,
    "comment": "stencil.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "stencil.cpp",
    "line": 25,
    "function": null,
    "comment": "stencil.cpp:25:  Found C system header after C++ system header. Should be: stencil.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "stencil.cpp",
    "line": 26,
    "function": null,
    "comment": "stencil.cpp:26:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "stencil.cpp",
    "line": 29,
    "function": null,
    "comment": "stencil.cpp:29:  Found C system header after other header. Should be: stencil.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.cpp",
    "line": 44,
    "function": null,
    "comment": "stencil.cpp:44:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "stencil.cpp",
    "line": 51,
    "function": null,
    "comment": "stencil.cpp:51:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.cpp",
    "line": 51,
    "function": null,
    "comment": "stencil.cpp:51:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "stencil.cpp",
    "line": 52,
    "function": null,
    "comment": "stencil.cpp:52:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "stencil.cpp",
    "line": 53,
    "function": null,
    "comment": "stencil.cpp:53:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.cpp",
    "line": 53,
    "function": null,
    "comment": "stencil.cpp:53:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "stencil.cpp",
    "line": 54,
    "function": null,
    "comment": "stencil.cpp:54:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "stencil.cpp",
    "line": 55,
    "function": null,
    "comment": "stencil.cpp:55:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.cpp",
    "line": 55,
    "function": null,
    "comment": "stencil.cpp:55:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "stencil.cpp",
    "line": 56,
    "function": null,
    "comment": "stencil.cpp:56:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.cpp",
    "line": 56,
    "function": null,
    "comment": "stencil.cpp:56:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "stencil.cpp",
    "line": 58,
    "function": null,
    "comment": "stencil.cpp:58:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "stencil.cpp",
    "line": 58,
    "function": null,
    "comment": "stencil.cpp:58:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.cpp",
    "line": 58,
    "function": null,
    "comment": "stencil.cpp:58:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "stencil.cpp",
    "line": 59,
    "function": null,
    "comment": "stencil.cpp:59:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "stencil.cpp",
    "line": 59,
    "function": null,
    "comment": "stencil.cpp:59:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.cpp",
    "line": 59,
    "function": null,
    "comment": "stencil.cpp:59:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "stencil.cpp",
    "line": 60,
    "function": null,
    "comment": "stencil.cpp:60:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.cpp",
    "line": 60,
    "function": null,
    "comment": "stencil.cpp:60:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "stencil.cpp",
    "line": 61,
    "function": null,
    "comment": "stencil.cpp:61:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.cpp",
    "line": 61,
    "function": null,
    "comment": "stencil.cpp:61:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "stencil.cpp",
    "line": 62,
    "function": null,
    "comment": "stencil.cpp:62:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.cpp",
    "line": 62,
    "function": null,
    "comment": "stencil.cpp:62:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "stencil.cpp",
    "line": 63,
    "function": null,
    "comment": "stencil.cpp:63:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.cpp",
    "line": 63,
    "function": null,
    "comment": "stencil.cpp:63:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "stencil.cpp",
    "line": 64,
    "function": null,
    "comment": "stencil.cpp:64:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.cpp",
    "line": 64,
    "function": null,
    "comment": "stencil.cpp:64:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "stencil.cpp",
    "line": 65,
    "function": null,
    "comment": "stencil.cpp:65:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.cpp",
    "line": 65,
    "function": null,
    "comment": "stencil.cpp:65:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "stencil.cpp",
    "line": 68,
    "function": null,
    "comment": "stencil.cpp:68:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.cpp",
    "line": 68,
    "function": null,
    "comment": "stencil.cpp:68:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "stencil.cpp",
    "line": 69,
    "function": null,
    "comment": "stencil.cpp:69:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "stencil.cpp",
    "line": 70,
    "function": null,
    "comment": "stencil.cpp:70:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "stencil.cpp",
    "line": 71,
    "function": null,
    "comment": "stencil.cpp:71:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.cpp",
    "line": 71,
    "function": null,
    "comment": "stencil.cpp:71:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "stencil.cpp",
    "line": 73,
    "function": null,
    "comment": "stencil.cpp:73:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "stencil.cpp",
    "line": 74,
    "function": null,
    "comment": "stencil.cpp:74:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "stencil.cpp",
    "line": 75,
    "function": null,
    "comment": "stencil.cpp:75:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.cpp",
    "line": 75,
    "function": null,
    "comment": "stencil.cpp:75:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "stencil.cpp",
    "line": 76,
    "function": null,
    "comment": "stencil.cpp:76:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "stencil.cpp",
    "line": 76,
    "function": null,
    "comment": "stencil.cpp:76:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "stencil.cpp",
    "line": 77,
    "function": null,
    "comment": "stencil.cpp:77:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "stencil.cpp",
    "line": 82,
    "function": null,
    "comment": "stencil.cpp:82:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.cpp",
    "line": 82,
    "function": null,
    "comment": "stencil.cpp:82:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "stencil.cpp",
    "line": 83,
    "function": null,
    "comment": "stencil.cpp:83:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "stencil.cpp",
    "line": 84,
    "function": null,
    "comment": "stencil.cpp:84:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "stencil.cpp",
    "line": 85,
    "function": null,
    "comment": "stencil.cpp:85:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.cpp",
    "line": 85,
    "function": null,
    "comment": "stencil.cpp:85:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "stencil.cpp",
    "line": 87,
    "function": null,
    "comment": "stencil.cpp:87:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "stencil.cpp",
    "line": 87,
    "function": null,
    "comment": "stencil.cpp:87:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.cpp",
    "line": 87,
    "function": null,
    "comment": "stencil.cpp:87:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "stencil.cpp",
    "line": 88,
    "function": null,
    "comment": "stencil.cpp:88:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "stencil.cpp",
    "line": 89,
    "function": null,
    "comment": "stencil.cpp:89:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.cpp",
    "line": 89,
    "function": null,
    "comment": "stencil.cpp:89:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "stencil.cpp",
    "line": 90,
    "function": null,
    "comment": "stencil.cpp:90:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "stencil.cpp",
    "line": 91,
    "function": null,
    "comment": "stencil.cpp:91:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "stencil.cpp",
    "line": 92,
    "function": null,
    "comment": "stencil.cpp:92:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stencil.cpp",
    "line": 92,
    "function": null,
    "comment": "stencil.cpp:92:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "stencil.cpp",
    "line": 92,
    "function": null,
    "comment": "stencil.cpp:92:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "stencil.cpp",
    "line": 93,
    "function": null,
    "comment": "stencil.cpp:93:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "stencil.cpp",
    "line": 94,
    "function": null,
    "comment": "stencil.cpp:94:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "stencil.cpp",
    "line": 94,
    "function": null,
    "comment": "stencil.cpp:94:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "stencil.cpp",
    "line": 95,
    "function": null,
    "comment": "stencil.cpp:95:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "stencil.cpp",
    "line": 99,
    "function": null,
    "comment": "stencil.cpp:99:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.cpp",
    "line": 99,
    "function": null,
    "comment": "stencil.cpp:99:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "stencil.cpp",
    "line": 100,
    "function": null,
    "comment": "stencil.cpp:100:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.cpp",
    "line": 100,
    "function": null,
    "comment": "stencil.cpp:100:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "stencil.cpp",
    "line": 101,
    "function": null,
    "comment": "stencil.cpp:101:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "stencil.cpp",
    "line": 102,
    "function": null,
    "comment": "stencil.cpp:102:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.cpp",
    "line": 102,
    "function": null,
    "comment": "stencil.cpp:102:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "stencil.cpp",
    "line": 103,
    "function": null,
    "comment": "stencil.cpp:103:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.cpp",
    "line": 103,
    "function": null,
    "comment": "stencil.cpp:103:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "stencil.cpp",
    "line": 104,
    "function": null,
    "comment": "stencil.cpp:104:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "stencil.cpp",
    "line": 104,
    "function": null,
    "comment": "stencil.cpp:104:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.cpp",
    "line": 104,
    "function": null,
    "comment": "stencil.cpp:104:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "stencil.cpp",
    "line": 105,
    "function": null,
    "comment": "stencil.cpp:105:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "stencil.cpp",
    "line": 105,
    "function": null,
    "comment": "stencil.cpp:105:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.cpp",
    "line": 105,
    "function": null,
    "comment": "stencil.cpp:105:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "stencil.cpp",
    "line": 106,
    "function": null,
    "comment": "stencil.cpp:106:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.cpp",
    "line": 106,
    "function": null,
    "comment": "stencil.cpp:106:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "stencil.cpp",
    "line": 107,
    "function": null,
    "comment": "stencil.cpp:107:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.cpp",
    "line": 107,
    "function": null,
    "comment": "stencil.cpp:107:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "stencil.cpp",
    "line": 108,
    "function": null,
    "comment": "stencil.cpp:108:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "stencil.cpp",
    "line": 108,
    "function": null,
    "comment": "stencil.cpp:108:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.cpp",
    "line": 108,
    "function": null,
    "comment": "stencil.cpp:108:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "stencil.cpp",
    "line": 109,
    "function": null,
    "comment": "stencil.cpp:109:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.cpp",
    "line": 109,
    "function": null,
    "comment": "stencil.cpp:109:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "stencil.cpp",
    "line": 110,
    "function": null,
    "comment": "stencil.cpp:110:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.cpp",
    "line": 110,
    "function": null,
    "comment": "stencil.cpp:110:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "stencil.cpp",
    "line": 111,
    "function": null,
    "comment": "stencil.cpp:111:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.cpp",
    "line": 111,
    "function": null,
    "comment": "stencil.cpp:111:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "stencil.cpp",
    "line": 112,
    "function": null,
    "comment": "stencil.cpp:112:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.cpp",
    "line": 112,
    "function": null,
    "comment": "stencil.cpp:112:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "stencil.cpp",
    "line": 115,
    "function": null,
    "comment": "stencil.cpp:115:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.cpp",
    "line": 115,
    "function": null,
    "comment": "stencil.cpp:115:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "stencil.cpp",
    "line": 116,
    "function": null,
    "comment": "stencil.cpp:116:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "stencil.cpp",
    "line": 117,
    "function": null,
    "comment": "stencil.cpp:117:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.cpp",
    "line": 117,
    "function": null,
    "comment": "stencil.cpp:117:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "stencil.cpp",
    "line": 120,
    "function": null,
    "comment": "stencil.cpp:120:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "stencil.cpp",
    "line": 126,
    "function": null,
    "comment": "stencil.cpp:126:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.cpp",
    "line": 126,
    "function": null,
    "comment": "stencil.cpp:126:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "stencil.cpp",
    "line": 127,
    "function": null,
    "comment": "stencil.cpp:127:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "stencil.cpp",
    "line": 128,
    "function": null,
    "comment": "stencil.cpp:128:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "stencil.cpp",
    "line": 129,
    "function": null,
    "comment": "stencil.cpp:129:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "stencil.cpp",
    "line": 130,
    "function": null,
    "comment": "stencil.cpp:130:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.cpp",
    "line": 130,
    "function": null,
    "comment": "stencil.cpp:130:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "stencil.cpp",
    "line": 131,
    "function": null,
    "comment": "stencil.cpp:131:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.cpp",
    "line": 131,
    "function": null,
    "comment": "stencil.cpp:131:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "stencil.cpp",
    "line": 132,
    "function": null,
    "comment": "stencil.cpp:132:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.cpp",
    "line": 132,
    "function": null,
    "comment": "stencil.cpp:132:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "stencil.cpp",
    "line": 133,
    "function": null,
    "comment": "stencil.cpp:133:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.cpp",
    "line": 133,
    "function": null,
    "comment": "stencil.cpp:133:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "stencil.cpp",
    "line": 134,
    "function": null,
    "comment": "stencil.cpp:134:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.cpp",
    "line": 134,
    "function": null,
    "comment": "stencil.cpp:134:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "stencil.cpp",
    "line": 136,
    "function": null,
    "comment": "stencil.cpp:136:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "stencil.cpp",
    "line": 142,
    "function": null,
    "comment": "stencil.cpp:142:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.cpp",
    "line": 142,
    "function": null,
    "comment": "stencil.cpp:142:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "stencil.cpp",
    "line": 143,
    "function": null,
    "comment": "stencil.cpp:143:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "stencil.cpp",
    "line": 144,
    "function": null,
    "comment": "stencil.cpp:144:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "stencil.cpp",
    "line": 146,
    "function": null,
    "comment": "stencil.cpp:146:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.cpp",
    "line": 148,
    "function": null,
    "comment": "stencil.cpp:148:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.cpp",
    "line": 149,
    "function": null,
    "comment": "stencil.cpp:149:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.cpp",
    "line": 150,
    "function": null,
    "comment": "stencil.cpp:150:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.cpp",
    "line": 151,
    "function": null,
    "comment": "stencil.cpp:151:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.cpp",
    "line": 152,
    "function": null,
    "comment": "stencil.cpp:152:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "stencil.cpp",
    "line": 167,
    "function": null,
    "comment": "stencil.cpp:167:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "stencil.cpp",
    "line": 168,
    "function": null,
    "comment": "stencil.cpp:168:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "stencil.cpp",
    "line": 168,
    "function": null,
    "comment": "stencil.cpp:168:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "stencil.cpp",
    "line": 129,
    "function": null,
    "comment": "stencil.cpp:129:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "container_converters.cpp",
    "line": null,
    "function": null,
    "comment": "container_converters.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "container_converters.cpp",
    "line": 14,
    "function": null,
    "comment": "container_converters.cpp:14:  Found C system header after C++ system header. Should be: container_converters.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "container_converters.cpp",
    "line": 37,
    "function": null,
    "comment": "container_converters.cpp:37:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "container_converters.cpp",
    "line": 38,
    "function": null,
    "comment": "container_converters.cpp:38:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "container_converters.cpp",
    "line": 38,
    "function": null,
    "comment": "container_converters.cpp:38:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "container_converters.cpp",
    "line": 39,
    "function": null,
    "comment": "container_converters.cpp:39:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "container_converters.cpp",
    "line": 40,
    "function": null,
    "comment": "container_converters.cpp:40:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "container_converters.cpp",
    "line": 47,
    "function": null,
    "comment": "container_converters.cpp:47:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "container_converters.cpp",
    "line": 49,
    "function": null,
    "comment": "container_converters.cpp:49:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "container_converters.cpp",
    "line": 51,
    "function": null,
    "comment": "container_converters.cpp:51:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "container_converters.cpp",
    "line": 53,
    "function": null,
    "comment": "container_converters.cpp:53:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "container_converters.cpp",
    "line": 55,
    "function": null,
    "comment": "container_converters.cpp:55:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "container_converters.cpp",
    "line": 57,
    "function": null,
    "comment": "container_converters.cpp:57:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "container_converters.cpp",
    "line": 64,
    "function": null,
    "comment": "container_converters.cpp:64:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "container_converters.cpp",
    "line": 64,
    "function": null,
    "comment": "container_converters.cpp:64:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "container_converters.cpp",
    "line": 65,
    "function": null,
    "comment": "container_converters.cpp:65:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "container_converters.cpp",
    "line": 66,
    "function": null,
    "comment": "container_converters.cpp:66:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "container_converters.cpp",
    "line": 67,
    "function": null,
    "comment": "container_converters.cpp:67:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "container_converters.cpp",
    "line": 67,
    "function": null,
    "comment": "container_converters.cpp:67:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "container_converters.cpp",
    "line": 68,
    "function": null,
    "comment": "container_converters.cpp:68:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "container_converters.cpp",
    "line": 68,
    "function": null,
    "comment": "container_converters.cpp:68:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "container_converters.cpp",
    "line": 69,
    "function": null,
    "comment": "container_converters.cpp:69:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "container_converters.cpp",
    "line": 69,
    "function": null,
    "comment": "container_converters.cpp:69:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "container_converters.cpp",
    "line": 70,
    "function": null,
    "comment": "container_converters.cpp:70:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "container_converters.cpp",
    "line": 71,
    "function": null,
    "comment": "container_converters.cpp:71:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "container_converters.cpp",
    "line": 72,
    "function": null,
    "comment": "container_converters.cpp:72:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "container_converters.cpp",
    "line": 72,
    "function": null,
    "comment": "container_converters.cpp:72:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "container_converters.cpp",
    "line": 73,
    "function": null,
    "comment": "container_converters.cpp:73:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "container_converters.cpp",
    "line": 73,
    "function": null,
    "comment": "container_converters.cpp:73:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "container_converters.cpp",
    "line": 74,
    "function": null,
    "comment": "container_converters.cpp:74:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "container_converters.cpp",
    "line": 74,
    "function": null,
    "comment": "container_converters.cpp:74:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "container_converters.cpp",
    "line": 75,
    "function": null,
    "comment": "container_converters.cpp:75:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "container_converters.cpp",
    "line": 76,
    "function": null,
    "comment": "container_converters.cpp:76:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "container_converters.cpp",
    "line": 77,
    "function": null,
    "comment": "container_converters.cpp:77:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "container_converters.cpp",
    "line": 77,
    "function": null,
    "comment": "container_converters.cpp:77:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "container_converters.cpp",
    "line": 78,
    "function": null,
    "comment": "container_converters.cpp:78:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "container_converters.cpp",
    "line": 78,
    "function": null,
    "comment": "container_converters.cpp:78:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "container_converters.cpp",
    "line": 79,
    "function": null,
    "comment": "container_converters.cpp:79:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "container_converters.cpp",
    "line": 79,
    "function": null,
    "comment": "container_converters.cpp:79:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "container_converters.cpp",
    "line": 82,
    "function": null,
    "comment": "container_converters.cpp:82:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "container_converters.cpp",
    "line": 82,
    "function": null,
    "comment": "container_converters.cpp:82:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "container_converters.cpp",
    "line": 83,
    "function": null,
    "comment": "container_converters.cpp:83:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "container_converters.cpp",
    "line": 84,
    "function": null,
    "comment": "container_converters.cpp:84:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "container_converters.cpp",
    "line": 85,
    "function": null,
    "comment": "container_converters.cpp:85:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "container_converters.cpp",
    "line": 85,
    "function": null,
    "comment": "container_converters.cpp:85:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "container_converters.cpp",
    "line": 86,
    "function": null,
    "comment": "container_converters.cpp:86:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "container_converters.cpp",
    "line": 86,
    "function": null,
    "comment": "container_converters.cpp:86:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "container_converters.cpp",
    "line": 87,
    "function": null,
    "comment": "container_converters.cpp:87:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "container_converters.cpp",
    "line": 87,
    "function": null,
    "comment": "container_converters.cpp:87:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "container_converters.cpp",
    "line": 88,
    "function": null,
    "comment": "container_converters.cpp:88:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "container_converters.cpp",
    "line": 89,
    "function": null,
    "comment": "container_converters.cpp:89:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "container_converters.cpp",
    "line": 90,
    "function": null,
    "comment": "container_converters.cpp:90:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "container_converters.cpp",
    "line": 91,
    "function": null,
    "comment": "container_converters.cpp:91:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "container_converters.cpp",
    "line": 92,
    "function": null,
    "comment": "container_converters.cpp:92:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "container_converters.cpp",
    "line": 92,
    "function": null,
    "comment": "container_converters.cpp:92:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "container_converters.cpp",
    "line": 93,
    "function": null,
    "comment": "container_converters.cpp:93:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "container_converters.cpp",
    "line": 94,
    "function": null,
    "comment": "container_converters.cpp:94:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "container_converters.cpp",
    "line": 95,
    "function": null,
    "comment": "container_converters.cpp:95:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "container_converters.cpp",
    "line": 96,
    "function": null,
    "comment": "container_converters.cpp:96:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "container_converters.cpp",
    "line": 97,
    "function": null,
    "comment": "container_converters.cpp:97:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "container_converters.cpp",
    "line": 98,
    "function": null,
    "comment": "container_converters.cpp:98:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "container_converters.cpp",
    "line": 99,
    "function": null,
    "comment": "container_converters.cpp:99:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "container_converters.cpp",
    "line": 100,
    "function": null,
    "comment": "container_converters.cpp:100:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "container_converters.cpp",
    "line": 101,
    "function": null,
    "comment": "container_converters.cpp:101:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "container_converters.cpp",
    "line": 102,
    "function": null,
    "comment": "container_converters.cpp:102:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "container_converters.cpp",
    "line": 103,
    "function": null,
    "comment": "container_converters.cpp:103:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "container_converters.cpp",
    "line": 104,
    "function": null,
    "comment": "container_converters.cpp:104:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "container_converters.cpp",
    "line": 105,
    "function": null,
    "comment": "container_converters.cpp:105:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "container_converters.cpp",
    "line": 106,
    "function": null,
    "comment": "container_converters.cpp:106:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "container_converters.cpp",
    "line": 108,
    "function": null,
    "comment": "container_converters.cpp:108:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "container_converters.cpp",
    "line": 108,
    "function": null,
    "comment": "container_converters.cpp:108:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "container_converters.cpp",
    "line": 109,
    "function": null,
    "comment": "container_converters.cpp:109:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "container_converters.cpp",
    "line": 110,
    "function": null,
    "comment": "container_converters.cpp:110:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "container_converters.cpp",
    "line": 111,
    "function": null,
    "comment": "container_converters.cpp:111:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "container_converters.cpp",
    "line": 112,
    "function": null,
    "comment": "container_converters.cpp:112:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "container_converters.cpp",
    "line": 113,
    "function": null,
    "comment": "container_converters.cpp:113:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "container_converters.cpp",
    "line": 114,
    "function": null,
    "comment": "container_converters.cpp:114:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "container_converters.cpp",
    "line": 115,
    "function": null,
    "comment": "container_converters.cpp:115:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "container_converters.cpp",
    "line": 115,
    "function": null,
    "comment": "container_converters.cpp:115:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "container_converters.cpp",
    "line": 116,
    "function": null,
    "comment": "container_converters.cpp:116:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "container_converters.cpp",
    "line": 116,
    "function": null,
    "comment": "container_converters.cpp:116:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "container_converters.cpp",
    "line": 117,
    "function": null,
    "comment": "container_converters.cpp:117:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "container_converters.cpp",
    "line": 117,
    "function": null,
    "comment": "container_converters.cpp:117:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "container_converters.cpp",
    "line": 118,
    "function": null,
    "comment": "container_converters.cpp:118:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "container_converters.cpp",
    "line": 118,
    "function": null,
    "comment": "container_converters.cpp:118:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "container_converters.cpp",
    "line": 119,
    "function": null,
    "comment": "container_converters.cpp:119:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "container_converters.cpp",
    "line": 119,
    "function": null,
    "comment": "container_converters.cpp:119:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "container_converters.cpp",
    "line": 120,
    "function": null,
    "comment": "container_converters.cpp:120:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "container_converters.cpp",
    "line": 120,
    "function": null,
    "comment": "container_converters.cpp:120:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "container_converters.cpp",
    "line": 121,
    "function": null,
    "comment": "container_converters.cpp:121:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "container_converters.cpp",
    "line": 121,
    "function": null,
    "comment": "container_converters.cpp:121:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "container_converters.cpp",
    "line": 122,
    "function": null,
    "comment": "container_converters.cpp:122:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "container_converters.cpp",
    "line": 122,
    "function": null,
    "comment": "container_converters.cpp:122:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "container_converters.cpp",
    "line": 123,
    "function": null,
    "comment": "container_converters.cpp:123:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "container_converters.cpp",
    "line": 123,
    "function": null,
    "comment": "container_converters.cpp:123:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "container_converters.cpp",
    "line": 124,
    "function": null,
    "comment": "container_converters.cpp:124:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "container_converters.cpp",
    "line": 124,
    "function": null,
    "comment": "container_converters.cpp:124:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "container_converters.cpp",
    "line": 124,
    "function": null,
    "comment": "container_converters.cpp:124:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "container_converters.cpp",
    "line": 125,
    "function": null,
    "comment": "container_converters.cpp:125:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "container_converters.cpp",
    "line": 125,
    "function": null,
    "comment": "container_converters.cpp:125:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "container_converters.cpp",
    "line": 125,
    "function": null,
    "comment": "container_converters.cpp:125:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "container_converters.cpp",
    "line": 126,
    "function": null,
    "comment": "container_converters.cpp:126:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "container_converters.cpp",
    "line": 126,
    "function": null,
    "comment": "container_converters.cpp:126:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "container_converters.cpp",
    "line": 126,
    "function": null,
    "comment": "container_converters.cpp:126:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "container_converters.cpp",
    "line": 128,
    "function": null,
    "comment": "container_converters.cpp:128:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "container_converters.cpp",
    "line": 128,
    "function": null,
    "comment": "container_converters.cpp:128:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "container_converters.cpp",
    "line": 129,
    "function": null,
    "comment": "container_converters.cpp:129:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "container_converters.cpp",
    "line": 129,
    "function": null,
    "comment": "container_converters.cpp:129:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "container_converters.cpp",
    "line": 130,
    "function": null,
    "comment": "container_converters.cpp:130:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "container_converters.cpp",
    "line": 130,
    "function": null,
    "comment": "container_converters.cpp:130:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "container_converters.cpp",
    "line": 131,
    "function": null,
    "comment": "container_converters.cpp:131:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "container_converters.cpp",
    "line": 132,
    "function": null,
    "comment": "container_converters.cpp:132:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "container_converters.cpp",
    "line": 133,
    "function": null,
    "comment": "container_converters.cpp:133:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "container_converters.cpp",
    "line": 134,
    "function": null,
    "comment": "container_converters.cpp:134:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "container_converters.cpp",
    "line": 135,
    "function": null,
    "comment": "container_converters.cpp:135:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "container_converters.cpp",
    "line": 136,
    "function": null,
    "comment": "container_converters.cpp:136:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "container_converters.cpp",
    "line": 137,
    "function": null,
    "comment": "container_converters.cpp:137:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "container_converters.cpp",
    "line": 143,
    "function": null,
    "comment": "container_converters.cpp:143:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "container_converters.cpp",
    "line": 144,
    "function": null,
    "comment": "container_converters.cpp:144:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "formatters.cpp",
    "line": null,
    "function": null,
    "comment": "formatters.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "formatters.cpp",
    "line": 16,
    "function": null,
    "comment": "formatters.cpp:16:  Found C system header after C++ system header. Should be: formatters.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "formatters.cpp",
    "line": 35,
    "function": null,
    "comment": "formatters.cpp:35:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "formatters.cpp",
    "line": 36,
    "function": null,
    "comment": "formatters.cpp:36:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "formatters.cpp",
    "line": 38,
    "function": null,
    "comment": "formatters.cpp:38:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "formatters.cpp",
    "line": 40,
    "function": null,
    "comment": "formatters.cpp:40:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "formatters.cpp",
    "line": 43,
    "function": null,
    "comment": "formatters.cpp:43:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "formatters.cpp",
    "line": 44,
    "function": null,
    "comment": "formatters.cpp:44:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "formatters.cpp",
    "line": 45,
    "function": null,
    "comment": "formatters.cpp:45:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "formatters.cpp",
    "line": 46,
    "function": null,
    "comment": "formatters.cpp:46:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "formatters.cpp",
    "line": 47,
    "function": null,
    "comment": "formatters.cpp:47:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "formatters.cpp",
    "line": 49,
    "function": null,
    "comment": "formatters.cpp:49:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "formatters.cpp",
    "line": 55,
    "function": null,
    "comment": "formatters.cpp:55:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "formatters.cpp",
    "line": 57,
    "function": null,
    "comment": "formatters.cpp:57:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "formatters.cpp",
    "line": 63,
    "function": null,
    "comment": "formatters.cpp:63:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "formatters.cpp",
    "line": 67,
    "function": null,
    "comment": "formatters.cpp:67:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "formatters.cpp",
    "line": 69,
    "function": null,
    "comment": "formatters.cpp:69:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "formatters.cpp",
    "line": 73,
    "function": null,
    "comment": "formatters.cpp:73:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "formatters.cpp",
    "line": 76,
    "function": null,
    "comment": "formatters.cpp:76:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "formatters.cpp",
    "line": 78,
    "function": null,
    "comment": "formatters.cpp:78:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "formatters.cpp",
    "line": 81,
    "function": null,
    "comment": "formatters.cpp:81:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "formatters.cpp",
    "line": 81,
    "function": null,
    "comment": "formatters.cpp:81:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "formatters.cpp",
    "line": 84,
    "function": null,
    "comment": "formatters.cpp:84:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "formatters.cpp",
    "line": 86,
    "function": null,
    "comment": "formatters.cpp:86:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "formatters.cpp",
    "line": 89,
    "function": null,
    "comment": "formatters.cpp:89:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "formatters.cpp",
    "line": 90,
    "function": null,
    "comment": "formatters.cpp:90:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "formatters.cpp",
    "line": 91,
    "function": null,
    "comment": "formatters.cpp:91:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "formatters.cpp",
    "line": 94,
    "function": null,
    "comment": "formatters.cpp:94:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "formatters.cpp",
    "line": 95,
    "function": null,
    "comment": "formatters.cpp:95:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "formatters.cpp",
    "line": 96,
    "function": null,
    "comment": "formatters.cpp:96:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "formatters.cpp",
    "line": 97,
    "function": null,
    "comment": "formatters.cpp:97:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "formatters.cpp",
    "line": 101,
    "function": null,
    "comment": "formatters.cpp:101:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "formatters.cpp",
    "line": 102,
    "function": null,
    "comment": "formatters.cpp:102:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "formatters.cpp",
    "line": 104,
    "function": null,
    "comment": "formatters.cpp:104:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "formatters.cpp",
    "line": 105,
    "function": null,
    "comment": "formatters.cpp:105:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "formatters.cpp",
    "line": 112,
    "function": null,
    "comment": "formatters.cpp:112:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "formatters.cpp",
    "line": 115,
    "function": null,
    "comment": "formatters.cpp:115:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "formatters.cpp",
    "line": 117,
    "function": null,
    "comment": "formatters.cpp:117:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "formatters.cpp",
    "line": 125,
    "function": null,
    "comment": "formatters.cpp:125:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Whitespace inside parenthesis should be consistent, and should consist of either zero or one space.",
    "file": "formatters.cpp",
    "line": 149,
    "function": null,
    "comment": "formatters.cpp:149:  Mismatching spaces inside () in for  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "formatters.cpp",
    "line": 158,
    "function": null,
    "comment": "formatters.cpp:158:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "formatters.cpp",
    "line": 159,
    "function": null,
    "comment": "formatters.cpp:159:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "formatters.cpp",
    "line": 161,
    "function": null,
    "comment": "formatters.cpp:161:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "formatters.cpp",
    "line": 163,
    "function": null,
    "comment": "formatters.cpp:163:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "formatters.cpp",
    "line": 165,
    "function": null,
    "comment": "formatters.cpp:165:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "formatters.cpp",
    "line": 167,
    "function": null,
    "comment": "formatters.cpp:167:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "formatters.cpp",
    "line": 169,
    "function": null,
    "comment": "formatters.cpp:169:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "formatters.cpp",
    "line": 171,
    "function": null,
    "comment": "formatters.cpp:171:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "formatters.cpp",
    "line": 173,
    "function": null,
    "comment": "formatters.cpp:173:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "formatters.cpp",
    "line": 175,
    "function": null,
    "comment": "formatters.cpp:175:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "formatters.cpp",
    "line": 177,
    "function": null,
    "comment": "formatters.cpp:177:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "formatters.cpp",
    "line": 179,
    "function": null,
    "comment": "formatters.cpp:179:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "formatters.cpp",
    "line": 182,
    "function": null,
    "comment": "formatters.cpp:182:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "formatters.cpp",
    "line": 184,
    "function": null,
    "comment": "formatters.cpp:184:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_no_mem_check.hpp",
    "line": 45,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_no_mem_check.hpp",
    "line": 47,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_no_mem_check.hpp",
    "line": 53,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_no_mem_check.hpp",
    "line": 105,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_no_mem_check.hpp",
    "line": 263,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_no_mem_check.hpp",
    "line": 278,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_no_mem_check.hpp",
    "line": 293,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_no_mem_check.hpp",
    "line": 307,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_no_mem_check.hpp",
    "line": 325,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_no_mem_check.hpp",
    "line": 340,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_no_mem_check.hpp",
    "line": 352,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_no_mem_check.hpp",
    "line": 363,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_no_mem_check.hpp",
    "line": 369,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_no_mem_check.hpp",
    "line": 457,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_no_mem_check.hpp",
    "line": 512,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 47,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 73,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 165,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 395,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 409,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 424,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 438,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 456,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 473,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 483,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 517,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 530,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 580,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": 617,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "converters.hpp",
    "line": 71,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "converters.hpp",
    "line": 77,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "converters.hpp",
    "line": 82,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "formatters.hpp",
    "line": 63,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "formatters.hpp",
    "line": 106,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "formatters.hpp",
    "line": 181,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "formatters.hpp",
    "line": 194,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "formatters.hpp",
    "line": 232,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "formatters.hpp",
    "line": 249,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "formatters.hpp",
    "line": 266,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "formatters.hpp",
    "line": 280,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "formatters.hpp",
    "line": 292,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "formatters.hpp",
    "line": 307,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "formatters.hpp",
    "line": 319,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "push_and_pop_fixed.hpp",
    "line": 43,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "push_and_pop_fixed.hpp",
    "line": 75,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "push_and_pop_fixed.hpp",
    "line": 101,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "push_and_pop_fixed.hpp",
    "line": 106,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "push_and_pop_fixed.hpp",
    "line": 115,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "push_and_pop_fixed.hpp",
    "line": 149,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "push_and_pop_fixed.hpp",
    "line": 157,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "push_and_pop_fixed.hpp",
    "line": 162,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "push_and_pop_fixed.hpp",
    "line": 182,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "push_and_pop_fixed.hpp",
    "line": 183,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "push_and_pop_fixed.hpp",
    "line": 184,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 38,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 92,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 99,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 198,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 203,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 212,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 246,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 249,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 263,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 268,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 283,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 284,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 285,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "formatters.hpp",
    "line": 65,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "formatters.hpp",
    "line": 105,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "formatters.hpp",
    "line": 144,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "formatters.hpp",
    "line": 156,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "formatters.hpp",
    "line": 168,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "formatters.hpp",
    "line": 190,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "formatters.cpp",
    "line": 35,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "formatters.cpp",
    "line": 107,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "formatters.cpp",
    "line": 149,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not rely on the sequence of evaluation within an expression.",
    "file": "push_and_pop_fixed.hpp",
    "line": 142,
    "function": null,
    "comment": "Found increment or decrement as a subexpression.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","evaluation-order","expressions"]
  },
  {
    "rule": "Do not rely on the sequence of evaluation within an expression.",
    "file": "push_and_pop_dynamic.hpp",
    "line": 239,
    "function": null,
    "comment": "Found increment or decrement as a subexpression.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","evaluation-order","expressions"]
  },
  {
    "rule": "Do not rely on the sequence of evaluation within an expression.",
    "file": "formatters.hpp",
    "line": 292,
    "function": null,
    "comment": "Found assignment as a subexpression.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","evaluation-order","expressions"]
  },
  {
    "rule": "Do not rely on the sequence of evaluation within an expression.",
    "file": "formatters.hpp",
    "line": 319,
    "function": null,
    "comment": "Found assignment as a subexpression.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","evaluation-order","expressions"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "initialiser.hpp",
    "line": 48,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "initialiser.hpp",
    "line": 76,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "initialiser.hpp",
    "line": 83,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "initialiser.hpp",
    "line": 91,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "initialiser.hpp",
    "line": 129,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "initialiser.hpp",
    "line": 146,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "initialiser.hpp",
    "line": 147,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "initialiser.hpp",
    "line": 155,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "formatters.hpp",
    "line": 80,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "formatters.hpp",
    "line": 100,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "formatters.hpp",
    "line": 111,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "formatters.hpp",
    "line": 118,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "formatters.hpp",
    "line": 126,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "formatters.hpp",
    "line": 151,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "formatters.hpp",
    "line": 174,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "formatters.hpp",
    "line": 176,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "formatters.hpp",
    "line": 177,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "formatters.hpp",
    "line": 178,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "formatters.hpp",
    "line": 193,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "formatters.hpp",
    "line": 194,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "formatters.hpp",
    "line": 195,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "formatters.hpp",
    "line": 233,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "formatters.hpp",
    "line": 114,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "stencil.hpp",
    "line": 138,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "stencil.hpp",
    "line": 163,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "stencil.hpp",
    "line": 181,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "stencil.hpp",
    "line": 250,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "stencil.hpp",
    "line": 398,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "stencil.hpp",
    "line": 415,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "stencil.hpp",
    "line": 431,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "stencil.hpp",
    "line": 455,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "stencil.hpp",
    "line": 476,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "stencil.hpp",
    "line": 516,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "specialisations.hpp",
    "line": 72,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "specialisations.hpp",
    "line": 95,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "specialisations.hpp",
    "line": 120,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "specialisations.hpp",
    "line": 139,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "specialisations.hpp",
    "line": 330,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "specialisations.hpp",
    "line": 347,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "specialisations.hpp",
    "line": 363,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "specialisations.hpp",
    "line": 387,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "specialisations.hpp",
    "line": 408,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "specialisations.hpp",
    "line": 434,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "specialisations.hpp",
    "line": 486,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "specialisations.hpp",
    "line": 509,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "specialisations.hpp",
    "line": 534,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "specialisations.hpp",
    "line": 553,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "specialisations.hpp",
    "line": 723,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "specialisations.hpp",
    "line": 740,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "specialisations.hpp",
    "line": 756,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "specialisations.hpp",
    "line": 780,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "specialisations.hpp",
    "line": 801,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "specialisations.hpp",
    "line": 827,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "converters.hpp",
    "line": 34,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "converters.hpp",
    "line": 43,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "converters.hpp",
    "line": 49,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "converters.hpp",
    "line": 55,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "converters.hpp",
    "line": 61,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "converters.hpp",
    "line": 67,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "converters.hpp",
    "line": 73,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_mem_check.hpp",
    "line": 45,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_mem_check.hpp",
    "line": 47,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_mem_check.hpp",
    "line": 53,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_mem_check.hpp",
    "line": 105,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_mem_check.hpp",
    "line": 264,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_mem_check.hpp",
    "line": 278,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_mem_check.hpp",
    "line": 293,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_mem_check.hpp",
    "line": 307,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_mem_check.hpp",
    "line": 325,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_mem_check.hpp",
    "line": 340,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_mem_check.hpp",
    "line": 352,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_mem_check.hpp",
    "line": 365,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_mem_check.hpp",
    "line": 369,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_mem_check.hpp",
    "line": 391,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_mem_check.hpp",
    "line": 394,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_mem_check.hpp",
    "line": 397,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_mem_check.hpp",
    "line": 411,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_mem_check.hpp",
    "line": 414,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_mem_check.hpp",
    "line": 430,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_mem_check.hpp",
    "line": 432,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_mem_check.hpp",
    "line": 448,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_mem_check.hpp",
    "line": 458,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_mem_check.hpp",
    "line": 464,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_mem_check.hpp",
    "line": 551,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_mem_check.hpp",
    "line": 606,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 49,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 72,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 164,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 408,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 422,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 437,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 451,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 469,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 486,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 496,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 549,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 553,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 561,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 580,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 583,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 598,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 619,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 651,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 701,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "array_dynamic_mem_check.hpp",
    "line": 738,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not rely on the sequence of evaluation within an expression.",
    "file": "formatters.hpp",
    "line": 80,
    "function": null,
    "comment": "Found assignment as a subexpression.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","evaluation-order","expressions"]
  },
  {
    "rule": "Do not rely on the sequence of evaluation within an expression.",
    "file": "formatters.hpp",
    "line": 114,
    "function": null,
    "comment": "Found assignment as a subexpression.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","evaluation-order","expressions"]
  },
  {
    "rule": "Do not rely on the sequence of evaluation within an expression.",
    "file": "stencil.hpp",
    "line": 138,
    "function": null,
    "comment": "Found assignment as a subexpression.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","evaluation-order","expressions"]
  },
  {
    "rule": "Do not rely on the sequence of evaluation within an expression.",
    "file": "specialisations.hpp",
    "line": 95,
    "function": null,
    "comment": "Found assignment as a subexpression.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","evaluation-order","expressions"]
  },
  {
    "rule": "Do not rely on the sequence of evaluation within an expression.",
    "file": "specialisations.hpp",
    "line": 509,
    "function": null,
    "comment": "Found assignment as a subexpression.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","evaluation-order","expressions"]
  },
  {
    "rule": "Do not overload operators with special semantics, such as '&&', '||', ',' or '&'.",
    "file": "initialiser.hpp",
    "line": 72,
    "function": null,
    "comment": "Found override of the comma operator.",
    "tags": ["hicpp","code-standards","misra-cpp","operators","overload","jsf-av-cpp"]
  },
  {
    "rule": "Do not overload operators with special semantics, such as '&&', '||', ',' or '&'.",
    "file": "initialiser.hpp",
    "line": 92,
    "function": null,
    "comment": "Found override of the comma operator.",
    "tags": ["hicpp","code-standards","misra-cpp","operators","overload","jsf-av-cpp"]
  },
  {
    "rule": "Do not overload operators with special semantics, such as '&&', '||', ',' or '&'.",
    "file": "initialiser.hpp",
    "line": 142,
    "function": null,
    "comment": "Found override of the comma operator.",
    "tags": ["hicpp","code-standards","misra-cpp","operators","overload","jsf-av-cpp"]
  },
  {
    "rule": "Do not overload operators with special semantics, such as '&&', '||', ',' or '&'.",
    "file": "initialiser.hpp",
    "line": 165,
    "function": null,
    "comment": "Found override of the comma operator.",
    "tags": ["hicpp","code-standards","misra-cpp","operators","overload","jsf-av-cpp"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "arrays.cpp",
    "line": 103,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "arrays.cpp",
    "line": 154,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "arrays.cpp",
    "line": 174,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "arrays_mem_check.cpp",
    "line": 108,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "arrays_mem_check.cpp",
    "line": 159,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "arrays_mem_check.cpp",
    "line": 169,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "arrays_mem_check.cpp",
    "line": 180,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "arrays_mem_check.cpp",
    "line": 186,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "arrays_mem_check.cpp",
    "line": 211,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "arrays_mem_check.cpp",
    "line": 217,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "arrays_mem_check.cpp",
    "line": 235,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "container_converters.cpp",
    "line": 118,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "container_converters.cpp",
    "line": 119,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "container_converters.cpp",
    "line": 120,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "container_converters.cpp",
    "line": 143,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "fifo.hpp",
    "line": 89,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "fifo.hpp",
    "line": 103,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "fifo.hpp",
    "line": 122,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "fifo.hpp",
    "line": 132,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "fifo.hpp",
    "line": 153,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "fifo.hpp",
    "line": 160,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "fifo.hpp",
    "line": 167,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "fifo.hpp",
    "line": 175,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "fifo.hpp",
    "line": 176,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "fifo.cpp",
    "line": 40,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "fifo.cpp",
    "line": 57,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "fifo.cpp",
    "line": 87,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "fifo.cpp",
    "line": 101,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "fifo.cpp",
    "line": 123,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "fifo.cpp",
    "line": 137,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "fifo.cpp",
    "line": 159,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "fifo.cpp",
    "line": 192,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "push_and_pop.cpp",
    "line": 48,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "push_and_pop.cpp",
    "line": 70,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "push_and_pop.cpp",
    "line": 77,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "push_and_pop.cpp",
    "line": 84,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "push_and_pop.cpp",
    "line": 91,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "push_and_pop.cpp",
    "line": 102,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "push_and_pop.cpp",
    "line": 109,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "push_and_pop.cpp",
    "line": 124,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "push_and_pop.cpp",
    "line": 131,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "push_and_pop.cpp",
    "line": 160,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "stencil.cpp",
    "line": 167,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "fifo.cpp",
    "line": 65,
    "function": null,
    "comment": "The function 'reset' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "fifo.cpp",
    "line": 133,
    "function": null,
    "comment": "The function 'updateData' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "initialiser.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "initialiser.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "fifo.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "fifo.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "definitions.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "definitions.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "array_mem_check.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "array_dynamic_no_mem_check.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "array_dynamic_mem_check.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "array_dynamic_mem_check.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "array_no_mem_check.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "formatters.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "formatters.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "push_and_pop_fixed.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "formatters.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "formatters.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "stencil.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "stencil.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "converters.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "converters.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "formatters.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "formatters.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "specialisations.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "specialisations.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "formatters.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "formatters.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "arrays.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "fifo.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "push_and_pop.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "stencil.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "stencil.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "container_converters.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "formatters.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  }
]