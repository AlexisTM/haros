[
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "waypoints_navi.hpp",
    "line": null,
    "function": null,
    "comment": "waypoints_navi.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "waypoints_navi.hpp",
    "line": 11,
    "function": null,
    "comment": "waypoints_navi.hpp:11:  Include 'ros/ros.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "waypoints_navi.hpp",
    "line": 12,
    "function": null,
    "comment": "waypoints_navi.hpp:12:  Include 'geometry_msgs/PointStamped.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "waypoints_navi.hpp",
    "line": 14,
    "function": null,
    "comment": "waypoints_navi.hpp:14:  Include 'actionlib/client/simple_action_client.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.hpp",
    "line": 24,
    "function": null,
    "comment": "waypoints_navi.hpp:24:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.hpp",
    "line": 33,
    "function": null,
    "comment": "waypoints_navi.hpp:33:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "waypoints_navi.hpp",
    "line": 34,
    "function": null,
    "comment": "waypoints_navi.hpp:34:  public: should be indented +1 space inside class WaypointsGoalNode  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "waypoints_navi.hpp",
    "line": 48,
    "function": null,
    "comment": "waypoints_navi.hpp:48:  private: should be indented +1 space inside class WaypointsGoalNode  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "waypoints_navi.hpp",
    "line": 54,
    "function": null,
    "comment": "waypoints_navi.hpp:54:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "waypoints_navi.hpp",
    "line": 60,
    "function": null,
    "comment": "waypoints_navi.hpp:60:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoints_navi.hpp",
    "line": 90,
    "function": null,
    "comment": "waypoints_navi.hpp:90:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "waypoints_navi.hpp",
    "line": 97,
    "function": null,
    "comment": "waypoints_navi.hpp:97:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "waypoints_navi.hpp",
    "line": 66,
    "function": null,
    "comment": "waypoints_navi.hpp:66:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "waypoints_navi.hpp",
    "line": 69,
    "function": null,
    "comment": "waypoints_navi.hpp:69:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "waypoints_navi.cpp",
    "line": null,
    "function": null,
    "comment": "waypoints_navi.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.cpp",
    "line": 15,
    "function": null,
    "comment": "waypoints_navi.cpp:15:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "waypoints_navi.cpp",
    "line": 19,
    "function": null,
    "comment": "waypoints_navi.cpp:19:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "waypoints_navi.cpp",
    "line": 20,
    "function": null,
    "comment": "waypoints_navi.cpp:20:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "waypoints_navi.cpp",
    "line": 21,
    "function": null,
    "comment": "waypoints_navi.cpp:21:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.cpp",
    "line": 30,
    "function": null,
    "comment": "waypoints_navi.cpp:30:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoints_navi.cpp",
    "line": 35,
    "function": null,
    "comment": "waypoints_navi.cpp:35:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoints_navi.cpp",
    "line": 36,
    "function": null,
    "comment": "waypoints_navi.cpp:36:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoints_navi.cpp",
    "line": 44,
    "function": null,
    "comment": "waypoints_navi.cpp:44:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.cpp",
    "line": 45,
    "function": null,
    "comment": "waypoints_navi.cpp:45:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoints_navi.cpp",
    "line": 48,
    "function": null,
    "comment": "waypoints_navi.cpp:48:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoints_navi.cpp",
    "line": 49,
    "function": null,
    "comment": "waypoints_navi.cpp:49:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoints_navi.cpp",
    "line": 50,
    "function": null,
    "comment": "waypoints_navi.cpp:50:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoints_navi.cpp",
    "line": 51,
    "function": null,
    "comment": "waypoints_navi.cpp:51:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoints_navi.cpp",
    "line": 56,
    "function": null,
    "comment": "waypoints_navi.cpp:56:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.cpp",
    "line": 57,
    "function": null,
    "comment": "waypoints_navi.cpp:57:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoints_navi.cpp",
    "line": 62,
    "function": null,
    "comment": "waypoints_navi.cpp:62:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.cpp",
    "line": 63,
    "function": null,
    "comment": "waypoints_navi.cpp:63:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoints_navi.cpp",
    "line": 65,
    "function": null,
    "comment": "waypoints_navi.cpp:65:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoints_navi.cpp",
    "line": 68,
    "function": null,
    "comment": "waypoints_navi.cpp:68:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.cpp",
    "line": 69,
    "function": null,
    "comment": "waypoints_navi.cpp:69:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.cpp",
    "line": 71,
    "function": null,
    "comment": "waypoints_navi.cpp:71:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.cpp",
    "line": 73,
    "function": null,
    "comment": "waypoints_navi.cpp:73:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "waypoints_navi.cpp",
    "line": 82,
    "function": null,
    "comment": "waypoints_navi.cpp:82:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.cpp",
    "line": 83,
    "function": null,
    "comment": "waypoints_navi.cpp:83:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoints_navi.cpp",
    "line": 84,
    "function": null,
    "comment": "waypoints_navi.cpp:84:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "waypoints_navi.cpp",
    "line": 87,
    "function": null,
    "comment": "waypoints_navi.cpp:87:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.cpp",
    "line": 88,
    "function": null,
    "comment": "waypoints_navi.cpp:88:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.cpp",
    "line": 90,
    "function": null,
    "comment": "waypoints_navi.cpp:90:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoints_navi.cpp",
    "line": 92,
    "function": null,
    "comment": "waypoints_navi.cpp:92:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.cpp",
    "line": 95,
    "function": null,
    "comment": "waypoints_navi.cpp:95:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.cpp",
    "line": 97,
    "function": null,
    "comment": "waypoints_navi.cpp:97:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoints_navi.cpp",
    "line": 104,
    "function": null,
    "comment": "waypoints_navi.cpp:104:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.cpp",
    "line": 109,
    "function": null,
    "comment": "waypoints_navi.cpp:109:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoints_navi.cpp",
    "line": 110,
    "function": null,
    "comment": "waypoints_navi.cpp:110:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.cpp",
    "line": 111,
    "function": null,
    "comment": "waypoints_navi.cpp:111:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.cpp",
    "line": 113,
    "function": null,
    "comment": "waypoints_navi.cpp:113:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoints_navi.cpp",
    "line": 114,
    "function": null,
    "comment": "waypoints_navi.cpp:114:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.cpp",
    "line": 115,
    "function": null,
    "comment": "waypoints_navi.cpp:115:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoints_navi.cpp",
    "line": 123,
    "function": null,
    "comment": "waypoints_navi.cpp:123:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.cpp",
    "line": 129,
    "function": null,
    "comment": "waypoints_navi.cpp:129:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "waypoints_navi.cpp",
    "line": 133,
    "function": null,
    "comment": "waypoints_navi.cpp:133:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.cpp",
    "line": 134,
    "function": null,
    "comment": "waypoints_navi.cpp:134:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "waypoints_navi.cpp",
    "line": 138,
    "function": null,
    "comment": "waypoints_navi.cpp:138:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.cpp",
    "line": 139,
    "function": null,
    "comment": "waypoints_navi.cpp:139:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoints_navi.cpp",
    "line": 140,
    "function": null,
    "comment": "waypoints_navi.cpp:140:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "waypoints_navi.cpp",
    "line": 144,
    "function": null,
    "comment": "waypoints_navi.cpp:144:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.cpp",
    "line": 145,
    "function": null,
    "comment": "waypoints_navi.cpp:145:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "To-do comments should look like '// TODO(my_username): Stuff.'.",
    "file": "waypoints_navi.cpp",
    "line": 146,
    "function": null,
    "comment": "waypoints_navi.cpp:146:  Missing username in TODO; it should look like '// TODO(my_username): Stuff.'  [readability/todo] [2]",
    "tags": ["comments","code-standards","formatting","google-cpp","todo-comment"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.cpp",
    "line": 152,
    "function": null,
    "comment": "waypoints_navi.cpp:152:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.cpp",
    "line": 158,
    "function": null,
    "comment": "waypoints_navi.cpp:158:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoints_navi.cpp",
    "line": 160,
    "function": null,
    "comment": "waypoints_navi.cpp:160:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoints_navi.cpp",
    "line": 165,
    "function": null,
    "comment": "waypoints_navi.cpp:165:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.cpp",
    "line": 168,
    "function": null,
    "comment": "waypoints_navi.cpp:168:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoints_navi.cpp",
    "line": 175,
    "function": null,
    "comment": "waypoints_navi.cpp:175:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.cpp",
    "line": 181,
    "function": null,
    "comment": "waypoints_navi.cpp:181:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoints_navi.cpp",
    "line": 182,
    "function": null,
    "comment": "waypoints_navi.cpp:182:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.cpp",
    "line": 190,
    "function": null,
    "comment": "waypoints_navi.cpp:190:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.cpp",
    "line": 196,
    "function": null,
    "comment": "waypoints_navi.cpp:196:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.cpp",
    "line": 201,
    "function": null,
    "comment": "waypoints_navi.cpp:201:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.cpp",
    "line": 203,
    "function": null,
    "comment": "waypoints_navi.cpp:203:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.cpp",
    "line": 205,
    "function": null,
    "comment": "waypoints_navi.cpp:205:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.cpp",
    "line": 211,
    "function": null,
    "comment": "waypoints_navi.cpp:211:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoints_navi.cpp",
    "line": 215,
    "function": null,
    "comment": "waypoints_navi.cpp:215:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoints_navi.cpp",
    "line": 218,
    "function": null,
    "comment": "waypoints_navi.cpp:218:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "waypoints_navi.cpp",
    "line": 226,
    "function": null,
    "comment": "waypoints_navi.cpp:226:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.cpp",
    "line": 227,
    "function": null,
    "comment": "waypoints_navi.cpp:227:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoints_navi.cpp",
    "line": 228,
    "function": null,
    "comment": "waypoints_navi.cpp:228:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoints_navi.cpp",
    "line": 233,
    "function": null,
    "comment": "waypoints_navi.cpp:233:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "To-do comments should look like '// TODO(my_username): Stuff.'.",
    "file": "waypoints_navi.cpp",
    "line": 233,
    "function": null,
    "comment": "waypoints_navi.cpp:233:  Missing username in TODO; it should look like '// TODO(my_username): Stuff.'  [readability/todo] [2]",
    "tags": ["comments","code-standards","formatting","google-cpp","todo-comment"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoints_navi.cpp",
    "line": 234,
    "function": null,
    "comment": "waypoints_navi.cpp:234:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoints_navi.cpp",
    "line": 236,
    "function": null,
    "comment": "waypoints_navi.cpp:236:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoints_navi.cpp",
    "line": 239,
    "function": null,
    "comment": "waypoints_navi.cpp:239:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoints_navi.cpp",
    "line": 246,
    "function": null,
    "comment": "waypoints_navi.cpp:246:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "waypoints_navi.cpp",
    "line": 249,
    "function": null,
    "comment": "waypoints_navi.cpp:249:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.cpp",
    "line": 250,
    "function": null,
    "comment": "waypoints_navi.cpp:250:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.cpp",
    "line": 258,
    "function": null,
    "comment": "waypoints_navi.cpp:258:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoints_navi.cpp",
    "line": 260,
    "function": null,
    "comment": "waypoints_navi.cpp:260:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.cpp",
    "line": 261,
    "function": null,
    "comment": "waypoints_navi.cpp:261:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoints_navi.cpp",
    "line": 262,
    "function": null,
    "comment": "waypoints_navi.cpp:262:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.cpp",
    "line": 265,
    "function": null,
    "comment": "waypoints_navi.cpp:265:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "waypoints_navi.cpp",
    "line": 270,
    "function": null,
    "comment": "waypoints_navi.cpp:270:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.cpp",
    "line": 271,
    "function": null,
    "comment": "waypoints_navi.cpp:271:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoints_navi.cpp",
    "line": 276,
    "function": null,
    "comment": "waypoints_navi.cpp:276:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoints_navi.cpp",
    "line": 277,
    "function": null,
    "comment": "waypoints_navi.cpp:277:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.cpp",
    "line": 279,
    "function": null,
    "comment": "waypoints_navi.cpp:279:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.cpp",
    "line": 282,
    "function": null,
    "comment": "waypoints_navi.cpp:282:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoints_navi.cpp",
    "line": 283,
    "function": null,
    "comment": "waypoints_navi.cpp:283:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.cpp",
    "line": 286,
    "function": null,
    "comment": "waypoints_navi.cpp:286:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoints_navi.cpp",
    "line": 287,
    "function": null,
    "comment": "waypoints_navi.cpp:287:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.cpp",
    "line": 294,
    "function": null,
    "comment": "waypoints_navi.cpp:294:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoints_navi.cpp",
    "line": 297,
    "function": null,
    "comment": "waypoints_navi.cpp:297:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "waypoints_navi.cpp",
    "line": 300,
    "function": null,
    "comment": "waypoints_navi.cpp:300:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.cpp",
    "line": 301,
    "function": null,
    "comment": "waypoints_navi.cpp:301:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "waypoints_navi.cpp",
    "line": 305,
    "function": null,
    "comment": "waypoints_navi.cpp:305:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.cpp",
    "line": 306,
    "function": null,
    "comment": "waypoints_navi.cpp:306:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoints_navi.cpp",
    "line": 310,
    "function": null,
    "comment": "waypoints_navi.cpp:310:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "waypoints_navi.cpp",
    "line": 310,
    "function": null,
    "comment": "waypoints_navi.cpp:310:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "waypoints_navi.cpp",
    "line": 310,
    "function": null,
    "comment": "waypoints_navi.cpp:310:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.cpp",
    "line": 311,
    "function": null,
    "comment": "waypoints_navi.cpp:311:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.cpp",
    "line": 313,
    "function": null,
    "comment": "waypoints_navi.cpp:313:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoints_navi.cpp",
    "line": 315,
    "function": null,
    "comment": "waypoints_navi.cpp:315:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.cpp",
    "line": 318,
    "function": null,
    "comment": "waypoints_navi.cpp:318:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "waypoints_navi.cpp",
    "line": 323,
    "function": null,
    "comment": "waypoints_navi.cpp:323:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.cpp",
    "line": 324,
    "function": null,
    "comment": "waypoints_navi.cpp:324:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "waypoints_navi.cpp",
    "line": 329,
    "function": null,
    "comment": "waypoints_navi.cpp:329:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.cpp",
    "line": 330,
    "function": null,
    "comment": "waypoints_navi.cpp:330:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoints_navi.cpp",
    "line": 331,
    "function": null,
    "comment": "waypoints_navi.cpp:331:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.cpp",
    "line": 333,
    "function": null,
    "comment": "waypoints_navi.cpp:333:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "waypoints_navi.cpp",
    "line": 338,
    "function": null,
    "comment": "waypoints_navi.cpp:338:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.cpp",
    "line": 339,
    "function": null,
    "comment": "waypoints_navi.cpp:339:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "waypoints_navi.cpp",
    "line": 346,
    "function": null,
    "comment": "waypoints_navi.cpp:346:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "waypoints_navi.cpp",
    "line": 346,
    "function": null,
    "comment": "waypoints_navi.cpp:346:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.cpp",
    "line": 347,
    "function": null,
    "comment": "waypoints_navi.cpp:347:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "waypoints_navi.cpp",
    "line": 353,
    "function": null,
    "comment": "waypoints_navi.cpp:353:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "waypoints_navi.cpp",
    "line": 353,
    "function": null,
    "comment": "waypoints_navi.cpp:353:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.cpp",
    "line": 354,
    "function": null,
    "comment": "waypoints_navi.cpp:354:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.cpp",
    "line": 356,
    "function": null,
    "comment": "waypoints_navi.cpp:356:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoints_navi.cpp",
    "line": 364,
    "function": null,
    "comment": "waypoints_navi.cpp:364:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.cpp",
    "line": 365,
    "function": null,
    "comment": "waypoints_navi.cpp:365:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoints_navi.cpp",
    "line": 369,
    "function": null,
    "comment": "waypoints_navi.cpp:369:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "To-do comments should look like '// TODO(my_username): Stuff.'.",
    "file": "waypoints_navi.cpp",
    "line": 369,
    "function": null,
    "comment": "waypoints_navi.cpp:369:  Missing username in TODO; it should look like '// TODO(my_username): Stuff.'  [readability/todo] [2]",
    "tags": ["comments","code-standards","formatting","google-cpp","todo-comment"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "waypoints_navi.cpp",
    "line": 372,
    "function": null,
    "comment": "waypoints_navi.cpp:372:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.cpp",
    "line": 373,
    "function": null,
    "comment": "waypoints_navi.cpp:373:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.cpp",
    "line": 378,
    "function": null,
    "comment": "waypoints_navi.cpp:378:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.cpp",
    "line": 381,
    "function": null,
    "comment": "waypoints_navi.cpp:381:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "waypoints_navi.cpp",
    "line": 386,
    "function": null,
    "comment": "waypoints_navi.cpp:386:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.cpp",
    "line": 387,
    "function": null,
    "comment": "waypoints_navi.cpp:387:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "waypoints_navi.cpp",
    "line": 392,
    "function": null,
    "comment": "waypoints_navi.cpp:392:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.cpp",
    "line": 393,
    "function": null,
    "comment": "waypoints_navi.cpp:393:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "waypoints_navi.cpp",
    "line": 398,
    "function": null,
    "comment": "waypoints_navi.cpp:398:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.cpp",
    "line": 399,
    "function": null,
    "comment": "waypoints_navi.cpp:399:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "waypoints_navi.cpp",
    "line": 404,
    "function": null,
    "comment": "waypoints_navi.cpp:404:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.cpp",
    "line": 405,
    "function": null,
    "comment": "waypoints_navi.cpp:405:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "waypoints_navi.cpp",
    "line": 410,
    "function": null,
    "comment": "waypoints_navi.cpp:410:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.cpp",
    "line": 411,
    "function": null,
    "comment": "waypoints_navi.cpp:411:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "waypoints_navi.cpp",
    "line": 416,
    "function": null,
    "comment": "waypoints_navi.cpp:416:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "waypoints_navi.cpp",
    "line": 417,
    "function": null,
    "comment": "waypoints_navi.cpp:417:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "waypoints_navi.cpp",
    "line": 422,
    "function": null,
    "comment": "waypoints_navi.cpp:422:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "waypoints_navi.cpp",
    "line": 38,
    "function": null,
    "comment": "waypoints_navi.cpp:38:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "main.cpp",
    "line": null,
    "function": null,
    "comment": "main.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "main.cpp",
    "line": 5,
    "function": null,
    "comment": "main.cpp:5:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "main.cpp",
    "line": 10,
    "function": null,
    "comment": "main.cpp:10:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "main.cpp",
    "line": 4,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "waypoints_navi.cpp",
    "line": 94,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "waypoints_navi.cpp",
    "line": 110,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "waypoints_navi.cpp",
    "line": 114,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "waypoints_navi.cpp",
    "line": 364,
    "function": null,
    "comment": "The function 'equals' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "Maximum coupling between objects: 5",
    "file": "waypoints_navi.hpp",
    "line": null,
    "function": null,
    "comment": "CBO is greater than 5, WaypointsGoalNode, 14",
    "tags": ["metrics","nasa-satc","ros","coupling"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "waypoints_navi.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "waypoints_navi.cpp",
    "line": 68,
    "function": "navCtrlCB",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "waypoints_navi.cpp",
    "line": 189,
    "function": "spin",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 15",
    "file": "waypoints_navi.cpp",
    "line": 189,
    "function": "spin",
    "comment": "CC is greater than 15",
    "tags": ["metrics","ros","cyclomatic-complexity","kth"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "main.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  }
]