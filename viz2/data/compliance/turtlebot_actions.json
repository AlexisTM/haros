[
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "detect_calibration_pattern.h",
    "line": null,
    "function": null,
    "comment": "detect_calibration_pattern.h:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_.",
    "file": "detect_calibration_pattern.h",
    "line": 1,
    "function": null,
    "comment": "detect_calibration_pattern.h:1:  #ifndef header guard has wrong style, please use: _HOME_ANDRE_ROS_HAROS_ANALYSER_DETECT_CALIBRATION_PATTERN_H_  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the symbol name should be <PACKAGE>_<PATH>_<FILE>_H.",
    "file": "detect_calibration_pattern.h",
    "line": 1,
    "function": null,
    "comment": "detect_calibration_pattern.h:1:  #ifndef header guard has wrong style, please use: DETECT_CALIBRATION_PATTERN_H  [build/header_guard] [5]",
    "tags": ["ros","code-standards","ros-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the guard's end should be '#endif  // <PROJECT>_<PATH>_<FILE>_H_' or '#endif  /* <PROJECT>_<PATH>_<FILE>_H_ */'.",
    "file": "detect_calibration_pattern.h",
    "line": 59,
    "function": null,
    "comment": "detect_calibration_pattern.h:59:  #endif line should be '#endif  // _HOME_ANDRE_ROS_HAROS_ANALYSER_DETECT_CALIBRATION_PATTERN_H_'  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "detect_calibration_pattern.h",
    "line": 5,
    "function": null,
    "comment": "detect_calibration_pattern.h:5:  Include 'opencv2/calib3d/calib3d.hpp' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not include the same file twice.",
    "file": "detect_calibration_pattern.h",
    "line": 6,
    "function": null,
    "comment": "detect_calibration_pattern.h:6:  'opencv2/calib3d/calib3d.hpp' already included at detect_calibration_pattern.h:5  [build/include] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "detect_calibration_pattern.h",
    "line": 11,
    "function": null,
    "comment": "detect_calibration_pattern.h:11:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "detect_calibration_pattern.h",
    "line": 17,
    "function": null,
    "comment": "detect_calibration_pattern.h:17:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "detect_calibration_pattern.h",
    "line": 20,
    "function": null,
    "comment": "detect_calibration_pattern.h:20:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "detect_calibration_pattern.h",
    "line": 27,
    "function": null,
    "comment": "detect_calibration_pattern.h:27:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "detect_calibration_pattern.h",
    "line": 27,
    "function": null,
    "comment": "detect_calibration_pattern.h:27:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& tvec  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "detect_calibration_pattern.h",
    "line": 27,
    "function": null,
    "comment": "detect_calibration_pattern.h:27:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& R  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "detect_calibration_pattern.h",
    "line": 27,
    "function": null,
    "comment": "detect_calibration_pattern.h:27:  Is this a non-const reference? If so, make const or use a pointer: Eigen::Vector3f& translation  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "detect_calibration_pattern.h",
    "line": 27,
    "function": null,
    "comment": "detect_calibration_pattern.h:27:  Is this a non-const reference? If so, make const or use a pointer: Eigen::Quaternionf& orientation  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "detect_calibration_pattern.h",
    "line": 30,
    "function": null,
    "comment": "detect_calibration_pattern.h:30:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "detect_calibration_pattern.h",
    "line": 31,
    "function": null,
    "comment": "detect_calibration_pattern.h:31:  public: should be indented +1 space inside class PatternDetector  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "detect_calibration_pattern.h",
    "line": 33,
    "function": null,
    "comment": "detect_calibration_pattern.h:33:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "detect_calibration_pattern.h",
    "line": 38,
    "function": null,
    "comment": "detect_calibration_pattern.h:38:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "detect_calibration_pattern.h",
    "line": 39,
    "function": null,
    "comment": "detect_calibration_pattern.h:39:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "detect_calibration_pattern.h",
    "line": 39,
    "function": null,
    "comment": "detect_calibration_pattern.h:39:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& inm  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "detect_calibration_pattern.h",
    "line": 39,
    "function": null,
    "comment": "detect_calibration_pattern.h:39:  Is this a non-const reference? If so, make const or use a pointer: Eigen::Vector3f& translation  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "detect_calibration_pattern.h",
    "line": 39,
    "function": null,
    "comment": "detect_calibration_pattern.h:39:  Is this a non-const reference? If so, make const or use a pointer: Eigen::Quaternionf& orientation  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "detect_calibration_pattern.h",
    "line": 40,
    "function": null,
    "comment": "detect_calibration_pattern.h:40:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "detect_calibration_pattern.h",
    "line": 42,
    "function": null,
    "comment": "detect_calibration_pattern.h:42:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "detect_calibration_pattern.h",
    "line": 43,
    "function": null,
    "comment": "detect_calibration_pattern.h:43:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "detect_calibration_pattern.h",
    "line": 46,
    "function": null,
    "comment": "detect_calibration_pattern.h:46:  public: should be indented +1 space inside class PatternDetector  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "detect_calibration_pattern.h",
    "line": 50,
    "function": null,
    "comment": "detect_calibration_pattern.h:50:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "detect_calibration_pattern.h",
    "line": 25,
    "function": null,
    "comment": "detect_calibration_pattern.h:25:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "turtlebot_move_action_server.cpp",
    "line": 33,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:33:  Include 'actionlib/server/simple_action_server.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "turtlebot_move_action_server.cpp",
    "line": 35,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:35:  Include 'geometry_msgs/Twist.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 40,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:40:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 41,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:41:  private: should be indented +1 space inside class MoveActionServer  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 42,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:42:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 42,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:42:  Do not leave a blank line after 'private:'  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 50,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:50:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 54,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:54:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 60,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:60:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 61,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:61:  public: should be indented +1 space inside class MoveActionServer  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 62,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:62:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 62,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:62:  Single-parameter constructors should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 64,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:64:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 70,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:70:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 71,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:71:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 73,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:73:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 74,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:74:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 76,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:76:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 81,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:81:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 85,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:85:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 88,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:88:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 90,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:90:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 92,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:92:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 92,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:92:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 96,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:96:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 104,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:104:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 111,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:111:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 115,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:115:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 116,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:116:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 119,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:119:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 121,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:121:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 122,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:122:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 123,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:123:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 125,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:125:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 126,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:126:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 127,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:127:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 131,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:131:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 132,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:132:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 135,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:135:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 136,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:136:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 138,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:138:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 141,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:141:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 144,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:144:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 148,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:148:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 149,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:149:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 151,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:151:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 152,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:152:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 154,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:154:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 155,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:155:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 159,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:159:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 160,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:160:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 163,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:163:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 164,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:164:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 167,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:167:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 173,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:173:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 174,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:174:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 187,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:187:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 191,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:191:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 192,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:192:  Missing space before ( in while(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 193,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:193:  Missing space before ( in while(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 195,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:195:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 200,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:200:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 201,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:201:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 202,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:202:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 205,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:205:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 206,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:206:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 210,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:210:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 211,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:211:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 214,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:214:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 215,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:215:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 217,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:217:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 222,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:222:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 223,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:223:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 224,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:224:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 225,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:225:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 229,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:229:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 230,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:230:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 233,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:233:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 235,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:235:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 236,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:236:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 240,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:240:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 241,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:241:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 244,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:244:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 246,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:246:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 249,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:249:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 254,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:254:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 257,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:257:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 257,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:257:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 266,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:266:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 270,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:270:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 67,
    "function": null,
    "comment": "turtlebot_move_action_server.cpp:67:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "detect_calibration_pattern.cpp",
    "line": null,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "detect_calibration_pattern.cpp",
    "line": 4,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:4:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "detect_calibration_pattern.cpp",
    "line": 6,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:6:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "detect_calibration_pattern.cpp",
    "line": 9,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:9:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "detect_calibration_pattern.cpp",
    "line": 11,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:11:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "detect_calibration_pattern.cpp",
    "line": 12,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:12:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "detect_calibration_pattern.cpp",
    "line": 22,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:22:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "detect_calibration_pattern.cpp",
    "line": 25,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:25:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "detect_calibration_pattern.cpp",
    "line": 31,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:31:  Using deprecated casting style.  Use static_cast<float>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "detect_calibration_pattern.cpp",
    "line": 32,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:32:  Using deprecated casting style.  Use static_cast<float>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "detect_calibration_pattern.cpp",
    "line": 38,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:38:  Using deprecated casting style.  Use static_cast<float>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "detect_calibration_pattern.cpp",
    "line": 39,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:39:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "detect_calibration_pattern.cpp",
    "line": 39,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:39:  Using deprecated casting style.  Use static_cast<float>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "detect_calibration_pattern.cpp",
    "line": 49,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:49:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "detect_calibration_pattern.cpp",
    "line": 50,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:50:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "detect_calibration_pattern.cpp",
    "line": 53,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:53:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "detect_calibration_pattern.cpp",
    "line": 55,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:55:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "detect_calibration_pattern.cpp",
    "line": 57,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:57:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "detect_calibration_pattern.cpp",
    "line": 59,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:59:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "detect_calibration_pattern.cpp",
    "line": 62,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:62:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "detect_calibration_pattern.cpp",
    "line": 65,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:65:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "detect_calibration_pattern.cpp",
    "line": 68,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:68:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "detect_calibration_pattern.cpp",
    "line": 72,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:72:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "detect_calibration_pattern.cpp",
    "line": 73,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:73:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "detect_calibration_pattern.cpp",
    "line": 76,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:76:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "detect_calibration_pattern.cpp",
    "line": 77,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:77:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "detect_calibration_pattern.cpp",
    "line": 77,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:77:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "detect_calibration_pattern.cpp",
    "line": 78,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:78:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "detect_calibration_pattern.cpp",
    "line": 80,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:80:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "detect_calibration_pattern.cpp",
    "line": 83,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:83:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "detect_calibration_pattern.cpp",
    "line": 83,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:83:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "detect_calibration_pattern.cpp",
    "line": 83,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:83:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "detect_calibration_pattern.cpp",
    "line": 84,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:84:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "detect_calibration_pattern.cpp",
    "line": 85,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:85:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "detect_calibration_pattern.cpp",
    "line": 86,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:86:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "detect_calibration_pattern.cpp",
    "line": 89,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:89:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "detect_calibration_pattern.cpp",
    "line": 93,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:93:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "detect_calibration_pattern.cpp",
    "line": 93,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:93:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& tvec  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "detect_calibration_pattern.cpp",
    "line": 93,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:93:  Is this a non-const reference? If so, make const or use a pointer: cv::Mat& R  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "detect_calibration_pattern.cpp",
    "line": 93,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:93:  Is this a non-const reference? If so, make const or use a pointer: Eigen::Vector3f& translation  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "detect_calibration_pattern.cpp",
    "line": 93,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:93:  Is this a non-const reference? If so, make const or use a pointer: Eigen::Quaternionf& orientation  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "detect_calibration_pattern.cpp",
    "line": 94,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:94:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "detect_calibration_pattern.cpp",
    "line": 95,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:95:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "detect_calibration_pattern.cpp",
    "line": 97,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:97:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "detect_calibration_pattern.cpp",
    "line": 97,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:97:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "detect_calibration_pattern.cpp",
    "line": 98,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:98:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "detect_calibration_pattern.cpp",
    "line": 100,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:100:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "detect_calibration_pattern.cpp",
    "line": 101,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:101:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "detect_calibration_pattern.cpp",
    "line": 102,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:102:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "detect_calibration_pattern.cpp",
    "line": 103,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:103:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "detect_calibration_pattern.cpp",
    "line": 105,
    "function": null,
    "comment": "detect_calibration_pattern.cpp:105:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "find_fiducial_pose.cpp",
    "line": 38,
    "function": null,
    "comment": "find_fiducial_pose.cpp:38:  Include 'actionlib/server/simple_action_server.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "find_fiducial_pose.cpp",
    "line": 40,
    "function": null,
    "comment": "find_fiducial_pose.cpp:40:  Include 'image_geometry/pinhole_camera_model.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "find_fiducial_pose.cpp",
    "line": 42,
    "function": null,
    "comment": "find_fiducial_pose.cpp:42:  Include 'opencv2/core/core.hpp' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "find_fiducial_pose.cpp",
    "line": 43,
    "function": null,
    "comment": "find_fiducial_pose.cpp:43:  Include 'cv_bridge/cv_bridge.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "find_fiducial_pose.cpp",
    "line": 50,
    "function": null,
    "comment": "find_fiducial_pose.cpp:50:  Include 'turtlebot_actions/detect_calibration_pattern.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "find_fiducial_pose.cpp",
    "line": 53,
    "function": null,
    "comment": "find_fiducial_pose.cpp:53:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "find_fiducial_pose.cpp",
    "line": 54,
    "function": null,
    "comment": "find_fiducial_pose.cpp:54:  public: should be indented +1 space inside class FindFiducialAction  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "find_fiducial_pose.cpp",
    "line": 55,
    "function": null,
    "comment": "find_fiducial_pose.cpp:55:  Do not leave a blank line after 'public:'  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "find_fiducial_pose.cpp",
    "line": 56,
    "function": null,
    "comment": "find_fiducial_pose.cpp:56:  Single-parameter constructors should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "find_fiducial_pose.cpp",
    "line": 60,
    "function": null,
    "comment": "find_fiducial_pose.cpp:60:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "find_fiducial_pose.cpp",
    "line": 61,
    "function": null,
    "comment": "find_fiducial_pose.cpp:61:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "find_fiducial_pose.cpp",
    "line": 61,
    "function": null,
    "comment": "find_fiducial_pose.cpp:61:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "find_fiducial_pose.cpp",
    "line": 63,
    "function": null,
    "comment": "find_fiducial_pose.cpp:63:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "find_fiducial_pose.cpp",
    "line": 64,
    "function": null,
    "comment": "find_fiducial_pose.cpp:64:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "find_fiducial_pose.cpp",
    "line": 68,
    "function": null,
    "comment": "find_fiducial_pose.cpp:68:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "find_fiducial_pose.cpp",
    "line": 72,
    "function": null,
    "comment": "find_fiducial_pose.cpp:72:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "find_fiducial_pose.cpp",
    "line": 75,
    "function": null,
    "comment": "find_fiducial_pose.cpp:75:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "find_fiducial_pose.cpp",
    "line": 78,
    "function": null,
    "comment": "find_fiducial_pose.cpp:78:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "find_fiducial_pose.cpp",
    "line": 79,
    "function": null,
    "comment": "find_fiducial_pose.cpp:79:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "find_fiducial_pose.cpp",
    "line": 82,
    "function": null,
    "comment": "find_fiducial_pose.cpp:82:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "find_fiducial_pose.cpp",
    "line": 84,
    "function": null,
    "comment": "find_fiducial_pose.cpp:84:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "find_fiducial_pose.cpp",
    "line": 86,
    "function": null,
    "comment": "find_fiducial_pose.cpp:86:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "find_fiducial_pose.cpp",
    "line": 86,
    "function": null,
    "comment": "find_fiducial_pose.cpp:86:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "find_fiducial_pose.cpp",
    "line": 90,
    "function": null,
    "comment": "find_fiducial_pose.cpp:90:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "find_fiducial_pose.cpp",
    "line": 91,
    "function": null,
    "comment": "find_fiducial_pose.cpp:91:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "find_fiducial_pose.cpp",
    "line": 92,
    "function": null,
    "comment": "find_fiducial_pose.cpp:92:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "find_fiducial_pose.cpp",
    "line": 92,
    "function": null,
    "comment": "find_fiducial_pose.cpp:92:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "find_fiducial_pose.cpp",
    "line": 94,
    "function": null,
    "comment": "find_fiducial_pose.cpp:94:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "find_fiducial_pose.cpp",
    "line": 94,
    "function": null,
    "comment": "find_fiducial_pose.cpp:94:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "find_fiducial_pose.cpp",
    "line": 95,
    "function": null,
    "comment": "find_fiducial_pose.cpp:95:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "find_fiducial_pose.cpp",
    "line": 101,
    "function": null,
    "comment": "find_fiducial_pose.cpp:101:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "find_fiducial_pose.cpp",
    "line": 103,
    "function": null,
    "comment": "find_fiducial_pose.cpp:103:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "find_fiducial_pose.cpp",
    "line": 109,
    "function": null,
    "comment": "find_fiducial_pose.cpp:109:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "find_fiducial_pose.cpp",
    "line": 110,
    "function": null,
    "comment": "find_fiducial_pose.cpp:110:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "find_fiducial_pose.cpp",
    "line": 111,
    "function": null,
    "comment": "find_fiducial_pose.cpp:111:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "find_fiducial_pose.cpp",
    "line": 119,
    "function": null,
    "comment": "find_fiducial_pose.cpp:119:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "find_fiducial_pose.cpp",
    "line": 123,
    "function": null,
    "comment": "find_fiducial_pose.cpp:123:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "find_fiducial_pose.cpp",
    "line": 131,
    "function": null,
    "comment": "find_fiducial_pose.cpp:131:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "find_fiducial_pose.cpp",
    "line": 137,
    "function": null,
    "comment": "find_fiducial_pose.cpp:137:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "find_fiducial_pose.cpp",
    "line": 140,
    "function": null,
    "comment": "find_fiducial_pose.cpp:140:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "find_fiducial_pose.cpp",
    "line": 140,
    "function": null,
    "comment": "find_fiducial_pose.cpp:140:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "find_fiducial_pose.cpp",
    "line": 141,
    "function": null,
    "comment": "find_fiducial_pose.cpp:141:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "find_fiducial_pose.cpp",
    "line": 141,
    "function": null,
    "comment": "find_fiducial_pose.cpp:141:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "find_fiducial_pose.cpp",
    "line": 143,
    "function": null,
    "comment": "find_fiducial_pose.cpp:143:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "find_fiducial_pose.cpp",
    "line": 149,
    "function": null,
    "comment": "find_fiducial_pose.cpp:149:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "find_fiducial_pose.cpp",
    "line": 156,
    "function": null,
    "comment": "find_fiducial_pose.cpp:156:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "find_fiducial_pose.cpp",
    "line": 159,
    "function": null,
    "comment": "find_fiducial_pose.cpp:159:  protected: should be indented +1 space inside class FindFiducialAction  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "find_fiducial_pose.cpp",
    "line": 160,
    "function": null,
    "comment": "find_fiducial_pose.cpp:160:  Do not leave a blank line after 'protected:'  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "find_fiducial_pose.cpp",
    "line": 176,
    "function": null,
    "comment": "find_fiducial_pose.cpp:176:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "find_fiducial_pose.cpp",
    "line": 180,
    "function": null,
    "comment": "find_fiducial_pose.cpp:180:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "find_fiducial_pose.cpp",
    "line": 185,
    "function": null,
    "comment": "find_fiducial_pose.cpp:185:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "find_fiducial_pose.cpp",
    "line": 163,
    "function": null,
    "comment": "find_fiducial_pose.cpp:163:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Non-empty case blocks must not fall through to the next case.",
    "file": "detect_calibration_pattern.cpp",
    "line": 26,
    "function": null,
    "comment": "Non-empty case without a break statement.",
    "tags": ["hicpp","code-standards","switch","case","fall-through"]
  },
  {
    "rule": "Non-empty case blocks must not fall through to the next case.",
    "file": "detect_calibration_pattern.cpp",
    "line": 34,
    "function": null,
    "comment": "Non-empty case without a break statement.",
    "tags": ["hicpp","code-standards","switch","case","fall-through"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "detect_calibration_pattern.cpp",
    "line": 28,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "detect_calibration_pattern.cpp",
    "line": 29,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "detect_calibration_pattern.cpp",
    "line": 35,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "detect_calibration_pattern.cpp",
    "line": 36,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "detect_calibration_pattern.cpp",
    "line": 49,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "find_fiducial_pose.cpp",
    "line": 184,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 269,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not rely on the sequence of evaluation within an expression.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 139,
    "function": null,
    "comment": "Found assignment as a subexpression.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","evaluation-order","expressions"]
  },
  {
    "rule": "Do not rely on the sequence of evaluation within an expression.",
    "file": "turtlebot_move_action_server.cpp",
    "line": 218,
    "function": null,
    "comment": "Found assignment as a subexpression.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","evaluation-order","expressions"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "test_move.py",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "test_fiducial.py",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "detect_calibration_pattern.h",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Maximum coupling between objects: 5",
    "file": "detect_calibration_pattern.h",
    "line": null,
    "function": null,
    "comment": "CBO is greater than 5, PatternDetector, 6",
    "tags": ["metrics","nasa-satc","ros","coupling"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "turtlebot_move_action_server.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum coupling between objects: 5",
    "file": "turtlebot_move_action_server.cpp",
    "line": null,
    "function": null,
    "comment": "CBO is greater than 5, MoveActionServer, 9",
    "tags": ["metrics","nasa-satc","ros","coupling"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "turtlebot_move_action_server.cpp",
    "line": 110,
    "function": "driveForwardOdom",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "turtlebot_move_action_server.cpp",
    "line": 186,
    "function": "turnOdom",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "detect_calibration_pattern.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Maximum coupling between objects: 5",
    "file": "detect_calibration_pattern.cpp",
    "line": null,
    "function": null,
    "comment": "CBO is greater than 5, PatternDetector, 7",
    "tags": ["metrics","nasa-satc","ros","coupling"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "find_fiducial_pose.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum coupling between objects: 5",
    "file": "find_fiducial_pose.cpp",
    "line": null,
    "function": null,
    "comment": "CBO is greater than 5, FindFiducialAction, 16",
    "tags": ["metrics","nasa-satc","ros","coupling"]
  }
]