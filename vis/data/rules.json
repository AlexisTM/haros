[
  {
    "id": 1,
    "description": "Minimum lines of comments: 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "id": 2,
    "description": "Maximum lines of comments: 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "id": 3,
    "description": "Maximum lines of comments: 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "id": 5,
    "description": "Maximum cyclomatic complexity: 10",
    "tags": ["metrics","nasa-satc","his","cyclomatic-complexity"]
  },
  {
    "id": 6,
    "description": "Maximum cyclomatic complexity: 15",
    "tags": ["metrics","ros","cyclomatic-complexity","kth"]
  },
  {
    "id": 8,
    "description": "Maximum executable lines: 50",
    "tags": ["metrics","nasa-satc","his","executable-lines"]
  },
  {
    "id": 9,
    "description": "Maximum executable lines: 70",
    "tags": ["metrics","ros","kth","executable-lines"]
  },
  {
    "id": 11,
    "description": "Maximum function calls: 7",
    "tags": ["metrics","his","function-calls"]
  },
  {
    "id": 12,
    "description": "Maximum function calls: 10",
    "tags": ["metrics","ros","kth","function-calls"]
  },
  {
    "id": 13,
    "description": "Maximum nesting of control structures: 4",
    "tags": ["metrics","his","nesting-control"]
  },
  {
    "id": 14,
    "description": "Maximum nesting of control structures: 5",
    "tags": ["metrics","ros","kth","nesting-control"]
  },
  {
    "id": 16,
    "description": "Maximum estimated static paths: 80",
    "tags": ["metrics","his","static-path"]
  },
  {
    "id": 17,
    "description": "Maximum estimated static paths: 250",
    "tags": ["metrics","ros","kth","static-path"]
  },
  {
    "id": 18,
    "description": "Maximum coupling between objects: 5",
    "tags": ["metrics","nasa-satc","ros","coupling"]
  },
  {
    "id": 19,
    "description": "Maximum immediate children: 10",
    "tags": ["metrics","uai","ros","immediate-children"]
  },
  {
    "id": 20,
    "description": "Minimum weighted methods per class: 1",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "id": 21,
    "description": "Maximum weighted methods per class: 50",
    "tags": ["metrics","uai","weighted-methods"]
  },
  {
    "id": 22,
    "description": "Maximum weighted methods per class: 100",
    "tags": ["metrics","nasa-satc","ros","weighted-methods"]
  },
  {
    "id": 23,
    "description": "Deepest level of inheritance: 5",
    "tags": ["metrics","nasa-satc","uai","ros","inheritance-level"]
  },
  {
    "id": 24,
    "description": "Minimum available methods per class: 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "id": 25,
    "description": "Maximum available methods per class: 20",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "id": 20000,
    "description": "Avoid using thread-unsafe functions, when thread-safe variants are available.",
    "tags": ["code-standards","google-cpp","multi-threading","thread-safety"]
  },
  {
    "id": 10300,
    "description": "Do not use the invalid increment form *count++.",
    "tags": ["code-standards","google-cpp","invalid-code","increment","pointer"]
  },
  {
    "id": 10301,
    "description": "Storage class should come before the type.",
    "tags": ["code-standards","google-cpp","invalid-code","storage-class"]
  },
  {
    "id": 10302,
    "description": "Inner-style forward declarations are invalid.",
    "tags": ["code-standards","google-cpp","invalid-code","forward-declaration"]
  },
  {
    "id": 10303,
    "description": "Do not use non-standard or deprecated operators (e.g. >? and <?).",
    "tags": ["code-standards","google-cpp","invalid-code","deprecation","operators"]
  },
  {
    "id": 10304,
    "description": "Don't use a semicolon to denote an empty statement. Use {} instead.",
    "tags": ["code-standards","formatting","google-cpp","semicolon","empty-statement","empty-block"]
  },
  {
    "id": 10305,
    "description": "Do not use RValue references.",
    "tags": ["code-standards","google-cpp","invalid-code","rvalue-reference"]
  },
  {
    "id": 10306,
    "description": "Do not use meaningless empty statements.",
    "tags": ["code-standards","google-cpp","empty-statement","ambiguous-code"]
  },
  {
    "id": 10307,
    "description": "To check for equality, use CHECK_EQ(a, b) instead of CHECK(a == b).",
    "tags": ["code-standards","google-cpp","macros","equality"]
  },
  {
    "id": 10308,
    "description": "Do not use alternative tokens instead of operators (e.g. 'and', 'or').",
    "tags": ["code-standards","google-cpp","operators","tokens","alternative-tokens"]
  },
  {
    "id": 10309,
    "description": "Do not include the same file twice.",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "id": 10310,
    "description": "Do not include non-header files from other packages.",
    "tags": ["code-standards","google-cpp","include","preprocessor","implementation-files"]
  },
  {
    "id": 10311,
    "description": "Do not use the verboten C basic types.",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "id": 10312,
    "description": "Do not use the unary operator&.",
    "tags": ["code-standards","google-cpp","operators","overload"]
  },
  {
    "id": 10313,
    "description": "Avoid using variables as format string arguments. Use 'printf('%s', var)' instead.",
    "tags": ["code-standards","formatting","google-cpp","strings","potential-bugs"]
  },
  {
    "id": 10314,
    "description": "Do not use namespace using-directives. Use using-declarations instead.",
    "tags": ["code-standards","google-cpp","namespace","using-directives","using-declarations"]
  },
  {
    "id": 10315,
    "description": "Do not use variable-length arrays.",
    "tags": ["code-standards","google-cpp","arrays","variables","constants"]
  },
  {
    "id": 10316,
    "description": "Do not use unnamed namespaces in header files.",
    "tags": ["code-standards","google-cpp","namespace","headers","unnamed-namespace"]
  },
  {
    "id": 10317,
    "description": "Use C-style strings for static and global string constants.",
    "tags": ["code-standards","google-cpp","strings","constants"]
  },
  {
    "id": 10318,
    "description": "Avoid using literals as the second argument for snprintf.",
    "tags": ["code-standards","google-cpp","potential-bugs","literals"]
  },
  {
    "id": 10319,
    "description": "Avoid string printing C functions (sprintf, strcpy, strcat). Use snprintf instead.",
    "tags": ["code-standards","google-cpp","strings","deprecation","library"]
  },
  {
    "id": 10320,
    "description": "Avoid non-const reference parameters. Use const or pointers.",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "id": 10321,
    "description": "Don't use deprecated casting styles.",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "id": 10322,
    "description": "Avoid using dangerous addresses, such as addresses from casts, or addresses dereferenced from casts.",
    "tags": ["code-standards","google-cpp","potential-bugs","casting","addresses"]
  },
  {
    "id": 10323,
    "description": "Either omit template arguments from make_pair, or use pair directly, or construct a pair directly.",
    "tags": ["code-standards","google-cpp","c++11","compatibility","templates","pair"]
  },
  {
    "id": 10324,
    "description": "Do not use default lambda captures.",
    "tags": ["code-standards","google-cpp","invalid-code","lambda","default-lambda-capture"]
  },
  {
    "id": 10325,
    "description": "Do not declare a function as both 'virtual' and 'override' or 'final'.",
    "tags": ["code-standards","google-cpp","functions","virtual","override","final","rendundancy"]
  },
  {
    "id": 10326,
    "description": "Do not declare a function as both 'override' and 'final'.",
    "tags": ["code-standards","google-cpp","functions","override","final","rendundancy"]
  },
  {
    "id": 10000,
    "description": "No file should mix LF and CRLF line endings.",
    "tags": ["code-standards","formatting","whitespace","newline"]
  },
  {
    "id": 10001,
    "description": "No line should exceed 80 characters in length.",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "id": 10002,
    "description": "No line should exceed 120 characters in length.",
    "tags": ["ros","code-standards","formatting","line-length","ros-cpp"]
  },
  {
    "id": 10003,
    "description": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "id": 10004,
    "description": "The open curly brace should almost never be on its own line.",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "id": 10005,
    "description": "The open curly brace is always on its own line.",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "id": 10006,
    "description": "If a function exceeds about 40 lines, think about whether it can be broken up without harming the structure of the program.",
    "tags": ["code-standards","formatting","google-cpp","function-size"]
  },
  {
    "id": 10007,
    "description": "Non-ASCII characters should be rare, and must use UTF-8 formatting.",
    "tags": ["code-standards","formatting","google-cpp","character-encoding"]
  },
  {
    "id": 10008,
    "description": "Files should end with a newline character.",
    "tags": ["ros","code-standards","formatting","newline","google-cpp","ros-cpp","end-of-file"]
  },
  {
    "id": 10009,
    "description": "Closing brace should be aligned with the beginning of class or structure.",
    "tags": ["code-standards","formatting","google-cpp","indentation","curly-braces"]
  },
  {
    "id": 10010,
    "description": "Access modifiers should be indented by one space.",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "id": 10011,
    "description": "Leave no redundant blank lines in code blocks.",
    "tags": ["code-standards","formatting","whitespace","google-cpp","functions","code-blocks"]
  },
  {
    "id": 10012,
    "description": "You shouldn't have spaces before your brackets, except maybe after 'delete []' or 'return []() {};'",
    "tags": ["code-standards","formatting","whitespace","google-cpp","brackets"]
  },
  {
    "id": 10013,
    "description": "Colons in range-based for loops should be preceeded and followed by a whitespace.",
    "tags": ["code-standards","formatting","whitespace","google-cpp","colon","for-loop","range-based-for"]
  },
  {
    "id": 10014,
    "description": "Assignment operators should be preceeded and followed by whitespace.",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "id": 10015,
    "description": "Binary operators should be preceeded and followed by whitespace.",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "id": 10016,
    "description": "Unary operators should have no whitespace around them.",
    "tags": ["code-standards","formatting","whitespace","google-cpp","unary-operator"]
  },
  {
    "id": 10017,
    "description": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "id": 10018,
    "description": "Whitespace inside parenthesis should be consistent, and should consist of either zero or one space.",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "id": 10019,
    "description": "There should be a space after a comma.",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "id": 10020,
    "description": "There should be a space after a semicolon, if it does not end the line.",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "id": 10021,
    "description": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "id": 10022,
    "description": "There should be a space after a closing brace, if it does not end the line (for instance, '} else {').",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "id": 10023,
    "description": "Don't leave spaces before a semicolon at the end of a line.",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "id": 10024,
    "description": "The line before an access modifier (public, private, protected) should be blank, unless it is the beginning of the class.",
    "tags": ["code-standards","formatting","whitespace","google-cpp","access-modifiers"]
  },
  {
    "id": 10025,
    "description": "The else statement should be on the same line as the preceeding closing brace.",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "id": 10026,
    "description": "If an else has a brace on one side, it should have it on both.",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "id": 10027,
    "description": "The else clause of an else-if clause should be on its own line.",
    "tags": ["code-standards","formatting","google-cpp","if-else"]
  },
  {
    "id": 10028,
    "description": "do/while clauses should not be on a single line.",
    "tags": ["code-standards","formatting","google-cpp","do-while"]
  },
  {
    "id": 10029,
    "description": "There should not be more than one semicolon statement in a single-line if or else statement, unless it is part of a lambda expression, or the if/else body is enclosed in curly braces.",
    "tags": ["code-standards","formatting","google-cpp","if-else","single-line-statements"]
  },
  {
    "id": 10030,
    "description": "Statements that are not part of an if body should have an indentation level equal to or less than the if statement.",
    "tags": ["code-standards","formatting","whitespace","google-cpp","indentation","if-else","ambiguous-indentation"]
  },
  {
    "id": 10031,
    "description": "Do not leave whitespace at the end of a line.",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "id": 10032,
    "description": "Use 2 spaces for indentation.",
    "tags": ["code-standards","formatting","whitespace","google-cpp","indentation"]
  },
  {
    "id": 10033,
    "description": "Avoid more than one command per line.",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "id": 10034,
    "description": "An if should start on its own line. Avoid constructs such as '} if'.",
    "tags": ["code-standards","formatting","google-cpp","if-else"]
  },
  {
    "id": 10035,
    "description": "Do not indent within a namespace.",
    "tags": ["code-standards","formatting","google-cpp","indentation","namespace"]
  },
  {
    "id": 30004,
    "description": "Do not use const string& members. Use pointers or simple constants instead.",
    "tags": ["code-standards","google-cpp","strings","constants","references"]
  },
  {
    "id": 30005,
    "description": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "id": 30006,
    "description": "Constructors that require multiple arguments should not be marked explicit.",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "id": 30007,
    "description": "DISALLOW macros must be in the private section.",
    "tags": ["code-standards","google-cpp","class","macros","private"]
  },
  {
    "id": 30000,
    "description": "Use VLOG with a numeric argument.",
    "tags": ["code-standards","google-cpp","library","logging"]
  },
  {
    "id": 30001,
    "description": "If copying and assignment are disabled with a macro such as DISALLOW_COPY_AND_ASSIGN, it should be at the end of the private section, and should be the last thing in the class.",
    "tags": ["code-standards","google-cpp","class","macros","constructors"]
  },
  {
    "id": 10100,
    "description": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "id": 10101,
    "description": "Multi-line comments must have an end.",
    "tags": ["comments","code-standards","google-cpp","multiline-comments","invalid-code"]
  },
  {
    "id": 10102,
    "description": "Strings and /**/-comments should not extend beyond one line.",
    "tags": ["comments","code-standards","google-cpp","multiline-comments","strings","multiline-strings"]
  },
  {
    "id": 10103,
    "description": "Namespaces should have a comment at the end.",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "id": 10104,
    "description": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "id": 10105,
    "description": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "id": 10106,
    "description": "At least two spaces is best between code and comments.",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "id": 10107,
    "description": "Use one space before comment text.",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "id": 10108,
    "description": "To-do comments should look like '// TODO(my_username): Stuff.'.",
    "tags": ["comments","code-standards","formatting","google-cpp","todo-comment"]
  },
  {
    "id": 10109,
    "description": "Include the directory when naming header files.",
    "tags": ["code-standards","google-cpp","naming","headers","include"]
  },
  {
    "id": 30002,
    "description": "Do not use deprecated or unconventional string formattings.",
    "tags": ["code-standards","google-cpp","invalid-code","strings","deprecation","string-formatting"]
  },
  {
    "id": 30003,
    "description": "Do not use invalid escape sequences.",
    "tags": ["code-standards","google-cpp","invalid-code","strings","escape-sequences"]
  },
  {
    "id": 10200,
    "description": "All headers must be protected against multiple inclusion by",
    "tags": ["ros","code-standards","google-cpp","ros-cpp","header","header-guard","preprocessor"]
  },
  {
    "id": 10201,
    "description": "The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_.",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "id": 10202,
    "description": "The format of the symbol name should be <PACKAGE>_<PATH>_<FILE>_H_.",
    "tags": ["ros","code-standards","ros-cpp","header","header-guard","preprocessor"]
  },
  {
    "id": 10203,
    "description": "The format of the guard's end should be '#endif  // <PACKAGE>_<PATH>_<FILE>_H_' or '#endif  /* <PACKAGE>_<PATH>_<FILE>_H_ */'.",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "id": 10204,
    "description": "In general, every .cc file should have an associated .h file.",
    "tags": ["code-standards","google-cpp","include","header","preprocessor"]
  },
  {
    "id": 10205,
    "description": "Uncommented text after",
    "tags": ["code-standards","google-cpp","invalid-code","preprocessor"]
  },
  {
    "id": 10206,
    "description": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "id": 10207,
    "description": "All parameters should be named in a function.",
    "tags": ["code-standards","google-cpp","functions","naming","parameters"]
  },
  {
    "id": 10208,
    "description": "Include all required headers for what you use.",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "id": 10209,
    "description": "Do not include unapproved C++11 headers.",
    "tags": ["code-standards","google-cpp","invalid-code","headers","include","preprocessor","c++11"]
  },
  {
    "id": 10210,
    "description": "Do not use unapproved C++11 classes and functions.",
    "tags": ["code-standards","google-cpp","functions","invalid-code","c++11","class"]
  }
]