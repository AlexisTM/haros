[
  {
      "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
      "file": "random_walker_controller.hpp",
      "line": null,
      "function": null,
      "comment": "random_walker_controller.hpp:0:  No copyright message found.  You should have a line: "Copyright [year] <Copyright Owner>"  [legal/copyright] [5]
",
      "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
      "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
      "file": "random_walker_controller.hpp",
      "line": 24,
      "function": null,
      "comment": "random_walker_controller.hpp:24:  Found C system header after C++ system header. Should be: random_walker_controller.h, c system, c++ system, other.  [build/include_order] [4]
",
      "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
      "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
      "file": "random_walker_controller.hpp",
      "line": 25,
      "function": null,
      "comment": "random_walker_controller.hpp:25:  Found C system header after C++ system header. Should be: random_walker_controller.h, c system, c++ system, other.  [build/include_order] [4]
",
      "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
      "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
      "file": "random_walker_controller.hpp",
      "line": 26,
      "function": null,
      "comment": "random_walker_controller.hpp:26:  Found C system header after C++ system header. Should be: random_walker_controller.h, c system, c++ system, other.  [build/include_order] [4]
",
      "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
      "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
      "file": "random_walker_controller.hpp",
      "line": 27,
      "function": null,
      "comment": "random_walker_controller.hpp:27:  Found C system header after C++ system header. Should be: random_walker_controller.h, c system, c++ system, other.  [build/include_order] [4]
",
      "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
      "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
      "file": "random_walker_controller.hpp",
      "line": 28,
      "function": null,
      "comment": "random_walker_controller.hpp:28:  Found C system header after C++ system header. Should be: random_walker_controller.h, c system, c++ system, other.  [build/include_order] [4]
",
      "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
      "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
      "file": "random_walker_controller.hpp",
      "line": 29,
      "function": null,
      "comment": "random_walker_controller.hpp:29:  Found C system header after C++ system header. Should be: random_walker_controller.h, c system, c++ system, other.  [build/include_order] [4]
",
      "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
      "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
      "file": "random_walker_controller.hpp",
      "line": 30,
      "function": null,
      "comment": "random_walker_controller.hpp:30:  Found C system header after C++ system header. Should be: random_walker_controller.h, c system, c++ system, other.  [build/include_order] [4]
",
      "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
      "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
      "file": "random_walker_controller.hpp",
      "line": 31,
      "function": null,
      "comment": "random_walker_controller.hpp:31:  Found C system header after C++ system header. Should be: random_walker_controller.h, c system, c++ system, other.  [build/include_order] [4]
",
      "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 34,
      "function": null,
      "comment": "random_walker_controller.hpp:34:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 43,
      "function": null,
      "comment": "random_walker_controller.hpp:43:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "Access modifiers should be indented by one space.",
      "file": "random_walker_controller.hpp",
      "line": 44,
      "function": null,
      "comment": "random_walker_controller.hpp:44:  public: should be indented +1 space inside class RandomWalkerController  [whitespace/indent] [3]
",
      "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 45,
      "function": null,
      "comment": "random_walker_controller.hpp:45:  Lines should be <= 80 characters long  [whitespace/line_length] [2]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 46,
      "function": null,
      "comment": "random_walker_controller.hpp:46:  Lines should be <= 80 characters long  [whitespace/line_length] [2]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 47,
      "function": null,
      "comment": "random_walker_controller.hpp:47:  Lines should be <= 80 characters long  [whitespace/line_length] [2]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 48,
      "function": null,
      "comment": "random_walker_controller.hpp:48:  Lines should be <= 80 characters long  [whitespace/line_length] [2]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 49,
      "function": null,
      "comment": "random_walker_controller.hpp:49:  Lines should be <= 80 characters long  [whitespace/line_length] [2]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 50,
      "function": null,
      "comment": "random_walker_controller.hpp:50:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 51,
      "function": null,
      "comment": "random_walker_controller.hpp:51:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 52,
      "function": null,
      "comment": "random_walker_controller.hpp:52:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 53,
      "function": null,
      "comment": "random_walker_controller.hpp:53:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 54,
      "function": null,
      "comment": "random_walker_controller.hpp:54:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 55,
      "function": null,
      "comment": "random_walker_controller.hpp:55:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 56,
      "function": null,
      "comment": "random_walker_controller.hpp:56:  Lines should be <= 80 characters long  [whitespace/line_length] [2]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 57,
      "function": null,
      "comment": "random_walker_controller.hpp:57:  Lines should be <= 80 characters long  [whitespace/line_length] [2]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 58,
      "function": null,
      "comment": "random_walker_controller.hpp:58:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 59,
      "function": null,
      "comment": "random_walker_controller.hpp:59:  Lines should be <= 80 characters long  [whitespace/line_length] [2]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 60,
      "function": null,
      "comment": "random_walker_controller.hpp:60:  Lines should be <= 80 characters long  [whitespace/line_length] [2]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "Do not use meaningless empty statements.",
      "file": "random_walker_controller.hpp",
      "line": 62,
      "function": null,
      "comment": "random_walker_controller.hpp:62:  You don't need a ; after a }  [readability/braces] [4]
",
      "tags": ["code-standards","google-cpp","empty-statement","ambiguous-code"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 69,
      "function": null,
      "comment": "random_walker_controller.hpp:69:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 70,
      "function": null,
      "comment": "random_walker_controller.hpp:70:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 71,
      "function": null,
      "comment": "random_walker_controller.hpp:71:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 72,
      "function": null,
      "comment": "random_walker_controller.hpp:72:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 73,
      "function": null,
      "comment": "random_walker_controller.hpp:73:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 75,
      "function": null,
      "comment": "random_walker_controller.hpp:75:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 76,
      "function": null,
      "comment": "random_walker_controller.hpp:76:  Lines should be <= 80 characters long  [whitespace/line_length] [2]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 78,
      "function": null,
      "comment": "random_walker_controller.hpp:78:  Lines should be <= 80 characters long  [whitespace/line_length] [2]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 83,
      "function": null,
      "comment": "random_walker_controller.hpp:83:  Lines should be <= 80 characters long  [whitespace/line_length] [2]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "At least two spaces is best between code and comments.",
      "file": "random_walker_controller.hpp",
      "line": 86,
      "function": null,
      "comment": "random_walker_controller.hpp:86:  At least two spaces is best between code and comments  [whitespace/comments] [2]
",
      "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
      "rule": "Access modifiers should be indented by one space.",
      "file": "random_walker_controller.hpp",
      "line": 97,
      "function": null,
      "comment": "random_walker_controller.hpp:97:  private: should be indented +1 space inside class RandomWalkerController  [whitespace/indent] [3]
",
      "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 105,
      "function": null,
      "comment": "random_walker_controller.hpp:105:  Lines should be <= 80 characters long  [whitespace/line_length] [2]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 179,
      "function": null,
      "comment": "random_walker_controller.hpp:179:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 181,
      "function": null,
      "comment": "random_walker_controller.hpp:181:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The else statement should be on the same line as the preceeding closing brace.",
      "file": "random_walker_controller.hpp",
      "line": 184,
      "function": null,
      "comment": "random_walker_controller.hpp:184:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]
",
      "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 185,
      "function": null,
      "comment": "random_walker_controller.hpp:185:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 191,
      "function": null,
      "comment": "random_walker_controller.hpp:191:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 193,
      "function": null,
      "comment": "random_walker_controller.hpp:193:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The else statement should be on the same line as the preceeding closing brace.",
      "file": "random_walker_controller.hpp",
      "line": 196,
      "function": null,
      "comment": "random_walker_controller.hpp:196:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]
",
      "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 197,
      "function": null,
      "comment": "random_walker_controller.hpp:197:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 202,
      "function": null,
      "comment": "random_walker_controller.hpp:202:  Lines should be <= 80 characters long  [whitespace/line_length] [2]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 203,
      "function": null,
      "comment": "random_walker_controller.hpp:203:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "At least two spaces is best between code and comments.",
      "file": "random_walker_controller.hpp",
      "line": 204,
      "function": null,
      "comment": "random_walker_controller.hpp:204:  At least two spaces is best between code and comments  [whitespace/comments] [2]
",
      "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 205,
      "function": null,
      "comment": "random_walker_controller.hpp:205:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 207,
      "function": null,
      "comment": "random_walker_controller.hpp:207:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 209,
      "function": null,
      "comment": "random_walker_controller.hpp:209:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 212,
      "function": null,
      "comment": "random_walker_controller.hpp:212:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 219,
      "function": null,
      "comment": "random_walker_controller.hpp:219:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 226,
      "function": null,
      "comment": "random_walker_controller.hpp:226:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The else statement should be on the same line as the preceeding closing brace.",
      "file": "random_walker_controller.hpp",
      "line": 233,
      "function": null,
      "comment": "random_walker_controller.hpp:233:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]
",
      "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
      "rule": "At least two spaces is best between code and comments.",
      "file": "random_walker_controller.hpp",
      "line": 233,
      "function": null,
      "comment": "random_walker_controller.hpp:233:  At least two spaces is best between code and comments  [whitespace/comments] [2]
",
      "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 234,
      "function": null,
      "comment": "random_walker_controller.hpp:234:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 236,
      "function": null,
      "comment": "random_walker_controller.hpp:236:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 237,
      "function": null,
      "comment": "random_walker_controller.hpp:237:  Lines should be <= 80 characters long  [whitespace/line_length] [2]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 238,
      "function": null,
      "comment": "random_walker_controller.hpp:238:  Lines should be <= 80 characters long  [whitespace/line_length] [2]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 239,
      "function": null,
      "comment": "random_walker_controller.hpp:239:  Lines should be <= 80 characters long  [whitespace/line_length] [2]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 242,
      "function": null,
      "comment": "random_walker_controller.hpp:242:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 243,
      "function": null,
      "comment": "random_walker_controller.hpp:243:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 250,
      "function": null,
      "comment": "random_walker_controller.hpp:250:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "The else statement should be on the same line as the preceeding closing brace.",
      "file": "random_walker_controller.hpp",
      "line": 250,
      "function": null,
      "comment": "random_walker_controller.hpp:250:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]
",
      "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 251,
      "function": null,
      "comment": "random_walker_controller.hpp:251:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 259,
      "function": null,
      "comment": "random_walker_controller.hpp:259:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 265,
      "function": null,
      "comment": "random_walker_controller.hpp:265:  Lines should be <= 80 characters long  [whitespace/line_length] [2]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 266,
      "function": null,
      "comment": "random_walker_controller.hpp:266:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 268,
      "function": null,
      "comment": "random_walker_controller.hpp:268:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 270,
      "function": null,
      "comment": "random_walker_controller.hpp:270:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 273,
      "function": null,
      "comment": "random_walker_controller.hpp:273:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 280,
      "function": null,
      "comment": "random_walker_controller.hpp:280:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 287,
      "function": null,
      "comment": "random_walker_controller.hpp:287:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The else statement should be on the same line as the preceeding closing brace.",
      "file": "random_walker_controller.hpp",
      "line": 294,
      "function": null,
      "comment": "random_walker_controller.hpp:294:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]
",
      "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
      "rule": "At least two spaces is best between code and comments.",
      "file": "random_walker_controller.hpp",
      "line": 294,
      "function": null,
      "comment": "random_walker_controller.hpp:294:  At least two spaces is best between code and comments  [whitespace/comments] [2]
",
      "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 295,
      "function": null,
      "comment": "random_walker_controller.hpp:295:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 297,
      "function": null,
      "comment": "random_walker_controller.hpp:297:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 298,
      "function": null,
      "comment": "random_walker_controller.hpp:298:  Lines should be <= 80 characters long  [whitespace/line_length] [2]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 299,
      "function": null,
      "comment": "random_walker_controller.hpp:299:  Lines should be <= 80 characters long  [whitespace/line_length] [2]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 300,
      "function": null,
      "comment": "random_walker_controller.hpp:300:  Lines should be <= 80 characters long  [whitespace/line_length] [2]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 303,
      "function": null,
      "comment": "random_walker_controller.hpp:303:  Lines should be <= 80 characters long  [whitespace/line_length] [2]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 304,
      "function": null,
      "comment": "random_walker_controller.hpp:304:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 311,
      "function": null,
      "comment": "random_walker_controller.hpp:311:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "The else statement should be on the same line as the preceeding closing brace.",
      "file": "random_walker_controller.hpp",
      "line": 311,
      "function": null,
      "comment": "random_walker_controller.hpp:311:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]
",
      "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 312,
      "function": null,
      "comment": "random_walker_controller.hpp:312:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 320,
      "function": null,
      "comment": "random_walker_controller.hpp:320:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 325,
      "function": null,
      "comment": "random_walker_controller.hpp:325:  Lines should be <= 80 characters long  [whitespace/line_length] [2]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 326,
      "function": null,
      "comment": "random_walker_controller.hpp:326:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 328,
      "function": null,
      "comment": "random_walker_controller.hpp:328:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 330,
      "function": null,
      "comment": "random_walker_controller.hpp:330:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 333,
      "function": null,
      "comment": "random_walker_controller.hpp:333:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 339,
      "function": null,
      "comment": "random_walker_controller.hpp:339:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The else statement should be on the same line as the preceeding closing brace.",
      "file": "random_walker_controller.hpp",
      "line": 345,
      "function": null,
      "comment": "random_walker_controller.hpp:345:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]
",
      "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
      "rule": "At least two spaces is best between code and comments.",
      "file": "random_walker_controller.hpp",
      "line": 345,
      "function": null,
      "comment": "random_walker_controller.hpp:345:  At least two spaces is best between code and comments  [whitespace/comments] [2]
",
      "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 346,
      "function": null,
      "comment": "random_walker_controller.hpp:346:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 348,
      "function": null,
      "comment": "random_walker_controller.hpp:348:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 349,
      "function": null,
      "comment": "random_walker_controller.hpp:349:  Lines should be <= 80 characters long  [whitespace/line_length] [2]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 350,
      "function": null,
      "comment": "random_walker_controller.hpp:350:  Lines should be <= 80 characters long  [whitespace/line_length] [2]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 353,
      "function": null,
      "comment": "random_walker_controller.hpp:353:  Lines should be <= 80 characters long  [whitespace/line_length] [2]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 354,
      "function": null,
      "comment": "random_walker_controller.hpp:354:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 363,
      "function": null,
      "comment": "random_walker_controller.hpp:363:  Lines should be <= 80 characters long  [whitespace/line_length] [2]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "The else statement should be on the same line as the preceeding closing brace.",
      "file": "random_walker_controller.hpp",
      "line": 363,
      "function": null,
      "comment": "random_walker_controller.hpp:363:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]
",
      "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 364,
      "function": null,
      "comment": "random_walker_controller.hpp:364:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 374,
      "function": null,
      "comment": "random_walker_controller.hpp:374:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 380,
      "function": null,
      "comment": "random_walker_controller.hpp:380:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "At least two spaces is best between code and comments.",
      "file": "random_walker_controller.hpp",
      "line": 381,
      "function": null,
      "comment": "random_walker_controller.hpp:381:  At least two spaces is best between code and comments  [whitespace/comments] [2]
",
      "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 382,
      "function": null,
      "comment": "random_walker_controller.hpp:382:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 388,
      "function": null,
      "comment": "random_walker_controller.hpp:388:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 389,
      "function": null,
      "comment": "random_walker_controller.hpp:389:  Lines should be <= 80 characters long  [whitespace/line_length] [2]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "At least two spaces is best between code and comments.",
      "file": "random_walker_controller.hpp",
      "line": 389,
      "function": null,
      "comment": "random_walker_controller.hpp:389:  At least two spaces is best between code and comments  [whitespace/comments] [2]
",
      "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 394,
      "function": null,
      "comment": "random_walker_controller.hpp:394:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 396,
      "function": null,
      "comment": "random_walker_controller.hpp:396:  Lines should be <= 80 characters long  [whitespace/line_length] [2]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 398,
      "function": null,
      "comment": "random_walker_controller.hpp:398:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "Don't use deprecated casting styles.",
      "file": "random_walker_controller.hpp",
      "line": 398,
      "function": null,
      "comment": "random_walker_controller.hpp:398:  Using C-style cast.  Use static_cast<double>(...) instead  [readability/casting] [4]
",
      "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
      "rule": "Don't use deprecated casting styles.",
      "file": "random_walker_controller.hpp",
      "line": 400,
      "function": null,
      "comment": "random_walker_controller.hpp:400:  Using C-style cast.  Use static_cast<double>(...) instead  [readability/casting] [4]
",
      "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 401,
      "function": null,
      "comment": "random_walker_controller.hpp:401:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The else statement should be on the same line as the preceeding closing brace.",
      "file": "random_walker_controller.hpp",
      "line": 404,
      "function": null,
      "comment": "random_walker_controller.hpp:404:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]
",
      "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 405,
      "function": null,
      "comment": "random_walker_controller.hpp:405:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 410,
      "function": null,
      "comment": "random_walker_controller.hpp:410:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 415,
      "function": null,
      "comment": "random_walker_controller.hpp:415:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 417,
      "function": null,
      "comment": "random_walker_controller.hpp:417:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The else statement should be on the same line as the preceeding closing brace.",
      "file": "random_walker_controller.hpp",
      "line": 421,
      "function": null,
      "comment": "random_walker_controller.hpp:421:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]
",
      "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 422,
      "function": null,
      "comment": "random_walker_controller.hpp:422:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The else statement should be on the same line as the preceeding closing brace.",
      "file": "random_walker_controller.hpp",
      "line": 426,
      "function": null,
      "comment": "random_walker_controller.hpp:426:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]
",
      "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 427,
      "function": null,
      "comment": "random_walker_controller.hpp:427:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "At least two spaces is best between code and comments.",
      "file": "random_walker_controller.hpp",
      "line": 434,
      "function": null,
      "comment": "random_walker_controller.hpp:434:  At least two spaces is best between code and comments  [whitespace/comments] [2]
",
      "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
      "rule": "Include all required headers for what you use.",
      "file": "random_walker_controller.hpp",
      "line": 101,
      "function": null,
      "comment": "random_walker_controller.hpp:101:  Add #include <string> for string  [build/include_what_you_use] [4]
",
      "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
      "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
      "file": "random_walker_controller.hpp",
      "line": null,
      "function": null,
      "comment": "random_walker_controller.hpp:0:  No copyright message found.  You should have a line: "Copyright [year] <Copyright Owner>"  [legal/copyright] [5]
",
      "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
      "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
      "file": "random_walker_controller.hpp",
      "line": 24,
      "function": null,
      "comment": "random_walker_controller.hpp:24:  Found C system header after C++ system header. Should be: random_walker_controller.h, c system, c++ system, other.  [build/include_order] [4]
",
      "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
      "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
      "file": "random_walker_controller.hpp",
      "line": 25,
      "function": null,
      "comment": "random_walker_controller.hpp:25:  Found C system header after C++ system header. Should be: random_walker_controller.h, c system, c++ system, other.  [build/include_order] [4]
",
      "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
      "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
      "file": "random_walker_controller.hpp",
      "line": 26,
      "function": null,
      "comment": "random_walker_controller.hpp:26:  Found C system header after C++ system header. Should be: random_walker_controller.h, c system, c++ system, other.  [build/include_order] [4]
",
      "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
      "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
      "file": "random_walker_controller.hpp",
      "line": 27,
      "function": null,
      "comment": "random_walker_controller.hpp:27:  Found C system header after C++ system header. Should be: random_walker_controller.h, c system, c++ system, other.  [build/include_order] [4]
",
      "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
      "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
      "file": "random_walker_controller.hpp",
      "line": 28,
      "function": null,
      "comment": "random_walker_controller.hpp:28:  Found C system header after C++ system header. Should be: random_walker_controller.h, c system, c++ system, other.  [build/include_order] [4]
",
      "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
      "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
      "file": "random_walker_controller.hpp",
      "line": 29,
      "function": null,
      "comment": "random_walker_controller.hpp:29:  Found C system header after C++ system header. Should be: random_walker_controller.h, c system, c++ system, other.  [build/include_order] [4]
",
      "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
      "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
      "file": "random_walker_controller.hpp",
      "line": 30,
      "function": null,
      "comment": "random_walker_controller.hpp:30:  Found C system header after C++ system header. Should be: random_walker_controller.h, c system, c++ system, other.  [build/include_order] [4]
",
      "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
      "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
      "file": "random_walker_controller.hpp",
      "line": 31,
      "function": null,
      "comment": "random_walker_controller.hpp:31:  Found C system header after C++ system header. Should be: random_walker_controller.h, c system, c++ system, other.  [build/include_order] [4]
",
      "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 34,
      "function": null,
      "comment": "random_walker_controller.hpp:34:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 43,
      "function": null,
      "comment": "random_walker_controller.hpp:43:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "Access modifiers should be indented by one space.",
      "file": "random_walker_controller.hpp",
      "line": 44,
      "function": null,
      "comment": "random_walker_controller.hpp:44:  public: should be indented +1 space inside class RandomWalkerController  [whitespace/indent] [3]
",
      "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 45,
      "function": null,
      "comment": "random_walker_controller.hpp:45:  Lines should be <= 80 characters long  [whitespace/line_length] [2]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 46,
      "function": null,
      "comment": "random_walker_controller.hpp:46:  Lines should be <= 80 characters long  [whitespace/line_length] [2]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 47,
      "function": null,
      "comment": "random_walker_controller.hpp:47:  Lines should be <= 80 characters long  [whitespace/line_length] [2]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 48,
      "function": null,
      "comment": "random_walker_controller.hpp:48:  Lines should be <= 80 characters long  [whitespace/line_length] [2]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 49,
      "function": null,
      "comment": "random_walker_controller.hpp:49:  Lines should be <= 80 characters long  [whitespace/line_length] [2]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 50,
      "function": null,
      "comment": "random_walker_controller.hpp:50:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 51,
      "function": null,
      "comment": "random_walker_controller.hpp:51:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 52,
      "function": null,
      "comment": "random_walker_controller.hpp:52:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 53,
      "function": null,
      "comment": "random_walker_controller.hpp:53:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 54,
      "function": null,
      "comment": "random_walker_controller.hpp:54:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 55,
      "function": null,
      "comment": "random_walker_controller.hpp:55:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 56,
      "function": null,
      "comment": "random_walker_controller.hpp:56:  Lines should be <= 80 characters long  [whitespace/line_length] [2]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 57,
      "function": null,
      "comment": "random_walker_controller.hpp:57:  Lines should be <= 80 characters long  [whitespace/line_length] [2]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 58,
      "function": null,
      "comment": "random_walker_controller.hpp:58:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 59,
      "function": null,
      "comment": "random_walker_controller.hpp:59:  Lines should be <= 80 characters long  [whitespace/line_length] [2]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 60,
      "function": null,
      "comment": "random_walker_controller.hpp:60:  Lines should be <= 80 characters long  [whitespace/line_length] [2]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "Do not use meaningless empty statements.",
      "file": "random_walker_controller.hpp",
      "line": 62,
      "function": null,
      "comment": "random_walker_controller.hpp:62:  You don't need a ; after a }  [readability/braces] [4]
",
      "tags": ["code-standards","google-cpp","empty-statement","ambiguous-code"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 69,
      "function": null,
      "comment": "random_walker_controller.hpp:69:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 70,
      "function": null,
      "comment": "random_walker_controller.hpp:70:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 71,
      "function": null,
      "comment": "random_walker_controller.hpp:71:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 72,
      "function": null,
      "comment": "random_walker_controller.hpp:72:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 73,
      "function": null,
      "comment": "random_walker_controller.hpp:73:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 75,
      "function": null,
      "comment": "random_walker_controller.hpp:75:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 76,
      "function": null,
      "comment": "random_walker_controller.hpp:76:  Lines should be <= 80 characters long  [whitespace/line_length] [2]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 78,
      "function": null,
      "comment": "random_walker_controller.hpp:78:  Lines should be <= 80 characters long  [whitespace/line_length] [2]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 83,
      "function": null,
      "comment": "random_walker_controller.hpp:83:  Lines should be <= 80 characters long  [whitespace/line_length] [2]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "At least two spaces is best between code and comments.",
      "file": "random_walker_controller.hpp",
      "line": 86,
      "function": null,
      "comment": "random_walker_controller.hpp:86:  At least two spaces is best between code and comments  [whitespace/comments] [2]
",
      "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
      "rule": "Access modifiers should be indented by one space.",
      "file": "random_walker_controller.hpp",
      "line": 97,
      "function": null,
      "comment": "random_walker_controller.hpp:97:  private: should be indented +1 space inside class RandomWalkerController  [whitespace/indent] [3]
",
      "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 105,
      "function": null,
      "comment": "random_walker_controller.hpp:105:  Lines should be <= 80 characters long  [whitespace/line_length] [2]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 179,
      "function": null,
      "comment": "random_walker_controller.hpp:179:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 181,
      "function": null,
      "comment": "random_walker_controller.hpp:181:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The else statement should be on the same line as the preceeding closing brace.",
      "file": "random_walker_controller.hpp",
      "line": 184,
      "function": null,
      "comment": "random_walker_controller.hpp:184:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]
",
      "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 185,
      "function": null,
      "comment": "random_walker_controller.hpp:185:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 191,
      "function": null,
      "comment": "random_walker_controller.hpp:191:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 193,
      "function": null,
      "comment": "random_walker_controller.hpp:193:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The else statement should be on the same line as the preceeding closing brace.",
      "file": "random_walker_controller.hpp",
      "line": 196,
      "function": null,
      "comment": "random_walker_controller.hpp:196:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]
",
      "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 197,
      "function": null,
      "comment": "random_walker_controller.hpp:197:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 202,
      "function": null,
      "comment": "random_walker_controller.hpp:202:  Lines should be <= 80 characters long  [whitespace/line_length] [2]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 203,
      "function": null,
      "comment": "random_walker_controller.hpp:203:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "At least two spaces is best between code and comments.",
      "file": "random_walker_controller.hpp",
      "line": 204,
      "function": null,
      "comment": "random_walker_controller.hpp:204:  At least two spaces is best between code and comments  [whitespace/comments] [2]
",
      "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 205,
      "function": null,
      "comment": "random_walker_controller.hpp:205:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 207,
      "function": null,
      "comment": "random_walker_controller.hpp:207:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 209,
      "function": null,
      "comment": "random_walker_controller.hpp:209:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 212,
      "function": null,
      "comment": "random_walker_controller.hpp:212:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 219,
      "function": null,
      "comment": "random_walker_controller.hpp:219:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 226,
      "function": null,
      "comment": "random_walker_controller.hpp:226:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The else statement should be on the same line as the preceeding closing brace.",
      "file": "random_walker_controller.hpp",
      "line": 233,
      "function": null,
      "comment": "random_walker_controller.hpp:233:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]
",
      "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
      "rule": "At least two spaces is best between code and comments.",
      "file": "random_walker_controller.hpp",
      "line": 233,
      "function": null,
      "comment": "random_walker_controller.hpp:233:  At least two spaces is best between code and comments  [whitespace/comments] [2]
",
      "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 234,
      "function": null,
      "comment": "random_walker_controller.hpp:234:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 236,
      "function": null,
      "comment": "random_walker_controller.hpp:236:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 237,
      "function": null,
      "comment": "random_walker_controller.hpp:237:  Lines should be <= 80 characters long  [whitespace/line_length] [2]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 238,
      "function": null,
      "comment": "random_walker_controller.hpp:238:  Lines should be <= 80 characters long  [whitespace/line_length] [2]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 239,
      "function": null,
      "comment": "random_walker_controller.hpp:239:  Lines should be <= 80 characters long  [whitespace/line_length] [2]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 242,
      "function": null,
      "comment": "random_walker_controller.hpp:242:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 243,
      "function": null,
      "comment": "random_walker_controller.hpp:243:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 250,
      "function": null,
      "comment": "random_walker_controller.hpp:250:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "The else statement should be on the same line as the preceeding closing brace.",
      "file": "random_walker_controller.hpp",
      "line": 250,
      "function": null,
      "comment": "random_walker_controller.hpp:250:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]
",
      "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 251,
      "function": null,
      "comment": "random_walker_controller.hpp:251:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 259,
      "function": null,
      "comment": "random_walker_controller.hpp:259:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 265,
      "function": null,
      "comment": "random_walker_controller.hpp:265:  Lines should be <= 80 characters long  [whitespace/line_length] [2]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 266,
      "function": null,
      "comment": "random_walker_controller.hpp:266:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 268,
      "function": null,
      "comment": "random_walker_controller.hpp:268:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 270,
      "function": null,
      "comment": "random_walker_controller.hpp:270:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 273,
      "function": null,
      "comment": "random_walker_controller.hpp:273:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 280,
      "function": null,
      "comment": "random_walker_controller.hpp:280:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 287,
      "function": null,
      "comment": "random_walker_controller.hpp:287:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The else statement should be on the same line as the preceeding closing brace.",
      "file": "random_walker_controller.hpp",
      "line": 294,
      "function": null,
      "comment": "random_walker_controller.hpp:294:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]
",
      "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
      "rule": "At least two spaces is best between code and comments.",
      "file": "random_walker_controller.hpp",
      "line": 294,
      "function": null,
      "comment": "random_walker_controller.hpp:294:  At least two spaces is best between code and comments  [whitespace/comments] [2]
",
      "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 295,
      "function": null,
      "comment": "random_walker_controller.hpp:295:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 297,
      "function": null,
      "comment": "random_walker_controller.hpp:297:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 298,
      "function": null,
      "comment": "random_walker_controller.hpp:298:  Lines should be <= 80 characters long  [whitespace/line_length] [2]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 299,
      "function": null,
      "comment": "random_walker_controller.hpp:299:  Lines should be <= 80 characters long  [whitespace/line_length] [2]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 300,
      "function": null,
      "comment": "random_walker_controller.hpp:300:  Lines should be <= 80 characters long  [whitespace/line_length] [2]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 303,
      "function": null,
      "comment": "random_walker_controller.hpp:303:  Lines should be <= 80 characters long  [whitespace/line_length] [2]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 304,
      "function": null,
      "comment": "random_walker_controller.hpp:304:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 311,
      "function": null,
      "comment": "random_walker_controller.hpp:311:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "The else statement should be on the same line as the preceeding closing brace.",
      "file": "random_walker_controller.hpp",
      "line": 311,
      "function": null,
      "comment": "random_walker_controller.hpp:311:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]
",
      "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 312,
      "function": null,
      "comment": "random_walker_controller.hpp:312:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 320,
      "function": null,
      "comment": "random_walker_controller.hpp:320:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 325,
      "function": null,
      "comment": "random_walker_controller.hpp:325:  Lines should be <= 80 characters long  [whitespace/line_length] [2]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 326,
      "function": null,
      "comment": "random_walker_controller.hpp:326:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 328,
      "function": null,
      "comment": "random_walker_controller.hpp:328:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 330,
      "function": null,
      "comment": "random_walker_controller.hpp:330:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 333,
      "function": null,
      "comment": "random_walker_controller.hpp:333:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 339,
      "function": null,
      "comment": "random_walker_controller.hpp:339:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The else statement should be on the same line as the preceeding closing brace.",
      "file": "random_walker_controller.hpp",
      "line": 345,
      "function": null,
      "comment": "random_walker_controller.hpp:345:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]
",
      "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
      "rule": "At least two spaces is best between code and comments.",
      "file": "random_walker_controller.hpp",
      "line": 345,
      "function": null,
      "comment": "random_walker_controller.hpp:345:  At least two spaces is best between code and comments  [whitespace/comments] [2]
",
      "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 346,
      "function": null,
      "comment": "random_walker_controller.hpp:346:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 348,
      "function": null,
      "comment": "random_walker_controller.hpp:348:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 349,
      "function": null,
      "comment": "random_walker_controller.hpp:349:  Lines should be <= 80 characters long  [whitespace/line_length] [2]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 350,
      "function": null,
      "comment": "random_walker_controller.hpp:350:  Lines should be <= 80 characters long  [whitespace/line_length] [2]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 353,
      "function": null,
      "comment": "random_walker_controller.hpp:353:  Lines should be <= 80 characters long  [whitespace/line_length] [2]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 354,
      "function": null,
      "comment": "random_walker_controller.hpp:354:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 363,
      "function": null,
      "comment": "random_walker_controller.hpp:363:  Lines should be <= 80 characters long  [whitespace/line_length] [2]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "The else statement should be on the same line as the preceeding closing brace.",
      "file": "random_walker_controller.hpp",
      "line": 363,
      "function": null,
      "comment": "random_walker_controller.hpp:363:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]
",
      "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 364,
      "function": null,
      "comment": "random_walker_controller.hpp:364:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 374,
      "function": null,
      "comment": "random_walker_controller.hpp:374:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 380,
      "function": null,
      "comment": "random_walker_controller.hpp:380:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "At least two spaces is best between code and comments.",
      "file": "random_walker_controller.hpp",
      "line": 381,
      "function": null,
      "comment": "random_walker_controller.hpp:381:  At least two spaces is best between code and comments  [whitespace/comments] [2]
",
      "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 382,
      "function": null,
      "comment": "random_walker_controller.hpp:382:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 388,
      "function": null,
      "comment": "random_walker_controller.hpp:388:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 389,
      "function": null,
      "comment": "random_walker_controller.hpp:389:  Lines should be <= 80 characters long  [whitespace/line_length] [2]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "At least two spaces is best between code and comments.",
      "file": "random_walker_controller.hpp",
      "line": 389,
      "function": null,
      "comment": "random_walker_controller.hpp:389:  At least two spaces is best between code and comments  [whitespace/comments] [2]
",
      "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 394,
      "function": null,
      "comment": "random_walker_controller.hpp:394:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 396,
      "function": null,
      "comment": "random_walker_controller.hpp:396:  Lines should be <= 80 characters long  [whitespace/line_length] [2]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 398,
      "function": null,
      "comment": "random_walker_controller.hpp:398:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "Don't use deprecated casting styles.",
      "file": "random_walker_controller.hpp",
      "line": 398,
      "function": null,
      "comment": "random_walker_controller.hpp:398:  Using C-style cast.  Use static_cast<double>(...) instead  [readability/casting] [4]
",
      "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
      "rule": "Don't use deprecated casting styles.",
      "file": "random_walker_controller.hpp",
      "line": 400,
      "function": null,
      "comment": "random_walker_controller.hpp:400:  Using C-style cast.  Use static_cast<double>(...) instead  [readability/casting] [4]
",
      "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 401,
      "function": null,
      "comment": "random_walker_controller.hpp:401:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The else statement should be on the same line as the preceeding closing brace.",
      "file": "random_walker_controller.hpp",
      "line": 404,
      "function": null,
      "comment": "random_walker_controller.hpp:404:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]
",
      "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 405,
      "function": null,
      "comment": "random_walker_controller.hpp:405:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "random_walker_controller.hpp",
      "line": 410,
      "function": null,
      "comment": "random_walker_controller.hpp:410:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 415,
      "function": null,
      "comment": "random_walker_controller.hpp:415:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 417,
      "function": null,
      "comment": "random_walker_controller.hpp:417:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The else statement should be on the same line as the preceeding closing brace.",
      "file": "random_walker_controller.hpp",
      "line": 421,
      "function": null,
      "comment": "random_walker_controller.hpp:421:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]
",
      "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 422,
      "function": null,
      "comment": "random_walker_controller.hpp:422:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The else statement should be on the same line as the preceeding closing brace.",
      "file": "random_walker_controller.hpp",
      "line": 426,
      "function": null,
      "comment": "random_walker_controller.hpp:426:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]
",
      "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "random_walker_controller.hpp",
      "line": 427,
      "function": null,
      "comment": "random_walker_controller.hpp:427:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "At least two spaces is best between code and comments.",
      "file": "random_walker_controller.hpp",
      "line": 434,
      "function": null,
      "comment": "random_walker_controller.hpp:434:  At least two spaces is best between code and comments  [whitespace/comments] [2]
",
      "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
      "rule": "Include all required headers for what you use.",
      "file": "random_walker_controller.hpp",
      "line": 101,
      "function": null,
      "comment": "random_walker_controller.hpp:101:  Add #include <string> for string  [build/include_what_you_use] [4]
",
      "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
      "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
      "file": "nodelet.cpp",
      "line": null,
      "function": null,
      "comment": "nodelet.cpp:0:  No copyright message found.  You should have a line: "Copyright [year] <Copyright Owner>"  [legal/copyright] [5]
",
      "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
      "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
      "file": "nodelet.cpp",
      "line": 14,
      "function": null,
      "comment": "nodelet.cpp:14:  Found C system header after C++ system header. Should be: nodelet.h, c system, c++ system, other.  [build/include_order] [4]
",
      "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
      "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
      "file": "nodelet.cpp",
      "line": 15,
      "function": null,
      "comment": "nodelet.cpp:15:  Found C system header after C++ system header. Should be: nodelet.h, c system, c++ system, other.  [build/include_order] [4]
",
      "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
      "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
      "file": "nodelet.cpp",
      "line": 16,
      "function": null,
      "comment": "nodelet.cpp:16:  Found C system header after C++ system header. Should be: nodelet.h, c system, c++ system, other.  [build/include_order] [4]
",
      "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "nodelet.cpp",
      "line": 21,
      "function": null,
      "comment": "nodelet.cpp:21:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "nodelet.cpp",
      "line": 27,
      "function": null,
      "comment": "nodelet.cpp:27:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "Access modifiers should be indented by one space.",
      "file": "nodelet.cpp",
      "line": 28,
      "function": null,
      "comment": "nodelet.cpp:28:  public: should be indented +1 space inside class RandomWalkerControllerNodelet  [whitespace/indent] [3]
",
      "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
      "rule": "Do not use meaningless empty statements.",
      "file": "nodelet.cpp",
      "line": 29,
      "function": null,
      "comment": "nodelet.cpp:29:  You don't need a ; after a }  [readability/braces] [4]
",
      "tags": ["code-standards","google-cpp","empty-statement","ambiguous-code"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "nodelet.cpp",
      "line": 31,
      "function": null,
      "comment": "nodelet.cpp:31:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "nodelet.cpp",
      "line": 33,
      "function": null,
      "comment": "nodelet.cpp:33:  Lines should be <= 80 characters long  [whitespace/line_length] [2]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "nodelet.cpp",
      "line": 44,
      "function": null,
      "comment": "nodelet.cpp:44:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "nodelet.cpp",
      "line": 56,
      "function": null,
      "comment": "nodelet.cpp:56:  Lines should be <= 80 characters long  [whitespace/line_length] [2]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "nodelet.cpp",
      "line": 60,
      "function": null,
      "comment": "nodelet.cpp:60:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "nodelet.cpp",
      "line": 61,
      "function": null,
      "comment": "nodelet.cpp:61:  Lines should be <= 80 characters long  [whitespace/line_length] [2]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "The else statement should be on the same line as the preceeding closing brace.",
      "file": "nodelet.cpp",
      "line": 64,
      "function": null,
      "comment": "nodelet.cpp:64:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]
",
      "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "nodelet.cpp",
      "line": 65,
      "function": null,
      "comment": "nodelet.cpp:65:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "nodelet.cpp",
      "line": 66,
      "function": null,
      "comment": "nodelet.cpp:66:  Lines should be <= 80 characters long  [whitespace/line_length] [2]
",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "Access modifiers should be indented by one space.",
      "file": "nodelet.cpp",
      "line": 70,
      "function": null,
      "comment": "nodelet.cpp:70:  private: should be indented +1 space inside class RandomWalkerControllerNodelet  [whitespace/indent] [3]
",
      "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "nodelet.cpp",
      "line": 84,
      "function": null,
      "comment": "nodelet.cpp:84:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "nodelet.cpp",
      "line": 87,
      "function": null,
      "comment": "nodelet.cpp:87:  { should almost always be at the end of the previous line  [whitespace/braces] [4]
",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "At least two spaces is best between code and comments.",
      "file": "nodelet.cpp",
      "line": 94,
      "function": null,
      "comment": "nodelet.cpp:94:  At least two spaces is best between code and comments  [whitespace/comments] [2]
",
      "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
      "rule": "Minimum weighted methods per class: 1",
      "file": "random_walker_controller.hpp",
      "line": null,
      "function": null,
      "comment": "Time: WMC < 1 (0)",
      "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
      "rule": "Minimum available methods per class: 1",
      "file": "random_walker_controller.hpp",
      "line": null,
      "function": null,
      "comment": "MAC is less than 1",
      "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
      "rule": "Minimum weighted methods per class: 1",
      "file": "random_walker_controller.hpp",
      "line": null,
      "function": null,
      "comment": "WheelDropEventConstPtr: WMC < 1 (0)",
      "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
      "rule": "Minimum available methods per class: 1",
      "file": "random_walker_controller.hpp",
      "line": null,
      "function": null,
      "comment": "MAC is less than 1",
      "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
      "rule": "Minimum weighted methods per class: 1",
      "file": "random_walker_controller.hpp",
      "line": null,
      "function": null,
      "comment": "BumperEventConstPtr: WMC < 1 (0)",
      "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
      "rule": "Minimum available methods per class: 1",
      "file": "random_walker_controller.hpp",
      "line": null,
      "function": null,
      "comment": "MAC is less than 1",
      "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
      "rule": "Minimum weighted methods per class: 1",
      "file": "random_walker_controller.hpp",
      "line": null,
      "function": null,
      "comment": "NodeHandle: WMC < 1 (0)",
      "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
      "rule": "Minimum available methods per class: 1",
      "file": "random_walker_controller.hpp",
      "line": null,
      "function": null,
      "comment": "MAC is less than 1",
      "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
      "rule": "Minimum weighted methods per class: 1",
      "file": "random_walker_controller.hpp",
      "line": null,
      "function": null,
      "comment": "Duration: WMC < 1 (0)",
      "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
      "rule": "Minimum available methods per class: 1",
      "file": "random_walker_controller.hpp",
      "line": null,
      "function": null,
      "comment": "MAC is less than 1",
      "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
      "rule": "Minimum weighted methods per class: 1",
      "file": "random_walker_controller.hpp",
      "line": null,
      "function": null,
      "comment": "Subscriber: WMC < 1 (0)",
      "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
      "rule": "Minimum available methods per class: 1",
      "file": "random_walker_controller.hpp",
      "line": null,
      "function": null,
      "comment": "MAC is less than 1",
      "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
      "rule": "Minimum weighted methods per class: 1",
      "file": "random_walker_controller.hpp",
      "line": null,
      "function": null,
      "comment": "EmptyConstPtr: WMC < 1 (0)",
      "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
      "rule": "Minimum available methods per class: 1",
      "file": "random_walker_controller.hpp",
      "line": null,
      "function": null,
      "comment": "MAC is less than 1",
      "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
      "rule": "Minimum weighted methods per class: 1",
      "file": "random_walker_controller.hpp",
      "line": null,
      "function": null,
      "comment": "bool: WMC < 1 (0)",
      "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
      "rule": "Minimum available methods per class: 1",
      "file": "random_walker_controller.hpp",
      "line": null,
      "function": null,
      "comment": "MAC is less than 1",
      "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
      "rule": "Minimum weighted methods per class: 1",
      "file": "random_walker_controller.hpp",
      "line": null,
      "function": null,
      "comment": "string: WMC < 1 (0)",
      "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
      "rule": "Minimum available methods per class: 1",
      "file": "random_walker_controller.hpp",
      "line": null,
      "function": null,
      "comment": "MAC is less than 1",
      "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
      "rule": "Minimum weighted methods per class: 1",
      "file": "random_walker_controller.hpp",
      "line": null,
      "function": null,
      "comment": "CliffEventConstPtr: WMC < 1 (0)",
      "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
      "rule": "Minimum available methods per class: 1",
      "file": "random_walker_controller.hpp",
      "line": null,
      "function": null,
      "comment": "MAC is less than 1",
      "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
      "rule": "Minimum weighted methods per class: 1",
      "file": "random_walker_controller.hpp",
      "line": null,
      "function": null,
      "comment": "Controller: WMC < 1 (0)",
      "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
      "rule": "Minimum available methods per class: 1",
      "file": "random_walker_controller.hpp",
      "line": null,
      "function": null,
      "comment": "MAC is less than 1",
      "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
      "rule": "Minimum weighted methods per class: 1",
      "file": "random_walker_controller.hpp",
      "line": null,
      "function": null,
      "comment": "Publisher: WMC < 1 (0)",
      "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
      "rule": "Minimum available methods per class: 1",
      "file": "random_walker_controller.hpp",
      "line": null,
      "function": null,
      "comment": "MAC is less than 1",
      "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
      "rule": "Maximum coupling between objects: 5",
      "file": "random_walker_controller.hpp",
      "line": null,
      "function": null,
      "comment": "CBO is greater than 5, RandomWalkerController, 12",
      "tags": ["metrics","nasa-satc","ros","coupling"]
  },
  {
      "rule": "Minimum available methods per class: 1",
      "file": "random_walker_controller.hpp",
      "line": null,
      "function": null,
      "comment": "MAC is less than 1",
      "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
      "rule": "Minimum cyclomatic complexity: 1",
      "file": "random_walker_controller.hpp",
      "line": 45,
      "function": "RandomWalkerController",
      "comment": "CC is less than 1",
      "tags": ["metrics","nasa-satc","his","ros","kth","cyclomatic-complexity"]
  },
  {
      "rule": "Maximum cyclomatic complexity: 10",
      "file": "random_walker_controller.hpp",
      "line": 163,
      "function": "bumperEventCB",
      "comment": "CC is greater than 10",
      "tags": ["metrics","nasa-satc","his","cyclomatic-complexity"]
  },
  {
      "rule": "Maximum cyclomatic complexity: 15",
      "file": "random_walker_controller.hpp",
      "line": 163,
      "function": "bumperEventCB",
      "comment": "CC is greater than 15",
      "tags": ["metrics","ros","kth","cyclomatic-complexity"]
  },
  {
      "rule": "Maximum cyclomatic complexity: 10",
      "file": "random_walker_controller.hpp",
      "line": 169,
      "function": "cliffEventCB",
      "comment": "CC is greater than 10",
      "tags": ["metrics","nasa-satc","his","cyclomatic-complexity"]
  },
  {
      "rule": "Maximum cyclomatic complexity: 15",
      "file": "random_walker_controller.hpp",
      "line": 169,
      "function": "cliffEventCB",
      "comment": "CC is greater than 15",
      "tags": ["metrics","ros","kth","cyclomatic-complexity"]
  },
  {
      "rule": "Maximum cyclomatic complexity: 10",
      "file": "random_walker_controller.hpp",
      "line": 175,
      "function": "wheelDropEventCB",
      "comment": "CC is greater than 10",
      "tags": ["metrics","nasa-satc","his","cyclomatic-complexity"]
  },
  {
      "rule": "Maximum cyclomatic complexity: 15",
      "file": "random_walker_controller.hpp",
      "line": 175,
      "function": "wheelDropEventCB",
      "comment": "CC is greater than 15",
      "tags": ["metrics","ros","kth","cyclomatic-complexity"]
  },
  {
      "rule": "Minimum cyclomatic complexity: 1",
      "file": "random_walker_controller.hpp",
      "line": 62,
      "function": "~RandomWalkerController",
      "comment": "CC is less than 1",
      "tags": ["metrics","nasa-satc","his","ros","kth","cyclomatic-complexity"]
  },
  {
      "rule": "Maximum lines of comments: 30%",
      "file": "nodelet.cpp",
      "line": null,
      "function": null,
      "comment": "Comment ratio is above 30%",
      "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
      "rule": "Maximum lines of comments: 40%",
      "file": "nodelet.cpp",
      "line": null,
      "function": null,
      "comment": "Comment ratio is above 40%",
      "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
      "rule": "Minimum available methods per class: 1",
      "file": "nodelet.cpp",
      "line": null,
      "function": null,
      "comment": "MAC is less than 1",
      "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
      "rule": "Minimum cyclomatic complexity: 1",
      "file": "nodelet.cpp",
      "line": 96,
      "function": "PLUGINLIB_EXPORT_CLASS",
      "comment": "CC is less than 1",
      "tags": ["metrics","nasa-satc","his","ros","kth","cyclomatic-complexity"]
  },
  {
      "rule": "Minimum cyclomatic complexity: 1",
      "file": "nodelet.cpp",
      "line": 29,
      "function": "RandomWalkerControllerNodelet",
      "comment": "CC is less than 1",
      "tags": ["metrics","nasa-satc","his","ros","kth","cyclomatic-complexity"]
  },
  {
      "rule": "Minimum cyclomatic complexity: 1",
      "file": "nodelet.cpp",
      "line": 30,
      "function": "~RandomWalkerControllerNodelet",
      "comment": "CC is less than 1",
      "tags": ["metrics","nasa-satc","his","ros","kth","cyclomatic-complexity"]
  },
  {
      "rule": "Minimum weighted methods per class: 1",
      "file": "nodelet.cpp",
      "line": null,
      "function": null,
      "comment": "Thread: WMC < 1 (0)",
      "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
      "rule": "Minimum available methods per class: 1",
      "file": "nodelet.cpp",
      "line": null,
      "function": null,
      "comment": "MAC is less than 1",
      "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
      "rule": "Minimum weighted methods per class: 1",
      "file": "nodelet.cpp",
      "line": null,
      "function": null,
      "comment": "bool: WMC < 1 (0)",
      "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
      "rule": "Minimum available methods per class: 1",
      "file": "nodelet.cpp",
      "line": null,
      "function": null,
      "comment": "MAC is less than 1",
      "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
      "rule": "Minimum weighted methods per class: 1",
      "file": "nodelet.cpp",
      "line": null,
      "function": null,
      "comment": "string: WMC < 1 (0)",
      "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
      "rule": "Minimum available methods per class: 1",
      "file": "nodelet.cpp",
      "line": null,
      "function": null,
      "comment": "MAC is less than 1",
      "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
      "rule": "Minimum weighted methods per class: 1",
      "file": "nodelet.cpp",
      "line": null,
      "function": null,
      "comment": "shared_ptr: WMC < 1 (0)",
      "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
      "rule": "Minimum available methods per class: 1",
      "file": "nodelet.cpp",
      "line": null,
      "function": null,
      "comment": "MAC is less than 1",
      "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
      "rule": "Minimum weighted methods per class: 1",
      "file": "nodelet.cpp",
      "line": null,
      "function": null,
      "comment": "Nodelet: WMC < 1 (0)",
      "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
      "rule": "Minimum available methods per class: 1",
      "file": "nodelet.cpp",
      "line": null,
      "function": null,
      "comment": "MAC is less than 1",
      "tags": ["metrics","nasa-satc","ros","available-methods"]
  }
]