[
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "safety_controller.hpp",
    "line": 53,
    "function": null,
    "comment": "safety_controller.hpp:53:  Found C system header after C++ system header. Should be: safety_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "safety_controller.hpp",
    "line": 54,
    "function": null,
    "comment": "safety_controller.hpp:54:  Found C system header after C++ system header. Should be: safety_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "safety_controller.hpp",
    "line": 55,
    "function": null,
    "comment": "safety_controller.hpp:55:  Found C system header after C++ system header. Should be: safety_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "safety_controller.hpp",
    "line": 56,
    "function": null,
    "comment": "safety_controller.hpp:56:  Found C system header after C++ system header. Should be: safety_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "safety_controller.hpp",
    "line": 57,
    "function": null,
    "comment": "safety_controller.hpp:57:  Found C system header after C++ system header. Should be: safety_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "safety_controller.hpp",
    "line": 58,
    "function": null,
    "comment": "safety_controller.hpp:58:  Found C system header after C++ system header. Should be: safety_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "safety_controller.hpp",
    "line": 59,
    "function": null,
    "comment": "safety_controller.hpp:59:  Found C system header after C++ system header. Should be: safety_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "safety_controller.hpp",
    "line": 62,
    "function": null,
    "comment": "safety_controller.hpp:62:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "safety_controller.hpp",
    "line": 76,
    "function": null,
    "comment": "safety_controller.hpp:76:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "safety_controller.hpp",
    "line": 77,
    "function": null,
    "comment": "safety_controller.hpp:77:  public: should be indented +1 space inside class SafetyController  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "safety_controller.hpp",
    "line": 78,
    "function": null,
    "comment": "safety_controller.hpp:78:  Is this a non-const reference? If so, make const or use a pointer: ros::NodeHandle& nh  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "safety_controller.hpp",
    "line": 78,
    "function": null,
    "comment": "safety_controller.hpp:78:  Is this a non-const reference? If so, make const or use a pointer: std::string& name  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "safety_controller.hpp",
    "line": 89,
    "function": null,
    "comment": "safety_controller.hpp:89:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not use meaningless empty statements.",
    "file": "safety_controller.hpp",
    "line": 91,
    "function": null,
    "comment": "safety_controller.hpp:91:  You don't need a ; after a }  [readability/braces] [4]",
    "tags": ["code-standards","google-cpp","empty-statement","ambiguous-code"]
  },
  {
    "rule": "Do not use meaningless empty statements.",
    "file": "safety_controller.hpp",
    "line": 92,
    "function": null,
    "comment": "safety_controller.hpp:92:  You don't need a ; after a }  [readability/braces] [4]",
    "tags": ["code-standards","google-cpp","empty-statement","ambiguous-code"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "safety_controller.hpp",
    "line": 99,
    "function": null,
    "comment": "safety_controller.hpp:99:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "safety_controller.hpp",
    "line": 100,
    "function": null,
    "comment": "safety_controller.hpp:100:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "safety_controller.hpp",
    "line": 102,
    "function": null,
    "comment": "safety_controller.hpp:102:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "safety_controller.hpp",
    "line": 103,
    "function": null,
    "comment": "safety_controller.hpp:103:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "safety_controller.hpp",
    "line": 104,
    "function": null,
    "comment": "safety_controller.hpp:104:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "safety_controller.hpp",
    "line": 105,
    "function": null,
    "comment": "safety_controller.hpp:105:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "safety_controller.hpp",
    "line": 106,
    "function": null,
    "comment": "safety_controller.hpp:106:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "safety_controller.hpp",
    "line": 107,
    "function": null,
    "comment": "safety_controller.hpp:107:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "safety_controller.hpp",
    "line": 108,
    "function": null,
    "comment": "safety_controller.hpp:108:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "safety_controller.hpp",
    "line": 109,
    "function": null,
    "comment": "safety_controller.hpp:109:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "safety_controller.hpp",
    "line": 110,
    "function": null,
    "comment": "safety_controller.hpp:110:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "safety_controller.hpp",
    "line": 119,
    "function": null,
    "comment": "safety_controller.hpp:119:  private: should be indented +1 space inside class SafetyController  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "safety_controller.hpp",
    "line": 123,
    "function": null,
    "comment": "safety_controller.hpp:123:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "safety_controller.hpp",
    "line": 132,
    "function": null,
    "comment": "safety_controller.hpp:132:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "safety_controller.hpp",
    "line": 177,
    "function": null,
    "comment": "safety_controller.hpp:177:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "safety_controller.hpp",
    "line": 179,
    "function": null,
    "comment": "safety_controller.hpp:179:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "safety_controller.hpp",
    "line": 182,
    "function": null,
    "comment": "safety_controller.hpp:182:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "safety_controller.hpp",
    "line": 183,
    "function": null,
    "comment": "safety_controller.hpp:183:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "safety_controller.hpp",
    "line": 189,
    "function": null,
    "comment": "safety_controller.hpp:189:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "safety_controller.hpp",
    "line": 191,
    "function": null,
    "comment": "safety_controller.hpp:191:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "safety_controller.hpp",
    "line": 194,
    "function": null,
    "comment": "safety_controller.hpp:194:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "safety_controller.hpp",
    "line": 195,
    "function": null,
    "comment": "safety_controller.hpp:195:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "safety_controller.hpp",
    "line": 201,
    "function": null,
    "comment": "safety_controller.hpp:201:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "safety_controller.hpp",
    "line": 203,
    "function": null,
    "comment": "safety_controller.hpp:203:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "safety_controller.hpp",
    "line": 207,
    "function": null,
    "comment": "safety_controller.hpp:207:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "safety_controller.hpp",
    "line": 208,
    "function": null,
    "comment": "safety_controller.hpp:208:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "safety_controller.hpp",
    "line": 209,
    "function": null,
    "comment": "safety_controller.hpp:209:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "safety_controller.hpp",
    "line": 210,
    "function": null,
    "comment": "safety_controller.hpp:210:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "safety_controller.hpp",
    "line": 213,
    "function": null,
    "comment": "safety_controller.hpp:213:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "safety_controller.hpp",
    "line": 213,
    "function": null,
    "comment": "safety_controller.hpp:213:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "safety_controller.hpp",
    "line": 214,
    "function": null,
    "comment": "safety_controller.hpp:214:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "safety_controller.hpp",
    "line": 215,
    "function": null,
    "comment": "safety_controller.hpp:215:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "safety_controller.hpp",
    "line": 217,
    "function": null,
    "comment": "safety_controller.hpp:217:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "safety_controller.hpp",
    "line": 218,
    "function": null,
    "comment": "safety_controller.hpp:218:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "safety_controller.hpp",
    "line": 219,
    "function": null,
    "comment": "safety_controller.hpp:219:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "safety_controller.hpp",
    "line": 220,
    "function": null,
    "comment": "safety_controller.hpp:220:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "safety_controller.hpp",
    "line": 226,
    "function": null,
    "comment": "safety_controller.hpp:226:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "safety_controller.hpp",
    "line": 228,
    "function": null,
    "comment": "safety_controller.hpp:228:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "safety_controller.hpp",
    "line": 232,
    "function": null,
    "comment": "safety_controller.hpp:232:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "safety_controller.hpp",
    "line": 233,
    "function": null,
    "comment": "safety_controller.hpp:233:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "safety_controller.hpp",
    "line": 234,
    "function": null,
    "comment": "safety_controller.hpp:234:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "safety_controller.hpp",
    "line": 235,
    "function": null,
    "comment": "safety_controller.hpp:235:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "safety_controller.hpp",
    "line": 238,
    "function": null,
    "comment": "safety_controller.hpp:238:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "safety_controller.hpp",
    "line": 238,
    "function": null,
    "comment": "safety_controller.hpp:238:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "safety_controller.hpp",
    "line": 239,
    "function": null,
    "comment": "safety_controller.hpp:239:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "safety_controller.hpp",
    "line": 240,
    "function": null,
    "comment": "safety_controller.hpp:240:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "safety_controller.hpp",
    "line": 242,
    "function": null,
    "comment": "safety_controller.hpp:242:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "safety_controller.hpp",
    "line": 243,
    "function": null,
    "comment": "safety_controller.hpp:243:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "safety_controller.hpp",
    "line": 244,
    "function": null,
    "comment": "safety_controller.hpp:244:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "safety_controller.hpp",
    "line": 245,
    "function": null,
    "comment": "safety_controller.hpp:245:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "safety_controller.hpp",
    "line": 250,
    "function": null,
    "comment": "safety_controller.hpp:250:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "safety_controller.hpp",
    "line": 251,
    "function": null,
    "comment": "safety_controller.hpp:251:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "safety_controller.hpp",
    "line": 253,
    "function": null,
    "comment": "safety_controller.hpp:253:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "safety_controller.hpp",
    "line": 256,
    "function": null,
    "comment": "safety_controller.hpp:256:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "safety_controller.hpp",
    "line": 260,
    "function": null,
    "comment": "safety_controller.hpp:260:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "safety_controller.hpp",
    "line": 260,
    "function": null,
    "comment": "safety_controller.hpp:260:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "safety_controller.hpp",
    "line": 261,
    "function": null,
    "comment": "safety_controller.hpp:261:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "safety_controller.hpp",
    "line": 266,
    "function": null,
    "comment": "safety_controller.hpp:266:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "safety_controller.hpp",
    "line": 266,
    "function": null,
    "comment": "safety_controller.hpp:266:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "safety_controller.hpp",
    "line": 267,
    "function": null,
    "comment": "safety_controller.hpp:267:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "safety_controller.hpp",
    "line": 270,
    "function": null,
    "comment": "safety_controller.hpp:270:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "safety_controller.hpp",
    "line": 274,
    "function": null,
    "comment": "safety_controller.hpp:274:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "safety_controller.hpp",
    "line": 274,
    "function": null,
    "comment": "safety_controller.hpp:274:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "safety_controller.hpp",
    "line": 275,
    "function": null,
    "comment": "safety_controller.hpp:275:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "safety_controller.hpp",
    "line": 280,
    "function": null,
    "comment": "safety_controller.hpp:280:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "safety_controller.hpp",
    "line": 281,
    "function": null,
    "comment": "safety_controller.hpp:281:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "safety_controller.hpp",
    "line": 287,
    "function": null,
    "comment": "safety_controller.hpp:287:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "safety_controller.hpp",
    "line": 296,
    "function": null,
    "comment": "safety_controller.hpp:296:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "safety_controller.hpp",
    "line": 300,
    "function": null,
    "comment": "safety_controller.hpp:300:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "safety_controller.hpp",
    "line": 302,
    "function": null,
    "comment": "safety_controller.hpp:302:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "safety_controller.hpp",
    "line": 304,
    "function": null,
    "comment": "safety_controller.hpp:304:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "safety_controller.hpp",
    "line": 314,
    "function": null,
    "comment": "safety_controller.hpp:314:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "safety_controller.hpp",
    "line": 315,
    "function": null,
    "comment": "safety_controller.hpp:315:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "safety_controller.hpp",
    "line": 325,
    "function": null,
    "comment": "safety_controller.hpp:325:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "safety_controller.hpp",
    "line": 326,
    "function": null,
    "comment": "safety_controller.hpp:326:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "safety_controller.hpp",
    "line": 337,
    "function": null,
    "comment": "safety_controller.hpp:337:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "safety_controller.hpp",
    "line": 338,
    "function": null,
    "comment": "safety_controller.hpp:338:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "safety_controller.hpp",
    "line": 349,
    "function": null,
    "comment": "safety_controller.hpp:349:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "safety_controller.hpp",
    "line": 349,
    "function": null,
    "comment": "safety_controller.hpp:349:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "safety_controller.hpp",
    "line": 350,
    "function": null,
    "comment": "safety_controller.hpp:350:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "safety_controller.hpp",
    "line": 350,
    "function": null,
    "comment": "safety_controller.hpp:350:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "safety_controller.hpp",
    "line": 350,
    "function": null,
    "comment": "safety_controller.hpp:350:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "safety_controller.hpp",
    "line": 351,
    "function": null,
    "comment": "safety_controller.hpp:351:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "safety_controller.hpp",
    "line": 357,
    "function": null,
    "comment": "safety_controller.hpp:357:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "nodelet.cpp",
    "line": 45,
    "function": null,
    "comment": "nodelet.cpp:45:  Include 'ecl/threads/thread.hpp' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "nodelet.cpp",
    "line": 50,
    "function": null,
    "comment": "nodelet.cpp:50:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "nodelet.cpp",
    "line": 53,
    "function": null,
    "comment": "nodelet.cpp:53:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "nodelet.cpp",
    "line": 54,
    "function": null,
    "comment": "nodelet.cpp:54:  public: should be indented +1 space inside class SafetyControllerNodelet  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Do not use meaningless empty statements.",
    "file": "nodelet.cpp",
    "line": 55,
    "function": null,
    "comment": "nodelet.cpp:55:  You don't need a ; after a }  [readability/braces] [4]",
    "tags": ["code-standards","google-cpp","empty-statement","ambiguous-code"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "nodelet.cpp",
    "line": 57,
    "function": null,
    "comment": "nodelet.cpp:57:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "nodelet.cpp",
    "line": 63,
    "function": null,
    "comment": "nodelet.cpp:63:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "nodelet.cpp",
    "line": 72,
    "function": null,
    "comment": "nodelet.cpp:72:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "nodelet.cpp",
    "line": 73,
    "function": null,
    "comment": "nodelet.cpp:73:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "nodelet.cpp",
    "line": 77,
    "function": null,
    "comment": "nodelet.cpp:77:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "nodelet.cpp",
    "line": 78,
    "function": null,
    "comment": "nodelet.cpp:78:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "nodelet.cpp",
    "line": 79,
    "function": null,
    "comment": "nodelet.cpp:79:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "nodelet.cpp",
    "line": 82,
    "function": null,
    "comment": "nodelet.cpp:82:  private: should be indented +1 space inside class SafetyControllerNodelet  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "nodelet.cpp",
    "line": 84,
    "function": null,
    "comment": "nodelet.cpp:84:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "nodelet.cpp",
    "line": 86,
    "function": null,
    "comment": "nodelet.cpp:86:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Unary operators should have no whitespace around them.",
    "file": "nodelet.cpp",
    "line": 87,
    "function": null,
    "comment": "nodelet.cpp:87:  Extra space for operator !   [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","unary-operator"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "nodelet.cpp",
    "line": 88,
    "function": null,
    "comment": "nodelet.cpp:88:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "nodelet.cpp",
    "line": 99,
    "function": null,
    "comment": "nodelet.cpp:99:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "nodelet.cpp",
    "line": 66,
    "function": null,
    "comment": "nodelet.cpp:66:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "safety_controller.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "safety_controller.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "safety_controller.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "safety_controller.hpp",
    "line": null,
    "function": null,
    "comment": "Controller: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "safety_controller.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "safety_controller.hpp",
    "line": null,
    "function": null,
    "comment": "SafetyController: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "safety_controller.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "nodelet.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "nodelet.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "nodelet.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "nodelet.cpp",
    "line": null,
    "function": null,
    "comment": "Thread: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "nodelet.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "nodelet.cpp",
    "line": null,
    "function": null,
    "comment": "bool: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "nodelet.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "nodelet.cpp",
    "line": null,
    "function": null,
    "comment": "shared_ptr: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "nodelet.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "nodelet.cpp",
    "line": null,
    "function": null,
    "comment": "Nodelet: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "nodelet.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  }
]