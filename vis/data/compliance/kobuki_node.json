[
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "odometry.hpp",
    "line": null,
    "function": null,
    "comment": "odometry.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "odometry.hpp",
    "line": 21,
    "function": null,
    "comment": "odometry.hpp:21:  Found C system header after C++ system header. Should be: odometry.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "odometry.hpp",
    "line": 22,
    "function": null,
    "comment": "odometry.hpp:22:  Found C system header after C++ system header. Should be: odometry.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "odometry.hpp",
    "line": 23,
    "function": null,
    "comment": "odometry.hpp:23:  Found C system header after C++ system header. Should be: odometry.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "odometry.hpp",
    "line": 24,
    "function": null,
    "comment": "odometry.hpp:24:  Found C system header after C++ system header. Should be: odometry.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "odometry.hpp",
    "line": 40,
    "function": null,
    "comment": "odometry.hpp:40:  public: should be indented +1 space inside class Odometry  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "odometry.hpp",
    "line": 42,
    "function": null,
    "comment": "odometry.hpp:42:  Is this a non-const reference? If so, make const or use a pointer: ros::NodeHandle& nh  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "odometry.hpp",
    "line": 44,
    "function": null,
    "comment": "odometry.hpp:44:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "odometry.hpp",
    "line": 44,
    "function": null,
    "comment": "odometry.hpp:44:  Is this a non-const reference? If so, make const or use a pointer: ecl::linear_algebra::Vector3d &pose_update_rates  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "odometry.hpp",
    "line": 50,
    "function": null,
    "comment": "odometry.hpp:50:  private: should be indented +1 space inside class Odometry  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "odometry.hpp",
    "line": 63,
    "function": null,
    "comment": "odometry.hpp:63:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "odometry.hpp",
    "line": 66,
    "function": null,
    "comment": "odometry.hpp:66:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "diagnostics.hpp",
    "line": null,
    "function": null,
    "comment": "diagnostics.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "diagnostics.hpp",
    "line": 21,
    "function": null,
    "comment": "diagnostics.hpp:21:  Include 'kobuki_driver/modules/battery.hpp' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "diagnostics.hpp",
    "line": 23,
    "function": null,
    "comment": "diagnostics.hpp:23:  Include 'diagnostic_updater/diagnostic_updater.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "diagnostics.hpp",
    "line": 40,
    "function": null,
    "comment": "diagnostics.hpp:40:  public: should be indented +1 space inside class BatteryTask  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "diagnostics.hpp",
    "line": 42,
    "function": null,
    "comment": "diagnostics.hpp:42:  Is this a non-const reference? If so, make const or use a pointer: diagnostic_updater::DiagnosticStatusWrapper &stat  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "diagnostics.hpp",
    "line": 45,
    "function": null,
    "comment": "diagnostics.hpp:45:  private: should be indented +1 space inside class BatteryTask  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "diagnostics.hpp",
    "line": 53,
    "function": null,
    "comment": "diagnostics.hpp:53:  public: should be indented +1 space inside class WatchdogTask  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "diagnostics.hpp",
    "line": 55,
    "function": null,
    "comment": "diagnostics.hpp:55:  Is this a non-const reference? If so, make const or use a pointer: diagnostic_updater::DiagnosticStatusWrapper &stat  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "diagnostics.hpp",
    "line": 59,
    "function": null,
    "comment": "diagnostics.hpp:59:  private: should be indented +1 space inside class WatchdogTask  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "diagnostics.hpp",
    "line": 67,
    "function": null,
    "comment": "diagnostics.hpp:67:  public: should be indented +1 space inside class CliffSensorTask  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "diagnostics.hpp",
    "line": 69,
    "function": null,
    "comment": "diagnostics.hpp:69:  Is this a non-const reference? If so, make const or use a pointer: diagnostic_updater::DiagnosticStatusWrapper &stat  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "diagnostics.hpp",
    "line": 71,
    "function": null,
    "comment": "diagnostics.hpp:71:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "diagnostics.hpp",
    "line": 74,
    "function": null,
    "comment": "diagnostics.hpp:74:  private: should be indented +1 space inside class CliffSensorTask  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "diagnostics.hpp",
    "line": 83,
    "function": null,
    "comment": "diagnostics.hpp:83:  public: should be indented +1 space inside class WallSensorTask  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "diagnostics.hpp",
    "line": 85,
    "function": null,
    "comment": "diagnostics.hpp:85:  Is this a non-const reference? If so, make const or use a pointer: diagnostic_updater::DiagnosticStatusWrapper &stat  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "diagnostics.hpp",
    "line": 88,
    "function": null,
    "comment": "diagnostics.hpp:88:  private: should be indented +1 space inside class WallSensorTask  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "diagnostics.hpp",
    "line": 96,
    "function": null,
    "comment": "diagnostics.hpp:96:  public: should be indented +1 space inside class WheelDropTask  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "diagnostics.hpp",
    "line": 98,
    "function": null,
    "comment": "diagnostics.hpp:98:  Is this a non-const reference? If so, make const or use a pointer: diagnostic_updater::DiagnosticStatusWrapper &stat  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "diagnostics.hpp",
    "line": 101,
    "function": null,
    "comment": "diagnostics.hpp:101:  private: should be indented +1 space inside class WheelDropTask  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "diagnostics.hpp",
    "line": 110,
    "function": null,
    "comment": "diagnostics.hpp:110:  public: should be indented +1 space inside class MotorCurrentTask  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "diagnostics.hpp",
    "line": 112,
    "function": null,
    "comment": "diagnostics.hpp:112:  Is this a non-const reference? If so, make const or use a pointer: diagnostic_updater::DiagnosticStatusWrapper &stat  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "diagnostics.hpp",
    "line": 115,
    "function": null,
    "comment": "diagnostics.hpp:115:  private: should be indented +1 space inside class MotorCurrentTask  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "diagnostics.hpp",
    "line": 123,
    "function": null,
    "comment": "diagnostics.hpp:123:  public: should be indented +1 space inside class MotorStateTask  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "diagnostics.hpp",
    "line": 125,
    "function": null,
    "comment": "diagnostics.hpp:125:  Is this a non-const reference? If so, make const or use a pointer: diagnostic_updater::DiagnosticStatusWrapper &stat  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "diagnostics.hpp",
    "line": 126,
    "function": null,
    "comment": "diagnostics.hpp:126:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "Do not use meaningless empty statements.",
    "file": "diagnostics.hpp",
    "line": 126,
    "function": null,
    "comment": "diagnostics.hpp:126:  You don't need a ; after a }  [readability/braces] [4]",
    "tags": ["code-standards","google-cpp","empty-statement","ambiguous-code"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "diagnostics.hpp",
    "line": 128,
    "function": null,
    "comment": "diagnostics.hpp:128:  private: should be indented +1 space inside class MotorStateTask  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "diagnostics.hpp",
    "line": 136,
    "function": null,
    "comment": "diagnostics.hpp:136:  public: should be indented +1 space inside class GyroSensorTask  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "diagnostics.hpp",
    "line": 138,
    "function": null,
    "comment": "diagnostics.hpp:138:  Is this a non-const reference? If so, make const or use a pointer: diagnostic_updater::DiagnosticStatusWrapper &stat  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "diagnostics.hpp",
    "line": 141,
    "function": null,
    "comment": "diagnostics.hpp:141:  private: should be indented +1 space inside class GyroSensorTask  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "diagnostics.hpp",
    "line": 149,
    "function": null,
    "comment": "diagnostics.hpp:149:  public: should be indented +1 space inside class DigitalInputTask  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "diagnostics.hpp",
    "line": 151,
    "function": null,
    "comment": "diagnostics.hpp:151:  Is this a non-const reference? If so, make const or use a pointer: diagnostic_updater::DiagnosticStatusWrapper &stat  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "diagnostics.hpp",
    "line": 154,
    "function": null,
    "comment": "diagnostics.hpp:154:  private: should be indented +1 space inside class DigitalInputTask  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "diagnostics.hpp",
    "line": 162,
    "function": null,
    "comment": "diagnostics.hpp:162:  public: should be indented +1 space inside class AnalogInputTask  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "diagnostics.hpp",
    "line": 164,
    "function": null,
    "comment": "diagnostics.hpp:164:  Is this a non-const reference? If so, make const or use a pointer: diagnostic_updater::DiagnosticStatusWrapper &stat  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "diagnostics.hpp",
    "line": 167,
    "function": null,
    "comment": "diagnostics.hpp:167:  private: should be indented +1 space inside class AnalogInputTask  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "diagnostics.hpp",
    "line": 171,
    "function": null,
    "comment": "diagnostics.hpp:171:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "diagnostics.hpp",
    "line": 168,
    "function": null,
    "comment": "diagnostics.hpp:168:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "kobuki_ros.hpp",
    "line": 48,
    "function": null,
    "comment": "kobuki_ros.hpp:48:  Found C system header after C++ system header. Should be: kobuki_ros.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "kobuki_ros.hpp",
    "line": 50,
    "function": null,
    "comment": "kobuki_ros.hpp:50:  Found C system header after C++ system header. Should be: kobuki_ros.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "kobuki_ros.hpp",
    "line": 51,
    "function": null,
    "comment": "kobuki_ros.hpp:51:  Found C system header after C++ system header. Should be: kobuki_ros.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "kobuki_ros.hpp",
    "line": 52,
    "function": null,
    "comment": "kobuki_ros.hpp:52:  Found C system header after C++ system header. Should be: kobuki_ros.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "kobuki_ros.hpp",
    "line": 53,
    "function": null,
    "comment": "kobuki_ros.hpp:53:  Found C system header after C++ system header. Should be: kobuki_ros.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "kobuki_ros.hpp",
    "line": 54,
    "function": null,
    "comment": "kobuki_ros.hpp:54:  Found C system header after C++ system header. Should be: kobuki_ros.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "kobuki_ros.hpp",
    "line": 55,
    "function": null,
    "comment": "kobuki_ros.hpp:55:  Found C system header after C++ system header. Should be: kobuki_ros.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "kobuki_ros.hpp",
    "line": 56,
    "function": null,
    "comment": "kobuki_ros.hpp:56:  Found C system header after C++ system header. Should be: kobuki_ros.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "kobuki_ros.hpp",
    "line": 57,
    "function": null,
    "comment": "kobuki_ros.hpp:57:  Found C system header after C++ system header. Should be: kobuki_ros.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "kobuki_ros.hpp",
    "line": 58,
    "function": null,
    "comment": "kobuki_ros.hpp:58:  Found C system header after C++ system header. Should be: kobuki_ros.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "kobuki_ros.hpp",
    "line": 59,
    "function": null,
    "comment": "kobuki_ros.hpp:59:  Found C system header after C++ system header. Should be: kobuki_ros.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "kobuki_ros.hpp",
    "line": 60,
    "function": null,
    "comment": "kobuki_ros.hpp:60:  Found C system header after C++ system header. Should be: kobuki_ros.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "kobuki_ros.hpp",
    "line": 61,
    "function": null,
    "comment": "kobuki_ros.hpp:61:  Found C system header after C++ system header. Should be: kobuki_ros.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "kobuki_ros.hpp",
    "line": 62,
    "function": null,
    "comment": "kobuki_ros.hpp:62:  Found C system header after C++ system header. Should be: kobuki_ros.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "kobuki_ros.hpp",
    "line": 63,
    "function": null,
    "comment": "kobuki_ros.hpp:63:  Found C system header after C++ system header. Should be: kobuki_ros.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "kobuki_ros.hpp",
    "line": 64,
    "function": null,
    "comment": "kobuki_ros.hpp:64:  Found C system header after C++ system header. Should be: kobuki_ros.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "kobuki_ros.hpp",
    "line": 65,
    "function": null,
    "comment": "kobuki_ros.hpp:65:  Found C system header after C++ system header. Should be: kobuki_ros.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "kobuki_ros.hpp",
    "line": 66,
    "function": null,
    "comment": "kobuki_ros.hpp:66:  Found C system header after C++ system header. Should be: kobuki_ros.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "kobuki_ros.hpp",
    "line": 67,
    "function": null,
    "comment": "kobuki_ros.hpp:67:  Found C system header after C++ system header. Should be: kobuki_ros.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "kobuki_ros.hpp",
    "line": 68,
    "function": null,
    "comment": "kobuki_ros.hpp:68:  Found C system header after C++ system header. Should be: kobuki_ros.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "kobuki_ros.hpp",
    "line": 69,
    "function": null,
    "comment": "kobuki_ros.hpp:69:  Found C system header after C++ system header. Should be: kobuki_ros.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "kobuki_ros.hpp",
    "line": 70,
    "function": null,
    "comment": "kobuki_ros.hpp:70:  Found C system header after C++ system header. Should be: kobuki_ros.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "kobuki_ros.hpp",
    "line": 71,
    "function": null,
    "comment": "kobuki_ros.hpp:71:  Found C system header after C++ system header. Should be: kobuki_ros.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "kobuki_ros.hpp",
    "line": 72,
    "function": null,
    "comment": "kobuki_ros.hpp:72:  Found C system header after C++ system header. Should be: kobuki_ros.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "kobuki_ros.hpp",
    "line": 73,
    "function": null,
    "comment": "kobuki_ros.hpp:73:  Found C system header after C++ system header. Should be: kobuki_ros.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "kobuki_ros.hpp",
    "line": 74,
    "function": null,
    "comment": "kobuki_ros.hpp:74:  Found C system header after C++ system header. Should be: kobuki_ros.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki_ros.hpp",
    "line": 83,
    "function": null,
    "comment": "kobuki_ros.hpp:83:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki_ros.hpp",
    "line": 85,
    "function": null,
    "comment": "kobuki_ros.hpp:85:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "kobuki_ros.hpp",
    "line": 86,
    "function": null,
    "comment": "kobuki_ros.hpp:86:  public: should be indented +1 space inside class KobukiRos  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "kobuki_ros.hpp",
    "line": 87,
    "function": null,
    "comment": "kobuki_ros.hpp:87:  Is this a non-const reference? If so, make const or use a pointer: std::string& node_name  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "kobuki_ros.hpp",
    "line": 87,
    "function": null,
    "comment": "kobuki_ros.hpp:87:  Single-parameter constructors should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "kobuki_ros.hpp",
    "line": 89,
    "function": null,
    "comment": "kobuki_ros.hpp:89:  Is this a non-const reference? If so, make const or use a pointer: ros::NodeHandle& nh  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "kobuki_ros.hpp",
    "line": 93,
    "function": null,
    "comment": "kobuki_ros.hpp:93:  private: should be indented +1 space inside class KobukiRos  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "kobuki_ros.hpp",
    "line": 97,
    "function": null,
    "comment": "kobuki_ros.hpp:97:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki_ros.hpp",
    "line": 101,
    "function": null,
    "comment": "kobuki_ros.hpp:101:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "kobuki_ros.hpp",
    "line": 101,
    "function": null,
    "comment": "kobuki_ros.hpp:101:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki_ros.hpp",
    "line": 102,
    "function": null,
    "comment": "kobuki_ros.hpp:102:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "kobuki_ros.hpp",
    "line": 102,
    "function": null,
    "comment": "kobuki_ros.hpp:102:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki_ros.hpp",
    "line": 108,
    "function": null,
    "comment": "kobuki_ros.hpp:108:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki_ros.hpp",
    "line": 109,
    "function": null,
    "comment": "kobuki_ros.hpp:109:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki_ros.hpp",
    "line": 110,
    "function": null,
    "comment": "kobuki_ros.hpp:110:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki_ros.hpp",
    "line": 111,
    "function": null,
    "comment": "kobuki_ros.hpp:111:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki_ros.hpp",
    "line": 113,
    "function": null,
    "comment": "kobuki_ros.hpp:113:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki_ros.hpp",
    "line": 115,
    "function": null,
    "comment": "kobuki_ros.hpp:115:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "kobuki_ros.hpp",
    "line": 118,
    "function": null,
    "comment": "kobuki_ros.hpp:118:  Is this a non-const reference? If so, make const or use a pointer: ros::NodeHandle& nh  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "kobuki_ros.hpp",
    "line": 119,
    "function": null,
    "comment": "kobuki_ros.hpp:119:  Is this a non-const reference? If so, make const or use a pointer: ros::NodeHandle& nh  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki_ros.hpp",
    "line": 132,
    "function": null,
    "comment": "kobuki_ros.hpp:132:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "kobuki_ros.hpp",
    "line": 151,
    "function": null,
    "comment": "kobuki_ros.hpp:151:  Use int16/int64/etc, rather than the C type short  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki_ros.hpp",
    "line": 174,
    "function": null,
    "comment": "kobuki_ros.hpp:174:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki_ros.hpp",
    "line": 177,
    "function": null,
    "comment": "kobuki_ros.hpp:177:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "kobuki_ros.hpp",
    "line": 179,
    "function": null,
    "comment": "kobuki_ros.hpp:179:  Missing spaces around ==  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "kobuki_ros.hpp",
    "line": 180,
    "function": null,
    "comment": "kobuki_ros.hpp:180:  Missing spaces around ==  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "kobuki_ros.hpp",
    "line": 181,
    "function": null,
    "comment": "kobuki_ros.hpp:181:  Missing spaces around ==  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "kobuki_ros.hpp",
    "line": 183,
    "function": null,
    "comment": "kobuki_ros.hpp:183:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "kobuki_ros.hpp",
    "line": 184,
    "function": null,
    "comment": "kobuki_ros.hpp:184:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "kobuki_ros.hpp",
    "line": 185,
    "function": null,
    "comment": "kobuki_ros.hpp:185:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "kobuki_ros.hpp",
    "line": 186,
    "function": null,
    "comment": "kobuki_ros.hpp:186:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "kobuki_ros.hpp",
    "line": 188,
    "function": null,
    "comment": "kobuki_ros.hpp:188:  Missing spaces around ==  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki_ros.hpp",
    "line": 189,
    "function": null,
    "comment": "kobuki_ros.hpp:189:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki_ros.hpp",
    "line": 190,
    "function": null,
    "comment": "kobuki_ros.hpp:190:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "kobuki_ros.hpp",
    "line": 190,
    "function": null,
    "comment": "kobuki_ros.hpp:190:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki_ros.hpp",
    "line": 191,
    "function": null,
    "comment": "kobuki_ros.hpp:191:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "kobuki_ros.hpp",
    "line": 191,
    "function": null,
    "comment": "kobuki_ros.hpp:191:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki_ros.hpp",
    "line": 192,
    "function": null,
    "comment": "kobuki_ros.hpp:192:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "kobuki_ros.hpp",
    "line": 192,
    "function": null,
    "comment": "kobuki_ros.hpp:192:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki_ros.hpp",
    "line": 193,
    "function": null,
    "comment": "kobuki_ros.hpp:193:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "kobuki_ros.hpp",
    "line": 193,
    "function": null,
    "comment": "kobuki_ros.hpp:193:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "kobuki_ros.hpp",
    "line": 197,
    "function": null,
    "comment": "kobuki_ros.hpp:197:  Is this a non-const reference? If so, make const or use a pointer: Command::Buffer &buffer  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "kobuki_ros.hpp",
    "line": 198,
    "function": null,
    "comment": "kobuki_ros.hpp:198:  Is this a non-const reference? If so, make const or use a pointer: PacketFinder::BufferType &buffer  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "kobuki_ros.hpp",
    "line": 199,
    "function": null,
    "comment": "kobuki_ros.hpp:199:  Use int16/int64/etc, rather than the C type short  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "kobuki_ros.hpp",
    "line": 217,
    "function": null,
    "comment": "kobuki_ros.hpp:217:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "kobuki_ros.hpp",
    "line": 199,
    "function": null,
    "comment": "kobuki_ros.hpp:199:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "subscriber_callbacks.cpp",
    "line": 47,
    "function": null,
    "comment": "subscriber_callbacks.cpp:47:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "subscriber_callbacks.cpp",
    "line": 54,
    "function": null,
    "comment": "subscriber_callbacks.cpp:54:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "subscriber_callbacks.cpp",
    "line": 56,
    "function": null,
    "comment": "subscriber_callbacks.cpp:56:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "subscriber_callbacks.cpp",
    "line": 59,
    "function": null,
    "comment": "subscriber_callbacks.cpp:59:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "subscriber_callbacks.cpp",
    "line": 60,
    "function": null,
    "comment": "subscriber_callbacks.cpp:60:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "subscriber_callbacks.cpp",
    "line": 61,
    "function": null,
    "comment": "subscriber_callbacks.cpp:61:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "subscriber_callbacks.cpp",
    "line": 70,
    "function": null,
    "comment": "subscriber_callbacks.cpp:70:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "subscriber_callbacks.cpp",
    "line": 71,
    "function": null,
    "comment": "subscriber_callbacks.cpp:71:  Missing space before ( in switch(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "subscriber_callbacks.cpp",
    "line": 72,
    "function": null,
    "comment": "subscriber_callbacks.cpp:72:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "subscriber_callbacks.cpp",
    "line": 73,
    "function": null,
    "comment": "subscriber_callbacks.cpp:73:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "subscriber_callbacks.cpp",
    "line": 73,
    "function": null,
    "comment": "subscriber_callbacks.cpp:73:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "subscriber_callbacks.cpp",
    "line": 74,
    "function": null,
    "comment": "subscriber_callbacks.cpp:74:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "subscriber_callbacks.cpp",
    "line": 75,
    "function": null,
    "comment": "subscriber_callbacks.cpp:75:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "subscriber_callbacks.cpp",
    "line": 82,
    "function": null,
    "comment": "subscriber_callbacks.cpp:82:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "subscriber_callbacks.cpp",
    "line": 83,
    "function": null,
    "comment": "subscriber_callbacks.cpp:83:  Missing space before ( in switch(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "subscriber_callbacks.cpp",
    "line": 84,
    "function": null,
    "comment": "subscriber_callbacks.cpp:84:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "subscriber_callbacks.cpp",
    "line": 85,
    "function": null,
    "comment": "subscriber_callbacks.cpp:85:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "subscriber_callbacks.cpp",
    "line": 86,
    "function": null,
    "comment": "subscriber_callbacks.cpp:86:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "subscriber_callbacks.cpp",
    "line": 87,
    "function": null,
    "comment": "subscriber_callbacks.cpp:87:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "subscriber_callbacks.cpp",
    "line": 93,
    "function": null,
    "comment": "subscriber_callbacks.cpp:93:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "subscriber_callbacks.cpp",
    "line": 94,
    "function": null,
    "comment": "subscriber_callbacks.cpp:94:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "subscriber_callbacks.cpp",
    "line": 104,
    "function": null,
    "comment": "subscriber_callbacks.cpp:104:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "subscriber_callbacks.cpp",
    "line": 105,
    "function": null,
    "comment": "subscriber_callbacks.cpp:105:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "subscriber_callbacks.cpp",
    "line": 111,
    "function": null,
    "comment": "subscriber_callbacks.cpp:111:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "subscriber_callbacks.cpp",
    "line": 112,
    "function": null,
    "comment": "subscriber_callbacks.cpp:112:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "subscriber_callbacks.cpp",
    "line": 117,
    "function": null,
    "comment": "subscriber_callbacks.cpp:117:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "subscriber_callbacks.cpp",
    "line": 125,
    "function": null,
    "comment": "subscriber_callbacks.cpp:125:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "subscriber_callbacks.cpp",
    "line": 127,
    "function": null,
    "comment": "subscriber_callbacks.cpp:127:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "subscriber_callbacks.cpp",
    "line": 129,
    "function": null,
    "comment": "subscriber_callbacks.cpp:129:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "subscriber_callbacks.cpp",
    "line": 130,
    "function": null,
    "comment": "subscriber_callbacks.cpp:130:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "subscriber_callbacks.cpp",
    "line": 134,
    "function": null,
    "comment": "subscriber_callbacks.cpp:134:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "subscriber_callbacks.cpp",
    "line": 135,
    "function": null,
    "comment": "subscriber_callbacks.cpp:135:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "subscriber_callbacks.cpp",
    "line": 136,
    "function": null,
    "comment": "subscriber_callbacks.cpp:136:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "subscriber_callbacks.cpp",
    "line": 140,
    "function": null,
    "comment": "subscriber_callbacks.cpp:140:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "subscriber_callbacks.cpp",
    "line": 142,
    "function": null,
    "comment": "subscriber_callbacks.cpp:142:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "subscriber_callbacks.cpp",
    "line": 143,
    "function": null,
    "comment": "subscriber_callbacks.cpp:143:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "subscriber_callbacks.cpp",
    "line": 144,
    "function": null,
    "comment": "subscriber_callbacks.cpp:144:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "subscriber_callbacks.cpp",
    "line": 144,
    "function": null,
    "comment": "subscriber_callbacks.cpp:144:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "subscriber_callbacks.cpp",
    "line": 156,
    "function": null,
    "comment": "subscriber_callbacks.cpp:156:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "subscriber_callbacks.cpp",
    "line": 158,
    "function": null,
    "comment": "subscriber_callbacks.cpp:158:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "subscriber_callbacks.cpp",
    "line": 161,
    "function": null,
    "comment": "subscriber_callbacks.cpp:161:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "subscriber_callbacks.cpp",
    "line": 162,
    "function": null,
    "comment": "subscriber_callbacks.cpp:162:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "subscriber_callbacks.cpp",
    "line": 165,
    "function": null,
    "comment": "subscriber_callbacks.cpp:165:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "subscriber_callbacks.cpp",
    "line": 166,
    "function": null,
    "comment": "subscriber_callbacks.cpp:166:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "subscriber_callbacks.cpp",
    "line": 169,
    "function": null,
    "comment": "subscriber_callbacks.cpp:169:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "subscriber_callbacks.cpp",
    "line": 170,
    "function": null,
    "comment": "subscriber_callbacks.cpp:170:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "subscriber_callbacks.cpp",
    "line": 173,
    "function": null,
    "comment": "subscriber_callbacks.cpp:173:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "subscriber_callbacks.cpp",
    "line": 174,
    "function": null,
    "comment": "subscriber_callbacks.cpp:174:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "subscriber_callbacks.cpp",
    "line": 177,
    "function": null,
    "comment": "subscriber_callbacks.cpp:177:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "subscriber_callbacks.cpp",
    "line": 178,
    "function": null,
    "comment": "subscriber_callbacks.cpp:178:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "subscriber_callbacks.cpp",
    "line": 181,
    "function": null,
    "comment": "subscriber_callbacks.cpp:181:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "subscriber_callbacks.cpp",
    "line": 182,
    "function": null,
    "comment": "subscriber_callbacks.cpp:182:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "subscriber_callbacks.cpp",
    "line": 185,
    "function": null,
    "comment": "subscriber_callbacks.cpp:185:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "subscriber_callbacks.cpp",
    "line": 186,
    "function": null,
    "comment": "subscriber_callbacks.cpp:186:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "subscriber_callbacks.cpp",
    "line": 187,
    "function": null,
    "comment": "subscriber_callbacks.cpp:187:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "subscriber_callbacks.cpp",
    "line": 196,
    "function": null,
    "comment": "subscriber_callbacks.cpp:196:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "subscriber_callbacks.cpp",
    "line": 198,
    "function": null,
    "comment": "subscriber_callbacks.cpp:198:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "subscriber_callbacks.cpp",
    "line": 200,
    "function": null,
    "comment": "subscriber_callbacks.cpp:200:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "subscriber_callbacks.cpp",
    "line": 208,
    "function": null,
    "comment": "subscriber_callbacks.cpp:208:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "subscriber_callbacks.cpp",
    "line": 210,
    "function": null,
    "comment": "subscriber_callbacks.cpp:210:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "subscriber_callbacks.cpp",
    "line": 215,
    "function": null,
    "comment": "subscriber_callbacks.cpp:215:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "subscriber_callbacks.cpp",
    "line": 216,
    "function": null,
    "comment": "subscriber_callbacks.cpp:216:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "subscriber_callbacks.cpp",
    "line": 221,
    "function": null,
    "comment": "subscriber_callbacks.cpp:221:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "subscriber_callbacks.cpp",
    "line": 222,
    "function": null,
    "comment": "subscriber_callbacks.cpp:222:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "subscriber_callbacks.cpp",
    "line": 223,
    "function": null,
    "comment": "subscriber_callbacks.cpp:223:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "subscriber_callbacks.cpp",
    "line": 228,
    "function": null,
    "comment": "subscriber_callbacks.cpp:228:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "subscriber_callbacks.cpp",
    "line": 229,
    "function": null,
    "comment": "subscriber_callbacks.cpp:229:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "subscriber_callbacks.cpp",
    "line": 230,
    "function": null,
    "comment": "subscriber_callbacks.cpp:230:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Whitespace inside parenthesis should be consistent, and should consist of either zero or one space.",
    "file": "subscriber_callbacks.cpp",
    "line": 230,
    "function": null,
    "comment": "subscriber_callbacks.cpp:230:  Mismatching spaces inside () in if  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "subscriber_callbacks.cpp",
    "line": 231,
    "function": null,
    "comment": "subscriber_callbacks.cpp:231:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "subscriber_callbacks.cpp",
    "line": 241,
    "function": null,
    "comment": "subscriber_callbacks.cpp:241:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "kobuki_ros.cpp",
    "line": 41,
    "function": null,
    "comment": "kobuki_ros.cpp:41:  Include 'ecl/streams/string_stream.hpp' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki_ros.cpp",
    "line": 50,
    "function": null,
    "comment": "kobuki_ros.cpp:50:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki_ros.cpp",
    "line": 81,
    "function": null,
    "comment": "kobuki_ros.cpp:81:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki_ros.cpp",
    "line": 100,
    "function": null,
    "comment": "kobuki_ros.cpp:100:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki_ros.cpp",
    "line": 101,
    "function": null,
    "comment": "kobuki_ros.cpp:101:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki_ros.cpp",
    "line": 105,
    "function": null,
    "comment": "kobuki_ros.cpp:105:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki_ros.cpp",
    "line": 139,
    "function": null,
    "comment": "kobuki_ros.cpp:139:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki_ros.cpp",
    "line": 142,
    "function": null,
    "comment": "kobuki_ros.cpp:142:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki_ros.cpp",
    "line": 144,
    "function": null,
    "comment": "kobuki_ros.cpp:144:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "kobuki_ros.cpp",
    "line": 144,
    "function": null,
    "comment": "kobuki_ros.cpp:144:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki_ros.cpp",
    "line": 146,
    "function": null,
    "comment": "kobuki_ros.cpp:146:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki_ros.cpp",
    "line": 147,
    "function": null,
    "comment": "kobuki_ros.cpp:147:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki_ros.cpp",
    "line": 156,
    "function": null,
    "comment": "kobuki_ros.cpp:156:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki_ros.cpp",
    "line": 157,
    "function": null,
    "comment": "kobuki_ros.cpp:157:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki_ros.cpp",
    "line": 161,
    "function": null,
    "comment": "kobuki_ros.cpp:161:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "kobuki_ros.cpp",
    "line": 164,
    "function": null,
    "comment": "kobuki_ros.cpp:164:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki_ros.cpp",
    "line": 165,
    "function": null,
    "comment": "kobuki_ros.cpp:165:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki_ros.cpp",
    "line": 167,
    "function": null,
    "comment": "kobuki_ros.cpp:167:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki_ros.cpp",
    "line": 171,
    "function": null,
    "comment": "kobuki_ros.cpp:171:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "kobuki_ros.cpp",
    "line": 176,
    "function": null,
    "comment": "kobuki_ros.cpp:176:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "kobuki_ros.cpp",
    "line": 177,
    "function": null,
    "comment": "kobuki_ros.cpp:177:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "kobuki_ros.cpp",
    "line": 178,
    "function": null,
    "comment": "kobuki_ros.cpp:178:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki_ros.cpp",
    "line": 184,
    "function": null,
    "comment": "kobuki_ros.cpp:184:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki_ros.cpp",
    "line": 185,
    "function": null,
    "comment": "kobuki_ros.cpp:185:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "kobuki_ros.cpp",
    "line": 189,
    "function": null,
    "comment": "kobuki_ros.cpp:189:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki_ros.cpp",
    "line": 190,
    "function": null,
    "comment": "kobuki_ros.cpp:190:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki_ros.cpp",
    "line": 192,
    "function": null,
    "comment": "kobuki_ros.cpp:192:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "kobuki_ros.cpp",
    "line": 195,
    "function": null,
    "comment": "kobuki_ros.cpp:195:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki_ros.cpp",
    "line": 196,
    "function": null,
    "comment": "kobuki_ros.cpp:196:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki_ros.cpp",
    "line": 199,
    "function": null,
    "comment": "kobuki_ros.cpp:199:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki_ros.cpp",
    "line": 209,
    "function": null,
    "comment": "kobuki_ros.cpp:209:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "kobuki_ros.cpp",
    "line": 211,
    "function": null,
    "comment": "kobuki_ros.cpp:211:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki_ros.cpp",
    "line": 214,
    "function": null,
    "comment": "kobuki_ros.cpp:214:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki_ros.cpp",
    "line": 219,
    "function": null,
    "comment": "kobuki_ros.cpp:219:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki_ros.cpp",
    "line": 221,
    "function": null,
    "comment": "kobuki_ros.cpp:221:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki_ros.cpp",
    "line": 224,
    "function": null,
    "comment": "kobuki_ros.cpp:224:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki_ros.cpp",
    "line": 249,
    "function": null,
    "comment": "kobuki_ros.cpp:249:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki_ros.cpp",
    "line": 251,
    "function": null,
    "comment": "kobuki_ros.cpp:251:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki_ros.cpp",
    "line": 252,
    "function": null,
    "comment": "kobuki_ros.cpp:252:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki_ros.cpp",
    "line": 257,
    "function": null,
    "comment": "kobuki_ros.cpp:257:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki_ros.cpp",
    "line": 259,
    "function": null,
    "comment": "kobuki_ros.cpp:259:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki_ros.cpp",
    "line": 262,
    "function": null,
    "comment": "kobuki_ros.cpp:262:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "kobuki_ros.cpp",
    "line": 265,
    "function": null,
    "comment": "kobuki_ros.cpp:265:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki_ros.cpp",
    "line": 266,
    "function": null,
    "comment": "kobuki_ros.cpp:266:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki_ros.cpp",
    "line": 272,
    "function": null,
    "comment": "kobuki_ros.cpp:272:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki_ros.cpp",
    "line": 274,
    "function": null,
    "comment": "kobuki_ros.cpp:274:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki_ros.cpp",
    "line": 275,
    "function": null,
    "comment": "kobuki_ros.cpp:275:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "kobuki_ros.cpp",
    "line": 278,
    "function": null,
    "comment": "kobuki_ros.cpp:278:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki_ros.cpp",
    "line": 279,
    "function": null,
    "comment": "kobuki_ros.cpp:279:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki_ros.cpp",
    "line": 286,
    "function": null,
    "comment": "kobuki_ros.cpp:286:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki_ros.cpp",
    "line": 304,
    "function": null,
    "comment": "kobuki_ros.cpp:304:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki_ros.cpp",
    "line": 308,
    "function": null,
    "comment": "kobuki_ros.cpp:308:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "kobuki_ros.cpp",
    "line": 308,
    "function": null,
    "comment": "kobuki_ros.cpp:308:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki_ros.cpp",
    "line": 313,
    "function": null,
    "comment": "kobuki_ros.cpp:313:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "kobuki_ros.cpp",
    "line": 313,
    "function": null,
    "comment": "kobuki_ros.cpp:313:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki_ros.cpp",
    "line": 314,
    "function": null,
    "comment": "kobuki_ros.cpp:314:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "kobuki_ros.cpp",
    "line": 314,
    "function": null,
    "comment": "kobuki_ros.cpp:314:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki_ros.cpp",
    "line": 315,
    "function": null,
    "comment": "kobuki_ros.cpp:315:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki_ros.cpp",
    "line": 316,
    "function": null,
    "comment": "kobuki_ros.cpp:316:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki_ros.cpp",
    "line": 317,
    "function": null,
    "comment": "kobuki_ros.cpp:317:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki_ros.cpp",
    "line": 318,
    "function": null,
    "comment": "kobuki_ros.cpp:318:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki_ros.cpp",
    "line": 319,
    "function": null,
    "comment": "kobuki_ros.cpp:319:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki_ros.cpp",
    "line": 320,
    "function": null,
    "comment": "kobuki_ros.cpp:320:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki_ros.cpp",
    "line": 321,
    "function": null,
    "comment": "kobuki_ros.cpp:321:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "kobuki_ros.cpp",
    "line": 321,
    "function": null,
    "comment": "kobuki_ros.cpp:321:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki_ros.cpp",
    "line": 322,
    "function": null,
    "comment": "kobuki_ros.cpp:322:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki_ros.cpp",
    "line": 323,
    "function": null,
    "comment": "kobuki_ros.cpp:323:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki_ros.cpp",
    "line": 324,
    "function": null,
    "comment": "kobuki_ros.cpp:324:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki_ros.cpp",
    "line": 325,
    "function": null,
    "comment": "kobuki_ros.cpp:325:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki_ros.cpp",
    "line": 326,
    "function": null,
    "comment": "kobuki_ros.cpp:326:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki_ros.cpp",
    "line": 327,
    "function": null,
    "comment": "kobuki_ros.cpp:327:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki_ros.cpp",
    "line": 328,
    "function": null,
    "comment": "kobuki_ros.cpp:328:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki_ros.cpp",
    "line": 336,
    "function": null,
    "comment": "kobuki_ros.cpp:336:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki_ros.cpp",
    "line": 337,
    "function": null,
    "comment": "kobuki_ros.cpp:337:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki_ros.cpp",
    "line": 338,
    "function": null,
    "comment": "kobuki_ros.cpp:338:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki_ros.cpp",
    "line": 339,
    "function": null,
    "comment": "kobuki_ros.cpp:339:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki_ros.cpp",
    "line": 340,
    "function": null,
    "comment": "kobuki_ros.cpp:340:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki_ros.cpp",
    "line": 341,
    "function": null,
    "comment": "kobuki_ros.cpp:341:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki_ros.cpp",
    "line": 342,
    "function": null,
    "comment": "kobuki_ros.cpp:342:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki_ros.cpp",
    "line": 343,
    "function": null,
    "comment": "kobuki_ros.cpp:343:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki_ros.cpp",
    "line": 344,
    "function": null,
    "comment": "kobuki_ros.cpp:344:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki_ros.cpp",
    "line": 345,
    "function": null,
    "comment": "kobuki_ros.cpp:345:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "kobuki_ros.cpp",
    "line": 349,
    "function": null,
    "comment": "kobuki_ros.cpp:349:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "kobuki_ros.cpp",
    "line": 345,
    "function": null,
    "comment": "kobuki_ros.cpp:345:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "odometry.cpp",
    "line": null,
    "function": null,
    "comment": "odometry.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "odometry.cpp",
    "line": 26,
    "function": null,
    "comment": "odometry.cpp:26:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "odometry.cpp",
    "line": 37,
    "function": null,
    "comment": "odometry.cpp:37:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "odometry.cpp",
    "line": 40,
    "function": null,
    "comment": "odometry.cpp:40:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "odometry.cpp",
    "line": 42,
    "function": null,
    "comment": "odometry.cpp:42:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "odometry.cpp",
    "line": 46,
    "function": null,
    "comment": "odometry.cpp:46:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "odometry.cpp",
    "line": 48,
    "function": null,
    "comment": "odometry.cpp:48:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "odometry.cpp",
    "line": 52,
    "function": null,
    "comment": "odometry.cpp:52:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "odometry.cpp",
    "line": 57,
    "function": null,
    "comment": "odometry.cpp:57:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "odometry.cpp",
    "line": 62,
    "function": null,
    "comment": "odometry.cpp:62:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "odometry.cpp",
    "line": 67,
    "function": null,
    "comment": "odometry.cpp:67:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "odometry.cpp",
    "line": 76,
    "function": null,
    "comment": "odometry.cpp:76:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "odometry.cpp",
    "line": 76,
    "function": null,
    "comment": "odometry.cpp:76:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "odometry.cpp",
    "line": 80,
    "function": null,
    "comment": "odometry.cpp:80:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "odometry.cpp",
    "line": 87,
    "function": null,
    "comment": "odometry.cpp:87:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "odometry.cpp",
    "line": 97,
    "function": null,
    "comment": "odometry.cpp:97:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "odometry.cpp",
    "line": 98,
    "function": null,
    "comment": "odometry.cpp:98:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "odometry.cpp",
    "line": 111,
    "function": null,
    "comment": "odometry.cpp:111:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "odometry.cpp",
    "line": 124,
    "function": null,
    "comment": "odometry.cpp:124:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "odometry.cpp",
    "line": 125,
    "function": null,
    "comment": "odometry.cpp:125:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "odometry.cpp",
    "line": 126,
    "function": null,
    "comment": "odometry.cpp:126:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "odometry.cpp",
    "line": 152,
    "function": null,
    "comment": "odometry.cpp:152:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "odometry.cpp",
    "line": 153,
    "function": null,
    "comment": "odometry.cpp:153:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "odometry.cpp",
    "line": 154,
    "function": null,
    "comment": "odometry.cpp:154:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "odometry.cpp",
    "line": 159,
    "function": null,
    "comment": "odometry.cpp:159:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "odometry.cpp",
    "line": 33,
    "function": null,
    "comment": "odometry.cpp:33:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "slot_callbacks.cpp",
    "line": 47,
    "function": null,
    "comment": "slot_callbacks.cpp:47:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "slot_callbacks.cpp",
    "line": 62,
    "function": null,
    "comment": "slot_callbacks.cpp:62:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "slot_callbacks.cpp",
    "line": 68,
    "function": null,
    "comment": "slot_callbacks.cpp:68:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "slot_callbacks.cpp",
    "line": 99,
    "function": null,
    "comment": "slot_callbacks.cpp:99:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "slot_callbacks.cpp",
    "line": 104,
    "function": null,
    "comment": "slot_callbacks.cpp:104:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "slot_callbacks.cpp",
    "line": 105,
    "function": null,
    "comment": "slot_callbacks.cpp:105:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "slot_callbacks.cpp",
    "line": 108,
    "function": null,
    "comment": "slot_callbacks.cpp:108:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "slot_callbacks.cpp",
    "line": 111,
    "function": null,
    "comment": "slot_callbacks.cpp:111:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "slot_callbacks.cpp",
    "line": 118,
    "function": null,
    "comment": "slot_callbacks.cpp:118:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "slot_callbacks.cpp",
    "line": 120,
    "function": null,
    "comment": "slot_callbacks.cpp:120:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "slot_callbacks.cpp",
    "line": 122,
    "function": null,
    "comment": "slot_callbacks.cpp:122:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "slot_callbacks.cpp",
    "line": 123,
    "function": null,
    "comment": "slot_callbacks.cpp:123:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "slot_callbacks.cpp",
    "line": 129,
    "function": null,
    "comment": "slot_callbacks.cpp:129:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "slot_callbacks.cpp",
    "line": 131,
    "function": null,
    "comment": "slot_callbacks.cpp:131:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "slot_callbacks.cpp",
    "line": 132,
    "function": null,
    "comment": "slot_callbacks.cpp:132:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "slot_callbacks.cpp",
    "line": 133,
    "function": null,
    "comment": "slot_callbacks.cpp:133:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "slot_callbacks.cpp",
    "line": 153,
    "function": null,
    "comment": "slot_callbacks.cpp:153:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "slot_callbacks.cpp",
    "line": 155,
    "function": null,
    "comment": "slot_callbacks.cpp:155:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "slot_callbacks.cpp",
    "line": 156,
    "function": null,
    "comment": "slot_callbacks.cpp:156:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "slot_callbacks.cpp",
    "line": 161,
    "function": null,
    "comment": "slot_callbacks.cpp:161:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "slot_callbacks.cpp",
    "line": 162,
    "function": null,
    "comment": "slot_callbacks.cpp:162:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "slot_callbacks.cpp",
    "line": 162,
    "function": null,
    "comment": "slot_callbacks.cpp:162:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "slot_callbacks.cpp",
    "line": 164,
    "function": null,
    "comment": "slot_callbacks.cpp:164:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "slot_callbacks.cpp",
    "line": 164,
    "function": null,
    "comment": "slot_callbacks.cpp:164:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "slot_callbacks.cpp",
    "line": 164,
    "function": null,
    "comment": "slot_callbacks.cpp:164:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Whitespace inside parenthesis should be consistent, and should consist of either zero or one space.",
    "file": "slot_callbacks.cpp",
    "line": 164,
    "function": null,
    "comment": "slot_callbacks.cpp:164:  Mismatching spaces inside () in for  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "slot_callbacks.cpp",
    "line": 166,
    "function": null,
    "comment": "slot_callbacks.cpp:166:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "slot_callbacks.cpp",
    "line": 166,
    "function": null,
    "comment": "slot_callbacks.cpp:166:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "slot_callbacks.cpp",
    "line": 169,
    "function": null,
    "comment": "slot_callbacks.cpp:169:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "slot_callbacks.cpp",
    "line": 174,
    "function": null,
    "comment": "slot_callbacks.cpp:174:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "slot_callbacks.cpp",
    "line": 175,
    "function": null,
    "comment": "slot_callbacks.cpp:175:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "slot_callbacks.cpp",
    "line": 175,
    "function": null,
    "comment": "slot_callbacks.cpp:175:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "slot_callbacks.cpp",
    "line": 175,
    "function": null,
    "comment": "slot_callbacks.cpp:175:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "slot_callbacks.cpp",
    "line": 175,
    "function": null,
    "comment": "slot_callbacks.cpp:175:  Use int16/int64/etc, rather than the C type short  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "slot_callbacks.cpp",
    "line": 176,
    "function": null,
    "comment": "slot_callbacks.cpp:176:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "slot_callbacks.cpp",
    "line": 176,
    "function": null,
    "comment": "slot_callbacks.cpp:176:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "slot_callbacks.cpp",
    "line": 176,
    "function": null,
    "comment": "slot_callbacks.cpp:176:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "slot_callbacks.cpp",
    "line": 176,
    "function": null,
    "comment": "slot_callbacks.cpp:176:  Use int16/int64/etc, rather than the C type short  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "slot_callbacks.cpp",
    "line": 177,
    "function": null,
    "comment": "slot_callbacks.cpp:177:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "slot_callbacks.cpp",
    "line": 177,
    "function": null,
    "comment": "slot_callbacks.cpp:177:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "slot_callbacks.cpp",
    "line": 177,
    "function": null,
    "comment": "slot_callbacks.cpp:177:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "slot_callbacks.cpp",
    "line": 177,
    "function": null,
    "comment": "slot_callbacks.cpp:177:  Use int16/int64/etc, rather than the C type short  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "slot_callbacks.cpp",
    "line": 185,
    "function": null,
    "comment": "slot_callbacks.cpp:185:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "slot_callbacks.cpp",
    "line": 187,
    "function": null,
    "comment": "slot_callbacks.cpp:187:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "slot_callbacks.cpp",
    "line": 189,
    "function": null,
    "comment": "slot_callbacks.cpp:189:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "slot_callbacks.cpp",
    "line": 192,
    "function": null,
    "comment": "slot_callbacks.cpp:192:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "slot_callbacks.cpp",
    "line": 198,
    "function": null,
    "comment": "slot_callbacks.cpp:198:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "slot_callbacks.cpp",
    "line": 198,
    "function": null,
    "comment": "slot_callbacks.cpp:198:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "slot_callbacks.cpp",
    "line": 199,
    "function": null,
    "comment": "slot_callbacks.cpp:199:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "slot_callbacks.cpp",
    "line": 199,
    "function": null,
    "comment": "slot_callbacks.cpp:199:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "slot_callbacks.cpp",
    "line": 200,
    "function": null,
    "comment": "slot_callbacks.cpp:200:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "slot_callbacks.cpp",
    "line": 200,
    "function": null,
    "comment": "slot_callbacks.cpp:200:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "slot_callbacks.cpp",
    "line": 217,
    "function": null,
    "comment": "slot_callbacks.cpp:217:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "slot_callbacks.cpp",
    "line": 219,
    "function": null,
    "comment": "slot_callbacks.cpp:219:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "slot_callbacks.cpp",
    "line": 233,
    "function": null,
    "comment": "slot_callbacks.cpp:233:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "slot_callbacks.cpp",
    "line": 238,
    "function": null,
    "comment": "slot_callbacks.cpp:238:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "slot_callbacks.cpp",
    "line": 248,
    "function": null,
    "comment": "slot_callbacks.cpp:248:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "slot_callbacks.cpp",
    "line": 250,
    "function": null,
    "comment": "slot_callbacks.cpp:250:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "slot_callbacks.cpp",
    "line": 255,
    "function": null,
    "comment": "slot_callbacks.cpp:255:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "slot_callbacks.cpp",
    "line": 256,
    "function": null,
    "comment": "slot_callbacks.cpp:256:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "slot_callbacks.cpp",
    "line": 257,
    "function": null,
    "comment": "slot_callbacks.cpp:257:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "slot_callbacks.cpp",
    "line": 268,
    "function": null,
    "comment": "slot_callbacks.cpp:268:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "slot_callbacks.cpp",
    "line": 270,
    "function": null,
    "comment": "slot_callbacks.cpp:270:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "slot_callbacks.cpp",
    "line": 272,
    "function": null,
    "comment": "slot_callbacks.cpp:272:  Missing space before ( in switch(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "slot_callbacks.cpp",
    "line": 273,
    "function": null,
    "comment": "slot_callbacks.cpp:273:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "slot_callbacks.cpp",
    "line": 273,
    "function": null,
    "comment": "slot_callbacks.cpp:273:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "slot_callbacks.cpp",
    "line": 274,
    "function": null,
    "comment": "slot_callbacks.cpp:274:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "slot_callbacks.cpp",
    "line": 274,
    "function": null,
    "comment": "slot_callbacks.cpp:274:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "slot_callbacks.cpp",
    "line": 277,
    "function": null,
    "comment": "slot_callbacks.cpp:277:  Missing space before ( in switch(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "slot_callbacks.cpp",
    "line": 278,
    "function": null,
    "comment": "slot_callbacks.cpp:278:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "slot_callbacks.cpp",
    "line": 278,
    "function": null,
    "comment": "slot_callbacks.cpp:278:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "slot_callbacks.cpp",
    "line": 279,
    "function": null,
    "comment": "slot_callbacks.cpp:279:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "slot_callbacks.cpp",
    "line": 279,
    "function": null,
    "comment": "slot_callbacks.cpp:279:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "slot_callbacks.cpp",
    "line": 280,
    "function": null,
    "comment": "slot_callbacks.cpp:280:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "slot_callbacks.cpp",
    "line": 280,
    "function": null,
    "comment": "slot_callbacks.cpp:280:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "slot_callbacks.cpp",
    "line": 288,
    "function": null,
    "comment": "slot_callbacks.cpp:288:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "slot_callbacks.cpp",
    "line": 290,
    "function": null,
    "comment": "slot_callbacks.cpp:290:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "slot_callbacks.cpp",
    "line": 292,
    "function": null,
    "comment": "slot_callbacks.cpp:292:  Missing space before ( in switch(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "slot_callbacks.cpp",
    "line": 293,
    "function": null,
    "comment": "slot_callbacks.cpp:293:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "slot_callbacks.cpp",
    "line": 293,
    "function": null,
    "comment": "slot_callbacks.cpp:293:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "slot_callbacks.cpp",
    "line": 294,
    "function": null,
    "comment": "slot_callbacks.cpp:294:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "slot_callbacks.cpp",
    "line": 294,
    "function": null,
    "comment": "slot_callbacks.cpp:294:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "slot_callbacks.cpp",
    "line": 297,
    "function": null,
    "comment": "slot_callbacks.cpp:297:  Missing space before ( in switch(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "slot_callbacks.cpp",
    "line": 298,
    "function": null,
    "comment": "slot_callbacks.cpp:298:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "slot_callbacks.cpp",
    "line": 298,
    "function": null,
    "comment": "slot_callbacks.cpp:298:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "slot_callbacks.cpp",
    "line": 299,
    "function": null,
    "comment": "slot_callbacks.cpp:299:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "slot_callbacks.cpp",
    "line": 299,
    "function": null,
    "comment": "slot_callbacks.cpp:299:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "slot_callbacks.cpp",
    "line": 300,
    "function": null,
    "comment": "slot_callbacks.cpp:300:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "slot_callbacks.cpp",
    "line": 300,
    "function": null,
    "comment": "slot_callbacks.cpp:300:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "slot_callbacks.cpp",
    "line": 308,
    "function": null,
    "comment": "slot_callbacks.cpp:308:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "slot_callbacks.cpp",
    "line": 310,
    "function": null,
    "comment": "slot_callbacks.cpp:310:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "slot_callbacks.cpp",
    "line": 312,
    "function": null,
    "comment": "slot_callbacks.cpp:312:  Missing space before ( in switch(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "slot_callbacks.cpp",
    "line": 313,
    "function": null,
    "comment": "slot_callbacks.cpp:313:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "slot_callbacks.cpp",
    "line": 313,
    "function": null,
    "comment": "slot_callbacks.cpp:313:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "slot_callbacks.cpp",
    "line": 314,
    "function": null,
    "comment": "slot_callbacks.cpp:314:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "slot_callbacks.cpp",
    "line": 314,
    "function": null,
    "comment": "slot_callbacks.cpp:314:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "slot_callbacks.cpp",
    "line": 317,
    "function": null,
    "comment": "slot_callbacks.cpp:317:  Missing space before ( in switch(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "slot_callbacks.cpp",
    "line": 318,
    "function": null,
    "comment": "slot_callbacks.cpp:318:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "slot_callbacks.cpp",
    "line": 318,
    "function": null,
    "comment": "slot_callbacks.cpp:318:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "slot_callbacks.cpp",
    "line": 319,
    "function": null,
    "comment": "slot_callbacks.cpp:319:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "slot_callbacks.cpp",
    "line": 319,
    "function": null,
    "comment": "slot_callbacks.cpp:319:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "slot_callbacks.cpp",
    "line": 320,
    "function": null,
    "comment": "slot_callbacks.cpp:320:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "slot_callbacks.cpp",
    "line": 320,
    "function": null,
    "comment": "slot_callbacks.cpp:320:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "slot_callbacks.cpp",
    "line": 329,
    "function": null,
    "comment": "slot_callbacks.cpp:329:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "slot_callbacks.cpp",
    "line": 331,
    "function": null,
    "comment": "slot_callbacks.cpp:331:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "slot_callbacks.cpp",
    "line": 333,
    "function": null,
    "comment": "slot_callbacks.cpp:333:  Missing space before ( in switch(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "slot_callbacks.cpp",
    "line": 334,
    "function": null,
    "comment": "slot_callbacks.cpp:334:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "slot_callbacks.cpp",
    "line": 334,
    "function": null,
    "comment": "slot_callbacks.cpp:334:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "slot_callbacks.cpp",
    "line": 335,
    "function": null,
    "comment": "slot_callbacks.cpp:335:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "slot_callbacks.cpp",
    "line": 335,
    "function": null,
    "comment": "slot_callbacks.cpp:335:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "slot_callbacks.cpp",
    "line": 338,
    "function": null,
    "comment": "slot_callbacks.cpp:338:  Missing space before ( in switch(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "slot_callbacks.cpp",
    "line": 339,
    "function": null,
    "comment": "slot_callbacks.cpp:339:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "slot_callbacks.cpp",
    "line": 339,
    "function": null,
    "comment": "slot_callbacks.cpp:339:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "slot_callbacks.cpp",
    "line": 340,
    "function": null,
    "comment": "slot_callbacks.cpp:340:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "slot_callbacks.cpp",
    "line": 340,
    "function": null,
    "comment": "slot_callbacks.cpp:340:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "slot_callbacks.cpp",
    "line": 348,
    "function": null,
    "comment": "slot_callbacks.cpp:348:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "slot_callbacks.cpp",
    "line": 350,
    "function": null,
    "comment": "slot_callbacks.cpp:350:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "slot_callbacks.cpp",
    "line": 352,
    "function": null,
    "comment": "slot_callbacks.cpp:352:  Missing space before ( in switch(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "slot_callbacks.cpp",
    "line": 354,
    "function": null,
    "comment": "slot_callbacks.cpp:354:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "slot_callbacks.cpp",
    "line": 356,
    "function": null,
    "comment": "slot_callbacks.cpp:356:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "slot_callbacks.cpp",
    "line": 356,
    "function": null,
    "comment": "slot_callbacks.cpp:356:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "slot_callbacks.cpp",
    "line": 358,
    "function": null,
    "comment": "slot_callbacks.cpp:358:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "slot_callbacks.cpp",
    "line": 358,
    "function": null,
    "comment": "slot_callbacks.cpp:358:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "slot_callbacks.cpp",
    "line": 360,
    "function": null,
    "comment": "slot_callbacks.cpp:360:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "slot_callbacks.cpp",
    "line": 360,
    "function": null,
    "comment": "slot_callbacks.cpp:360:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "slot_callbacks.cpp",
    "line": 362,
    "function": null,
    "comment": "slot_callbacks.cpp:362:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "slot_callbacks.cpp",
    "line": 364,
    "function": null,
    "comment": "slot_callbacks.cpp:364:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "slot_callbacks.cpp",
    "line": 364,
    "function": null,
    "comment": "slot_callbacks.cpp:364:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "slot_callbacks.cpp",
    "line": 372,
    "function": null,
    "comment": "slot_callbacks.cpp:372:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "slot_callbacks.cpp",
    "line": 374,
    "function": null,
    "comment": "slot_callbacks.cpp:374:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "slot_callbacks.cpp",
    "line": 383,
    "function": null,
    "comment": "slot_callbacks.cpp:383:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "slot_callbacks.cpp",
    "line": 385,
    "function": null,
    "comment": "slot_callbacks.cpp:385:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "slot_callbacks.cpp",
    "line": 387,
    "function": null,
    "comment": "slot_callbacks.cpp:387:  Missing space before ( in switch(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "slot_callbacks.cpp",
    "line": 388,
    "function": null,
    "comment": "slot_callbacks.cpp:388:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "slot_callbacks.cpp",
    "line": 388,
    "function": null,
    "comment": "slot_callbacks.cpp:388:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "slot_callbacks.cpp",
    "line": 389,
    "function": null,
    "comment": "slot_callbacks.cpp:389:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "slot_callbacks.cpp",
    "line": 389,
    "function": null,
    "comment": "slot_callbacks.cpp:389:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "slot_callbacks.cpp",
    "line": 411,
    "function": null,
    "comment": "slot_callbacks.cpp:411:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "slot_callbacks.cpp",
    "line": 412,
    "function": null,
    "comment": "slot_callbacks.cpp:412:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "slot_callbacks.cpp",
    "line": 412,
    "function": null,
    "comment": "slot_callbacks.cpp:412:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "slot_callbacks.cpp",
    "line": 415,
    "function": null,
    "comment": "slot_callbacks.cpp:415:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "slot_callbacks.cpp",
    "line": 419,
    "function": null,
    "comment": "slot_callbacks.cpp:419:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "slot_callbacks.cpp",
    "line": 438,
    "function": null,
    "comment": "slot_callbacks.cpp:438:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "slot_callbacks.cpp",
    "line": 439,
    "function": null,
    "comment": "slot_callbacks.cpp:439:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "slot_callbacks.cpp",
    "line": 439,
    "function": null,
    "comment": "slot_callbacks.cpp:439:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "slot_callbacks.cpp",
    "line": 456,
    "function": null,
    "comment": "slot_callbacks.cpp:456:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "slot_callbacks.cpp",
    "line": 459,
    "function": null,
    "comment": "slot_callbacks.cpp:459:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "slot_callbacks.cpp",
    "line": 461,
    "function": null,
    "comment": "slot_callbacks.cpp:461:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "slot_callbacks.cpp",
    "line": 465,
    "function": null,
    "comment": "slot_callbacks.cpp:465:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "slot_callbacks.cpp",
    "line": 472,
    "function": null,
    "comment": "slot_callbacks.cpp:472:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "slot_callbacks.cpp",
    "line": 472,
    "function": null,
    "comment": "slot_callbacks.cpp:472:  Use int16/int64/etc, rather than the C type short  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "slot_callbacks.cpp",
    "line": 473,
    "function": null,
    "comment": "slot_callbacks.cpp:473:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "slot_callbacks.cpp",
    "line": 478,
    "function": null,
    "comment": "slot_callbacks.cpp:478:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "slot_callbacks.cpp",
    "line": 485,
    "function": null,
    "comment": "slot_callbacks.cpp:485:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "slot_callbacks.cpp",
    "line": 472,
    "function": null,
    "comment": "slot_callbacks.cpp:472:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "diagnostics.cpp",
    "line": null,
    "function": null,
    "comment": "diagnostics.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "diagnostics.cpp",
    "line": 27,
    "function": null,
    "comment": "diagnostics.cpp:27:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "diagnostics.cpp",
    "line": 27,
    "function": null,
    "comment": "diagnostics.cpp:27:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "diagnostics.cpp",
    "line": 31,
    "function": null,
    "comment": "diagnostics.cpp:31:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "diagnostics.cpp",
    "line": 31,
    "function": null,
    "comment": "diagnostics.cpp:31:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "diagnostics.cpp",
    "line": 35,
    "function": null,
    "comment": "diagnostics.cpp:35:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "diagnostics.cpp",
    "line": 35,
    "function": null,
    "comment": "diagnostics.cpp:35:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "diagnostics.cpp",
    "line": 39,
    "function": null,
    "comment": "diagnostics.cpp:39:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "diagnostics.cpp",
    "line": 39,
    "function": null,
    "comment": "diagnostics.cpp:39:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "diagnostics.cpp",
    "line": 48,
    "function": null,
    "comment": "diagnostics.cpp:48:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "diagnostics.cpp",
    "line": 48,
    "function": null,
    "comment": "diagnostics.cpp:48:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "To-do comments should look like '// TODO(my_username): Stuff.'.",
    "file": "diagnostics.cpp",
    "line": 48,
    "function": null,
    "comment": "diagnostics.cpp:48:  Missing username in TODO; it should look like '// TODO(my_username): Stuff.'  [readability/todo] [2]",
    "tags": ["comments","code-standards","formatting","google-cpp","todo-comment"]
  },
  {
    "rule": "Whitespace inside parenthesis should be consistent, and should consist of either zero or one space.",
    "file": "diagnostics.cpp",
    "line": 50,
    "function": null,
    "comment": "diagnostics.cpp:50:  Mismatching spaces inside () in switch  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "diagnostics.cpp",
    "line": 65,
    "function": null,
    "comment": "diagnostics.cpp:65:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "diagnostics.cpp",
    "line": 65,
    "function": null,
    "comment": "diagnostics.cpp:65:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "diagnostics.cpp",
    "line": 66,
    "function": null,
    "comment": "diagnostics.cpp:66:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "diagnostics.cpp",
    "line": 67,
    "function": null,
    "comment": "diagnostics.cpp:67:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "diagnostics.cpp",
    "line": 67,
    "function": null,
    "comment": "diagnostics.cpp:67:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "To-do comments should look like '// TODO(my_username): Stuff.'.",
    "file": "diagnostics.cpp",
    "line": 67,
    "function": null,
    "comment": "diagnostics.cpp:67:  Missing username in TODO; it should look like '// TODO(my_username): Stuff.'  [readability/todo] [2]",
    "tags": ["comments","code-standards","formatting","google-cpp","todo-comment"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "diagnostics.cpp",
    "line": 70,
    "function": null,
    "comment": "diagnostics.cpp:70:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "diagnostics.cpp",
    "line": 70,
    "function": null,
    "comment": "diagnostics.cpp:70:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "diagnostics.cpp",
    "line": 72,
    "function": null,
    "comment": "diagnostics.cpp:72:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "diagnostics.cpp",
    "line": 72,
    "function": null,
    "comment": "diagnostics.cpp:72:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "To-do comments should look like '// TODO(my_username): Stuff.'.",
    "file": "diagnostics.cpp",
    "line": 72,
    "function": null,
    "comment": "diagnostics.cpp:72:  Missing username in TODO; it should look like '// TODO(my_username): Stuff.'  [readability/todo] [2]",
    "tags": ["comments","code-standards","formatting","google-cpp","todo-comment"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "diagnostics.cpp",
    "line": 75,
    "function": null,
    "comment": "diagnostics.cpp:75:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "diagnostics.cpp",
    "line": 75,
    "function": null,
    "comment": "diagnostics.cpp:75:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "diagnostics.cpp",
    "line": 99,
    "function": null,
    "comment": "diagnostics.cpp:99:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "diagnostics.cpp",
    "line": 100,
    "function": null,
    "comment": "diagnostics.cpp:100:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "diagnostics.cpp",
    "line": 101,
    "function": null,
    "comment": "diagnostics.cpp:101:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "diagnostics.cpp",
    "line": 128,
    "function": null,
    "comment": "diagnostics.cpp:128:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "diagnostics.cpp",
    "line": 128,
    "function": null,
    "comment": "diagnostics.cpp:128:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "To-do comments should look like '// TODO(my_username): Stuff.'.",
    "file": "diagnostics.cpp",
    "line": 128,
    "function": null,
    "comment": "diagnostics.cpp:128:  Missing username in TODO; it should look like '// TODO(my_username): Stuff.'  [readability/todo] [2]",
    "tags": ["comments","code-standards","formatting","google-cpp","todo-comment"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "diagnostics.cpp",
    "line": 129,
    "function": null,
    "comment": "diagnostics.cpp:129:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "diagnostics.cpp",
    "line": 145,
    "function": null,
    "comment": "diagnostics.cpp:145:  Using deprecated casting style.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "diagnostics.cpp",
    "line": 150,
    "function": null,
    "comment": "diagnostics.cpp:150:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "diagnostics.cpp",
    "line": 164,
    "function": null,
    "comment": "diagnostics.cpp:164:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "diagnostics.cpp",
    "line": 128,
    "function": null,
    "comment": "diagnostics.cpp:128:  Add #include <algorithm> for max  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "kobuki_nodelet.cpp",
    "line": 41,
    "function": null,
    "comment": "kobuki_nodelet.cpp:41:  Include 'ecl/threads/thread.hpp' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki_nodelet.cpp",
    "line": 46,
    "function": null,
    "comment": "kobuki_nodelet.cpp:46:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki_nodelet.cpp",
    "line": 49,
    "function": null,
    "comment": "kobuki_nodelet.cpp:49:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "kobuki_nodelet.cpp",
    "line": 50,
    "function": null,
    "comment": "kobuki_nodelet.cpp:50:  public: should be indented +1 space inside class KobukiNodelet  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Do not use meaningless empty statements.",
    "file": "kobuki_nodelet.cpp",
    "line": 51,
    "function": null,
    "comment": "kobuki_nodelet.cpp:51:  You don't need a ; after a }  [readability/braces] [4]",
    "tags": ["code-standards","google-cpp","empty-statement","ambiguous-code"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki_nodelet.cpp",
    "line": 53,
    "function": null,
    "comment": "kobuki_nodelet.cpp:53:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki_nodelet.cpp",
    "line": 59,
    "function": null,
    "comment": "kobuki_nodelet.cpp:59:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki_nodelet.cpp",
    "line": 63,
    "function": null,
    "comment": "kobuki_nodelet.cpp:63:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki_nodelet.cpp",
    "line": 65,
    "function": null,
    "comment": "kobuki_nodelet.cpp:65:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "kobuki_nodelet.cpp",
    "line": 69,
    "function": null,
    "comment": "kobuki_nodelet.cpp:69:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki_nodelet.cpp",
    "line": 70,
    "function": null,
    "comment": "kobuki_nodelet.cpp:70:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "kobuki_nodelet.cpp",
    "line": 74,
    "function": null,
    "comment": "kobuki_nodelet.cpp:74:  private: should be indented +1 space inside class KobukiNodelet  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki_nodelet.cpp",
    "line": 76,
    "function": null,
    "comment": "kobuki_nodelet.cpp:76:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki_nodelet.cpp",
    "line": 79,
    "function": null,
    "comment": "kobuki_nodelet.cpp:79:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "kobuki_nodelet.cpp",
    "line": 89,
    "function": null,
    "comment": "kobuki_nodelet.cpp:89:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "kobuki_nodelet.cpp",
    "line": 61,
    "function": null,
    "comment": "kobuki_nodelet.cpp:61:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "getOdom2D.py",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "getYaw.py",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "odometry.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "odometry.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "odometry.hpp",
    "line": null,
    "function": null,
    "comment": "Time: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "odometry.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "odometry.hpp",
    "line": null,
    "function": null,
    "comment": "TransformBroadcaster: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "odometry.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "odometry.hpp",
    "line": null,
    "function": null,
    "comment": "NodeHandle: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "odometry.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "odometry.hpp",
    "line": null,
    "function": null,
    "comment": "Vector3d: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "odometry.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "odometry.hpp",
    "line": null,
    "function": null,
    "comment": "Duration: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "odometry.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "odometry.hpp",
    "line": null,
    "function": null,
    "comment": "Pose2D: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "odometry.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "odometry.hpp",
    "line": null,
    "function": null,
    "comment": "bool: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "odometry.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "odometry.hpp",
    "line": null,
    "function": null,
    "comment": "string: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "odometry.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "odometry.hpp",
    "line": null,
    "function": null,
    "comment": "TransformStamped: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "odometry.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "odometry.hpp",
    "line": null,
    "function": null,
    "comment": "Publisher: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "odometry.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Maximum coupling between objects: 5",
    "file": "odometry.hpp",
    "line": null,
    "function": null,
    "comment": "CBO is greater than 5, Odometry, 11",
    "tags": ["metrics","nasa-satc","ros","coupling"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "odometry.hpp",
    "line": null,
    "function": null,
    "comment": "Quaternion: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "odometry.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "diagnostics.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "diagnostics.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "diagnostics.hpp",
    "line": null,
    "function": null,
    "comment": "Battery: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "diagnostics.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Maximum coupling between objects: 5",
    "file": "diagnostics.hpp",
    "line": null,
    "function": null,
    "comment": "CBO is greater than 5, DiagnosticStatusWrapper, 10",
    "tags": ["metrics","nasa-satc","ros","coupling"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "diagnostics.hpp",
    "line": null,
    "function": null,
    "comment": "DiagnosticStatusWrapper: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "diagnostics.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Maximum coupling between objects: 5",
    "file": "diagnostics.hpp",
    "line": null,
    "function": null,
    "comment": "CBO is greater than 5, DiagnosticTask, 10",
    "tags": ["metrics","nasa-satc","ros","coupling"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "diagnostics.hpp",
    "line": null,
    "function": null,
    "comment": "DiagnosticTask: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "diagnostics.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "diagnostics.hpp",
    "line": null,
    "function": null,
    "comment": "Data: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "diagnostics.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "diagnostics.hpp",
    "line": null,
    "function": null,
    "comment": "int16_t: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "diagnostics.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "diagnostics.hpp",
    "line": null,
    "function": null,
    "comment": "bool: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "diagnostics.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "diagnostics.hpp",
    "line": null,
    "function": null,
    "comment": "uint16_t: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "diagnostics.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "diagnostics.hpp",
    "line": null,
    "function": null,
    "comment": "uint8_t: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "diagnostics.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "diagnostics.hpp",
    "line": null,
    "function": null,
    "comment": "vector: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "diagnostics.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "kobuki_ros.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "kobuki_ros.hpp",
    "line": 178,
    "function": "rosNamed",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","cyclomatic-complexity"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "kobuki_ros.hpp",
    "line": null,
    "function": null,
    "comment": "NodeHandle: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "kobuki_ros.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "kobuki_ros.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "kobuki_ros.hpp",
    "line": null,
    "function": null,
    "comment": "string: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "kobuki_ros.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "subscriber_callbacks.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "subscriber_callbacks.cpp",
    "line": null,
    "function": null,
    "comment": "LedConstPtr: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "subscriber_callbacks.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "subscriber_callbacks.cpp",
    "line": null,
    "function": null,
    "comment": "MotorPowerConstPtr: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "subscriber_callbacks.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "subscriber_callbacks.cpp",
    "line": null,
    "function": null,
    "comment": "TwistConstPtr: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "subscriber_callbacks.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "subscriber_callbacks.cpp",
    "line": null,
    "function": null,
    "comment": "EmptyConstPtr: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "subscriber_callbacks.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Maximum coupling between objects: 5",
    "file": "subscriber_callbacks.cpp",
    "line": null,
    "function": null,
    "comment": "CBO is greater than 5, KobukiRos, 8",
    "tags": ["metrics","nasa-satc","ros","coupling"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "subscriber_callbacks.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "subscriber_callbacks.cpp",
    "line": 104,
    "function": "subscribeExternalPowerCommand",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","cyclomatic-complexity"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "subscriber_callbacks.cpp",
    "line": null,
    "function": null,
    "comment": "SoundConstPtr: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "subscriber_callbacks.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "subscriber_callbacks.cpp",
    "line": null,
    "function": null,
    "comment": "ControllerInfoConstPtr: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "subscriber_callbacks.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "subscriber_callbacks.cpp",
    "line": null,
    "function": null,
    "comment": "ExternalPowerConstPtr: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "subscriber_callbacks.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "subscriber_callbacks.cpp",
    "line": null,
    "function": null,
    "comment": "DigitalOutputConstPtr: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "subscriber_callbacks.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "kobuki_ros.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "kobuki_ros.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "kobuki_ros.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "kobuki_ros.cpp",
    "line": null,
    "function": null,
    "comment": "string: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "kobuki_ros.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "odometry.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "odometry.cpp",
    "line": null,
    "function": null,
    "comment": "NodeHandle: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "odometry.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "odometry.cpp",
    "line": null,
    "function": null,
    "comment": "Vector3d: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "odometry.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "odometry.cpp",
    "line": null,
    "function": null,
    "comment": "Pose2D: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "odometry.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "odometry.cpp",
    "line": null,
    "function": null,
    "comment": "string: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "odometry.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "odometry.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "odometry.cpp",
    "line": null,
    "function": null,
    "comment": "Quaternion: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "odometry.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "slot_callbacks.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "slot_callbacks.cpp",
    "line": null,
    "function": null,
    "comment": "InputEvent: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "slot_callbacks.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "slot_callbacks.cpp",
    "line": null,
    "function": null,
    "comment": "BufferType: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "slot_callbacks.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "slot_callbacks.cpp",
    "line": null,
    "function": null,
    "comment": "PowerEvent: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "slot_callbacks.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Maximum coupling between objects: 5",
    "file": "slot_callbacks.cpp",
    "line": null,
    "function": null,
    "comment": "CBO is greater than 5, KobukiRos, 11",
    "tags": ["metrics","nasa-satc","ros","coupling"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "slot_callbacks.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "slot_callbacks.cpp",
    "line": null,
    "function": null,
    "comment": "VersionInfo: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "slot_callbacks.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "slot_callbacks.cpp",
    "line": null,
    "function": null,
    "comment": "WheelEvent: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "slot_callbacks.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "slot_callbacks.cpp",
    "line": null,
    "function": null,
    "comment": "RobotEvent: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "slot_callbacks.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "slot_callbacks.cpp",
    "line": null,
    "function": null,
    "comment": "Buffer: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "slot_callbacks.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "slot_callbacks.cpp",
    "line": null,
    "function": null,
    "comment": "CliffEvent: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "slot_callbacks.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "slot_callbacks.cpp",
    "line": null,
    "function": null,
    "comment": "ButtonEvent: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "slot_callbacks.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "slot_callbacks.cpp",
    "line": null,
    "function": null,
    "comment": "BumperEvent: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "slot_callbacks.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "slot_callbacks.cpp",
    "line": null,
    "function": null,
    "comment": "vector: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "slot_callbacks.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "diagnostics.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Maximum coupling between objects: 5",
    "file": "diagnostics.cpp",
    "line": null,
    "function": null,
    "comment": "CBO is greater than 5, DiagnosticStatusWrapper, 10",
    "tags": ["metrics","nasa-satc","ros","coupling"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "diagnostics.cpp",
    "line": null,
    "function": null,
    "comment": "DiagnosticStatusWrapper: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "diagnostics.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "diagnostics.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "diagnostics.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "diagnostics.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "diagnostics.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "diagnostics.cpp",
    "line": 25,
    "function": "run",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","cyclomatic-complexity"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "diagnostics.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "diagnostics.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "diagnostics.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "diagnostics.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "diagnostics.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "diagnostics.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "kobuki_nodelet.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "kobuki_nodelet.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "kobuki_nodelet.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "kobuki_nodelet.cpp",
    "line": null,
    "function": null,
    "comment": "Thread: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "kobuki_nodelet.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "kobuki_nodelet.cpp",
    "line": null,
    "function": null,
    "comment": "bool: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "kobuki_nodelet.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "kobuki_nodelet.cpp",
    "line": null,
    "function": null,
    "comment": "shared_ptr: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "kobuki_nodelet.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "kobuki_nodelet.cpp",
    "line": null,
    "function": null,
    "comment": "Nodelet: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "kobuki_nodelet.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  }
]