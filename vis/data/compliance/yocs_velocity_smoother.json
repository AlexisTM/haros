[
  {
      "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
      "file": "velocity_smoother_nodelet.hpp",
      "line": null,
      "function": null,
      "comment": "velocity_smoother_nodelet.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
      "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
      "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
      "file": "velocity_smoother_nodelet.hpp",
      "line": 21,
      "function": null,
      "comment": "velocity_smoother_nodelet.hpp:21:  Include 'nav_msgs/Odometry.h' not in alphabetical order  [build/include_alpha] [4]",
      "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "velocity_smoother_nodelet.hpp",
      "line": 34,
      "function": null,
      "comment": "velocity_smoother_nodelet.hpp:34:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "Access modifiers should be indented by one space.",
      "file": "velocity_smoother_nodelet.hpp",
      "line": 35,
      "function": null,
      "comment": "velocity_smoother_nodelet.hpp:35:  public: should be indented +1 space inside class VelocitySmoother  [whitespace/indent] [3]",
      "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
      "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
      "file": "velocity_smoother_nodelet.hpp",
      "line": 36,
      "function": null,
      "comment": "velocity_smoother_nodelet.hpp:36:  Single-parameter constructors should be marked explicit.  [runtime/explicit] [5]",
      "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
      "rule": "Use 2 spaces for indentation.",
      "file": "velocity_smoother_nodelet.hpp",
      "line": 37,
      "function": null,
      "comment": "velocity_smoother_nodelet.hpp:37:  Weird number of spaces at line-start.  Are you using a 2-space indent?  [whitespace/indent] [3]",
      "tags": ["code-standards","formatting","whitespace","google-cpp","indentation"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "velocity_smoother_nodelet.hpp",
      "line": 37,
      "function": null,
      "comment": "velocity_smoother_nodelet.hpp:37:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "Do not use meaningless empty statements.",
      "file": "velocity_smoother_nodelet.hpp",
      "line": 37,
      "function": null,
      "comment": "velocity_smoother_nodelet.hpp:37:  You don't need a ; after a }  [readability/braces] [4]",
      "tags": ["code-standards","google-cpp","empty-statement","ambiguous-code"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "velocity_smoother_nodelet.hpp",
      "line": 40,
      "function": null,
      "comment": "velocity_smoother_nodelet.hpp:40:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "Avoid non-const reference parameters. Use const or pointers.",
      "file": "velocity_smoother_nodelet.hpp",
      "line": 45,
      "function": null,
      "comment": "velocity_smoother_nodelet.hpp:45:  Is this a non-const reference? If so, make const or use a pointer: ros::NodeHandle& nh  [runtime/references] [2]",
      "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
      "rule": "Avoid more than one command per line.",
      "file": "velocity_smoother_nodelet.hpp",
      "line": 47,
      "function": null,
      "comment": "velocity_smoother_nodelet.hpp:47:  More than one command on the same line  [whitespace/newline] [0]",
      "tags": ["code-standards","formatting","google-cpp"]
  },
  {
      "rule": "Do not use meaningless empty statements.",
      "file": "velocity_smoother_nodelet.hpp",
      "line": 47,
      "function": null,
      "comment": "velocity_smoother_nodelet.hpp:47:  You don't need a ; after a }  [readability/braces] [4]",
      "tags": ["code-standards","google-cpp","empty-statement","ambiguous-code"]
  },
  {
      "rule": "Access modifiers should be indented by one space.",
      "file": "velocity_smoother_nodelet.hpp",
      "line": 49,
      "function": null,
      "comment": "velocity_smoother_nodelet.hpp:49:  private: should be indented +1 space inside class VelocitySmoother  [whitespace/indent] [3]",
      "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "velocity_smoother_nodelet.hpp",
      "line": 51,
      "function": null,
      "comment": "velocity_smoother_nodelet.hpp:51:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "velocity_smoother_nodelet.hpp",
      "line": 68,
      "function": null,
      "comment": "velocity_smoother_nodelet.hpp:68:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "velocity_smoother_nodelet.hpp",
      "line": 72,
      "function": null,
      "comment": "velocity_smoother_nodelet.hpp:72:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "velocity_smoother_nodelet.hpp",
      "line": 73,
      "function": null,
      "comment": "velocity_smoother_nodelet.hpp:73:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "velocity_smoother_nodelet.hpp",
      "line": 76,
      "function": null,
      "comment": "velocity_smoother_nodelet.hpp:76:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "Avoid more than one command per line.",
      "file": "velocity_smoother_nodelet.hpp",
      "line": 84,
      "function": null,
      "comment": "velocity_smoother_nodelet.hpp:84:  More than one command on the same line  [whitespace/newline] [0]",
      "tags": ["code-standards","formatting","google-cpp"]
  },
  {
      "rule": "Do not use meaningless empty statements.",
      "file": "velocity_smoother_nodelet.hpp",
      "line": 84,
      "function": null,
      "comment": "velocity_smoother_nodelet.hpp:84:  You don't need a ; after a }  [readability/braces] [4]",
      "tags": ["code-standards","google-cpp","empty-statement","ambiguous-code"]
  },
  {
      "rule": "Do not use meaningless empty statements.",
      "file": "velocity_smoother_nodelet.hpp",
      "line": 90,
      "function": null,
      "comment": "velocity_smoother_nodelet.hpp:90:  You don't need a ; after a }  [readability/braces] [4]",
      "tags": ["code-standards","google-cpp","empty-statement","ambiguous-code"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "velocity_smoother_nodelet.hpp",
      "line": 95,
      "function": null,
      "comment": "velocity_smoother_nodelet.hpp:95:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "velocity_smoother_nodelet.hpp",
      "line": 96,
      "function": null,
      "comment": "velocity_smoother_nodelet.hpp:96:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "velocity_smoother_nodelet.hpp",
      "line": 97,
      "function": null,
      "comment": "velocity_smoother_nodelet.hpp:97:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "Avoid non-const reference parameters. Use const or pointers.",
      "file": "velocity_smoother_nodelet.hpp",
      "line": 97,
      "function": null,
      "comment": "velocity_smoother_nodelet.hpp:97:  Is this a non-const reference? If so, make const or use a pointer: yocs_velocity_smoother::paramsConfig &config  [runtime/references] [2]",
      "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
      "rule": "Namespaces should have a comment at the end.",
      "file": "velocity_smoother_nodelet.hpp",
      "line": 100,
      "function": null,
      "comment": "velocity_smoother_nodelet.hpp:100:  Namespace should be terminated with '// namespace yocs_velocity_smoother'  [readability/namespace] [5]",
      "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
      "rule": "At least two spaces is best between code and comments.",
      "file": "velocity_smoother_nodelet.hpp",
      "line": 100,
      "function": null,
      "comment": "velocity_smoother_nodelet.hpp:100:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
      "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
      "rule": "Include all required headers for what you use.",
      "file": "velocity_smoother_nodelet.hpp",
      "line": 57,
      "function": null,
      "comment": "velocity_smoother_nodelet.hpp:57:  Add #include <string> for string  [build/include_what_you_use] [4]",
      "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
      "rule": "Include all required headers for what you use.",
      "file": "velocity_smoother_nodelet.hpp",
      "line": 86,
      "function": null,
      "comment": "velocity_smoother_nodelet.hpp:86:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
      "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
      "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": null,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
      "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
      "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 14,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:14:  Include 'nodelet/nodelet.h' not in alphabetical order  [build/include_alpha] [4]",
      "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 42,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:42:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 43,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:43:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 45,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:45:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 57,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:57:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 58,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:58:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 59,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:59:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 61,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:61:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The else statement should be on the same line as the preceeding closing brace.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 64,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:64:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
      "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 65,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:65:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 74,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:74:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 75,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:75:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "The else statement should be on the same line as the preceeding closing brace.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 78,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:78:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
      "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 79,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:79:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 88,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:88:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 90,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:90:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 94,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:94:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 102,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:102:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 110,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:110:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "Unary operators should have no whitespace around them.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 114,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:114:  Extra space for operator !   [whitespace/operators] [4]",
      "tags": ["code-standards","formatting","whitespace","google-cpp","unary-operator"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 115,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:115:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 117,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:117:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 118,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:118:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 119,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:119:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 120,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:120:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 121,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:121:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 122,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:122:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 126,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:126:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 127,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:127:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 128,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:128:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 133,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:133:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 134,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:134:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "At least two spaces is best between code and comments.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 134,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:134:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
      "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 137,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:137:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 138,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:138:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 139,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:139:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 140,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:140:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 141,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:141:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "To-do comments should look like '// TODO(my_username): Stuff.'.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 141,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:141:  Missing username in TODO; it should look like '// TODO(my_username): Stuff.'  [readability/todo] [2]",
      "tags": ["comments","code-standards","formatting","google-cpp","todo-comment"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 143,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:143:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 144,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:144:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 145,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:145:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 157,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:157:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 158,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:158:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 164,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:164:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 165,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:165:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 166,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:166:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "The else statement should be on the same line as the preceeding closing brace.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 169,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:169:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
      "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 170,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:170:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 171,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:171:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 175,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:175:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 176,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:176:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 177,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:177:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "The else statement should be on the same line as the preceeding closing brace.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 180,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:180:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
      "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 181,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:181:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 182,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:182:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 185,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:185:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 186,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:186:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 187,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:187:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 188,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:188:  Extra space after ( in function call  [whitespace/parens] [4]",
      "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 198,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:198:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The else statement should be on the same line as the preceeding closing brace.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 202,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:202:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
      "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 203,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:203:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 209,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:209:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 215,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:215:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The else statement should be on the same line as the preceeding closing brace.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 223,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:223:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
      "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 224,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:224:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 225,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:225:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 240,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:240:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 242,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:242:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 244,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:244:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "Don't use deprecated casting styles.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 251,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:251:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
      "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
      "rule": "Don't use deprecated casting styles.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 253,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:253:  Using deprecated casting style.  Use static_cast<int>(...) instead  [readability/casting] [4]",
      "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 254,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:254:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 255,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:255:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 265,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:265:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 272,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:272:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 282,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:282:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 283,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:283:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 284,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:284:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 296,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:296:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "Access modifiers should be indented by one space.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 297,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:297:  public: should be indented +1 space inside class VelocitySmootherNodelet  [whitespace/indent] [3]",
      "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 300,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:300:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 313,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:313:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 315,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:315:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "At least two spaces is best between code and comments.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 315,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:315:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
      "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
      "rule": "At least two spaces is best between code and comments.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 316,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:316:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
      "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 317,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:317:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 320,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:320:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 321,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:321:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "The else statement should be on the same line as the preceeding closing brace.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 324,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:324:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
      "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
      "rule": "The open curly brace should almost never be on its own line.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 325,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:325:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
      "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 326,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:326:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "Access modifiers should be indented by one space.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 330,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:330:  private: should be indented +1 space inside class VelocitySmootherNodelet  [whitespace/indent] [3]",
      "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
      "rule": "At least two spaces is best between code and comments.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 335,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:335:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
      "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
      "rule": "No line should exceed 80 characters in length.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 337,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:337:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
      "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
      "rule": "Include all required headers for what you use.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 316,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:316:  Add #include <string> for string  [build/include_what_you_use] [4]",
      "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
      "rule": "Include all required headers for what you use.",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 117,
      "function": null,
      "comment": "velocity_smoother_nodelet.cpp:117:  Add #include <algorithm> for min  [build/include_what_you_use] [4]",
      "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
      "rule": "Minimum lines of comments: 20%",
      "file": "test_translational_input.py",
      "line": null,
      "function": null,
      "comment": "Comment ratio is below 20%",
      "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
      "rule": "Minimum lines of comments: 20%",
      "file": "velocity_smoother_nodelet.hpp",
      "line": null,
      "function": null,
      "comment": "Comment ratio is below 20%",
      "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
      "rule": "Minimum available methods per class: 1",
      "file": "velocity_smoother_nodelet.hpp",
      "line": null,
      "function": null,
      "comment": "MAC is less than 1",
      "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
      "rule": "Minimum cyclomatic complexity: 1",
      "file": "velocity_smoother_nodelet.hpp",
      "line": 82,
      "function": "odometryCB",
      "comment": "CC is less than 1",
      "tags": ["metrics","nasa-satc","his","ros","kth","cyclomatic-complexity"]
  },
  {
      "rule": "Minimum cyclomatic complexity: 1",
      "file": "velocity_smoother_nodelet.hpp",
      "line": 97,
      "function": "reconfigCB",
      "comment": "CC is less than 1",
      "tags": ["metrics","nasa-satc","his","ros","kth","cyclomatic-complexity"]
  },
  {
      "rule": "Minimum cyclomatic complexity: 1",
      "file": "velocity_smoother_nodelet.hpp",
      "line": 81,
      "function": "robotVelCB",
      "comment": "CC is less than 1",
      "tags": ["metrics","nasa-satc","his","ros","kth","cyclomatic-complexity"]
  },
  {
      "rule": "Minimum cyclomatic complexity: 1",
      "file": "velocity_smoother_nodelet.hpp",
      "line": 84,
      "function": "sign",
      "comment": "CC is less than 1",
      "tags": ["metrics","nasa-satc","his","ros","kth","cyclomatic-complexity"]
  },
  {
      "rule": "Minimum cyclomatic complexity: 1",
      "file": "velocity_smoother_nodelet.hpp",
      "line": 80,
      "function": "velocityCB",
      "comment": "CC is less than 1",
      "tags": ["metrics","nasa-satc","his","ros","kth","cyclomatic-complexity"]
  },
  {
      "rule": "Minimum available methods per class: 1",
      "file": "velocity_smoother_nodelet.hpp",
      "line": null,
      "function": null,
      "comment": "MAC is less than 1",
      "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
      "rule": "Minimum cyclomatic complexity: 1",
      "file": "velocity_smoother_nodelet.hpp",
      "line": 36,
      "function": "VelocitySmoother",
      "comment": "CC is less than 1",
      "tags": ["metrics","nasa-satc","his","ros","kth","cyclomatic-complexity"]
  },
  {
      "rule": "Minimum cyclomatic complexity: 1",
      "file": "velocity_smoother_nodelet.hpp",
      "line": 45,
      "function": "init",
      "comment": "CC is less than 1",
      "tags": ["metrics","nasa-satc","his","ros","kth","cyclomatic-complexity"]
  },
  {
      "rule": "Minimum cyclomatic complexity: 1",
      "file": "velocity_smoother_nodelet.hpp",
      "line": 47,
      "function": "shutdown",
      "comment": "CC is less than 1",
      "tags": ["metrics","nasa-satc","his","ros","kth","cyclomatic-complexity"]
  },
  {
      "rule": "Minimum cyclomatic complexity: 1",
      "file": "velocity_smoother_nodelet.hpp",
      "line": 46,
      "function": "spin",
      "comment": "CC is less than 1",
      "tags": ["metrics","nasa-satc","his","ros","kth","cyclomatic-complexity"]
  },
  {
      "rule": "Minimum weighted methods per class: 1",
      "file": "velocity_smoother_nodelet.hpp",
      "line": null,
      "function": null,
      "comment": "NodeHandle: WMC < 1 (0)",
      "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
      "rule": "Minimum available methods per class: 1",
      "file": "velocity_smoother_nodelet.hpp",
      "line": null,
      "function": null,
      "comment": "MAC is less than 1",
      "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
      "rule": "Minimum weighted methods per class: 1",
      "file": "velocity_smoother_nodelet.hpp",
      "line": null,
      "function": null,
      "comment": "string: WMC < 1 (0)",
      "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
      "rule": "Minimum available methods per class: 1",
      "file": "velocity_smoother_nodelet.hpp",
      "line": null,
      "function": null,
      "comment": "MAC is less than 1",
      "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
      "rule": "Maximum lines of comments: 30%",
      "file": "velocity_smoother_nodelet.cpp",
      "line": null,
      "function": null,
      "comment": "Comment ratio is above 30%",
      "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
      "rule": "Minimum available methods per class: 1",
      "file": "velocity_smoother_nodelet.cpp",
      "line": null,
      "function": null,
      "comment": "MAC is less than 1",
      "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
      "rule": "Minimum cyclomatic complexity: 1",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 337,
      "function": "PLUGINLIB_EXPORT_CLASS",
      "comment": "CC is less than 1",
      "tags": ["metrics","nasa-satc","his","ros","kth","cyclomatic-complexity"]
  },
  {
      "rule": "Minimum available methods per class: 1",
      "file": "velocity_smoother_nodelet.cpp",
      "line": null,
      "function": null,
      "comment": "MAC is less than 1",
      "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
      "rule": "Minimum cyclomatic complexity: 1",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 42,
      "function": "reconfigCB",
      "comment": "CC is less than 1",
      "tags": ["metrics","nasa-satc","his","ros","kth","cyclomatic-complexity"]
  },
  {
      "rule": "Maximum cyclomatic complexity: 10",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 109,
      "function": "spin",
      "comment": "CC is greater than 10",
      "tags": ["metrics","nasa-satc","his","cyclomatic-complexity"]
  },
  {
      "rule": "Maximum cyclomatic complexity: 15",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 109,
      "function": "spin",
      "comment": "CC is greater than 15",
      "tags": ["metrics","ros","kth","cyclomatic-complexity"]
  },
  {
      "rule": "Minimum weighted methods per class: 1",
      "file": "velocity_smoother_nodelet.cpp",
      "line": null,
      "function": null,
      "comment": "NodeHandle: WMC < 1 (0)",
      "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
      "rule": "Minimum available methods per class: 1",
      "file": "velocity_smoother_nodelet.cpp",
      "line": null,
      "function": null,
      "comment": "MAC is less than 1",
      "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
      "rule": "Minimum weighted methods per class: 1",
      "file": "velocity_smoother_nodelet.cpp",
      "line": null,
      "function": null,
      "comment": "uint32_t: WMC < 1 (0)",
      "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
      "rule": "Minimum available methods per class: 1",
      "file": "velocity_smoother_nodelet.cpp",
      "line": null,
      "function": null,
      "comment": "MAC is less than 1",
      "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
      "rule": "Minimum weighted methods per class: 1",
      "file": "velocity_smoother_nodelet.cpp",
      "line": null,
      "function": null,
      "comment": "Thread: WMC < 1 (0)",
      "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
      "rule": "Minimum available methods per class: 1",
      "file": "velocity_smoother_nodelet.cpp",
      "line": null,
      "function": null,
      "comment": "MAC is less than 1",
      "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
      "rule": "Minimum cyclomatic complexity: 1",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 298,
      "function": "VelocitySmootherNodelet",
      "comment": "CC is less than 1",
      "tags": ["metrics","nasa-satc","his","ros","kth","cyclomatic-complexity"]
  },
  {
      "rule": "Minimum cyclomatic complexity: 1",
      "file": "velocity_smoother_nodelet.cpp",
      "line": 299,
      "function": "~VelocitySmootherNodelet",
      "comment": "CC is less than 1",
      "tags": ["metrics","nasa-satc","his","ros","kth","cyclomatic-complexity"]
  },
  {
      "rule": "Minimum weighted methods per class: 1",
      "file": "velocity_smoother_nodelet.cpp",
      "line": null,
      "function": null,
      "comment": "string: WMC < 1 (0)",
      "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
      "rule": "Minimum available methods per class: 1",
      "file": "velocity_smoother_nodelet.cpp",
      "line": null,
      "function": null,
      "comment": "MAC is less than 1",
      "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
      "rule": "Minimum weighted methods per class: 1",
      "file": "velocity_smoother_nodelet.cpp",
      "line": null,
      "function": null,
      "comment": "shared_ptr: WMC < 1 (0)",
      "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
      "rule": "Minimum available methods per class: 1",
      "file": "velocity_smoother_nodelet.cpp",
      "line": null,
      "function": null,
      "comment": "MAC is less than 1",
      "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
      "rule": "Minimum weighted methods per class: 1",
      "file": "velocity_smoother_nodelet.cpp",
      "line": null,
      "function": null,
      "comment": "Nodelet: WMC < 1 (0)",
      "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
      "rule": "Minimum available methods per class: 1",
      "file": "velocity_smoother_nodelet.cpp",
      "line": null,
      "function": null,
      "comment": "MAC is less than 1",
      "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
      "rule": "Minimum weighted methods per class: 1",
      "file": "velocity_smoother_nodelet.cpp",
      "line": null,
      "function": null,
      "comment": "paramsConfig: WMC < 1 (0)",
      "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
      "rule": "Minimum available methods per class: 1",
      "file": "velocity_smoother_nodelet.cpp",
      "line": null,
      "function": null,
      "comment": "MAC is less than 1",
      "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
      "rule": "Minimum weighted methods per class: 1",
      "file": "velocity_smoother_nodelet.cpp",
      "line": null,
      "function": null,
      "comment": "ConstPtr: WMC < 1 (0)",
      "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
      "rule": "Minimum available methods per class: 1",
      "file": "velocity_smoother_nodelet.cpp",
      "line": null,
      "function": null,
      "comment": "MAC is less than 1",
      "tags": ["metrics","nasa-satc","ros","available-methods"]
  }
]