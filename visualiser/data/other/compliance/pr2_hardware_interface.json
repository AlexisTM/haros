[
  {
    "rule": "The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_.",
    "file": "hardware_interface.h",
    "line": 35,
    "function": null,
    "comment": "hardware_interface.h:35:  #ifndef header guard has wrong style, please use: _HOME_ANDRE_ROS_HAROS_ANALYSER_HARDWARE_INTERFACE_H_  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the guard's end should be '#endif  // <PROJECT>_<PATH>_<FILE>_H_' or '#endif  /* <PROJECT>_<PATH>_<FILE>_H_ */'.",
    "file": "hardware_interface.h",
    "line": 591,
    "function": null,
    "comment": "hardware_interface.h:591:  #endif line should be '#endif  // _HOME_ANDRE_ROS_HAROS_ANALYSER_HARDWARE_INTERFACE_H_'  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "hardware_interface.h",
    "line": 41,
    "function": null,
    "comment": "hardware_interface.h:41:  Found C system header after C++ system header. Should be: hardware_interface.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "hardware_interface.h",
    "line": 43,
    "function": null,
    "comment": "hardware_interface.h:43:  Found C system header after C++ system header. Should be: hardware_interface.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "hardware_interface.h",
    "line": 44,
    "function": null,
    "comment": "hardware_interface.h:44:  Found C system header after C++ system header. Should be: hardware_interface.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "hardware_interface.h",
    "line": 46,
    "function": null,
    "comment": "hardware_interface.h:46:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "hardware_interface.h",
    "line": 46,
    "function": null,
    "comment": "hardware_interface.h:46:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "hardware_interface.h",
    "line": 49,
    "function": null,
    "comment": "hardware_interface.h:49:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "hardware_interface.h",
    "line": 50,
    "function": null,
    "comment": "hardware_interface.h:50:  public: should be indented +1 space inside class ActuatorState  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "hardware_interface.h",
    "line": 92,
    "function": null,
    "comment": "hardware_interface.h:92:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "hardware_interface.h",
    "line": 94,
    "function": null,
    "comment": "hardware_interface.h:94:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "hardware_interface.h",
    "line": 95,
    "function": null,
    "comment": "hardware_interface.h:95:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "hardware_interface.h",
    "line": 96,
    "function": null,
    "comment": "hardware_interface.h:96:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "hardware_interface.h",
    "line": 96,
    "function": null,
    "comment": "hardware_interface.h:96:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "hardware_interface.h",
    "line": 97,
    "function": null,
    "comment": "hardware_interface.h:97:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "hardware_interface.h",
    "line": 99,
    "function": null,
    "comment": "hardware_interface.h:99:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "hardware_interface.h",
    "line": 99,
    "function": null,
    "comment": "hardware_interface.h:99:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "hardware_interface.h",
    "line": 100,
    "function": null,
    "comment": "hardware_interface.h:100:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "hardware_interface.h",
    "line": 100,
    "function": null,
    "comment": "hardware_interface.h:100:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "hardware_interface.h",
    "line": 101,
    "function": null,
    "comment": "hardware_interface.h:101:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "hardware_interface.h",
    "line": 101,
    "function": null,
    "comment": "hardware_interface.h:101:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "hardware_interface.h",
    "line": 102,
    "function": null,
    "comment": "hardware_interface.h:102:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "hardware_interface.h",
    "line": 102,
    "function": null,
    "comment": "hardware_interface.h:102:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "hardware_interface.h",
    "line": 103,
    "function": null,
    "comment": "hardware_interface.h:103:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "hardware_interface.h",
    "line": 103,
    "function": null,
    "comment": "hardware_interface.h:103:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "hardware_interface.h",
    "line": 105,
    "function": null,
    "comment": "hardware_interface.h:105:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "hardware_interface.h",
    "line": 106,
    "function": null,
    "comment": "hardware_interface.h:106:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "hardware_interface.h",
    "line": 106,
    "function": null,
    "comment": "hardware_interface.h:106:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "hardware_interface.h",
    "line": 108,
    "function": null,
    "comment": "hardware_interface.h:108:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "hardware_interface.h",
    "line": 108,
    "function": null,
    "comment": "hardware_interface.h:108:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "hardware_interface.h",
    "line": 109,
    "function": null,
    "comment": "hardware_interface.h:109:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "hardware_interface.h",
    "line": 109,
    "function": null,
    "comment": "hardware_interface.h:109:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "hardware_interface.h",
    "line": 110,
    "function": null,
    "comment": "hardware_interface.h:110:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "hardware_interface.h",
    "line": 112,
    "function": null,
    "comment": "hardware_interface.h:112:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "hardware_interface.h",
    "line": 112,
    "function": null,
    "comment": "hardware_interface.h:112:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "hardware_interface.h",
    "line": 113,
    "function": null,
    "comment": "hardware_interface.h:113:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "hardware_interface.h",
    "line": 113,
    "function": null,
    "comment": "hardware_interface.h:113:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "hardware_interface.h",
    "line": 114,
    "function": null,
    "comment": "hardware_interface.h:114:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "hardware_interface.h",
    "line": 116,
    "function": null,
    "comment": "hardware_interface.h:116:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "hardware_interface.h",
    "line": 116,
    "function": null,
    "comment": "hardware_interface.h:116:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "hardware_interface.h",
    "line": 118,
    "function": null,
    "comment": "hardware_interface.h:118:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "hardware_interface.h",
    "line": 120,
    "function": null,
    "comment": "hardware_interface.h:120:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "hardware_interface.h",
    "line": 122,
    "function": null,
    "comment": "hardware_interface.h:122:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "hardware_interface.h",
    "line": 122,
    "function": null,
    "comment": "hardware_interface.h:122:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "hardware_interface.h",
    "line": 126,
    "function": null,
    "comment": "hardware_interface.h:126:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "hardware_interface.h",
    "line": 127,
    "function": null,
    "comment": "hardware_interface.h:127:  public: should be indented +1 space inside class ActuatorCommand  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "hardware_interface.h",
    "line": 131,
    "function": null,
    "comment": "hardware_interface.h:131:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "hardware_interface.h",
    "line": 132,
    "function": null,
    "comment": "hardware_interface.h:132:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "hardware_interface.h",
    "line": 148,
    "function": null,
    "comment": "hardware_interface.h:148:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "hardware_interface.h",
    "line": 149,
    "function": null,
    "comment": "hardware_interface.h:149:  public: should be indented +1 space inside class Actuator  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Do not use meaningless empty statements.",
    "file": "hardware_interface.h",
    "line": 150,
    "function": null,
    "comment": "hardware_interface.h:150:  You don't need a ; after a }  [readability/braces] [4]",
    "tags": ["code-standards","google-cpp","empty-statement","ambiguous-code"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "hardware_interface.h",
    "line": 151,
    "function": null,
    "comment": "hardware_interface.h:151:  Single-parameter constructors should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "hardware_interface.h",
    "line": 158,
    "function": null,
    "comment": "hardware_interface.h:158:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "hardware_interface.h",
    "line": 162,
    "function": null,
    "comment": "hardware_interface.h:162:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "hardware_interface.h",
    "line": 163,
    "function": null,
    "comment": "hardware_interface.h:163:  public: should be indented +1 space inside class PressureSensorState  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "hardware_interface.h",
    "line": 164,
    "function": null,
    "comment": "hardware_interface.h:164:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "hardware_interface.h",
    "line": 164,
    "function": null,
    "comment": "hardware_interface.h:164:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "hardware_interface.h",
    "line": 178,
    "function": null,
    "comment": "hardware_interface.h:178:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "hardware_interface.h",
    "line": 179,
    "function": null,
    "comment": "hardware_interface.h:179:  public: should be indented +1 space inside class PressureSensor  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "hardware_interface.h",
    "line": 186,
    "function": null,
    "comment": "hardware_interface.h:186:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "hardware_interface.h",
    "line": 187,
    "function": null,
    "comment": "hardware_interface.h:187:  public: should be indented +1 space inside class AccelerometerCommand  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "hardware_interface.h",
    "line": 188,
    "function": null,
    "comment": "hardware_interface.h:188:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "hardware_interface.h",
    "line": 188,
    "function": null,
    "comment": "hardware_interface.h:188:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "hardware_interface.h",
    "line": 188,
    "function": null,
    "comment": "hardware_interface.h:188:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "hardware_interface.h",
    "line": 189,
    "function": null,
    "comment": "hardware_interface.h:189:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "hardware_interface.h",
    "line": 189,
    "function": null,
    "comment": "hardware_interface.h:189:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "hardware_interface.h",
    "line": 189,
    "function": null,
    "comment": "hardware_interface.h:189:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "hardware_interface.h",
    "line": 191,
    "function": null,
    "comment": "hardware_interface.h:191:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "hardware_interface.h",
    "line": 191,
    "function": null,
    "comment": "hardware_interface.h:191:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "hardware_interface.h",
    "line": 192,
    "function": null,
    "comment": "hardware_interface.h:192:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "hardware_interface.h",
    "line": 192,
    "function": null,
    "comment": "hardware_interface.h:192:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "hardware_interface.h",
    "line": 196,
    "function": null,
    "comment": "hardware_interface.h:196:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "hardware_interface.h",
    "line": 197,
    "function": null,
    "comment": "hardware_interface.h:197:  public: should be indented +1 space inside class AccelerometerState  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "hardware_interface.h",
    "line": 199,
    "function": null,
    "comment": "hardware_interface.h:199:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "hardware_interface.h",
    "line": 199,
    "function": null,
    "comment": "hardware_interface.h:199:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "hardware_interface.h",
    "line": 213,
    "function": null,
    "comment": "hardware_interface.h:213:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "hardware_interface.h",
    "line": 214,
    "function": null,
    "comment": "hardware_interface.h:214:  public: should be indented +1 space inside class Accelerometer  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "hardware_interface.h",
    "line": 221,
    "function": null,
    "comment": "hardware_interface.h:221:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "hardware_interface.h",
    "line": 222,
    "function": null,
    "comment": "hardware_interface.h:222:  public: should be indented +1 space inside class ForceTorqueState  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "hardware_interface.h",
    "line": 223,
    "function": null,
    "comment": "hardware_interface.h:223:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "hardware_interface.h",
    "line": 223,
    "function": null,
    "comment": "hardware_interface.h:223:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "hardware_interface.h",
    "line": 224,
    "function": null,
    "comment": "hardware_interface.h:224:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "hardware_interface.h",
    "line": 229,
    "function": null,
    "comment": "hardware_interface.h:229:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "hardware_interface.h",
    "line": 230,
    "function": null,
    "comment": "hardware_interface.h:230:  public: should be indented +1 space inside class ForceTorqueCommand  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "hardware_interface.h",
    "line": 231,
    "function": null,
    "comment": "hardware_interface.h:231:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "hardware_interface.h",
    "line": 236,
    "function": null,
    "comment": "hardware_interface.h:236:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "hardware_interface.h",
    "line": 237,
    "function": null,
    "comment": "hardware_interface.h:237:  public: should be indented +1 space inside class ForceTorque  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "hardware_interface.h",
    "line": 245,
    "function": null,
    "comment": "hardware_interface.h:245:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "hardware_interface.h",
    "line": 246,
    "function": null,
    "comment": "hardware_interface.h:246:  public: should be indented +1 space inside class DigitalOutCommand  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "hardware_interface.h",
    "line": 248,
    "function": null,
    "comment": "hardware_interface.h:248:  Single-parameter constructors should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "hardware_interface.h",
    "line": 253,
    "function": null,
    "comment": "hardware_interface.h:253:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "hardware_interface.h",
    "line": 254,
    "function": null,
    "comment": "hardware_interface.h:254:  public: should be indented +1 space inside class DigitalOutState  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "hardware_interface.h",
    "line": 269,
    "function": null,
    "comment": "hardware_interface.h:269:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "hardware_interface.h",
    "line": 270,
    "function": null,
    "comment": "hardware_interface.h:270:  public: should be indented +1 space inside class DigitalOut  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "hardware_interface.h",
    "line": 277,
    "function": null,
    "comment": "hardware_interface.h:277:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "hardware_interface.h",
    "line": 278,
    "function": null,
    "comment": "hardware_interface.h:278:  public: should be indented +1 space inside class ProjectorCommand  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "hardware_interface.h",
    "line": 279,
    "function": null,
    "comment": "hardware_interface.h:279:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "hardware_interface.h",
    "line": 292,
    "function": null,
    "comment": "hardware_interface.h:292:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "hardware_interface.h",
    "line": 293,
    "function": null,
    "comment": "hardware_interface.h:293:  public: should be indented +1 space inside class ProjectorState  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "hardware_interface.h",
    "line": 294,
    "function": null,
    "comment": "hardware_interface.h:294:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "hardware_interface.h",
    "line": 299,
    "function": null,
    "comment": "hardware_interface.h:299:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "hardware_interface.h",
    "line": 336,
    "function": null,
    "comment": "hardware_interface.h:336:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "hardware_interface.h",
    "line": 337,
    "function": null,
    "comment": "hardware_interface.h:337:  public: should be indented +1 space inside class Projector  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "hardware_interface.h",
    "line": 338,
    "function": null,
    "comment": "hardware_interface.h:338:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "hardware_interface.h",
    "line": 345,
    "function": null,
    "comment": "hardware_interface.h:345:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "hardware_interface.h",
    "line": 349,
    "function": null,
    "comment": "hardware_interface.h:349:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "hardware_interface.h",
    "line": 350,
    "function": null,
    "comment": "hardware_interface.h:350:  public: should be indented +1 space inside class AnalogInState  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "hardware_interface.h",
    "line": 355,
    "function": null,
    "comment": "hardware_interface.h:355:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "hardware_interface.h",
    "line": 356,
    "function": null,
    "comment": "hardware_interface.h:356:  public: should be indented +1 space inside class AnalogIn  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "hardware_interface.h",
    "line": 369,
    "function": null,
    "comment": "hardware_interface.h:369:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "hardware_interface.h",
    "line": 370,
    "function": null,
    "comment": "hardware_interface.h:370:  public: should be indented +1 space inside class CustomHW  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "hardware_interface.h",
    "line": 409,
    "function": null,
    "comment": "hardware_interface.h:409:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "hardware_interface.h",
    "line": 410,
    "function": null,
    "comment": "hardware_interface.h:410:  public: should be indented +1 space inside class HardwareInterface  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "hardware_interface.h",
    "line": 424,
    "function": null,
    "comment": "hardware_interface.h:424:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "hardware_interface.h",
    "line": 434,
    "function": null,
    "comment": "hardware_interface.h:434:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "hardware_interface.h",
    "line": 444,
    "function": null,
    "comment": "hardware_interface.h:444:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "hardware_interface.h",
    "line": 454,
    "function": null,
    "comment": "hardware_interface.h:454:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "hardware_interface.h",
    "line": 464,
    "function": null,
    "comment": "hardware_interface.h:464:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "hardware_interface.h",
    "line": 474,
    "function": null,
    "comment": "hardware_interface.h:474:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "hardware_interface.h",
    "line": 484,
    "function": null,
    "comment": "hardware_interface.h:484:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "hardware_interface.h",
    "line": 494,
    "function": null,
    "comment": "hardware_interface.h:494:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "hardware_interface.h",
    "line": 504,
    "function": null,
    "comment": "hardware_interface.h:504:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "hardware_interface.h",
    "line": 515,
    "function": null,
    "comment": "hardware_interface.h:515:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "hardware_interface.h",
    "line": 517,
    "function": null,
    "comment": "hardware_interface.h:517:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "hardware_interface.h",
    "line": 526,
    "function": null,
    "comment": "hardware_interface.h:526:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "hardware_interface.h",
    "line": 528,
    "function": null,
    "comment": "hardware_interface.h:528:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "hardware_interface.h",
    "line": 537,
    "function": null,
    "comment": "hardware_interface.h:537:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "hardware_interface.h",
    "line": 539,
    "function": null,
    "comment": "hardware_interface.h:539:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "hardware_interface.h",
    "line": 548,
    "function": null,
    "comment": "hardware_interface.h:548:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "hardware_interface.h",
    "line": 550,
    "function": null,
    "comment": "hardware_interface.h:550:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "hardware_interface.h",
    "line": 559,
    "function": null,
    "comment": "hardware_interface.h:559:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "hardware_interface.h",
    "line": 561,
    "function": null,
    "comment": "hardware_interface.h:561:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "hardware_interface.h",
    "line": 570,
    "function": null,
    "comment": "hardware_interface.h:570:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "hardware_interface.h",
    "line": 572,
    "function": null,
    "comment": "hardware_interface.h:572:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "hardware_interface.h",
    "line": 581,
    "function": null,
    "comment": "hardware_interface.h:581:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "hardware_interface.h",
    "line": 583,
    "function": null,
    "comment": "hardware_interface.h:583:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "hardware_interface.h",
    "line": 587,
    "function": null,
    "comment": "hardware_interface.h:587:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "hardware_interface.h",
    "line": 587,
    "function": null,
    "comment": "hardware_interface.h:587:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "hardware_interface.h",
    "line": 589,
    "function": null,
    "comment": "hardware_interface.h:589:  Namespace should be terminated with '// namespace pr2_hardware_interface'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "hardware_interface.h",
    "line": 582,
    "function": null,
    "comment": "hardware_interface.h:582:  Add #include <utility> for pair<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "hardware_interface.h",
    "line": 381,
    "function": null,
    "comment": "hardware_interface.h:381:  Add #include <map> for map<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  }
]