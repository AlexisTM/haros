[
  {
    "rule": "All headers must be protected against multiple inclusion by",
    "file": "pr2_base_controller.h",
    "line": null,
    "function": null,
    "comment": "pr2_base_controller.h:0:  No #ifndef header guard found.  [build/header_guard] [5]",
    "tags": ["ros","code-standards","google-cpp","ros-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "pr2_base_controller.h",
    "line": 39,
    "function": null,
    "comment": "pr2_base_controller.h:39:  Include 'realtime_tools/realtime_publisher.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "pr2_base_controller.h",
    "line": 40,
    "function": null,
    "comment": "pr2_base_controller.h:40:  Include 'pr2_mechanism_controllers/BaseControllerState.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "pr2_base_controller.h",
    "line": 42,
    "function": null,
    "comment": "pr2_base_controller.h:42:  Include 'pr2_mechanism_controllers/base_kinematics.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "pr2_base_controller.h",
    "line": 43,
    "function": null,
    "comment": "pr2_base_controller.h:43:  Include 'geometry_msgs/Twist.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "pr2_base_controller.h",
    "line": 44,
    "function": null,
    "comment": "pr2_base_controller.h:44:  Include 'angles/angles.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "pr2_base_controller.h",
    "line": 46,
    "function": null,
    "comment": "pr2_base_controller.h:46:  Include 'boost/scoped_ptr.hpp' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller.h",
    "line": 51,
    "function": null,
    "comment": "pr2_base_controller.h:51:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not indent within a namespace.",
    "file": "pr2_base_controller.h",
    "line": 55,
    "function": null,
    "comment": "pr2_base_controller.h:55:  Do not indent within a namespace  [runtime/indentation_namespace] [4]",
    "tags": ["code-standards","formatting","google-cpp","indentation","namespace"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller.h",
    "line": 56,
    "function": null,
    "comment": "pr2_base_controller.h:56:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "pr2_base_controller.h",
    "line": 57,
    "function": null,
    "comment": "pr2_base_controller.h:57:  public: should be indented +1 space inside class Pr2BaseController  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "pr2_base_controller.h",
    "line": 77,
    "function": null,
    "comment": "pr2_base_controller.h:77:  Is this a non-const reference? If so, make const or use a pointer: ros::NodeHandle &n  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "pr2_base_controller.h",
    "line": 118,
    "function": null,
    "comment": "pr2_base_controller.h:118:  private: should be indented +1 space inside class Pr2BaseController  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "pr2_base_controller.h",
    "line": 119,
    "function": null,
    "comment": "pr2_base_controller.h:119:  Do not leave a blank line after 'private:'  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.h",
    "line": 197,
    "function": null,
    "comment": "pr2_base_controller.h:197:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.h",
    "line": 202,
    "function": null,
    "comment": "pr2_base_controller.h:202:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.h",
    "line": 207,
    "function": null,
    "comment": "pr2_base_controller.h:207:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.h",
    "line": 237,
    "function": null,
    "comment": "pr2_base_controller.h:237:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_base_controller.h",
    "line": 262,
    "function": null,
    "comment": "pr2_base_controller.h:262:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "pr2_base_controller.h",
    "line": 288,
    "function": null,
    "comment": "pr2_base_controller.h:288:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "pr2_base_controller.h",
    "line": 292,
    "function": null,
    "comment": "pr2_base_controller.h:292:  Namespace should be terminated with '// namespace controller'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "pr2_base_controller.h",
    "line": 289,
    "function": null,
    "comment": "pr2_base_controller.h:289:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "All headers must be protected against multiple inclusion by",
    "file": "pr2_odometry.h",
    "line": null,
    "function": null,
    "comment": "pr2_odometry.h:0:  No #ifndef header guard found.  [build/header_guard] [5]",
    "tags": ["ros","code-standards","google-cpp","ros-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "pr2_odometry.h",
    "line": 41,
    "function": null,
    "comment": "pr2_odometry.h:41:  Include 'tf/tf.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "pr2_odometry.h",
    "line": 42,
    "function": null,
    "comment": "pr2_odometry.h:42:  Include 'pr2_mechanism_controllers/base_kinematics.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "pr2_odometry.h",
    "line": 43,
    "function": null,
    "comment": "pr2_odometry.h:43:  Include 'angles/angles.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "pr2_odometry.h",
    "line": 49,
    "function": null,
    "comment": "pr2_odometry.h:49:  Include 'pr2_mechanism_controllers/OdometryMatrix.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "pr2_odometry.h",
    "line": 50,
    "function": null,
    "comment": "pr2_odometry.h:50:  Include 'pr2_mechanism_controllers/DebugInfo.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "pr2_odometry.h",
    "line": 53,
    "function": null,
    "comment": "pr2_odometry.h:53:  Include 'pr2_mechanism_controllers/BaseOdometryState.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_odometry.h",
    "line": 56,
    "function": null,
    "comment": "pr2_odometry.h:56:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not indent within a namespace.",
    "file": "pr2_odometry.h",
    "line": 67,
    "function": null,
    "comment": "pr2_odometry.h:67:  Do not indent within a namespace  [runtime/indentation_namespace] [4]",
    "tags": ["code-standards","formatting","google-cpp","indentation","namespace"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_odometry.h",
    "line": 68,
    "function": null,
    "comment": "pr2_odometry.h:68:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "pr2_odometry.h",
    "line": 69,
    "function": null,
    "comment": "pr2_odometry.h:69:  public: should be indented +1 space inside class Pr2Odometry  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "pr2_odometry.h",
    "line": 70,
    "function": null,
    "comment": "pr2_odometry.h:70:  Do not leave a blank line after 'public:'  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_odometry.h",
    "line": 87,
    "function": null,
    "comment": "pr2_odometry.h:87:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "pr2_odometry.h",
    "line": 87,
    "function": null,
    "comment": "pr2_odometry.h:87:  Is this a non-const reference? If so, make const or use a pointer: ros::NodeHandle &node  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "pr2_odometry.h",
    "line": 125,
    "function": null,
    "comment": "pr2_odometry.h:125:  private: should be indented +1 space inside class Pr2Odometry  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "pr2_odometry.h",
    "line": 126,
    "function": null,
    "comment": "pr2_odometry.h:126:  Do not leave a blank line after 'private:'  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "pr2_odometry.h",
    "line": 143,
    "function": null,
    "comment": "pr2_odometry.h:143:  Is this a non-const reference? If so, make const or use a pointer: nav_msgs::Odometry &msg  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_odometry.h",
    "line": 154,
    "function": null,
    "comment": "pr2_odometry.h:154:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "pr2_odometry.h",
    "line": 154,
    "function": null,
    "comment": "pr2_odometry.h:154:  Is this a non-const reference? If so, make const or use a pointer: double &x  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "pr2_odometry.h",
    "line": 154,
    "function": null,
    "comment": "pr2_odometry.h:154:  Is this a non-const reference? If so, make const or use a pointer: double &y  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "pr2_odometry.h",
    "line": 154,
    "function": null,
    "comment": "pr2_odometry.h:154:  Is this a non-const reference? If so, make const or use a pointer: double &yaw  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "pr2_odometry.h",
    "line": 154,
    "function": null,
    "comment": "pr2_odometry.h:154:  Is this a non-const reference? If so, make const or use a pointer: double &vx  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "pr2_odometry.h",
    "line": 154,
    "function": null,
    "comment": "pr2_odometry.h:154:  Is this a non-const reference? If so, make const or use a pointer: double &vy  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "pr2_odometry.h",
    "line": 154,
    "function": null,
    "comment": "pr2_odometry.h:154:  Is this a non-const reference? If so, make const or use a pointer: double &vw  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_odometry.h",
    "line": 161,
    "function": null,
    "comment": "pr2_odometry.h:161:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "pr2_odometry.h",
    "line": 161,
    "function": null,
    "comment": "pr2_odometry.h:161:  Is this a non-const reference? If so, make const or use a pointer: geometry_msgs::Point &odom  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "pr2_odometry.h",
    "line": 161,
    "function": null,
    "comment": "pr2_odometry.h:161:  Is this a non-const reference? If so, make const or use a pointer: geometry_msgs::Twist &odom_vel  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_odometry.h",
    "line": 177,
    "function": null,
    "comment": "pr2_odometry.h:177:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_odometry.h",
    "line": 197,
    "function": null,
    "comment": "pr2_odometry.h:197:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_odometry.h",
    "line": 272,
    "function": null,
    "comment": "pr2_odometry.h:272:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "pr2_odometry.h",
    "line": 272,
    "function": null,
    "comment": "pr2_odometry.h:272:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "pr2_odometry.h",
    "line": 277,
    "function": null,
    "comment": "pr2_odometry.h:277:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_odometry.h",
    "line": 277,
    "function": null,
    "comment": "pr2_odometry.h:277:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "pr2_odometry.h",
    "line": 277,
    "function": null,
    "comment": "pr2_odometry.h:277:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "pr2_odometry.h",
    "line": 282,
    "function": null,
    "comment": "pr2_odometry.h:282:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_odometry.h",
    "line": 282,
    "function": null,
    "comment": "pr2_odometry.h:282:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "pr2_odometry.h",
    "line": 282,
    "function": null,
    "comment": "pr2_odometry.h:282:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_odometry.h",
    "line": 287,
    "function": null,
    "comment": "pr2_odometry.h:287:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "pr2_odometry.h",
    "line": 287,
    "function": null,
    "comment": "pr2_odometry.h:287:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_odometry.h",
    "line": 289,
    "function": null,
    "comment": "pr2_odometry.h:289:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "pr2_odometry.h",
    "line": 300,
    "function": null,
    "comment": "pr2_odometry.h:300:  Is this a non-const reference? If so, make const or use a pointer: nav_msgs::Odometry &msg  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_odometry.h",
    "line": 302,
    "function": null,
    "comment": "pr2_odometry.h:302:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_odometry.h",
    "line": 303,
    "function": null,
    "comment": "pr2_odometry.h:303:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "pr2_odometry.h",
    "line": 326,
    "function": null,
    "comment": "pr2_odometry.h:326:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "pr2_odometry.h",
    "line": 328,
    "function": null,
    "comment": "pr2_odometry.h:328:  Namespace should be terminated with '// namespace controller'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "pr2_odometry.h",
    "line": 325,
    "function": null,
    "comment": "pr2_odometry.h:325:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_.",
    "file": "caster_controller.h",
    "line": 55,
    "function": null,
    "comment": "caster_controller.h:55:  #ifndef header guard has wrong style, please use: _HOME_ANDRE_ROS_HAROS_ANALYSER_CASTER_CONTROLLER_H_  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the guard's end should be '#endif  // <PROJECT>_<PATH>_<FILE>_H_' or '#endif  /* <PROJECT>_<PATH>_<FILE>_H_ */'.",
    "file": "caster_controller.h",
    "line": 106,
    "function": null,
    "comment": "caster_controller.h:106:  #endif line should be '#endif  // _HOME_ANDRE_ROS_HAROS_ANALYSER_CASTER_CONTROLLER_H_'  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "caster_controller.h",
    "line": 62,
    "function": null,
    "comment": "caster_controller.h:62:  Include 'control_toolbox/pid.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "caster_controller.h",
    "line": 65,
    "function": null,
    "comment": "caster_controller.h:65:  Found C system header after other header. Should be: caster_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "caster_controller.h",
    "line": 67,
    "function": null,
    "comment": "caster_controller.h:67:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "caster_controller.h",
    "line": 70,
    "function": null,
    "comment": "caster_controller.h:70:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "caster_controller.h",
    "line": 71,
    "function": null,
    "comment": "caster_controller.h:71:  public: should be indented +1 space inside class CasterController  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Storage class should come before the type.",
    "file": "caster_controller.h",
    "line": 72,
    "function": null,
    "comment": "caster_controller.h:72:  Storage class (static, extern, typedef, etc) should be first.  [build/storage_class] [5]",
    "tags": ["code-standards","google-cpp","invalid-code","storage-class"]
  },
  {
    "rule": "Storage class should come before the type.",
    "file": "caster_controller.h",
    "line": 73,
    "function": null,
    "comment": "caster_controller.h:73:  Storage class (static, extern, typedef, etc) should be first.  [build/storage_class] [5]",
    "tags": ["code-standards","google-cpp","invalid-code","storage-class"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "caster_controller.h",
    "line": 81,
    "function": null,
    "comment": "caster_controller.h:81:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "caster_controller.h",
    "line": 82,
    "function": null,
    "comment": "caster_controller.h:82:  Is this a non-const reference? If so, make const or use a pointer: ros::NodeHandle &n  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "caster_controller.h",
    "line": 94,
    "function": null,
    "comment": "caster_controller.h:94:  private: should be indented +1 space inside class CasterController  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "caster_controller.h",
    "line": 104,
    "function": null,
    "comment": "caster_controller.h:104:  Namespace should be terminated with '// namespace controller'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "caster_controller.h",
    "line": 80,
    "function": null,
    "comment": "caster_controller.h:80:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_.",
    "file": "trajectory.h",
    "line": 32,
    "function": null,
    "comment": "trajectory.h:32:  #ifndef header guard has wrong style, please use: _HOME_ANDRE_ROS_HAROS_ANALYSER_TRAJECTORY_H_  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the guard's end should be '#endif  // <PROJECT>_<PATH>_<FILE>_H_' or '#endif  /* <PROJECT>_<PATH>_<FILE>_H_ */'.",
    "file": "trajectory.h",
    "line": 367,
    "function": null,
    "comment": "trajectory.h:367:  #endif line should be '#endif  // _HOME_ANDRE_ROS_HAROS_ANALYSER_TRAJECTORY_H_'  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "trajectory.h",
    "line": 36,
    "function": null,
    "comment": "trajectory.h:36:  Include 'iomanip' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "trajectory.h",
    "line": 37,
    "function": null,
    "comment": "trajectory.h:37:  Include 'cmath' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "trajectory.h",
    "line": 39,
    "function": null,
    "comment": "trajectory.h:39:  Include 'sstream' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "trajectory.h",
    "line": 40,
    "function": null,
    "comment": "trajectory.h:40:  Include 'map' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "trajectory.h",
    "line": 43,
    "function": null,
    "comment": "trajectory.h:43:  Found C system header after other header. Should be: trajectory.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.h",
    "line": 46,
    "function": null,
    "comment": "trajectory.h:46:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not indent within a namespace.",
    "file": "trajectory.h",
    "line": 56,
    "function": null,
    "comment": "trajectory.h:56:  Do not indent within a namespace  [runtime/indentation_namespace] [4]",
    "tags": ["code-standards","formatting","google-cpp","indentation","namespace"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.h",
    "line": 57,
    "function": null,
    "comment": "trajectory.h:57:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "trajectory.h",
    "line": 58,
    "function": null,
    "comment": "trajectory.h:58:  public: should be indented +1 space inside class Trajectory  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "trajectory.h",
    "line": 59,
    "function": null,
    "comment": "trajectory.h:59:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "trajectory.h",
    "line": 59,
    "function": null,
    "comment": "trajectory.h:59:  Do not leave a blank line after 'public:'  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.h",
    "line": 64,
    "function": null,
    "comment": "trajectory.h:64:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "trajectory.h",
    "line": 65,
    "function": null,
    "comment": "trajectory.h:65:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.h",
    "line": 68,
    "function": null,
    "comment": "trajectory.h:68:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "trajectory.h",
    "line": 68,
    "function": null,
    "comment": "trajectory.h:68:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "Do not use meaningless empty statements.",
    "file": "trajectory.h",
    "line": 68,
    "function": null,
    "comment": "trajectory.h:68:  You don't need a ; after a }  [readability/braces] [4]",
    "tags": ["code-standards","google-cpp","empty-statement","ambiguous-code"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "trajectory.h",
    "line": 68,
    "function": null,
    "comment": "trajectory.h:68:  Single-parameter constructors should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.h",
    "line": 70,
    "function": null,
    "comment": "trajectory.h:70:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "trajectory.h",
    "line": 71,
    "function": null,
    "comment": "trajectory.h:71:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.h",
    "line": 72,
    "function": null,
    "comment": "trajectory.h:72:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.h",
    "line": 74,
    "function": null,
    "comment": "trajectory.h:74:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "trajectory.h",
    "line": 86,
    "function": null,
    "comment": "trajectory.h:86:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.h",
    "line": 97,
    "function": null,
    "comment": "trajectory.h:97:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "trajectory.h",
    "line": 102,
    "function": null,
    "comment": "trajectory.h:102:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "trajectory.h",
    "line": 104,
    "function": null,
    "comment": "trajectory.h:104:  private: should be indented +1 space inside struct TCoeff  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "trajectory.h",
    "line": 104,
    "function": null,
    "comment": "trajectory.h:104:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "trajectory.h",
    "line": 105,
    "function": null,
    "comment": "trajectory.h:105:  Do not leave a blank line after 'private:'  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.h",
    "line": 112,
    "function": null,
    "comment": "trajectory.h:112:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "trajectory.h",
    "line": 116,
    "function": null,
    "comment": "trajectory.h:116:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "trajectory.h",
    "line": 120,
    "function": null,
    "comment": "trajectory.h:120:  Single-parameter constructors should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.h",
    "line": 149,
    "function": null,
    "comment": "trajectory.h:149:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.h",
    "line": 159,
    "function": null,
    "comment": "trajectory.h:159:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "trajectory.h",
    "line": 168,
    "function": null,
    "comment": "trajectory.h:168:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "trajectory.h",
    "line": 177,
    "function": null,
    "comment": "trajectory.h:177:  Is this a non-const reference? If so, make const or use a pointer: TPoint &tp  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "trajectory.h",
    "line": 181,
    "function": null,
    "comment": "trajectory.h:181:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.h",
    "line": 181,
    "function": null,
    "comment": "trajectory.h:181:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "trajectory.h",
    "line": 190,
    "function": null,
    "comment": "trajectory.h:190:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.h",
    "line": 197,
    "function": null,
    "comment": "trajectory.h:197:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "trajectory.h",
    "line": 212,
    "function": null,
    "comment": "trajectory.h:212:  Is this a non-const reference? If so, make const or use a pointer: std::vector<double> &duration  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "trajectory.h",
    "line": 214,
    "function": null,
    "comment": "trajectory.h:214:  Is this a non-const reference? If so, make const or use a pointer: double &duration  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "trajectory.h",
    "line": 216,
    "function": null,
    "comment": "trajectory.h:216:  Is this a non-const reference? If so, make const or use a pointer: std::vector<double> &timestamps  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.h",
    "line": 229,
    "function": null,
    "comment": "trajectory.h:229:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "trajectory.h",
    "line": 229,
    "function": null,
    "comment": "trajectory.h:229:  Is this a non-const reference? If so, make const or use a pointer: std::vector<trajectory::Trajectory::TPoint> &traj  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "trajectory.h",
    "line": 231,
    "function": null,
    "comment": "trajectory.h:231:  protected: should be indented +1 space inside class Trajectory  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "trajectory.h",
    "line": 232,
    "function": null,
    "comment": "trajectory.h:232:  Do not leave a blank line after 'protected:'  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.h",
    "line": 233,
    "function": null,
    "comment": "trajectory.h:233:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "trajectory.h",
    "line": 235,
    "function": null,
    "comment": "trajectory.h:235:  private: should be indented +1 space inside class Trajectory  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "trajectory.h",
    "line": 236,
    "function": null,
    "comment": "trajectory.h:236:  Do not leave a blank line after 'private:'  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "trajectory.h",
    "line": 246,
    "function": null,
    "comment": "trajectory.h:246:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.h",
    "line": 251,
    "function": null,
    "comment": "trajectory.h:251:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.h",
    "line": 253,
    "function": null,
    "comment": "trajectory.h:253:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.h",
    "line": 255,
    "function": null,
    "comment": "trajectory.h:255:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.h",
    "line": 257,
    "function": null,
    "comment": "trajectory.h:257:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.h",
    "line": 259,
    "function": null,
    "comment": "trajectory.h:259:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "trajectory.h",
    "line": 269,
    "function": null,
    "comment": "trajectory.h:269:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.h",
    "line": 320,
    "function": null,
    "comment": "trajectory.h:320:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "trajectory.h",
    "line": 320,
    "function": null,
    "comment": "trajectory.h:320:  Is this a non-const reference? If so, make const or use a pointer: TPoint &tp  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.h",
    "line": 329,
    "function": null,
    "comment": "trajectory.h:329:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "trajectory.h",
    "line": 329,
    "function": null,
    "comment": "trajectory.h:329:  Is this a non-const reference? If so, make const or use a pointer: TPoint &tp  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.h",
    "line": 338,
    "function": null,
    "comment": "trajectory.h:338:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "trajectory.h",
    "line": 338,
    "function": null,
    "comment": "trajectory.h:338:  Is this a non-const reference? If so, make const or use a pointer: TPoint &tp  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.h",
    "line": 340,
    "function": null,
    "comment": "trajectory.h:340:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.h",
    "line": 356,
    "function": null,
    "comment": "trajectory.h:356:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "trajectory.h",
    "line": 360,
    "function": null,
    "comment": "trajectory.h:360:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "trajectory.h",
    "line": 363,
    "function": null,
    "comment": "trajectory.h:363:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "trajectory.h",
    "line": 365,
    "function": null,
    "comment": "trajectory.h:365:  Namespace should be terminated with '// namespace trajectory'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "trajectory.h",
    "line": 233,
    "function": null,
    "comment": "trajectory.h:233:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "All headers must be protected against multiple inclusion by",
    "file": "laser_scanner_traj_controller.h",
    "line": null,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:0:  No #ifndef header guard found.  [build/header_guard] [5]",
    "tags": ["ros","code-standards","google-cpp","ros-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "laser_scanner_traj_controller.h",
    "line": 40,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:40:  Include 'control_toolbox/pid.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "laser_scanner_traj_controller.h",
    "line": 41,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:41:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "laser_scanner_traj_controller.h",
    "line": 49,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:49:  Found C system header after other header. Should be: laser_scanner_traj_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "laser_scanner_traj_controller.h",
    "line": 50,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:50:  Found C system header after other header. Should be: laser_scanner_traj_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "laser_scanner_traj_controller.h",
    "line": 51,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:51:  Found C system header after other header. Should be: laser_scanner_traj_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "laser_scanner_traj_controller.h",
    "line": 52,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:52:  Found C system header after other header. Should be: laser_scanner_traj_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "laser_scanner_traj_controller.h",
    "line": 55,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:55:  Found C system header after other header. Should be: laser_scanner_traj_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "laser_scanner_traj_controller.h",
    "line": 56,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:56:  Found C system header after other header. Should be: laser_scanner_traj_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "laser_scanner_traj_controller.h",
    "line": 57,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:57:  Found C system header after other header. Should be: laser_scanner_traj_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "laser_scanner_traj_controller.h",
    "line": 60,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:60:  Found C system header after other header. Should be: laser_scanner_traj_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "laser_scanner_traj_controller.h",
    "line": 64,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:64:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "laser_scanner_traj_controller.h",
    "line": 67,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:67:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "laser_scanner_traj_controller.h",
    "line": 68,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:68:  public: should be indented +1 space inside class LaserScannerTrajController  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.h",
    "line": 69,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:69:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.h",
    "line": 70,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:70:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "laser_scanner_traj_controller.h",
    "line": 72,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:72:  Is this a non-const reference? If so, make const or use a pointer: ros::NodeHandle &n  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.h",
    "line": 74,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:74:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.h",
    "line": 76,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:76:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.h",
    "line": 78,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:78:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.h",
    "line": 80,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:80:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "laser_scanner_traj_controller.h",
    "line": 80,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:80:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.h",
    "line": 82,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:82:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.h",
    "line": 83,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:83:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "laser_scanner_traj_controller.h",
    "line": 83,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:83:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.h",
    "line": 86,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:86:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.h",
    "line": 88,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:88:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.h",
    "line": 89,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:89:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.h",
    "line": 90,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:90:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "laser_scanner_traj_controller.h",
    "line": 92,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:92:  private: should be indented +1 space inside class LaserScannerTrajController  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "laser_scanner_traj_controller.h",
    "line": 93,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:93:  Do not leave a blank line after 'private:'  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.h",
    "line": 94,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:94:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.h",
    "line": 95,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:95:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.h",
    "line": 95,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:95:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.h",
    "line": 97,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:97:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.h",
    "line": 97,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:97:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.h",
    "line": 98,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:98:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.h",
    "line": 98,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:98:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.h",
    "line": 100,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:100:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.h",
    "line": 102,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:102:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.h",
    "line": 102,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:102:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.h",
    "line": 104,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:104:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.h",
    "line": 104,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:104:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.h",
    "line": 105,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:105:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.h",
    "line": 105,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:105:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.h",
    "line": 108,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:108:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.h",
    "line": 108,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:108:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.h",
    "line": 109,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:109:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.h",
    "line": 109,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:109:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.h",
    "line": 112,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:112:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.h",
    "line": 112,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:112:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.h",
    "line": 113,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:113:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.h",
    "line": 114,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:114:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.h",
    "line": 114,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:114:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.h",
    "line": 115,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:115:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.h",
    "line": 115,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:115:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.h",
    "line": 116,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:116:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.h",
    "line": 116,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:116:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.h",
    "line": 117,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:117:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.h",
    "line": 117,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:117:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.h",
    "line": 120,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:120:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "laser_scanner_traj_controller.h",
    "line": 121,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:121:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "laser_scanner_traj_controller.h",
    "line": 122,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:122:  public: should be indented +1 space inside class LaserScannerTrajControllerNode  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.h",
    "line": 123,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:123:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.h",
    "line": 124,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:124:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.h",
    "line": 126,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:126:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "laser_scanner_traj_controller.h",
    "line": 128,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:128:  Is this a non-const reference? If so, make const or use a pointer: ros::NodeHandle &n  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "laser_scanner_traj_controller.h",
    "line": 133,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:133:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "laser_scanner_traj_controller.h",
    "line": 134,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:134:  Is this a non-const reference? If so, make const or use a pointer: pr2_msgs::SetPeriodicCmd::Request &req  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "laser_scanner_traj_controller.h",
    "line": 135,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:135:  Is this a non-const reference? If so, make const or use a pointer: pr2_msgs::SetPeriodicCmd::Response &res  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "laser_scanner_traj_controller.h",
    "line": 136,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:136:  Is this a non-const reference? If so, make const or use a pointer: pr2_msgs::SetLaserTrajCmd::Request &req  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "laser_scanner_traj_controller.h",
    "line": 137,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:137:  Is this a non-const reference? If so, make const or use a pointer: pr2_msgs::SetLaserTrajCmd::Response &res  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "laser_scanner_traj_controller.h",
    "line": 140,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:140:  private: should be indented +1 space inside class LaserScannerTrajControllerNode  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.h",
    "line": 147,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:147:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.h",
    "line": 148,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:148:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.h",
    "line": 149,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:149:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.h",
    "line": 151,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:151:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.h",
    "line": 151,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:151:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.h",
    "line": 153,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:153:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.h",
    "line": 155,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:155:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.h",
    "line": 155,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:155:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.h",
    "line": 156,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:156:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.h",
    "line": 156,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:156:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.h",
    "line": 157,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:157:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "laser_scanner_traj_controller.h",
    "line": 157,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:157:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.h",
    "line": 157,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:157:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "laser_scanner_traj_controller.h",
    "line": 160,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:160:  Namespace should be terminated with '// namespace controller'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "laser_scanner_traj_controller.h",
    "line": 149,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:149:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "laser_scanner_traj_controller.h",
    "line": 82,
    "function": null,
    "comment": "laser_scanner_traj_controller.h:82:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "All headers must be protected against multiple inclusion by",
    "file": "pr2_base_controller2.h",
    "line": null,
    "function": null,
    "comment": "pr2_base_controller2.h:0:  No #ifndef header guard found.  [build/header_guard] [5]",
    "tags": ["ros","code-standards","google-cpp","ros-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "pr2_base_controller2.h",
    "line": 39,
    "function": null,
    "comment": "pr2_base_controller2.h:39:  Include 'realtime_tools/realtime_publisher.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "pr2_base_controller2.h",
    "line": 40,
    "function": null,
    "comment": "pr2_base_controller2.h:40:  Include 'pr2_mechanism_controllers/BaseControllerState2.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "pr2_base_controller2.h",
    "line": 42,
    "function": null,
    "comment": "pr2_base_controller2.h:42:  Include 'pr2_mechanism_controllers/base_kinematics.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "pr2_base_controller2.h",
    "line": 43,
    "function": null,
    "comment": "pr2_base_controller2.h:43:  Include 'geometry_msgs/Twist.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "pr2_base_controller2.h",
    "line": 44,
    "function": null,
    "comment": "pr2_base_controller2.h:44:  Include 'angles/angles.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "pr2_base_controller2.h",
    "line": 46,
    "function": null,
    "comment": "pr2_base_controller2.h:46:  Include 'boost/scoped_ptr.hpp' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller2.h",
    "line": 51,
    "function": null,
    "comment": "pr2_base_controller2.h:51:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not indent within a namespace.",
    "file": "pr2_base_controller2.h",
    "line": 55,
    "function": null,
    "comment": "pr2_base_controller2.h:55:  Do not indent within a namespace  [runtime/indentation_namespace] [4]",
    "tags": ["code-standards","formatting","google-cpp","indentation","namespace"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller2.h",
    "line": 56,
    "function": null,
    "comment": "pr2_base_controller2.h:56:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "pr2_base_controller2.h",
    "line": 57,
    "function": null,
    "comment": "pr2_base_controller2.h:57:  public: should be indented +1 space inside class Pr2BaseController2  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "pr2_base_controller2.h",
    "line": 77,
    "function": null,
    "comment": "pr2_base_controller2.h:77:  Is this a non-const reference? If so, make const or use a pointer: ros::NodeHandle &n  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "pr2_base_controller2.h",
    "line": 118,
    "function": null,
    "comment": "pr2_base_controller2.h:118:  private: should be indented +1 space inside class Pr2BaseController2  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "pr2_base_controller2.h",
    "line": 119,
    "function": null,
    "comment": "pr2_base_controller2.h:119:  Do not leave a blank line after 'private:'  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.h",
    "line": 197,
    "function": null,
    "comment": "pr2_base_controller2.h:197:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.h",
    "line": 202,
    "function": null,
    "comment": "pr2_base_controller2.h:202:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.h",
    "line": 207,
    "function": null,
    "comment": "pr2_base_controller2.h:207:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.h",
    "line": 237,
    "function": null,
    "comment": "pr2_base_controller2.h:237:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_base_controller2.h",
    "line": 262,
    "function": null,
    "comment": "pr2_base_controller2.h:262:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "pr2_base_controller2.h",
    "line": 301,
    "function": null,
    "comment": "pr2_base_controller2.h:301:  Namespace should be terminated with '// namespace controller'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "pr2_base_controller2.h",
    "line": 298,
    "function": null,
    "comment": "pr2_base_controller2.h:298:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_.",
    "file": "pr2_gripper_controller.h",
    "line": 35,
    "function": null,
    "comment": "pr2_gripper_controller.h:35:  #ifndef header guard has wrong style, please use: _HOME_ANDRE_ROS_HAROS_ANALYSER_PR2_GRIPPER_CONTROLLER_H_  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the symbol name should be <PACKAGE>_<PATH>_<FILE>_H.",
    "file": "pr2_gripper_controller.h",
    "line": 35,
    "function": null,
    "comment": "pr2_gripper_controller.h:35:  #ifndef header guard has wrong style, please use: PR2_GRIPPER_CONTROLLER_H  [build/header_guard] [5]",
    "tags": ["ros","code-standards","ros-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the guard's end should be '#endif  // <PROJECT>_<PATH>_<FILE>_H_' or '#endif  /* <PROJECT>_<PATH>_<FILE>_H_ */'.",
    "file": "pr2_gripper_controller.h",
    "line": 121,
    "function": null,
    "comment": "pr2_gripper_controller.h:121:  #endif line should be '#endif  // _HOME_ANDRE_ROS_HAROS_ANALYSER_PR2_GRIPPER_CONTROLLER_H_'  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "pr2_gripper_controller.h",
    "line": 64,
    "function": null,
    "comment": "pr2_gripper_controller.h:64:  Include 'control_toolbox/pid.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "pr2_gripper_controller.h",
    "line": 66,
    "function": null,
    "comment": "pr2_gripper_controller.h:66:  Include 'boost/scoped_ptr.hpp' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_controller.h",
    "line": 76,
    "function": null,
    "comment": "pr2_gripper_controller.h:76:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_controller.h",
    "line": 79,
    "function": null,
    "comment": "pr2_gripper_controller.h:79:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "pr2_gripper_controller.h",
    "line": 80,
    "function": null,
    "comment": "pr2_gripper_controller.h:80:  public: should be indented +1 space inside class Pr2GripperController  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "pr2_gripper_controller.h",
    "line": 81,
    "function": null,
    "comment": "pr2_gripper_controller.h:81:  Do not leave a blank line after 'public:'  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "pr2_gripper_controller.h",
    "line": 85,
    "function": null,
    "comment": "pr2_gripper_controller.h:85:  Is this a non-const reference? If so, make const or use a pointer: ros::NodeHandle &n  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "pr2_gripper_controller.h",
    "line": 87,
    "function": null,
    "comment": "pr2_gripper_controller.h:87:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "pr2_gripper_controller.h",
    "line": 88,
    "function": null,
    "comment": "pr2_gripper_controller.h:88:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_controller.h",
    "line": 101,
    "function": null,
    "comment": "pr2_gripper_controller.h:101:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "pr2_gripper_controller.h",
    "line": 103,
    "function": null,
    "comment": "pr2_gripper_controller.h:103:  private: should be indented +1 space inside class Pr2GripperController  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_controller.h",
    "line": 113,
    "function": null,
    "comment": "pr2_gripper_controller.h:113:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "pr2_gripper_controller.h",
    "line": 113,
    "function": null,
    "comment": "pr2_gripper_controller.h:113:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "pr2_gripper_controller.h",
    "line": 119,
    "function": null,
    "comment": "pr2_gripper_controller.h:119:  Namespace should be terminated with '// namespace controller'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "pr2_gripper_controller.h",
    "line": 119,
    "function": null,
    "comment": "pr2_gripper_controller.h:119:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_.",
    "file": "base_kinematics.h",
    "line": 38,
    "function": null,
    "comment": "base_kinematics.h:38:  #ifndef header guard has wrong style, please use: _HOME_ANDRE_ROS_HAROS_ANALYSER_BASE_KINEMATICS_H_  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the symbol name should be <PACKAGE>_<PATH>_<FILE>_H.",
    "file": "base_kinematics.h",
    "line": 38,
    "function": null,
    "comment": "base_kinematics.h:38:  #ifndef header guard has wrong style, please use: BASE_KINEMATICS_H  [build/header_guard] [5]",
    "tags": ["ros","code-standards","ros-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the guard's end should be '#endif  // <PROJECT>_<PATH>_<FILE>_H_' or '#endif  /* <PROJECT>_<PATH>_<FILE>_H_ */'.",
    "file": "base_kinematics.h",
    "line": 305,
    "function": null,
    "comment": "base_kinematics.h:305:  #endif line should be '#endif  // _HOME_ANDRE_ROS_HAROS_ANALYSER_BASE_KINEMATICS_H_'  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "base_kinematics.h",
    "line": 42,
    "function": null,
    "comment": "base_kinematics.h:42:  Include 'pr2_controller_interface/controller.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "base_kinematics.h",
    "line": 43,
    "function": null,
    "comment": "base_kinematics.h:43:  Include 'geometry_msgs/Twist.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "base_kinematics.h",
    "line": 44,
    "function": null,
    "comment": "base_kinematics.h:44:  Include 'geometry_msgs/Point.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "base_kinematics.h",
    "line": 45,
    "function": null,
    "comment": "base_kinematics.h:45:  Include 'control_toolbox/filters.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "base_kinematics.h",
    "line": 46,
    "function": null,
    "comment": "base_kinematics.h:46:  Include 'boost/thread/condition.hpp' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "base_kinematics.h",
    "line": 49,
    "function": null,
    "comment": "base_kinematics.h:49:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not indent within a namespace.",
    "file": "base_kinematics.h",
    "line": 50,
    "function": null,
    "comment": "base_kinematics.h:50:  Do not indent within a namespace  [runtime/indentation_namespace] [4]",
    "tags": ["code-standards","formatting","google-cpp","indentation","namespace"]
  },
  {
    "rule": "Do not indent within a namespace.",
    "file": "base_kinematics.h",
    "line": 51,
    "function": null,
    "comment": "base_kinematics.h:51:  Do not indent within a namespace  [runtime/indentation_namespace] [4]",
    "tags": ["code-standards","formatting","google-cpp","indentation","namespace"]
  },
  {
    "rule": "Do not indent within a namespace.",
    "file": "base_kinematics.h",
    "line": 52,
    "function": null,
    "comment": "base_kinematics.h:52:  Do not indent within a namespace  [runtime/indentation_namespace] [4]",
    "tags": ["code-standards","formatting","google-cpp","indentation","namespace"]
  },
  {
    "rule": "Do not indent within a namespace.",
    "file": "base_kinematics.h",
    "line": 56,
    "function": null,
    "comment": "base_kinematics.h:56:  Do not indent within a namespace  [runtime/indentation_namespace] [4]",
    "tags": ["code-standards","formatting","google-cpp","indentation","namespace"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "base_kinematics.h",
    "line": 57,
    "function": null,
    "comment": "base_kinematics.h:57:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "base_kinematics.h",
    "line": 58,
    "function": null,
    "comment": "base_kinematics.h:58:  public: should be indented +1 space inside class Wheel  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "base_kinematics.h",
    "line": 59,
    "function": null,
    "comment": "base_kinematics.h:59:  Do not leave a blank line after 'public:'  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "base_kinematics.h",
    "line": 131,
    "function": null,
    "comment": "base_kinematics.h:131:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "base_kinematics.h",
    "line": 131,
    "function": null,
    "comment": "base_kinematics.h:131:  Is this a non-const reference? If so, make const or use a pointer: ros::NodeHandle &node  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Do not indent within a namespace.",
    "file": "base_kinematics.h",
    "line": 142,
    "function": null,
    "comment": "base_kinematics.h:142:  Do not indent within a namespace  [runtime/indentation_namespace] [4]",
    "tags": ["code-standards","formatting","google-cpp","indentation","namespace"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "base_kinematics.h",
    "line": 143,
    "function": null,
    "comment": "base_kinematics.h:143:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "base_kinematics.h",
    "line": 144,
    "function": null,
    "comment": "base_kinematics.h:144:  public: should be indented +1 space inside class Caster  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "base_kinematics.h",
    "line": 145,
    "function": null,
    "comment": "base_kinematics.h:145:  Do not leave a blank line after 'public:'  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "base_kinematics.h",
    "line": 166,
    "function": null,
    "comment": "base_kinematics.h:166:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "base_kinematics.h",
    "line": 223,
    "function": null,
    "comment": "base_kinematics.h:223:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "base_kinematics.h",
    "line": 223,
    "function": null,
    "comment": "base_kinematics.h:223:  Is this a non-const reference? If so, make const or use a pointer: ros::NodeHandle &node  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Do not indent within a namespace.",
    "file": "base_kinematics.h",
    "line": 229,
    "function": null,
    "comment": "base_kinematics.h:229:  Do not indent within a namespace  [runtime/indentation_namespace] [4]",
    "tags": ["code-standards","formatting","google-cpp","indentation","namespace"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "base_kinematics.h",
    "line": 230,
    "function": null,
    "comment": "base_kinematics.h:230:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "base_kinematics.h",
    "line": 231,
    "function": null,
    "comment": "base_kinematics.h:231:  public: should be indented +1 space inside class BaseKinematics  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "base_kinematics.h",
    "line": 232,
    "function": null,
    "comment": "base_kinematics.h:232:  Do not leave a blank line after 'public:'  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "base_kinematics.h",
    "line": 239,
    "function": null,
    "comment": "base_kinematics.h:239:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "base_kinematics.h",
    "line": 239,
    "function": null,
    "comment": "base_kinematics.h:239:  Is this a non-const reference? If so, make const or use a pointer: ros::NodeHandle &node  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "base_kinematics.h",
    "line": 252,
    "function": null,
    "comment": "base_kinematics.h:252:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "base_kinematics.h",
    "line": 304,
    "function": null,
    "comment": "base_kinematics.h:304:  Namespace should be terminated with '// namespace controller'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "base_kinematics.h",
    "line": 304,
    "function": null,
    "comment": "base_kinematics.h:304:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "base_kinematics.h",
    "line": 302,
    "function": null,
    "comment": "base_kinematics.h:302:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "base_kinematics.h",
    "line": 277,
    "function": null,
    "comment": "base_kinematics.h:277:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "base_kinematics.cpp",
    "line": 39,
    "function": null,
    "comment": "base_kinematics.cpp:39:  Include 'kdl/tree.hpp' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "base_kinematics.cpp",
    "line": 41,
    "function": null,
    "comment": "base_kinematics.cpp:41:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "base_kinematics.cpp",
    "line": 44,
    "function": null,
    "comment": "base_kinematics.cpp:44:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "base_kinematics.cpp",
    "line": 45,
    "function": null,
    "comment": "base_kinematics.cpp:45:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "base_kinematics.cpp",
    "line": 55,
    "function": null,
    "comment": "base_kinematics.cpp:55:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "base_kinematics.cpp",
    "line": 55,
    "function": null,
    "comment": "base_kinematics.cpp:55:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "base_kinematics.cpp",
    "line": 56,
    "function": null,
    "comment": "base_kinematics.cpp:56:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "base_kinematics.cpp",
    "line": 59,
    "function": null,
    "comment": "base_kinematics.cpp:59:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "base_kinematics.cpp",
    "line": 60,
    "function": null,
    "comment": "base_kinematics.cpp:60:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "base_kinematics.cpp",
    "line": 61,
    "function": null,
    "comment": "base_kinematics.cpp:61:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "base_kinematics.cpp",
    "line": 62,
    "function": null,
    "comment": "base_kinematics.cpp:62:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "base_kinematics.cpp",
    "line": 62,
    "function": null,
    "comment": "base_kinematics.cpp:62:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "base_kinematics.cpp",
    "line": 65,
    "function": null,
    "comment": "base_kinematics.cpp:65:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "base_kinematics.cpp",
    "line": 66,
    "function": null,
    "comment": "base_kinematics.cpp:66:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "base_kinematics.cpp",
    "line": 67,
    "function": null,
    "comment": "base_kinematics.cpp:67:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "base_kinematics.cpp",
    "line": 67,
    "function": null,
    "comment": "base_kinematics.cpp:67:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "base_kinematics.cpp",
    "line": 70,
    "function": null,
    "comment": "base_kinematics.cpp:70:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "base_kinematics.cpp",
    "line": 71,
    "function": null,
    "comment": "base_kinematics.cpp:71:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "base_kinematics.cpp",
    "line": 72,
    "function": null,
    "comment": "base_kinematics.cpp:72:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "base_kinematics.cpp",
    "line": 75,
    "function": null,
    "comment": "base_kinematics.cpp:75:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "base_kinematics.cpp",
    "line": 76,
    "function": null,
    "comment": "base_kinematics.cpp:76:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "base_kinematics.cpp",
    "line": 81,
    "function": null,
    "comment": "base_kinematics.cpp:81:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "base_kinematics.cpp",
    "line": 81,
    "function": null,
    "comment": "base_kinematics.cpp:81:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "base_kinematics.cpp",
    "line": 82,
    "function": null,
    "comment": "base_kinematics.cpp:82:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "base_kinematics.cpp",
    "line": 86,
    "function": null,
    "comment": "base_kinematics.cpp:86:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "base_kinematics.cpp",
    "line": 91,
    "function": null,
    "comment": "base_kinematics.cpp:91:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "base_kinematics.cpp",
    "line": 92,
    "function": null,
    "comment": "base_kinematics.cpp:92:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "base_kinematics.cpp",
    "line": 96,
    "function": null,
    "comment": "base_kinematics.cpp:96:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "base_kinematics.cpp",
    "line": 97,
    "function": null,
    "comment": "base_kinematics.cpp:97:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "base_kinematics.cpp",
    "line": 110,
    "function": null,
    "comment": "base_kinematics.cpp:110:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "base_kinematics.cpp",
    "line": 110,
    "function": null,
    "comment": "base_kinematics.cpp:110:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "base_kinematics.cpp",
    "line": 111,
    "function": null,
    "comment": "base_kinematics.cpp:111:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "base_kinematics.cpp",
    "line": 114,
    "function": null,
    "comment": "base_kinematics.cpp:114:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "base_kinematics.cpp",
    "line": 119,
    "function": null,
    "comment": "base_kinematics.cpp:119:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "base_kinematics.cpp",
    "line": 119,
    "function": null,
    "comment": "base_kinematics.cpp:119:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "base_kinematics.cpp",
    "line": 120,
    "function": null,
    "comment": "base_kinematics.cpp:120:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "base_kinematics.cpp",
    "line": 123,
    "function": null,
    "comment": "base_kinematics.cpp:123:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "base_kinematics.cpp",
    "line": 128,
    "function": null,
    "comment": "base_kinematics.cpp:128:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "base_kinematics.cpp",
    "line": 128,
    "function": null,
    "comment": "base_kinematics.cpp:128:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "base_kinematics.cpp",
    "line": 129,
    "function": null,
    "comment": "base_kinematics.cpp:129:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "base_kinematics.cpp",
    "line": 133,
    "function": null,
    "comment": "base_kinematics.cpp:133:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "base_kinematics.cpp",
    "line": 133,
    "function": null,
    "comment": "base_kinematics.cpp:133:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "base_kinematics.cpp",
    "line": 134,
    "function": null,
    "comment": "base_kinematics.cpp:134:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "base_kinematics.cpp",
    "line": 135,
    "function": null,
    "comment": "base_kinematics.cpp:135:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "base_kinematics.cpp",
    "line": 144,
    "function": null,
    "comment": "base_kinematics.cpp:144:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "base_kinematics.cpp",
    "line": 145,
    "function": null,
    "comment": "base_kinematics.cpp:145:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "base_kinematics.cpp",
    "line": 149,
    "function": null,
    "comment": "base_kinematics.cpp:149:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "base_kinematics.cpp",
    "line": 156,
    "function": null,
    "comment": "base_kinematics.cpp:156:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "base_kinematics.cpp",
    "line": 159,
    "function": null,
    "comment": "base_kinematics.cpp:159:  Missing space before ( in while(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "base_kinematics.cpp",
    "line": 160,
    "function": null,
    "comment": "base_kinematics.cpp:160:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "base_kinematics.cpp",
    "line": 164,
    "function": null,
    "comment": "base_kinematics.cpp:164:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "base_kinematics.cpp",
    "line": 164,
    "function": null,
    "comment": "base_kinematics.cpp:164:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "base_kinematics.cpp",
    "line": 165,
    "function": null,
    "comment": "base_kinematics.cpp:165:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "base_kinematics.cpp",
    "line": 169,
    "function": null,
    "comment": "base_kinematics.cpp:169:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "base_kinematics.cpp",
    "line": 171,
    "function": null,
    "comment": "base_kinematics.cpp:171:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "base_kinematics.cpp",
    "line": 172,
    "function": null,
    "comment": "base_kinematics.cpp:172:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "base_kinematics.cpp",
    "line": 183,
    "function": null,
    "comment": "base_kinematics.cpp:183:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "base_kinematics.cpp",
    "line": 184,
    "function": null,
    "comment": "base_kinematics.cpp:184:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "base_kinematics.cpp",
    "line": 185,
    "function": null,
    "comment": "base_kinematics.cpp:185:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "base_kinematics.cpp",
    "line": 186,
    "function": null,
    "comment": "base_kinematics.cpp:186:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "base_kinematics.cpp",
    "line": 196,
    "function": null,
    "comment": "base_kinematics.cpp:196:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "base_kinematics.cpp",
    "line": 207,
    "function": null,
    "comment": "base_kinematics.cpp:207:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "base_kinematics.cpp",
    "line": 208,
    "function": null,
    "comment": "base_kinematics.cpp:208:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "base_kinematics.cpp",
    "line": 209,
    "function": null,
    "comment": "base_kinematics.cpp:209:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "base_kinematics.cpp",
    "line": 212,
    "function": null,
    "comment": "base_kinematics.cpp:212:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "base_kinematics.cpp",
    "line": 215,
    "function": null,
    "comment": "base_kinematics.cpp:215:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "base_kinematics.cpp",
    "line": 216,
    "function": null,
    "comment": "base_kinematics.cpp:216:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "base_kinematics.cpp",
    "line": 158,
    "function": null,
    "comment": "base_kinematics.cpp:158:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "base_kinematics.cpp",
    "line": 147,
    "function": null,
    "comment": "base_kinematics.cpp:147:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 41,
    "function": null,
    "comment": "pr2_base_controller2.cpp:41:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "pr2_base_controller2.cpp",
    "line": 41,
    "function": null,
    "comment": "pr2_base_controller2.cpp:41:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "pr2_base_controller2.cpp",
    "line": 43,
    "function": null,
    "comment": "pr2_base_controller2.cpp:43:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Storage class should come before the type.",
    "file": "pr2_base_controller2.cpp",
    "line": 45,
    "function": null,
    "comment": "pr2_base_controller2.cpp:45:  Storage class (static, extern, typedef, etc) should be first.  [build/storage_class] [5]",
    "tags": ["code-standards","google-cpp","invalid-code","storage-class"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller2.cpp",
    "line": 48,
    "function": null,
    "comment": "pr2_base_controller2.cpp:48:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "pr2_base_controller2.cpp",
    "line": 49,
    "function": null,
    "comment": "pr2_base_controller2.cpp:49:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller2.cpp",
    "line": 69,
    "function": null,
    "comment": "pr2_base_controller2.cpp:69:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 74,
    "function": null,
    "comment": "pr2_base_controller2.cpp:74:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller2.cpp",
    "line": 75,
    "function": null,
    "comment": "pr2_base_controller2.cpp:75:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller2.cpp",
    "line": 76,
    "function": null,
    "comment": "pr2_base_controller2.cpp:76:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_base_controller2.cpp",
    "line": 76,
    "function": null,
    "comment": "pr2_base_controller2.cpp:76:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 79,
    "function": null,
    "comment": "pr2_base_controller2.cpp:79:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "pr2_base_controller2.cpp",
    "line": 91,
    "function": null,
    "comment": "pr2_base_controller2.cpp:91:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 92,
    "function": null,
    "comment": "pr2_base_controller2.cpp:92:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_base_controller2.cpp",
    "line": 92,
    "function": null,
    "comment": "pr2_base_controller2.cpp:92:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 93,
    "function": null,
    "comment": "pr2_base_controller2.cpp:93:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "pr2_base_controller2.cpp",
    "line": 93,
    "function": null,
    "comment": "pr2_base_controller2.cpp:93:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "pr2_base_controller2.cpp",
    "line": 93,
    "function": null,
    "comment": "pr2_base_controller2.cpp:93:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 94,
    "function": null,
    "comment": "pr2_base_controller2.cpp:94:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 95,
    "function": null,
    "comment": "pr2_base_controller2.cpp:95:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 96,
    "function": null,
    "comment": "pr2_base_controller2.cpp:96:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "pr2_base_controller2.cpp",
    "line": 96,
    "function": null,
    "comment": "pr2_base_controller2.cpp:96:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "pr2_base_controller2.cpp",
    "line": 96,
    "function": null,
    "comment": "pr2_base_controller2.cpp:96:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_base_controller2.cpp",
    "line": 100,
    "function": null,
    "comment": "pr2_base_controller2.cpp:100:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller2.cpp",
    "line": 101,
    "function": null,
    "comment": "pr2_base_controller2.cpp:101:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller2.cpp",
    "line": 102,
    "function": null,
    "comment": "pr2_base_controller2.cpp:102:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "pr2_base_controller2.cpp",
    "line": 106,
    "function": null,
    "comment": "pr2_base_controller2.cpp:106:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller2.cpp",
    "line": 107,
    "function": null,
    "comment": "pr2_base_controller2.cpp:107:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 112,
    "function": null,
    "comment": "pr2_base_controller2.cpp:112:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 113,
    "function": null,
    "comment": "pr2_base_controller2.cpp:113:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "pr2_base_controller2.cpp",
    "line": 115,
    "function": null,
    "comment": "pr2_base_controller2.cpp:115:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller2.cpp",
    "line": 118,
    "function": null,
    "comment": "pr2_base_controller2.cpp:118:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller2.cpp",
    "line": 119,
    "function": null,
    "comment": "pr2_base_controller2.cpp:119:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 121,
    "function": null,
    "comment": "pr2_base_controller2.cpp:121:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 122,
    "function": null,
    "comment": "pr2_base_controller2.cpp:122:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller2.cpp",
    "line": 122,
    "function": null,
    "comment": "pr2_base_controller2.cpp:122:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller2.cpp",
    "line": 123,
    "function": null,
    "comment": "pr2_base_controller2.cpp:123:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 124,
    "function": null,
    "comment": "pr2_base_controller2.cpp:124:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_base_controller2.cpp",
    "line": 124,
    "function": null,
    "comment": "pr2_base_controller2.cpp:124:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 128,
    "function": null,
    "comment": "pr2_base_controller2.cpp:128:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller2.cpp",
    "line": 128,
    "function": null,
    "comment": "pr2_base_controller2.cpp:128:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller2.cpp",
    "line": 129,
    "function": null,
    "comment": "pr2_base_controller2.cpp:129:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 130,
    "function": null,
    "comment": "pr2_base_controller2.cpp:130:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_base_controller2.cpp",
    "line": 130,
    "function": null,
    "comment": "pr2_base_controller2.cpp:130:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 134,
    "function": null,
    "comment": "pr2_base_controller2.cpp:134:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller2.cpp",
    "line": 134,
    "function": null,
    "comment": "pr2_base_controller2.cpp:134:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller2.cpp",
    "line": 135,
    "function": null,
    "comment": "pr2_base_controller2.cpp:135:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 136,
    "function": null,
    "comment": "pr2_base_controller2.cpp:136:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_base_controller2.cpp",
    "line": 136,
    "function": null,
    "comment": "pr2_base_controller2.cpp:136:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller2.cpp",
    "line": 140,
    "function": null,
    "comment": "pr2_base_controller2.cpp:140:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 142,
    "function": null,
    "comment": "pr2_base_controller2.cpp:142:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "pr2_base_controller2.cpp",
    "line": 146,
    "function": null,
    "comment": "pr2_base_controller2.cpp:146:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller2.cpp",
    "line": 149,
    "function": null,
    "comment": "pr2_base_controller2.cpp:149:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller2.cpp",
    "line": 150,
    "function": null,
    "comment": "pr2_base_controller2.cpp:150:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 152,
    "function": null,
    "comment": "pr2_base_controller2.cpp:152:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 153,
    "function": null,
    "comment": "pr2_base_controller2.cpp:153:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller2.cpp",
    "line": 153,
    "function": null,
    "comment": "pr2_base_controller2.cpp:153:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_base_controller2.cpp",
    "line": 153,
    "function": null,
    "comment": "pr2_base_controller2.cpp:153:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller2.cpp",
    "line": 154,
    "function": null,
    "comment": "pr2_base_controller2.cpp:154:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 155,
    "function": null,
    "comment": "pr2_base_controller2.cpp:155:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_base_controller2.cpp",
    "line": 155,
    "function": null,
    "comment": "pr2_base_controller2.cpp:155:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller2.cpp",
    "line": 165,
    "function": null,
    "comment": "pr2_base_controller2.cpp:165:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller2.cpp",
    "line": 166,
    "function": null,
    "comment": "pr2_base_controller2.cpp:166:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller2.cpp",
    "line": 167,
    "function": null,
    "comment": "pr2_base_controller2.cpp:167:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller2.cpp",
    "line": 168,
    "function": null,
    "comment": "pr2_base_controller2.cpp:168:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 169,
    "function": null,
    "comment": "pr2_base_controller2.cpp:169:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "pr2_base_controller2.cpp",
    "line": 170,
    "function": null,
    "comment": "pr2_base_controller2.cpp:170:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 174,
    "function": null,
    "comment": "pr2_base_controller2.cpp:174:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "pr2_base_controller2.cpp",
    "line": 174,
    "function": null,
    "comment": "pr2_base_controller2.cpp:174:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "pr2_base_controller2.cpp",
    "line": 174,
    "function": null,
    "comment": "pr2_base_controller2.cpp:174:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 175,
    "function": null,
    "comment": "pr2_base_controller2.cpp:175:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 178,
    "function": null,
    "comment": "pr2_base_controller2.cpp:178:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "pr2_base_controller2.cpp",
    "line": 178,
    "function": null,
    "comment": "pr2_base_controller2.cpp:178:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "pr2_base_controller2.cpp",
    "line": 178,
    "function": null,
    "comment": "pr2_base_controller2.cpp:178:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 179,
    "function": null,
    "comment": "pr2_base_controller2.cpp:179:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller2.cpp",
    "line": 189,
    "function": null,
    "comment": "pr2_base_controller2.cpp:189:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 190,
    "function": null,
    "comment": "pr2_base_controller2.cpp:190:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 191,
    "function": null,
    "comment": "pr2_base_controller2.cpp:191:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_base_controller2.cpp",
    "line": 191,
    "function": null,
    "comment": "pr2_base_controller2.cpp:191:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller2.cpp",
    "line": 192,
    "function": null,
    "comment": "pr2_base_controller2.cpp:192:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller2.cpp",
    "line": 193,
    "function": null,
    "comment": "pr2_base_controller2.cpp:193:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "pr2_base_controller2.cpp",
    "line": 197,
    "function": null,
    "comment": "pr2_base_controller2.cpp:197:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller2.cpp",
    "line": 198,
    "function": null,
    "comment": "pr2_base_controller2.cpp:198:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 202,
    "function": null,
    "comment": "pr2_base_controller2.cpp:202:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 205,
    "function": null,
    "comment": "pr2_base_controller2.cpp:205:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_base_controller2.cpp",
    "line": 205,
    "function": null,
    "comment": "pr2_base_controller2.cpp:205:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 206,
    "function": null,
    "comment": "pr2_base_controller2.cpp:206:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_base_controller2.cpp",
    "line": 206,
    "function": null,
    "comment": "pr2_base_controller2.cpp:206:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "pr2_base_controller2.cpp",
    "line": 210,
    "function": null,
    "comment": "pr2_base_controller2.cpp:210:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller2.cpp",
    "line": 210,
    "function": null,
    "comment": "pr2_base_controller2.cpp:210:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "pr2_base_controller2.cpp",
    "line": 210,
    "function": null,
    "comment": "pr2_base_controller2.cpp:210:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller2.cpp",
    "line": 211,
    "function": null,
    "comment": "pr2_base_controller2.cpp:211:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 212,
    "function": null,
    "comment": "pr2_base_controller2.cpp:212:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_base_controller2.cpp",
    "line": 212,
    "function": null,
    "comment": "pr2_base_controller2.cpp:212:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "pr2_base_controller2.cpp",
    "line": 214,
    "function": null,
    "comment": "pr2_base_controller2.cpp:214:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller2.cpp",
    "line": 214,
    "function": null,
    "comment": "pr2_base_controller2.cpp:214:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "pr2_base_controller2.cpp",
    "line": 214,
    "function": null,
    "comment": "pr2_base_controller2.cpp:214:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller2.cpp",
    "line": 215,
    "function": null,
    "comment": "pr2_base_controller2.cpp:215:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 216,
    "function": null,
    "comment": "pr2_base_controller2.cpp:216:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_base_controller2.cpp",
    "line": 216,
    "function": null,
    "comment": "pr2_base_controller2.cpp:216:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 221,
    "function": null,
    "comment": "pr2_base_controller2.cpp:221:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller2.cpp",
    "line": 222,
    "function": null,
    "comment": "pr2_base_controller2.cpp:222:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller2.cpp",
    "line": 229,
    "function": null,
    "comment": "pr2_base_controller2.cpp:229:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller2.cpp",
    "line": 236,
    "function": null,
    "comment": "pr2_base_controller2.cpp:236:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller2.cpp",
    "line": 243,
    "function": null,
    "comment": "pr2_base_controller2.cpp:243:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller2.cpp",
    "line": 249,
    "function": null,
    "comment": "pr2_base_controller2.cpp:249:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller2.cpp",
    "line": 251,
    "function": null,
    "comment": "pr2_base_controller2.cpp:251:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 254,
    "function": null,
    "comment": "pr2_base_controller2.cpp:254:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 255,
    "function": null,
    "comment": "pr2_base_controller2.cpp:255:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 256,
    "function": null,
    "comment": "pr2_base_controller2.cpp:256:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 260,
    "function": null,
    "comment": "pr2_base_controller2.cpp:260:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "pr2_base_controller2.cpp",
    "line": 260,
    "function": null,
    "comment": "pr2_base_controller2.cpp:260:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller2.cpp",
    "line": 261,
    "function": null,
    "comment": "pr2_base_controller2.cpp:261:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller2.cpp",
    "line": 272,
    "function": null,
    "comment": "pr2_base_controller2.cpp:272:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller2.cpp",
    "line": 275,
    "function": null,
    "comment": "pr2_base_controller2.cpp:275:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller2.cpp",
    "line": 276,
    "function": null,
    "comment": "pr2_base_controller2.cpp:276:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller2.cpp",
    "line": 279,
    "function": null,
    "comment": "pr2_base_controller2.cpp:279:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller2.cpp",
    "line": 280,
    "function": null,
    "comment": "pr2_base_controller2.cpp:280:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller2.cpp",
    "line": 286,
    "function": null,
    "comment": "pr2_base_controller2.cpp:286:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 288,
    "function": null,
    "comment": "pr2_base_controller2.cpp:288:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller2.cpp",
    "line": 290,
    "function": null,
    "comment": "pr2_base_controller2.cpp:290:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller2.cpp",
    "line": 291,
    "function": null,
    "comment": "pr2_base_controller2.cpp:291:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller2.cpp",
    "line": 292,
    "function": null,
    "comment": "pr2_base_controller2.cpp:292:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller2.cpp",
    "line": 293,
    "function": null,
    "comment": "pr2_base_controller2.cpp:293:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller2.cpp",
    "line": 302,
    "function": null,
    "comment": "pr2_base_controller2.cpp:302:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller2.cpp",
    "line": 303,
    "function": null,
    "comment": "pr2_base_controller2.cpp:303:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "pr2_base_controller2.cpp",
    "line": 308,
    "function": null,
    "comment": "pr2_base_controller2.cpp:308:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller2.cpp",
    "line": 317,
    "function": null,
    "comment": "pr2_base_controller2.cpp:317:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "pr2_base_controller2.cpp",
    "line": 321,
    "function": null,
    "comment": "pr2_base_controller2.cpp:321:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller2.cpp",
    "line": 325,
    "function": null,
    "comment": "pr2_base_controller2.cpp:325:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller2.cpp",
    "line": 326,
    "function": null,
    "comment": "pr2_base_controller2.cpp:326:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller2.cpp",
    "line": 327,
    "function": null,
    "comment": "pr2_base_controller2.cpp:327:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller2.cpp",
    "line": 331,
    "function": null,
    "comment": "pr2_base_controller2.cpp:331:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller2.cpp",
    "line": 332,
    "function": null,
    "comment": "pr2_base_controller2.cpp:332:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller2.cpp",
    "line": 337,
    "function": null,
    "comment": "pr2_base_controller2.cpp:337:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller2.cpp",
    "line": 338,
    "function": null,
    "comment": "pr2_base_controller2.cpp:338:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 339,
    "function": null,
    "comment": "pr2_base_controller2.cpp:339:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 340,
    "function": null,
    "comment": "pr2_base_controller2.cpp:340:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 341,
    "function": null,
    "comment": "pr2_base_controller2.cpp:341:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 342,
    "function": null,
    "comment": "pr2_base_controller2.cpp:342:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 344,
    "function": null,
    "comment": "pr2_base_controller2.cpp:344:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 345,
    "function": null,
    "comment": "pr2_base_controller2.cpp:345:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 346,
    "function": null,
    "comment": "pr2_base_controller2.cpp:346:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller2.cpp",
    "line": 348,
    "function": null,
    "comment": "pr2_base_controller2.cpp:348:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller2.cpp",
    "line": 349,
    "function": null,
    "comment": "pr2_base_controller2.cpp:349:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 350,
    "function": null,
    "comment": "pr2_base_controller2.cpp:350:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 351,
    "function": null,
    "comment": "pr2_base_controller2.cpp:351:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 352,
    "function": null,
    "comment": "pr2_base_controller2.cpp:352:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 353,
    "function": null,
    "comment": "pr2_base_controller2.cpp:353:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 354,
    "function": null,
    "comment": "pr2_base_controller2.cpp:354:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 356,
    "function": null,
    "comment": "pr2_base_controller2.cpp:356:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 357,
    "function": null,
    "comment": "pr2_base_controller2.cpp:357:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 358,
    "function": null,
    "comment": "pr2_base_controller2.cpp:358:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller2.cpp",
    "line": 366,
    "function": null,
    "comment": "pr2_base_controller2.cpp:366:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller2.cpp",
    "line": 375,
    "function": null,
    "comment": "pr2_base_controller2.cpp:375:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller2.cpp",
    "line": 382,
    "function": null,
    "comment": "pr2_base_controller2.cpp:382:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 387,
    "function": null,
    "comment": "pr2_base_controller2.cpp:387:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller2.cpp",
    "line": 389,
    "function": null,
    "comment": "pr2_base_controller2.cpp:389:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller2.cpp",
    "line": 390,
    "function": null,
    "comment": "pr2_base_controller2.cpp:390:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_base_controller2.cpp",
    "line": 393,
    "function": null,
    "comment": "pr2_base_controller2.cpp:393:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller2.cpp",
    "line": 395,
    "function": null,
    "comment": "pr2_base_controller2.cpp:395:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller2.cpp",
    "line": 396,
    "function": null,
    "comment": "pr2_base_controller2.cpp:396:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 397,
    "function": null,
    "comment": "pr2_base_controller2.cpp:397:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller2.cpp",
    "line": 398,
    "function": null,
    "comment": "pr2_base_controller2.cpp:398:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller2.cpp",
    "line": 399,
    "function": null,
    "comment": "pr2_base_controller2.cpp:399:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "pr2_base_controller2.cpp",
    "line": 402,
    "function": null,
    "comment": "pr2_base_controller2.cpp:402:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller2.cpp",
    "line": 403,
    "function": null,
    "comment": "pr2_base_controller2.cpp:403:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 407,
    "function": null,
    "comment": "pr2_base_controller2.cpp:407:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller2.cpp",
    "line": 415,
    "function": null,
    "comment": "pr2_base_controller2.cpp:415:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller2.cpp",
    "line": 416,
    "function": null,
    "comment": "pr2_base_controller2.cpp:416:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller2.cpp",
    "line": 430,
    "function": null,
    "comment": "pr2_base_controller2.cpp:430:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller2.cpp",
    "line": 431,
    "function": null,
    "comment": "pr2_base_controller2.cpp:431:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller2.cpp",
    "line": 432,
    "function": null,
    "comment": "pr2_base_controller2.cpp:432:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 433,
    "function": null,
    "comment": "pr2_base_controller2.cpp:433:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller2.cpp",
    "line": 438,
    "function": null,
    "comment": "pr2_base_controller2.cpp:438:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller2.cpp",
    "line": 448,
    "function": null,
    "comment": "pr2_base_controller2.cpp:448:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller2.cpp",
    "line": 449,
    "function": null,
    "comment": "pr2_base_controller2.cpp:449:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_base_controller2.cpp",
    "line": 452,
    "function": null,
    "comment": "pr2_base_controller2.cpp:452:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller2.cpp",
    "line": 455,
    "function": null,
    "comment": "pr2_base_controller2.cpp:455:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "pr2_base_controller2.cpp",
    "line": 455,
    "function": null,
    "comment": "pr2_base_controller2.cpp:455:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller2.cpp",
    "line": 456,
    "function": null,
    "comment": "pr2_base_controller2.cpp:456:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 458,
    "function": null,
    "comment": "pr2_base_controller2.cpp:458:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 459,
    "function": null,
    "comment": "pr2_base_controller2.cpp:459:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 461,
    "function": null,
    "comment": "pr2_base_controller2.cpp:461:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 462,
    "function": null,
    "comment": "pr2_base_controller2.cpp:462:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 467,
    "function": null,
    "comment": "pr2_base_controller2.cpp:467:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 468,
    "function": null,
    "comment": "pr2_base_controller2.cpp:468:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 469,
    "function": null,
    "comment": "pr2_base_controller2.cpp:469:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 471,
    "function": null,
    "comment": "pr2_base_controller2.cpp:471:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 472,
    "function": null,
    "comment": "pr2_base_controller2.cpp:472:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller2.cpp",
    "line": 479,
    "function": null,
    "comment": "pr2_base_controller2.cpp:479:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller2.cpp",
    "line": 487,
    "function": null,
    "comment": "pr2_base_controller2.cpp:487:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller2.cpp",
    "line": 494,
    "function": null,
    "comment": "pr2_base_controller2.cpp:494:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller2.cpp",
    "line": 495,
    "function": null,
    "comment": "pr2_base_controller2.cpp:495:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "pr2_base_controller2.cpp",
    "line": 501,
    "function": null,
    "comment": "pr2_base_controller2.cpp:501:  Namespace should be terminated with '// namespace controller'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "pr2_base_controller2.cpp",
    "line": 501,
    "function": null,
    "comment": "pr2_base_controller2.cpp:501:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "pr2_base_controller2.cpp",
    "line": 178,
    "function": null,
    "comment": "pr2_base_controller2.cpp:178:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "pr2_base_controller2.cpp",
    "line": 288,
    "function": null,
    "comment": "pr2_base_controller2.cpp:288:  Add #include <algorithm> for min  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_odometry.cpp",
    "line": 41,
    "function": null,
    "comment": "pr2_odometry.cpp:41:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "pr2_odometry.cpp",
    "line": 41,
    "function": null,
    "comment": "pr2_odometry.cpp:41:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "pr2_odometry.cpp",
    "line": 43,
    "function": null,
    "comment": "pr2_odometry.cpp:43:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Storage class should come before the type.",
    "file": "pr2_odometry.cpp",
    "line": 46,
    "function": null,
    "comment": "pr2_odometry.cpp:46:  Storage class (static, extern, typedef, etc) should be first.  [build/storage_class] [5]",
    "tags": ["code-standards","google-cpp","invalid-code","storage-class"]
  },
  {
    "rule": "Storage class should come before the type.",
    "file": "pr2_odometry.cpp",
    "line": 47,
    "function": null,
    "comment": "pr2_odometry.cpp:47:  Storage class (static, extern, typedef, etc) should be first.  [build/storage_class] [5]",
    "tags": ["code-standards","google-cpp","invalid-code","storage-class"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_odometry.cpp",
    "line": 50,
    "function": null,
    "comment": "pr2_odometry.cpp:50:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_odometry.cpp",
    "line": 55,
    "function": null,
    "comment": "pr2_odometry.cpp:55:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_odometry.cpp",
    "line": 58,
    "function": null,
    "comment": "pr2_odometry.cpp:58:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_odometry.cpp",
    "line": 59,
    "function": null,
    "comment": "pr2_odometry.cpp:59:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_odometry.cpp",
    "line": 94,
    "function": null,
    "comment": "pr2_odometry.cpp:94:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "pr2_odometry.cpp",
    "line": 97,
    "function": null,
    "comment": "pr2_odometry.cpp:97:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "pr2_odometry.cpp",
    "line": 97,
    "function": null,
    "comment": "pr2_odometry.cpp:97:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_odometry.cpp",
    "line": 102,
    "function": null,
    "comment": "pr2_odometry.cpp:102:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "pr2_odometry.cpp",
    "line": 105,
    "function": null,
    "comment": "pr2_odometry.cpp:105:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "pr2_odometry.cpp",
    "line": 105,
    "function": null,
    "comment": "pr2_odometry.cpp:105:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_odometry.cpp",
    "line": 110,
    "function": null,
    "comment": "pr2_odometry.cpp:110:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "pr2_odometry.cpp",
    "line": 113,
    "function": null,
    "comment": "pr2_odometry.cpp:113:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "pr2_odometry.cpp",
    "line": 113,
    "function": null,
    "comment": "pr2_odometry.cpp:113:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_odometry.cpp",
    "line": 120,
    "function": null,
    "comment": "pr2_odometry.cpp:120:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_odometry.cpp",
    "line": 123,
    "function": null,
    "comment": "pr2_odometry.cpp:123:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "pr2_odometry.cpp",
    "line": 124,
    "function": null,
    "comment": "pr2_odometry.cpp:124:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_odometry.cpp",
    "line": 124,
    "function": null,
    "comment": "pr2_odometry.cpp:124:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "pr2_odometry.cpp",
    "line": 128,
    "function": null,
    "comment": "pr2_odometry.cpp:128:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "pr2_odometry.cpp",
    "line": 142,
    "function": null,
    "comment": "pr2_odometry.cpp:142:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_odometry.cpp",
    "line": 142,
    "function": null,
    "comment": "pr2_odometry.cpp:142:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_odometry.cpp",
    "line": 143,
    "function": null,
    "comment": "pr2_odometry.cpp:143:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_odometry.cpp",
    "line": 143,
    "function": null,
    "comment": "pr2_odometry.cpp:143:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_odometry.cpp",
    "line": 144,
    "function": null,
    "comment": "pr2_odometry.cpp:144:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_odometry.cpp",
    "line": 144,
    "function": null,
    "comment": "pr2_odometry.cpp:144:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_odometry.cpp",
    "line": 149,
    "function": null,
    "comment": "pr2_odometry.cpp:149:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_odometry.cpp",
    "line": 149,
    "function": null,
    "comment": "pr2_odometry.cpp:149:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_odometry.cpp",
    "line": 150,
    "function": null,
    "comment": "pr2_odometry.cpp:150:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_odometry.cpp",
    "line": 150,
    "function": null,
    "comment": "pr2_odometry.cpp:150:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_odometry.cpp",
    "line": 151,
    "function": null,
    "comment": "pr2_odometry.cpp:151:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_odometry.cpp",
    "line": 151,
    "function": null,
    "comment": "pr2_odometry.cpp:151:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_odometry.cpp",
    "line": 152,
    "function": null,
    "comment": "pr2_odometry.cpp:152:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_odometry.cpp",
    "line": 152,
    "function": null,
    "comment": "pr2_odometry.cpp:152:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_odometry.cpp",
    "line": 157,
    "function": null,
    "comment": "pr2_odometry.cpp:157:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_odometry.cpp",
    "line": 158,
    "function": null,
    "comment": "pr2_odometry.cpp:158:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_odometry.cpp",
    "line": 163,
    "function": null,
    "comment": "pr2_odometry.cpp:163:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "pr2_odometry.cpp",
    "line": 166,
    "function": null,
    "comment": "pr2_odometry.cpp:166:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_odometry.cpp",
    "line": 166,
    "function": null,
    "comment": "pr2_odometry.cpp:166:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "pr2_odometry.cpp",
    "line": 167,
    "function": null,
    "comment": "pr2_odometry.cpp:167:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_odometry.cpp",
    "line": 167,
    "function": null,
    "comment": "pr2_odometry.cpp:167:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "pr2_odometry.cpp",
    "line": 171,
    "function": null,
    "comment": "pr2_odometry.cpp:171:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_odometry.cpp",
    "line": 171,
    "function": null,
    "comment": "pr2_odometry.cpp:171:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "pr2_odometry.cpp",
    "line": 172,
    "function": null,
    "comment": "pr2_odometry.cpp:172:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_odometry.cpp",
    "line": 172,
    "function": null,
    "comment": "pr2_odometry.cpp:172:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_odometry.cpp",
    "line": 180,
    "function": null,
    "comment": "pr2_odometry.cpp:180:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_odometry.cpp",
    "line": 190,
    "function": null,
    "comment": "pr2_odometry.cpp:190:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "pr2_odometry.cpp",
    "line": 191,
    "function": null,
    "comment": "pr2_odometry.cpp:191:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_odometry.cpp",
    "line": 191,
    "function": null,
    "comment": "pr2_odometry.cpp:191:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "pr2_odometry.cpp",
    "line": 192,
    "function": null,
    "comment": "pr2_odometry.cpp:192:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_odometry.cpp",
    "line": 192,
    "function": null,
    "comment": "pr2_odometry.cpp:192:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "pr2_odometry.cpp",
    "line": 197,
    "function": null,
    "comment": "pr2_odometry.cpp:197:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "pr2_odometry.cpp",
    "line": 197,
    "function": null,
    "comment": "pr2_odometry.cpp:197:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_odometry.cpp",
    "line": 198,
    "function": null,
    "comment": "pr2_odometry.cpp:198:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_odometry.cpp",
    "line": 208,
    "function": null,
    "comment": "pr2_odometry.cpp:208:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_odometry.cpp",
    "line": 210,
    "function": null,
    "comment": "pr2_odometry.cpp:210:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_odometry.cpp",
    "line": 212,
    "function": null,
    "comment": "pr2_odometry.cpp:212:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_odometry.cpp",
    "line": 214,
    "function": null,
    "comment": "pr2_odometry.cpp:214:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "pr2_odometry.cpp",
    "line": 218,
    "function": null,
    "comment": "pr2_odometry.cpp:218:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_odometry.cpp",
    "line": 218,
    "function": null,
    "comment": "pr2_odometry.cpp:218:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "pr2_odometry.cpp",
    "line": 223,
    "function": null,
    "comment": "pr2_odometry.cpp:223:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_odometry.cpp",
    "line": 223,
    "function": null,
    "comment": "pr2_odometry.cpp:223:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_odometry.cpp",
    "line": 232,
    "function": null,
    "comment": "pr2_odometry.cpp:232:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "pr2_odometry.cpp",
    "line": 240,
    "function": null,
    "comment": "pr2_odometry.cpp:240:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "pr2_odometry.cpp",
    "line": 242,
    "function": null,
    "comment": "pr2_odometry.cpp:242:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_odometry.cpp",
    "line": 250,
    "function": null,
    "comment": "pr2_odometry.cpp:250:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "pr2_odometry.cpp",
    "line": 252,
    "function": null,
    "comment": "pr2_odometry.cpp:252:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_odometry.cpp",
    "line": 259,
    "function": null,
    "comment": "pr2_odometry.cpp:259:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_odometry.cpp",
    "line": 266,
    "function": null,
    "comment": "pr2_odometry.cpp:266:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_odometry.cpp",
    "line": 281,
    "function": null,
    "comment": "pr2_odometry.cpp:281:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_odometry.cpp",
    "line": 286,
    "function": null,
    "comment": "pr2_odometry.cpp:286:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "pr2_odometry.cpp",
    "line": 289,
    "function": null,
    "comment": "pr2_odometry.cpp:289:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_odometry.cpp",
    "line": 289,
    "function": null,
    "comment": "pr2_odometry.cpp:289:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "pr2_odometry.cpp",
    "line": 290,
    "function": null,
    "comment": "pr2_odometry.cpp:290:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "pr2_odometry.cpp",
    "line": 292,
    "function": null,
    "comment": "pr2_odometry.cpp:292:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "pr2_odometry.cpp",
    "line": 305,
    "function": null,
    "comment": "pr2_odometry.cpp:305:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "pr2_odometry.cpp",
    "line": 305,
    "function": null,
    "comment": "pr2_odometry.cpp:305:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "pr2_odometry.cpp",
    "line": 306,
    "function": null,
    "comment": "pr2_odometry.cpp:306:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_odometry.cpp",
    "line": 307,
    "function": null,
    "comment": "pr2_odometry.cpp:307:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_odometry.cpp",
    "line": 308,
    "function": null,
    "comment": "pr2_odometry.cpp:308:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_odometry.cpp",
    "line": 309,
    "function": null,
    "comment": "pr2_odometry.cpp:309:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_odometry.cpp",
    "line": 331,
    "function": null,
    "comment": "pr2_odometry.cpp:331:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_odometry.cpp",
    "line": 341,
    "function": null,
    "comment": "pr2_odometry.cpp:341:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_odometry.cpp",
    "line": 346,
    "function": null,
    "comment": "pr2_odometry.cpp:346:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_odometry.cpp",
    "line": 348,
    "function": null,
    "comment": "pr2_odometry.cpp:348:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "pr2_odometry.cpp",
    "line": 348,
    "function": null,
    "comment": "pr2_odometry.cpp:348:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "pr2_odometry.cpp",
    "line": 348,
    "function": null,
    "comment": "pr2_odometry.cpp:348:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_odometry.cpp",
    "line": 355,
    "function": null,
    "comment": "pr2_odometry.cpp:355:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "pr2_odometry.cpp",
    "line": 361,
    "function": null,
    "comment": "pr2_odometry.cpp:361:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "pr2_odometry.cpp",
    "line": 365,
    "function": null,
    "comment": "pr2_odometry.cpp:365:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_odometry.cpp",
    "line": 373,
    "function": null,
    "comment": "pr2_odometry.cpp:373:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_odometry.cpp",
    "line": 374,
    "function": null,
    "comment": "pr2_odometry.cpp:374:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_odometry.cpp",
    "line": 381,
    "function": null,
    "comment": "pr2_odometry.cpp:381:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_odometry.cpp",
    "line": 385,
    "function": null,
    "comment": "pr2_odometry.cpp:385:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_odometry.cpp",
    "line": 386,
    "function": null,
    "comment": "pr2_odometry.cpp:386:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "pr2_odometry.cpp",
    "line": 387,
    "function": null,
    "comment": "pr2_odometry.cpp:387:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_odometry.cpp",
    "line": 394,
    "function": null,
    "comment": "pr2_odometry.cpp:394:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_odometry.cpp",
    "line": 400,
    "function": null,
    "comment": "pr2_odometry.cpp:400:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_odometry.cpp",
    "line": 404,
    "function": null,
    "comment": "pr2_odometry.cpp:404:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_odometry.cpp",
    "line": 406,
    "function": null,
    "comment": "pr2_odometry.cpp:406:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_odometry.cpp",
    "line": 406,
    "function": null,
    "comment": "pr2_odometry.cpp:406:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_odometry.cpp",
    "line": 410,
    "function": null,
    "comment": "pr2_odometry.cpp:410:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "pr2_odometry.cpp",
    "line": 412,
    "function": null,
    "comment": "pr2_odometry.cpp:412:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_odometry.cpp",
    "line": 412,
    "function": null,
    "comment": "pr2_odometry.cpp:412:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "pr2_odometry.cpp",
    "line": 415,
    "function": null,
    "comment": "pr2_odometry.cpp:415:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_odometry.cpp",
    "line": 415,
    "function": null,
    "comment": "pr2_odometry.cpp:415:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_odometry.cpp",
    "line": 416,
    "function": null,
    "comment": "pr2_odometry.cpp:416:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_odometry.cpp",
    "line": 419,
    "function": null,
    "comment": "pr2_odometry.cpp:419:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "pr2_odometry.cpp",
    "line": 423,
    "function": null,
    "comment": "pr2_odometry.cpp:423:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_odometry.cpp",
    "line": 423,
    "function": null,
    "comment": "pr2_odometry.cpp:423:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_odometry.cpp",
    "line": 424,
    "function": null,
    "comment": "pr2_odometry.cpp:424:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_odometry.cpp",
    "line": 431,
    "function": null,
    "comment": "pr2_odometry.cpp:431:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_odometry.cpp",
    "line": 435,
    "function": null,
    "comment": "pr2_odometry.cpp:435:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "pr2_odometry.cpp",
    "line": 438,
    "function": null,
    "comment": "pr2_odometry.cpp:438:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_odometry.cpp",
    "line": 438,
    "function": null,
    "comment": "pr2_odometry.cpp:438:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "pr2_odometry.cpp",
    "line": 441,
    "function": null,
    "comment": "pr2_odometry.cpp:441:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "pr2_odometry.cpp",
    "line": 441,
    "function": null,
    "comment": "pr2_odometry.cpp:441:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "pr2_odometry.cpp",
    "line": 447,
    "function": null,
    "comment": "pr2_odometry.cpp:447:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_odometry.cpp",
    "line": 453,
    "function": null,
    "comment": "pr2_odometry.cpp:453:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_odometry.cpp",
    "line": 457,
    "function": null,
    "comment": "pr2_odometry.cpp:457:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "pr2_odometry.cpp",
    "line": 458,
    "function": null,
    "comment": "pr2_odometry.cpp:458:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "pr2_odometry.cpp",
    "line": 459,
    "function": null,
    "comment": "pr2_odometry.cpp:459:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_odometry.cpp",
    "line": 465,
    "function": null,
    "comment": "pr2_odometry.cpp:465:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "pr2_odometry.cpp",
    "line": 466,
    "function": null,
    "comment": "pr2_odometry.cpp:466:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_odometry.cpp",
    "line": 466,
    "function": null,
    "comment": "pr2_odometry.cpp:466:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "pr2_odometry.cpp",
    "line": 469,
    "function": null,
    "comment": "pr2_odometry.cpp:469:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_odometry.cpp",
    "line": 469,
    "function": null,
    "comment": "pr2_odometry.cpp:469:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_odometry.cpp",
    "line": 478,
    "function": null,
    "comment": "pr2_odometry.cpp:478:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "pr2_odometry.cpp",
    "line": 479,
    "function": null,
    "comment": "pr2_odometry.cpp:479:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_odometry.cpp",
    "line": 479,
    "function": null,
    "comment": "pr2_odometry.cpp:479:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "pr2_odometry.cpp",
    "line": 482,
    "function": null,
    "comment": "pr2_odometry.cpp:482:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_odometry.cpp",
    "line": 482,
    "function": null,
    "comment": "pr2_odometry.cpp:482:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "pr2_odometry.cpp",
    "line": 483,
    "function": null,
    "comment": "pr2_odometry.cpp:483:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_odometry.cpp",
    "line": 483,
    "function": null,
    "comment": "pr2_odometry.cpp:483:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "pr2_odometry.cpp",
    "line": 484,
    "function": null,
    "comment": "pr2_odometry.cpp:484:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "pr2_odometry.cpp",
    "line": 487,
    "function": null,
    "comment": "pr2_odometry.cpp:487:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_odometry.cpp",
    "line": 488,
    "function": null,
    "comment": "pr2_odometry.cpp:488:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "pr2_odometry.cpp",
    "line": 490,
    "function": null,
    "comment": "pr2_odometry.cpp:490:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_odometry.cpp",
    "line": 491,
    "function": null,
    "comment": "pr2_odometry.cpp:491:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_odometry.cpp",
    "line": 500,
    "function": null,
    "comment": "pr2_odometry.cpp:500:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "pr2_odometry.cpp",
    "line": 501,
    "function": null,
    "comment": "pr2_odometry.cpp:501:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_odometry.cpp",
    "line": 501,
    "function": null,
    "comment": "pr2_odometry.cpp:501:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "pr2_odometry.cpp",
    "line": 505,
    "function": null,
    "comment": "pr2_odometry.cpp:505:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_odometry.cpp",
    "line": 505,
    "function": null,
    "comment": "pr2_odometry.cpp:505:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_odometry.cpp",
    "line": 513,
    "function": null,
    "comment": "pr2_odometry.cpp:513:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "pr2_odometry.cpp",
    "line": 514,
    "function": null,
    "comment": "pr2_odometry.cpp:514:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_odometry.cpp",
    "line": 514,
    "function": null,
    "comment": "pr2_odometry.cpp:514:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "pr2_odometry.cpp",
    "line": 517,
    "function": null,
    "comment": "pr2_odometry.cpp:517:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_odometry.cpp",
    "line": 517,
    "function": null,
    "comment": "pr2_odometry.cpp:517:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "pr2_odometry.cpp",
    "line": 521,
    "function": null,
    "comment": "pr2_odometry.cpp:521:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_odometry.cpp",
    "line": 525,
    "function": null,
    "comment": "pr2_odometry.cpp:525:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_odometry.cpp",
    "line": 526,
    "function": null,
    "comment": "pr2_odometry.cpp:526:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "pr2_odometry.cpp",
    "line": 542,
    "function": null,
    "comment": "pr2_odometry.cpp:542:  Namespace should be terminated with '// namespace controller'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "pr2_odometry.cpp",
    "line": 542,
    "function": null,
    "comment": "pr2_odometry.cpp:542:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "pr2_odometry.cpp",
    "line": 77,
    "function": null,
    "comment": "pr2_odometry.cpp:77:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "caster_controller.cpp",
    "line": 37,
    "function": null,
    "comment": "caster_controller.cpp:37:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "caster_controller.cpp",
    "line": 37,
    "function": null,
    "comment": "caster_controller.cpp:37:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "caster_controller.cpp",
    "line": 39,
    "function": null,
    "comment": "caster_controller.cpp:39:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "caster_controller.cpp",
    "line": 46,
    "function": null,
    "comment": "caster_controller.cpp:46:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "caster_controller.cpp",
    "line": 50,
    "function": null,
    "comment": "caster_controller.cpp:50:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "caster_controller.cpp",
    "line": 58,
    "function": null,
    "comment": "caster_controller.cpp:58:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "caster_controller.cpp",
    "line": 61,
    "function": null,
    "comment": "caster_controller.cpp:61:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "caster_controller.cpp",
    "line": 62,
    "function": null,
    "comment": "caster_controller.cpp:62:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "caster_controller.cpp",
    "line": 76,
    "function": null,
    "comment": "caster_controller.cpp:76:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "caster_controller.cpp",
    "line": 77,
    "function": null,
    "comment": "caster_controller.cpp:77:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "caster_controller.cpp",
    "line": 85,
    "function": null,
    "comment": "caster_controller.cpp:85:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "caster_controller.cpp",
    "line": 86,
    "function": null,
    "comment": "caster_controller.cpp:86:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "caster_controller.cpp",
    "line": 90,
    "function": null,
    "comment": "caster_controller.cpp:90:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "caster_controller.cpp",
    "line": 91,
    "function": null,
    "comment": "caster_controller.cpp:91:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "caster_controller.cpp",
    "line": 95,
    "function": null,
    "comment": "caster_controller.cpp:95:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "caster_controller.cpp",
    "line": 96,
    "function": null,
    "comment": "caster_controller.cpp:96:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "caster_controller.cpp",
    "line": 100,
    "function": null,
    "comment": "caster_controller.cpp:100:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "caster_controller.cpp",
    "line": 134,
    "function": null,
    "comment": "caster_controller.cpp:134:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "caster_controller.cpp",
    "line": 135,
    "function": null,
    "comment": "caster_controller.cpp:135:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "caster_controller.cpp",
    "line": 141,
    "function": null,
    "comment": "caster_controller.cpp:141:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "caster_controller.cpp",
    "line": 144,
    "function": null,
    "comment": "caster_controller.cpp:144:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "caster_controller.cpp",
    "line": 145,
    "function": null,
    "comment": "caster_controller.cpp:145:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "caster_controller.cpp",
    "line": 155,
    "function": null,
    "comment": "caster_controller.cpp:155:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "caster_controller.cpp",
    "line": 160,
    "function": null,
    "comment": "caster_controller.cpp:160:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "caster_controller.cpp",
    "line": 166,
    "function": null,
    "comment": "caster_controller.cpp:166:  Namespace should be terminated with '// namespace controller'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "caster_controller.cpp",
    "line": 125,
    "function": null,
    "comment": "caster_controller.cpp:125:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "trajectory.cpp",
    "line": 42,
    "function": null,
    "comment": "trajectory.cpp:42:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 45,
    "function": null,
    "comment": "trajectory.cpp:45:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "trajectory.cpp",
    "line": 48,
    "function": null,
    "comment": "trajectory.cpp:48:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 52,
    "function": null,
    "comment": "trajectory.cpp:52:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "trajectory.cpp",
    "line": 53,
    "function": null,
    "comment": "trajectory.cpp:53:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "trajectory.cpp",
    "line": 60,
    "function": null,
    "comment": "trajectory.cpp:60:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "trajectory.cpp",
    "line": 60,
    "function": null,
    "comment": "trajectory.cpp:60:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 60,
    "function": null,
    "comment": "trajectory.cpp:60:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 61,
    "function": null,
    "comment": "trajectory.cpp:61:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "trajectory.cpp",
    "line": 65,
    "function": null,
    "comment": "trajectory.cpp:65:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "trajectory.cpp",
    "line": 65,
    "function": null,
    "comment": "trajectory.cpp:65:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 65,
    "function": null,
    "comment": "trajectory.cpp:65:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 66,
    "function": null,
    "comment": "trajectory.cpp:66:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "trajectory.cpp",
    "line": 68,
    "function": null,
    "comment": "trajectory.cpp:68:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 68,
    "function": null,
    "comment": "trajectory.cpp:68:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "trajectory.cpp",
    "line": 71,
    "function": null,
    "comment": "trajectory.cpp:71:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 71,
    "function": null,
    "comment": "trajectory.cpp:71:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 72,
    "function": null,
    "comment": "trajectory.cpp:72:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 78,
    "function": null,
    "comment": "trajectory.cpp:78:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 88,
    "function": null,
    "comment": "trajectory.cpp:88:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 89,
    "function": null,
    "comment": "trajectory.cpp:89:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 90,
    "function": null,
    "comment": "trajectory.cpp:90:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 94,
    "function": null,
    "comment": "trajectory.cpp:94:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 95,
    "function": null,
    "comment": "trajectory.cpp:95:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.cpp",
    "line": 96,
    "function": null,
    "comment": "trajectory.cpp:96:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "trajectory.cpp",
    "line": 96,
    "function": null,
    "comment": "trajectory.cpp:96:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "trajectory.cpp",
    "line": 106,
    "function": null,
    "comment": "trajectory.cpp:106:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "trajectory.cpp",
    "line": 106,
    "function": null,
    "comment": "trajectory.cpp:106:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 106,
    "function": null,
    "comment": "trajectory.cpp:106:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 107,
    "function": null,
    "comment": "trajectory.cpp:107:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "trajectory.cpp",
    "line": 111,
    "function": null,
    "comment": "trajectory.cpp:111:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "trajectory.cpp",
    "line": 111,
    "function": null,
    "comment": "trajectory.cpp:111:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 111,
    "function": null,
    "comment": "trajectory.cpp:111:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 112,
    "function": null,
    "comment": "trajectory.cpp:112:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 113,
    "function": null,
    "comment": "trajectory.cpp:113:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 114,
    "function": null,
    "comment": "trajectory.cpp:114:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "trajectory.cpp",
    "line": 128,
    "function": null,
    "comment": "trajectory.cpp:128:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 131,
    "function": null,
    "comment": "trajectory.cpp:131:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 134,
    "function": null,
    "comment": "trajectory.cpp:134:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "trajectory.cpp",
    "line": 134,
    "function": null,
    "comment": "trajectory.cpp:134:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 135,
    "function": null,
    "comment": "trajectory.cpp:135:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.cpp",
    "line": 136,
    "function": null,
    "comment": "trajectory.cpp:136:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "trajectory.cpp",
    "line": 136,
    "function": null,
    "comment": "trajectory.cpp:136:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "trajectory.cpp",
    "line": 138,
    "function": null,
    "comment": "trajectory.cpp:138:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.cpp",
    "line": 139,
    "function": null,
    "comment": "trajectory.cpp:139:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "trajectory.cpp",
    "line": 139,
    "function": null,
    "comment": "trajectory.cpp:139:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "trajectory.cpp",
    "line": 139,
    "function": null,
    "comment": "trajectory.cpp:139:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "trajectory.cpp",
    "line": 140,
    "function": null,
    "comment": "trajectory.cpp:140:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "trajectory.cpp",
    "line": 142,
    "function": null,
    "comment": "trajectory.cpp:142:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "trajectory.cpp",
    "line": 142,
    "function": null,
    "comment": "trajectory.cpp:142:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 142,
    "function": null,
    "comment": "trajectory.cpp:142:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space after a semicolon, if it does not end the line.",
    "file": "trajectory.cpp",
    "line": 142,
    "function": null,
    "comment": "trajectory.cpp:142:  Missing space after ;  [whitespace/semicolon] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 143,
    "function": null,
    "comment": "trajectory.cpp:143:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "trajectory.cpp",
    "line": 146,
    "function": null,
    "comment": "trajectory.cpp:146:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "trajectory.cpp",
    "line": 146,
    "function": null,
    "comment": "trajectory.cpp:146:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 146,
    "function": null,
    "comment": "trajectory.cpp:146:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 147,
    "function": null,
    "comment": "trajectory.cpp:147:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "trajectory.cpp",
    "line": 157,
    "function": null,
    "comment": "trajectory.cpp:157:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "trajectory.cpp",
    "line": 161,
    "function": null,
    "comment": "trajectory.cpp:161:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 164,
    "function": null,
    "comment": "trajectory.cpp:164:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 165,
    "function": null,
    "comment": "trajectory.cpp:165:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 166,
    "function": null,
    "comment": "trajectory.cpp:166:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 174,
    "function": null,
    "comment": "trajectory.cpp:174:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 175,
    "function": null,
    "comment": "trajectory.cpp:175:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 176,
    "function": null,
    "comment": "trajectory.cpp:176:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.cpp",
    "line": 177,
    "function": null,
    "comment": "trajectory.cpp:177:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "trajectory.cpp",
    "line": 178,
    "function": null,
    "comment": "trajectory.cpp:178:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "trajectory.cpp",
    "line": 180,
    "function": null,
    "comment": "trajectory.cpp:180:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 181,
    "function": null,
    "comment": "trajectory.cpp:181:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.cpp",
    "line": 187,
    "function": null,
    "comment": "trajectory.cpp:187:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 188,
    "function": null,
    "comment": "trajectory.cpp:188:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 193,
    "function": null,
    "comment": "trajectory.cpp:193:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "trajectory.cpp",
    "line": 193,
    "function": null,
    "comment": "trajectory.cpp:193:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 194,
    "function": null,
    "comment": "trajectory.cpp:194:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.cpp",
    "line": 195,
    "function": null,
    "comment": "trajectory.cpp:195:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "trajectory.cpp",
    "line": 195,
    "function": null,
    "comment": "trajectory.cpp:195:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 198,
    "function": null,
    "comment": "trajectory.cpp:198:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "trajectory.cpp",
    "line": 198,
    "function": null,
    "comment": "trajectory.cpp:198:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 199,
    "function": null,
    "comment": "trajectory.cpp:199:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.cpp",
    "line": 200,
    "function": null,
    "comment": "trajectory.cpp:200:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "trajectory.cpp",
    "line": 200,
    "function": null,
    "comment": "trajectory.cpp:200:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "trajectory.cpp",
    "line": 202,
    "function": null,
    "comment": "trajectory.cpp:202:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "trajectory.cpp",
    "line": 204,
    "function": null,
    "comment": "trajectory.cpp:204:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "trajectory.cpp",
    "line": 204,
    "function": null,
    "comment": "trajectory.cpp:204:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 204,
    "function": null,
    "comment": "trajectory.cpp:204:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space after a semicolon, if it does not end the line.",
    "file": "trajectory.cpp",
    "line": 204,
    "function": null,
    "comment": "trajectory.cpp:204:  Missing space after ;  [whitespace/semicolon] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 205,
    "function": null,
    "comment": "trajectory.cpp:205:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "trajectory.cpp",
    "line": 208,
    "function": null,
    "comment": "trajectory.cpp:208:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "trajectory.cpp",
    "line": 208,
    "function": null,
    "comment": "trajectory.cpp:208:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 208,
    "function": null,
    "comment": "trajectory.cpp:208:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 209,
    "function": null,
    "comment": "trajectory.cpp:209:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.cpp",
    "line": 219,
    "function": null,
    "comment": "trajectory.cpp:219:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 220,
    "function": null,
    "comment": "trajectory.cpp:220:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 225,
    "function": null,
    "comment": "trajectory.cpp:225:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "trajectory.cpp",
    "line": 225,
    "function": null,
    "comment": "trajectory.cpp:225:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 226,
    "function": null,
    "comment": "trajectory.cpp:226:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.cpp",
    "line": 227,
    "function": null,
    "comment": "trajectory.cpp:227:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "trajectory.cpp",
    "line": 227,
    "function": null,
    "comment": "trajectory.cpp:227:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 230,
    "function": null,
    "comment": "trajectory.cpp:230:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "trajectory.cpp",
    "line": 230,
    "function": null,
    "comment": "trajectory.cpp:230:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 231,
    "function": null,
    "comment": "trajectory.cpp:231:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.cpp",
    "line": 232,
    "function": null,
    "comment": "trajectory.cpp:232:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "trajectory.cpp",
    "line": 232,
    "function": null,
    "comment": "trajectory.cpp:232:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "trajectory.cpp",
    "line": 234,
    "function": null,
    "comment": "trajectory.cpp:234:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "trajectory.cpp",
    "line": 236,
    "function": null,
    "comment": "trajectory.cpp:236:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "trajectory.cpp",
    "line": 236,
    "function": null,
    "comment": "trajectory.cpp:236:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 236,
    "function": null,
    "comment": "trajectory.cpp:236:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space after a semicolon, if it does not end the line.",
    "file": "trajectory.cpp",
    "line": 236,
    "function": null,
    "comment": "trajectory.cpp:236:  Missing space after ;  [whitespace/semicolon] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 237,
    "function": null,
    "comment": "trajectory.cpp:237:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "trajectory.cpp",
    "line": 240,
    "function": null,
    "comment": "trajectory.cpp:240:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "trajectory.cpp",
    "line": 240,
    "function": null,
    "comment": "trajectory.cpp:240:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 240,
    "function": null,
    "comment": "trajectory.cpp:240:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 241,
    "function": null,
    "comment": "trajectory.cpp:241:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 251,
    "function": null,
    "comment": "trajectory.cpp:251:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "trajectory.cpp",
    "line": 256,
    "function": null,
    "comment": "trajectory.cpp:256:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 262,
    "function": null,
    "comment": "trajectory.cpp:262:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 265,
    "function": null,
    "comment": "trajectory.cpp:265:  Missing space before ( in while(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "trajectory.cpp",
    "line": 271,
    "function": null,
    "comment": "trajectory.cpp:271:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 273,
    "function": null,
    "comment": "trajectory.cpp:273:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 274,
    "function": null,
    "comment": "trajectory.cpp:274:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 283,
    "function": null,
    "comment": "trajectory.cpp:283:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 288,
    "function": null,
    "comment": "trajectory.cpp:288:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 291,
    "function": null,
    "comment": "trajectory.cpp:291:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 292,
    "function": null,
    "comment": "trajectory.cpp:292:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "trajectory.cpp",
    "line": 296,
    "function": null,
    "comment": "trajectory.cpp:296:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 296,
    "function": null,
    "comment": "trajectory.cpp:296:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 297,
    "function": null,
    "comment": "trajectory.cpp:297:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 302,
    "function": null,
    "comment": "trajectory.cpp:302:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "trajectory.cpp",
    "line": 302,
    "function": null,
    "comment": "trajectory.cpp:302:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 303,
    "function": null,
    "comment": "trajectory.cpp:303:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.cpp",
    "line": 304,
    "function": null,
    "comment": "trajectory.cpp:304:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "trajectory.cpp",
    "line": 304,
    "function": null,
    "comment": "trajectory.cpp:304:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "trajectory.cpp",
    "line": 306,
    "function": null,
    "comment": "trajectory.cpp:306:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 309,
    "function": null,
    "comment": "trajectory.cpp:309:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "trajectory.cpp",
    "line": 310,
    "function": null,
    "comment": "trajectory.cpp:310:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 311,
    "function": null,
    "comment": "trajectory.cpp:311:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "trajectory.cpp",
    "line": 312,
    "function": null,
    "comment": "trajectory.cpp:312:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 313,
    "function": null,
    "comment": "trajectory.cpp:313:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "trajectory.cpp",
    "line": 314,
    "function": null,
    "comment": "trajectory.cpp:314:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "trajectory.cpp",
    "line": 316,
    "function": null,
    "comment": "trajectory.cpp:316:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 350,
    "function": null,
    "comment": "trajectory.cpp:350:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 351,
    "function": null,
    "comment": "trajectory.cpp:351:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "trajectory.cpp",
    "line": 351,
    "function": null,
    "comment": "trajectory.cpp:351:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 352,
    "function": null,
    "comment": "trajectory.cpp:352:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.cpp",
    "line": 353,
    "function": null,
    "comment": "trajectory.cpp:353:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "trajectory.cpp",
    "line": 353,
    "function": null,
    "comment": "trajectory.cpp:353:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "trajectory.cpp",
    "line": 357,
    "function": null,
    "comment": "trajectory.cpp:357:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 357,
    "function": null,
    "comment": "trajectory.cpp:357:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "trajectory.cpp",
    "line": 358,
    "function": null,
    "comment": "trajectory.cpp:358:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 366,
    "function": null,
    "comment": "trajectory.cpp:366:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 367,
    "function": null,
    "comment": "trajectory.cpp:367:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "trajectory.cpp",
    "line": 367,
    "function": null,
    "comment": "trajectory.cpp:367:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 368,
    "function": null,
    "comment": "trajectory.cpp:368:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.cpp",
    "line": 369,
    "function": null,
    "comment": "trajectory.cpp:369:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "trajectory.cpp",
    "line": 369,
    "function": null,
    "comment": "trajectory.cpp:369:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "trajectory.cpp",
    "line": 373,
    "function": null,
    "comment": "trajectory.cpp:373:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 373,
    "function": null,
    "comment": "trajectory.cpp:373:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "trajectory.cpp",
    "line": 374,
    "function": null,
    "comment": "trajectory.cpp:374:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 382,
    "function": null,
    "comment": "trajectory.cpp:382:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 384,
    "function": null,
    "comment": "trajectory.cpp:384:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 386,
    "function": null,
    "comment": "trajectory.cpp:386:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 388,
    "function": null,
    "comment": "trajectory.cpp:388:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.cpp",
    "line": 391,
    "function": null,
    "comment": "trajectory.cpp:391:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "trajectory.cpp",
    "line": 391,
    "function": null,
    "comment": "trajectory.cpp:391:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 397,
    "function": null,
    "comment": "trajectory.cpp:397:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 411,
    "function": null,
    "comment": "trajectory.cpp:411:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "trajectory.cpp",
    "line": 411,
    "function": null,
    "comment": "trajectory.cpp:411:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 412,
    "function": null,
    "comment": "trajectory.cpp:412:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.cpp",
    "line": 413,
    "function": null,
    "comment": "trajectory.cpp:413:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "trajectory.cpp",
    "line": 417,
    "function": null,
    "comment": "trajectory.cpp:417:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 417,
    "function": null,
    "comment": "trajectory.cpp:417:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "trajectory.cpp",
    "line": 417,
    "function": null,
    "comment": "trajectory.cpp:417:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 418,
    "function": null,
    "comment": "trajectory.cpp:418:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "trajectory.cpp",
    "line": 420,
    "function": null,
    "comment": "trajectory.cpp:420:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "trajectory.cpp",
    "line": 426,
    "function": null,
    "comment": "trajectory.cpp:426:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 426,
    "function": null,
    "comment": "trajectory.cpp:426:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 427,
    "function": null,
    "comment": "trajectory.cpp:427:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "trajectory.cpp",
    "line": 429,
    "function": null,
    "comment": "trajectory.cpp:429:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "trajectory.cpp",
    "line": 430,
    "function": null,
    "comment": "trajectory.cpp:430:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "trajectory.cpp",
    "line": 430,
    "function": null,
    "comment": "trajectory.cpp:430:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 445,
    "function": null,
    "comment": "trajectory.cpp:445:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 458,
    "function": null,
    "comment": "trajectory.cpp:458:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "trajectory.cpp",
    "line": 458,
    "function": null,
    "comment": "trajectory.cpp:458:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 459,
    "function": null,
    "comment": "trajectory.cpp:459:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.cpp",
    "line": 460,
    "function": null,
    "comment": "trajectory.cpp:460:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "trajectory.cpp",
    "line": 464,
    "function": null,
    "comment": "trajectory.cpp:464:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 464,
    "function": null,
    "comment": "trajectory.cpp:464:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "trajectory.cpp",
    "line": 464,
    "function": null,
    "comment": "trajectory.cpp:464:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 465,
    "function": null,
    "comment": "trajectory.cpp:465:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "trajectory.cpp",
    "line": 467,
    "function": null,
    "comment": "trajectory.cpp:467:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "trajectory.cpp",
    "line": 472,
    "function": null,
    "comment": "trajectory.cpp:472:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 472,
    "function": null,
    "comment": "trajectory.cpp:472:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 473,
    "function": null,
    "comment": "trajectory.cpp:473:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "trajectory.cpp",
    "line": 474,
    "function": null,
    "comment": "trajectory.cpp:474:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.cpp",
    "line": 477,
    "function": null,
    "comment": "trajectory.cpp:477:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.cpp",
    "line": 478,
    "function": null,
    "comment": "trajectory.cpp:478:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.cpp",
    "line": 479,
    "function": null,
    "comment": "trajectory.cpp:479:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.cpp",
    "line": 480,
    "function": null,
    "comment": "trajectory.cpp:480:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "trajectory.cpp",
    "line": 480,
    "function": null,
    "comment": "trajectory.cpp:480:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 498,
    "function": null,
    "comment": "trajectory.cpp:498:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use 2 spaces for indentation.",
    "file": "trajectory.cpp",
    "line": 499,
    "function": null,
    "comment": "trajectory.cpp:499:  Weird number of spaces at line-start.  Are you using a 2-space indent?  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "trajectory.cpp",
    "line": 499,
    "function": null,
    "comment": "trajectory.cpp:499:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.cpp",
    "line": 511,
    "function": null,
    "comment": "trajectory.cpp:511:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 511,
    "function": null,
    "comment": "trajectory.cpp:511:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "trajectory.cpp",
    "line": 511,
    "function": null,
    "comment": "trajectory.cpp:511:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 512,
    "function": null,
    "comment": "trajectory.cpp:512:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.cpp",
    "line": 513,
    "function": null,
    "comment": "trajectory.cpp:513:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "trajectory.cpp",
    "line": 517,
    "function": null,
    "comment": "trajectory.cpp:517:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 517,
    "function": null,
    "comment": "trajectory.cpp:517:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "trajectory.cpp",
    "line": 517,
    "function": null,
    "comment": "trajectory.cpp:517:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 518,
    "function": null,
    "comment": "trajectory.cpp:518:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "trajectory.cpp",
    "line": 520,
    "function": null,
    "comment": "trajectory.cpp:520:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "trajectory.cpp",
    "line": 524,
    "function": null,
    "comment": "trajectory.cpp:524:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 524,
    "function": null,
    "comment": "trajectory.cpp:524:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 525,
    "function": null,
    "comment": "trajectory.cpp:525:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "trajectory.cpp",
    "line": 526,
    "function": null,
    "comment": "trajectory.cpp:526:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Statements that are not part of an if body should have an indentation level equal to or less than the if statement.",
    "file": "trajectory.cpp",
    "line": 528,
    "function": null,
    "comment": "trajectory.cpp:528:  Else clause should be indented at the same level as if. Ambiguous nested if/else chains require braces.  [readability/braces] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","indentation","if-else","ambiguous-indentation"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 528,
    "function": null,
    "comment": "trajectory.cpp:528:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.cpp",
    "line": 532,
    "function": null,
    "comment": "trajectory.cpp:532:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "trajectory.cpp",
    "line": 533,
    "function": null,
    "comment": "trajectory.cpp:533:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "trajectory.cpp",
    "line": 539,
    "function": null,
    "comment": "trajectory.cpp:539:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "trajectory.cpp",
    "line": 555,
    "function": null,
    "comment": "trajectory.cpp:555:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 556,
    "function": null,
    "comment": "trajectory.cpp:556:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use 2 spaces for indentation.",
    "file": "trajectory.cpp",
    "line": 557,
    "function": null,
    "comment": "trajectory.cpp:557:  Weird number of spaces at line-start.  Are you using a 2-space indent?  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "trajectory.cpp",
    "line": 557,
    "function": null,
    "comment": "trajectory.cpp:557:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Use 2 spaces for indentation.",
    "file": "trajectory.cpp",
    "line": 558,
    "function": null,
    "comment": "trajectory.cpp:558:  Weird number of spaces at line-start.  Are you using a 2-space indent?  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","indentation"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 558,
    "function": null,
    "comment": "trajectory.cpp:558:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Use 2 spaces for indentation.",
    "file": "trajectory.cpp",
    "line": 561,
    "function": null,
    "comment": "trajectory.cpp:561:  Weird number of spaces at line-start.  Are you using a 2-space indent?  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","indentation"]
  },
  {
    "rule": "Use 2 spaces for indentation.",
    "file": "trajectory.cpp",
    "line": 562,
    "function": null,
    "comment": "trajectory.cpp:562:  Weird number of spaces at line-start.  Are you using a 2-space indent?  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","indentation"]
  },
  {
    "rule": "Use 2 spaces for indentation.",
    "file": "trajectory.cpp",
    "line": 563,
    "function": null,
    "comment": "trajectory.cpp:563:  Weird number of spaces at line-start.  Are you using a 2-space indent?  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","indentation"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 563,
    "function": null,
    "comment": "trajectory.cpp:563:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Use 2 spaces for indentation.",
    "file": "trajectory.cpp",
    "line": 565,
    "function": null,
    "comment": "trajectory.cpp:565:  Weird number of spaces at line-start.  Are you using a 2-space indent?  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","indentation"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 565,
    "function": null,
    "comment": "trajectory.cpp:565:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Use 2 spaces for indentation.",
    "file": "trajectory.cpp",
    "line": 567,
    "function": null,
    "comment": "trajectory.cpp:567:  Weird number of spaces at line-start.  Are you using a 2-space indent?  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "trajectory.cpp",
    "line": 567,
    "function": null,
    "comment": "trajectory.cpp:567:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.cpp",
    "line": 571,
    "function": null,
    "comment": "trajectory.cpp:571:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 572,
    "function": null,
    "comment": "trajectory.cpp:572:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "trajectory.cpp",
    "line": 576,
    "function": null,
    "comment": "trajectory.cpp:576:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 576,
    "function": null,
    "comment": "trajectory.cpp:576:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 577,
    "function": null,
    "comment": "trajectory.cpp:577:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 582,
    "function": null,
    "comment": "trajectory.cpp:582:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "trajectory.cpp",
    "line": 584,
    "function": null,
    "comment": "trajectory.cpp:584:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.cpp",
    "line": 591,
    "function": null,
    "comment": "trajectory.cpp:591:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 592,
    "function": null,
    "comment": "trajectory.cpp:592:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "trajectory.cpp",
    "line": 594,
    "function": null,
    "comment": "trajectory.cpp:594:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 594,
    "function": null,
    "comment": "trajectory.cpp:594:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 595,
    "function": null,
    "comment": "trajectory.cpp:595:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "trajectory.cpp",
    "line": 601,
    "function": null,
    "comment": "trajectory.cpp:601:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 602,
    "function": null,
    "comment": "trajectory.cpp:602:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 603,
    "function": null,
    "comment": "trajectory.cpp:603:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.cpp",
    "line": 604,
    "function": null,
    "comment": "trajectory.cpp:604:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "trajectory.cpp",
    "line": 607,
    "function": null,
    "comment": "trajectory.cpp:607:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 607,
    "function": null,
    "comment": "trajectory.cpp:607:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 608,
    "function": null,
    "comment": "trajectory.cpp:608:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.cpp",
    "line": 610,
    "function": null,
    "comment": "trajectory.cpp:610:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "trajectory.cpp",
    "line": 613,
    "function": null,
    "comment": "trajectory.cpp:613:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 614,
    "function": null,
    "comment": "trajectory.cpp:614:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.cpp",
    "line": 616,
    "function": null,
    "comment": "trajectory.cpp:616:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 620,
    "function": null,
    "comment": "trajectory.cpp:620:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.cpp",
    "line": 628,
    "function": null,
    "comment": "trajectory.cpp:628:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 629,
    "function": null,
    "comment": "trajectory.cpp:629:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "trajectory.cpp",
    "line": 631,
    "function": null,
    "comment": "trajectory.cpp:631:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 631,
    "function": null,
    "comment": "trajectory.cpp:631:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 632,
    "function": null,
    "comment": "trajectory.cpp:632:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.cpp",
    "line": 633,
    "function": null,
    "comment": "trajectory.cpp:633:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.cpp",
    "line": 634,
    "function": null,
    "comment": "trajectory.cpp:634:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 636,
    "function": null,
    "comment": "trajectory.cpp:636:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "trajectory.cpp",
    "line": 638,
    "function": null,
    "comment": "trajectory.cpp:638:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 645,
    "function": null,
    "comment": "trajectory.cpp:645:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 650,
    "function": null,
    "comment": "trajectory.cpp:650:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 651,
    "function": null,
    "comment": "trajectory.cpp:651:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "trajectory.cpp",
    "line": 651,
    "function": null,
    "comment": "trajectory.cpp:651:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 652,
    "function": null,
    "comment": "trajectory.cpp:652:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.cpp",
    "line": 653,
    "function": null,
    "comment": "trajectory.cpp:653:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 656,
    "function": null,
    "comment": "trajectory.cpp:656:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 663,
    "function": null,
    "comment": "trajectory.cpp:663:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 664,
    "function": null,
    "comment": "trajectory.cpp:664:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 665,
    "function": null,
    "comment": "trajectory.cpp:665:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.cpp",
    "line": 666,
    "function": null,
    "comment": "trajectory.cpp:666:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "trajectory.cpp",
    "line": 673,
    "function": null,
    "comment": "trajectory.cpp:673:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 677,
    "function": null,
    "comment": "trajectory.cpp:677:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 678,
    "function": null,
    "comment": "trajectory.cpp:678:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "trajectory.cpp",
    "line": 678,
    "function": null,
    "comment": "trajectory.cpp:678:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 679,
    "function": null,
    "comment": "trajectory.cpp:679:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.cpp",
    "line": 680,
    "function": null,
    "comment": "trajectory.cpp:680:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 683,
    "function": null,
    "comment": "trajectory.cpp:683:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.cpp",
    "line": 689,
    "function": null,
    "comment": "trajectory.cpp:689:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 690,
    "function": null,
    "comment": "trajectory.cpp:690:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 694,
    "function": null,
    "comment": "trajectory.cpp:694:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 695,
    "function": null,
    "comment": "trajectory.cpp:695:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "trajectory.cpp",
    "line": 696,
    "function": null,
    "comment": "trajectory.cpp:696:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 697,
    "function": null,
    "comment": "trajectory.cpp:697:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 703,
    "function": null,
    "comment": "trajectory.cpp:703:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "trajectory.cpp",
    "line": 705,
    "function": null,
    "comment": "trajectory.cpp:705:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.cpp",
    "line": 711,
    "function": null,
    "comment": "trajectory.cpp:711:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 712,
    "function": null,
    "comment": "trajectory.cpp:712:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 716,
    "function": null,
    "comment": "trajectory.cpp:716:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 717,
    "function": null,
    "comment": "trajectory.cpp:717:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 718,
    "function": null,
    "comment": "trajectory.cpp:718:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.cpp",
    "line": 719,
    "function": null,
    "comment": "trajectory.cpp:719:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "trajectory.cpp",
    "line": 719,
    "function": null,
    "comment": "trajectory.cpp:719:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 725,
    "function": null,
    "comment": "trajectory.cpp:725:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "trajectory.cpp",
    "line": 727,
    "function": null,
    "comment": "trajectory.cpp:727:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.cpp",
    "line": 732,
    "function": null,
    "comment": "trajectory.cpp:732:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 733,
    "function": null,
    "comment": "trajectory.cpp:733:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.cpp",
    "line": 734,
    "function": null,
    "comment": "trajectory.cpp:734:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "trajectory.cpp",
    "line": 736,
    "function": null,
    "comment": "trajectory.cpp:736:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 739,
    "function": null,
    "comment": "trajectory.cpp:739:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "trajectory.cpp",
    "line": 744,
    "function": null,
    "comment": "trajectory.cpp:744:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "trajectory.cpp",
    "line": 746,
    "function": null,
    "comment": "trajectory.cpp:746:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 749,
    "function": null,
    "comment": "trajectory.cpp:749:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 750,
    "function": null,
    "comment": "trajectory.cpp:750:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "trajectory.cpp",
    "line": 750,
    "function": null,
    "comment": "trajectory.cpp:750:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 751,
    "function": null,
    "comment": "trajectory.cpp:751:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "trajectory.cpp",
    "line": 752,
    "function": null,
    "comment": "trajectory.cpp:752:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "trajectory.cpp",
    "line": 753,
    "function": null,
    "comment": "trajectory.cpp:753:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "trajectory.cpp",
    "line": 756,
    "function": null,
    "comment": "trajectory.cpp:756:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 757,
    "function": null,
    "comment": "trajectory.cpp:757:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 762,
    "function": null,
    "comment": "trajectory.cpp:762:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 765,
    "function": null,
    "comment": "trajectory.cpp:765:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "trajectory.cpp",
    "line": 768,
    "function": null,
    "comment": "trajectory.cpp:768:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.cpp",
    "line": 772,
    "function": null,
    "comment": "trajectory.cpp:772:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 773,
    "function": null,
    "comment": "trajectory.cpp:773:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 777,
    "function": null,
    "comment": "trajectory.cpp:777:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 778,
    "function": null,
    "comment": "trajectory.cpp:778:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 779,
    "function": null,
    "comment": "trajectory.cpp:779:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.cpp",
    "line": 780,
    "function": null,
    "comment": "trajectory.cpp:780:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "trajectory.cpp",
    "line": 780,
    "function": null,
    "comment": "trajectory.cpp:780:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 784,
    "function": null,
    "comment": "trajectory.cpp:784:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "trajectory.cpp",
    "line": 786,
    "function": null,
    "comment": "trajectory.cpp:786:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.cpp",
    "line": 792,
    "function": null,
    "comment": "trajectory.cpp:792:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 793,
    "function": null,
    "comment": "trajectory.cpp:793:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "trajectory.cpp",
    "line": 794,
    "function": null,
    "comment": "trajectory.cpp:794:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "trajectory.cpp",
    "line": 796,
    "function": null,
    "comment": "trajectory.cpp:796:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "trajectory.cpp",
    "line": 798,
    "function": null,
    "comment": "trajectory.cpp:798:  Missing spaces around >  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 798,
    "function": null,
    "comment": "trajectory.cpp:798:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 804,
    "function": null,
    "comment": "trajectory.cpp:804:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 811,
    "function": null,
    "comment": "trajectory.cpp:811:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "trajectory.cpp",
    "line": 813,
    "function": null,
    "comment": "trajectory.cpp:813:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 817,
    "function": null,
    "comment": "trajectory.cpp:817:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 819,
    "function": null,
    "comment": "trajectory.cpp:819:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 821,
    "function": null,
    "comment": "trajectory.cpp:821:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 823,
    "function": null,
    "comment": "trajectory.cpp:823:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 826,
    "function": null,
    "comment": "trajectory.cpp:826:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "trajectory.cpp",
    "line": 827,
    "function": null,
    "comment": "trajectory.cpp:827:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 834,
    "function": null,
    "comment": "trajectory.cpp:834:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 846,
    "function": null,
    "comment": "trajectory.cpp:846:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 847,
    "function": null,
    "comment": "trajectory.cpp:847:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 848,
    "function": null,
    "comment": "trajectory.cpp:848:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "trajectory.cpp",
    "line": 848,
    "function": null,
    "comment": "trajectory.cpp:848:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 849,
    "function": null,
    "comment": "trajectory.cpp:849:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.cpp",
    "line": 850,
    "function": null,
    "comment": "trajectory.cpp:850:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "trajectory.cpp",
    "line": 854,
    "function": null,
    "comment": "trajectory.cpp:854:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 854,
    "function": null,
    "comment": "trajectory.cpp:854:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "trajectory.cpp",
    "line": 854,
    "function": null,
    "comment": "trajectory.cpp:854:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 855,
    "function": null,
    "comment": "trajectory.cpp:855:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "trajectory.cpp",
    "line": 858,
    "function": null,
    "comment": "trajectory.cpp:858:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 858,
    "function": null,
    "comment": "trajectory.cpp:858:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 859,
    "function": null,
    "comment": "trajectory.cpp:859:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "trajectory.cpp",
    "line": 860,
    "function": null,
    "comment": "trajectory.cpp:860:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.cpp",
    "line": 861,
    "function": null,
    "comment": "trajectory.cpp:861:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "trajectory.cpp",
    "line": 861,
    "function": null,
    "comment": "trajectory.cpp:861:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 861,
    "function": null,
    "comment": "trajectory.cpp:861:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "trajectory.cpp",
    "line": 868,
    "function": null,
    "comment": "trajectory.cpp:868:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 868,
    "function": null,
    "comment": "trajectory.cpp:868:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 869,
    "function": null,
    "comment": "trajectory.cpp:869:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "trajectory.cpp",
    "line": 871,
    "function": null,
    "comment": "trajectory.cpp:871:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "trajectory.cpp",
    "line": 871,
    "function": null,
    "comment": "trajectory.cpp:871:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 872,
    "function": null,
    "comment": "trajectory.cpp:872:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 873,
    "function": null,
    "comment": "trajectory.cpp:873:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "trajectory.cpp",
    "line": 893,
    "function": null,
    "comment": "trajectory.cpp:893:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 893,
    "function": null,
    "comment": "trajectory.cpp:893:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "trajectory.cpp",
    "line": 893,
    "function": null,
    "comment": "trajectory.cpp:893:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 894,
    "function": null,
    "comment": "trajectory.cpp:894:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 904,
    "function": null,
    "comment": "trajectory.cpp:904:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 917,
    "function": null,
    "comment": "trajectory.cpp:917:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 918,
    "function": null,
    "comment": "trajectory.cpp:918:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 919,
    "function": null,
    "comment": "trajectory.cpp:919:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "trajectory.cpp",
    "line": 919,
    "function": null,
    "comment": "trajectory.cpp:919:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 920,
    "function": null,
    "comment": "trajectory.cpp:920:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.cpp",
    "line": 921,
    "function": null,
    "comment": "trajectory.cpp:921:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "trajectory.cpp",
    "line": 926,
    "function": null,
    "comment": "trajectory.cpp:926:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 926,
    "function": null,
    "comment": "trajectory.cpp:926:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "trajectory.cpp",
    "line": 926,
    "function": null,
    "comment": "trajectory.cpp:926:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 927,
    "function": null,
    "comment": "trajectory.cpp:927:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "trajectory.cpp",
    "line": 930,
    "function": null,
    "comment": "trajectory.cpp:930:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 930,
    "function": null,
    "comment": "trajectory.cpp:930:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 931,
    "function": null,
    "comment": "trajectory.cpp:931:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "trajectory.cpp",
    "line": 932,
    "function": null,
    "comment": "trajectory.cpp:932:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.cpp",
    "line": 933,
    "function": null,
    "comment": "trajectory.cpp:933:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "trajectory.cpp",
    "line": 933,
    "function": null,
    "comment": "trajectory.cpp:933:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 933,
    "function": null,
    "comment": "trajectory.cpp:933:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "trajectory.cpp",
    "line": 940,
    "function": null,
    "comment": "trajectory.cpp:940:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 940,
    "function": null,
    "comment": "trajectory.cpp:940:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 941,
    "function": null,
    "comment": "trajectory.cpp:941:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "trajectory.cpp",
    "line": 942,
    "function": null,
    "comment": "trajectory.cpp:942:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.cpp",
    "line": 945,
    "function": null,
    "comment": "trajectory.cpp:945:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.cpp",
    "line": 946,
    "function": null,
    "comment": "trajectory.cpp:946:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "trajectory.cpp",
    "line": 946,
    "function": null,
    "comment": "trajectory.cpp:946:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 947,
    "function": null,
    "comment": "trajectory.cpp:947:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 949,
    "function": null,
    "comment": "trajectory.cpp:949:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "trajectory.cpp",
    "line": 965,
    "function": null,
    "comment": "trajectory.cpp:965:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 965,
    "function": null,
    "comment": "trajectory.cpp:965:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "trajectory.cpp",
    "line": 965,
    "function": null,
    "comment": "trajectory.cpp:965:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 973,
    "function": null,
    "comment": "trajectory.cpp:973:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use 2 spaces for indentation.",
    "file": "trajectory.cpp",
    "line": 974,
    "function": null,
    "comment": "trajectory.cpp:974:  Weird number of spaces at line-start.  Are you using a 2-space indent?  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","indentation"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "trajectory.cpp",
    "line": 974,
    "function": null,
    "comment": "trajectory.cpp:974:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Use 2 spaces for indentation.",
    "file": "trajectory.cpp",
    "line": 983,
    "function": null,
    "comment": "trajectory.cpp:983:  Weird number of spaces at line-start.  Are you using a 2-space indent?  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","indentation"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 985,
    "function": null,
    "comment": "trajectory.cpp:985:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 986,
    "function": null,
    "comment": "trajectory.cpp:986:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.cpp",
    "line": 987,
    "function": null,
    "comment": "trajectory.cpp:987:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 987,
    "function": null,
    "comment": "trajectory.cpp:987:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "trajectory.cpp",
    "line": 987,
    "function": null,
    "comment": "trajectory.cpp:987:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 988,
    "function": null,
    "comment": "trajectory.cpp:988:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.cpp",
    "line": 989,
    "function": null,
    "comment": "trajectory.cpp:989:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "trajectory.cpp",
    "line": 994,
    "function": null,
    "comment": "trajectory.cpp:994:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 994,
    "function": null,
    "comment": "trajectory.cpp:994:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "trajectory.cpp",
    "line": 994,
    "function": null,
    "comment": "trajectory.cpp:994:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 995,
    "function": null,
    "comment": "trajectory.cpp:995:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "trajectory.cpp",
    "line": 998,
    "function": null,
    "comment": "trajectory.cpp:998:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 998,
    "function": null,
    "comment": "trajectory.cpp:998:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 999,
    "function": null,
    "comment": "trajectory.cpp:999:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "trajectory.cpp",
    "line": 1000,
    "function": null,
    "comment": "trajectory.cpp:1000:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 1001,
    "function": null,
    "comment": "trajectory.cpp:1001:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "trajectory.cpp",
    "line": 1008,
    "function": null,
    "comment": "trajectory.cpp:1008:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 1008,
    "function": null,
    "comment": "trajectory.cpp:1008:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 1009,
    "function": null,
    "comment": "trajectory.cpp:1009:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "trajectory.cpp",
    "line": 1010,
    "function": null,
    "comment": "trajectory.cpp:1010:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 1011,
    "function": null,
    "comment": "trajectory.cpp:1011:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "trajectory.cpp",
    "line": 1016,
    "function": null,
    "comment": "trajectory.cpp:1016:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "trajectory.cpp",
    "line": 1022,
    "function": null,
    "comment": "trajectory.cpp:1022:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.cpp",
    "line": 1033,
    "function": null,
    "comment": "trajectory.cpp:1033:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "trajectory.cpp",
    "line": 1033,
    "function": null,
    "comment": "trajectory.cpp:1033:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "trajectory.cpp",
    "line": 1040,
    "function": null,
    "comment": "trajectory.cpp:1040:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 1040,
    "function": null,
    "comment": "trajectory.cpp:1040:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "trajectory.cpp",
    "line": 1040,
    "function": null,
    "comment": "trajectory.cpp:1040:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 1047,
    "function": null,
    "comment": "trajectory.cpp:1047:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "trajectory.cpp",
    "line": 1048,
    "function": null,
    "comment": "trajectory.cpp:1048:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 1053,
    "function": null,
    "comment": "trajectory.cpp:1053:  Missing space before ( in while(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 1054,
    "function": null,
    "comment": "trajectory.cpp:1054:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "trajectory.cpp",
    "line": 1055,
    "function": null,
    "comment": "trajectory.cpp:1055:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "trajectory.cpp",
    "line": 1056,
    "function": null,
    "comment": "trajectory.cpp:1056:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "trajectory.cpp",
    "line": 1057,
    "function": null,
    "comment": "trajectory.cpp:1057:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 1057,
    "function": null,
    "comment": "trajectory.cpp:1057:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 1058,
    "function": null,
    "comment": "trajectory.cpp:1058:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "trajectory.cpp",
    "line": 1059,
    "function": null,
    "comment": "trajectory.cpp:1059:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "trajectory.cpp",
    "line": 1061,
    "function": null,
    "comment": "trajectory.cpp:1061:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 1061,
    "function": null,
    "comment": "trajectory.cpp:1061:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 1062,
    "function": null,
    "comment": "trajectory.cpp:1062:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "trajectory.cpp",
    "line": 1063,
    "function": null,
    "comment": "trajectory.cpp:1063:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "trajectory.cpp",
    "line": 1065,
    "function": null,
    "comment": "trajectory.cpp:1065:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory.cpp",
    "line": 1073,
    "function": null,
    "comment": "trajectory.cpp:1073:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 1074,
    "function": null,
    "comment": "trajectory.cpp:1074:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "trajectory.cpp",
    "line": 1078,
    "function": null,
    "comment": "trajectory.cpp:1078:  Missing space before ( in while(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory.cpp",
    "line": 1079,
    "function": null,
    "comment": "trajectory.cpp:1079:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "trajectory.cpp",
    "line": 1080,
    "function": null,
    "comment": "trajectory.cpp:1080:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "trajectory.cpp",
    "line": 1046,
    "function": null,
    "comment": "trajectory.cpp:1046:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "trajectory.cpp",
    "line": 1022,
    "function": null,
    "comment": "trajectory.cpp:1022:  Add #include <algorithm> for max  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "trajectory.cpp",
    "line": 1073,
    "function": null,
    "comment": "trajectory.cpp:1073:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.cpp",
    "line": 41,
    "function": null,
    "comment": "pr2_base_controller.cpp:41:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "pr2_base_controller.cpp",
    "line": 41,
    "function": null,
    "comment": "pr2_base_controller.cpp:41:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "pr2_base_controller.cpp",
    "line": 43,
    "function": null,
    "comment": "pr2_base_controller.cpp:43:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Storage class should come before the type.",
    "file": "pr2_base_controller.cpp",
    "line": 45,
    "function": null,
    "comment": "pr2_base_controller.cpp:45:  Storage class (static, extern, typedef, etc) should be first.  [build/storage_class] [5]",
    "tags": ["code-standards","google-cpp","invalid-code","storage-class"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller.cpp",
    "line": 48,
    "function": null,
    "comment": "pr2_base_controller.cpp:48:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "pr2_base_controller.cpp",
    "line": 49,
    "function": null,
    "comment": "pr2_base_controller.cpp:49:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller.cpp",
    "line": 69,
    "function": null,
    "comment": "pr2_base_controller.cpp:69:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.cpp",
    "line": 74,
    "function": null,
    "comment": "pr2_base_controller.cpp:74:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller.cpp",
    "line": 75,
    "function": null,
    "comment": "pr2_base_controller.cpp:75:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller.cpp",
    "line": 76,
    "function": null,
    "comment": "pr2_base_controller.cpp:76:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_base_controller.cpp",
    "line": 76,
    "function": null,
    "comment": "pr2_base_controller.cpp:76:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.cpp",
    "line": 79,
    "function": null,
    "comment": "pr2_base_controller.cpp:79:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "pr2_base_controller.cpp",
    "line": 90,
    "function": null,
    "comment": "pr2_base_controller.cpp:90:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.cpp",
    "line": 91,
    "function": null,
    "comment": "pr2_base_controller.cpp:91:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_base_controller.cpp",
    "line": 91,
    "function": null,
    "comment": "pr2_base_controller.cpp:91:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.cpp",
    "line": 92,
    "function": null,
    "comment": "pr2_base_controller.cpp:92:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "pr2_base_controller.cpp",
    "line": 92,
    "function": null,
    "comment": "pr2_base_controller.cpp:92:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "pr2_base_controller.cpp",
    "line": 92,
    "function": null,
    "comment": "pr2_base_controller.cpp:92:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.cpp",
    "line": 93,
    "function": null,
    "comment": "pr2_base_controller.cpp:93:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.cpp",
    "line": 94,
    "function": null,
    "comment": "pr2_base_controller.cpp:94:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.cpp",
    "line": 95,
    "function": null,
    "comment": "pr2_base_controller.cpp:95:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "pr2_base_controller.cpp",
    "line": 95,
    "function": null,
    "comment": "pr2_base_controller.cpp:95:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "pr2_base_controller.cpp",
    "line": 95,
    "function": null,
    "comment": "pr2_base_controller.cpp:95:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_base_controller.cpp",
    "line": 99,
    "function": null,
    "comment": "pr2_base_controller.cpp:99:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller.cpp",
    "line": 100,
    "function": null,
    "comment": "pr2_base_controller.cpp:100:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller.cpp",
    "line": 101,
    "function": null,
    "comment": "pr2_base_controller.cpp:101:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "pr2_base_controller.cpp",
    "line": 105,
    "function": null,
    "comment": "pr2_base_controller.cpp:105:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller.cpp",
    "line": 106,
    "function": null,
    "comment": "pr2_base_controller.cpp:106:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.cpp",
    "line": 111,
    "function": null,
    "comment": "pr2_base_controller.cpp:111:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.cpp",
    "line": 112,
    "function": null,
    "comment": "pr2_base_controller.cpp:112:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "pr2_base_controller.cpp",
    "line": 114,
    "function": null,
    "comment": "pr2_base_controller.cpp:114:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller.cpp",
    "line": 117,
    "function": null,
    "comment": "pr2_base_controller.cpp:117:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller.cpp",
    "line": 118,
    "function": null,
    "comment": "pr2_base_controller.cpp:118:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.cpp",
    "line": 121,
    "function": null,
    "comment": "pr2_base_controller.cpp:121:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller.cpp",
    "line": 121,
    "function": null,
    "comment": "pr2_base_controller.cpp:121:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller.cpp",
    "line": 122,
    "function": null,
    "comment": "pr2_base_controller.cpp:122:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.cpp",
    "line": 123,
    "function": null,
    "comment": "pr2_base_controller.cpp:123:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_base_controller.cpp",
    "line": 123,
    "function": null,
    "comment": "pr2_base_controller.cpp:123:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.cpp",
    "line": 127,
    "function": null,
    "comment": "pr2_base_controller.cpp:127:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller.cpp",
    "line": 127,
    "function": null,
    "comment": "pr2_base_controller.cpp:127:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller.cpp",
    "line": 128,
    "function": null,
    "comment": "pr2_base_controller.cpp:128:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.cpp",
    "line": 129,
    "function": null,
    "comment": "pr2_base_controller.cpp:129:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_base_controller.cpp",
    "line": 129,
    "function": null,
    "comment": "pr2_base_controller.cpp:129:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.cpp",
    "line": 133,
    "function": null,
    "comment": "pr2_base_controller.cpp:133:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller.cpp",
    "line": 133,
    "function": null,
    "comment": "pr2_base_controller.cpp:133:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller.cpp",
    "line": 134,
    "function": null,
    "comment": "pr2_base_controller.cpp:134:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.cpp",
    "line": 135,
    "function": null,
    "comment": "pr2_base_controller.cpp:135:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_base_controller.cpp",
    "line": 135,
    "function": null,
    "comment": "pr2_base_controller.cpp:135:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller.cpp",
    "line": 139,
    "function": null,
    "comment": "pr2_base_controller.cpp:139:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.cpp",
    "line": 141,
    "function": null,
    "comment": "pr2_base_controller.cpp:141:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "pr2_base_controller.cpp",
    "line": 145,
    "function": null,
    "comment": "pr2_base_controller.cpp:145:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller.cpp",
    "line": 147,
    "function": null,
    "comment": "pr2_base_controller.cpp:147:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller.cpp",
    "line": 148,
    "function": null,
    "comment": "pr2_base_controller.cpp:148:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.cpp",
    "line": 150,
    "function": null,
    "comment": "pr2_base_controller.cpp:150:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller.cpp",
    "line": 151,
    "function": null,
    "comment": "pr2_base_controller.cpp:151:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_base_controller.cpp",
    "line": 151,
    "function": null,
    "comment": "pr2_base_controller.cpp:151:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller.cpp",
    "line": 152,
    "function": null,
    "comment": "pr2_base_controller.cpp:152:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.cpp",
    "line": 153,
    "function": null,
    "comment": "pr2_base_controller.cpp:153:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_base_controller.cpp",
    "line": 153,
    "function": null,
    "comment": "pr2_base_controller.cpp:153:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Use 2 spaces for indentation.",
    "file": "pr2_base_controller.cpp",
    "line": 157,
    "function": null,
    "comment": "pr2_base_controller.cpp:157:  Weird number of spaces at line-start.  Are you using a 2-space indent?  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.cpp",
    "line": 157,
    "function": null,
    "comment": "pr2_base_controller.cpp:157:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller.cpp",
    "line": 157,
    "function": null,
    "comment": "pr2_base_controller.cpp:157:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Use 2 spaces for indentation.",
    "file": "pr2_base_controller.cpp",
    "line": 158,
    "function": null,
    "comment": "pr2_base_controller.cpp:158:  Weird number of spaces at line-start.  Are you using a 2-space indent?  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","indentation"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller.cpp",
    "line": 158,
    "function": null,
    "comment": "pr2_base_controller.cpp:158:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.cpp",
    "line": 159,
    "function": null,
    "comment": "pr2_base_controller.cpp:159:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_base_controller.cpp",
    "line": 159,
    "function": null,
    "comment": "pr2_base_controller.cpp:159:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Use 2 spaces for indentation.",
    "file": "pr2_base_controller.cpp",
    "line": 161,
    "function": null,
    "comment": "pr2_base_controller.cpp:161:  Weird number of spaces at line-start.  Are you using a 2-space indent?  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","indentation"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller.cpp",
    "line": 163,
    "function": null,
    "comment": "pr2_base_controller.cpp:163:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller.cpp",
    "line": 164,
    "function": null,
    "comment": "pr2_base_controller.cpp:164:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller.cpp",
    "line": 165,
    "function": null,
    "comment": "pr2_base_controller.cpp:165:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller.cpp",
    "line": 166,
    "function": null,
    "comment": "pr2_base_controller.cpp:166:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.cpp",
    "line": 167,
    "function": null,
    "comment": "pr2_base_controller.cpp:167:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "pr2_base_controller.cpp",
    "line": 168,
    "function": null,
    "comment": "pr2_base_controller.cpp:168:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.cpp",
    "line": 172,
    "function": null,
    "comment": "pr2_base_controller.cpp:172:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "pr2_base_controller.cpp",
    "line": 172,
    "function": null,
    "comment": "pr2_base_controller.cpp:172:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "pr2_base_controller.cpp",
    "line": 172,
    "function": null,
    "comment": "pr2_base_controller.cpp:172:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.cpp",
    "line": 173,
    "function": null,
    "comment": "pr2_base_controller.cpp:173:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller.cpp",
    "line": 182,
    "function": null,
    "comment": "pr2_base_controller.cpp:182:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.cpp",
    "line": 183,
    "function": null,
    "comment": "pr2_base_controller.cpp:183:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.cpp",
    "line": 184,
    "function": null,
    "comment": "pr2_base_controller.cpp:184:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_base_controller.cpp",
    "line": 184,
    "function": null,
    "comment": "pr2_base_controller.cpp:184:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller.cpp",
    "line": 185,
    "function": null,
    "comment": "pr2_base_controller.cpp:185:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller.cpp",
    "line": 186,
    "function": null,
    "comment": "pr2_base_controller.cpp:186:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "pr2_base_controller.cpp",
    "line": 190,
    "function": null,
    "comment": "pr2_base_controller.cpp:190:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller.cpp",
    "line": 191,
    "function": null,
    "comment": "pr2_base_controller.cpp:191:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.cpp",
    "line": 195,
    "function": null,
    "comment": "pr2_base_controller.cpp:195:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.cpp",
    "line": 198,
    "function": null,
    "comment": "pr2_base_controller.cpp:198:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_base_controller.cpp",
    "line": 198,
    "function": null,
    "comment": "pr2_base_controller.cpp:198:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.cpp",
    "line": 199,
    "function": null,
    "comment": "pr2_base_controller.cpp:199:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_base_controller.cpp",
    "line": 199,
    "function": null,
    "comment": "pr2_base_controller.cpp:199:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "pr2_base_controller.cpp",
    "line": 203,
    "function": null,
    "comment": "pr2_base_controller.cpp:203:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller.cpp",
    "line": 203,
    "function": null,
    "comment": "pr2_base_controller.cpp:203:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "pr2_base_controller.cpp",
    "line": 203,
    "function": null,
    "comment": "pr2_base_controller.cpp:203:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller.cpp",
    "line": 204,
    "function": null,
    "comment": "pr2_base_controller.cpp:204:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.cpp",
    "line": 205,
    "function": null,
    "comment": "pr2_base_controller.cpp:205:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_base_controller.cpp",
    "line": 205,
    "function": null,
    "comment": "pr2_base_controller.cpp:205:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "pr2_base_controller.cpp",
    "line": 207,
    "function": null,
    "comment": "pr2_base_controller.cpp:207:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller.cpp",
    "line": 207,
    "function": null,
    "comment": "pr2_base_controller.cpp:207:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "pr2_base_controller.cpp",
    "line": 207,
    "function": null,
    "comment": "pr2_base_controller.cpp:207:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller.cpp",
    "line": 208,
    "function": null,
    "comment": "pr2_base_controller.cpp:208:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.cpp",
    "line": 209,
    "function": null,
    "comment": "pr2_base_controller.cpp:209:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_base_controller.cpp",
    "line": 209,
    "function": null,
    "comment": "pr2_base_controller.cpp:209:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.cpp",
    "line": 214,
    "function": null,
    "comment": "pr2_base_controller.cpp:214:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller.cpp",
    "line": 215,
    "function": null,
    "comment": "pr2_base_controller.cpp:215:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller.cpp",
    "line": 222,
    "function": null,
    "comment": "pr2_base_controller.cpp:222:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller.cpp",
    "line": 229,
    "function": null,
    "comment": "pr2_base_controller.cpp:229:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller.cpp",
    "line": 236,
    "function": null,
    "comment": "pr2_base_controller.cpp:236:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller.cpp",
    "line": 242,
    "function": null,
    "comment": "pr2_base_controller.cpp:242:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller.cpp",
    "line": 244,
    "function": null,
    "comment": "pr2_base_controller.cpp:244:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.cpp",
    "line": 247,
    "function": null,
    "comment": "pr2_base_controller.cpp:247:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.cpp",
    "line": 248,
    "function": null,
    "comment": "pr2_base_controller.cpp:248:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.cpp",
    "line": 249,
    "function": null,
    "comment": "pr2_base_controller.cpp:249:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.cpp",
    "line": 253,
    "function": null,
    "comment": "pr2_base_controller.cpp:253:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "pr2_base_controller.cpp",
    "line": 253,
    "function": null,
    "comment": "pr2_base_controller.cpp:253:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller.cpp",
    "line": 254,
    "function": null,
    "comment": "pr2_base_controller.cpp:254:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller.cpp",
    "line": 265,
    "function": null,
    "comment": "pr2_base_controller.cpp:265:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller.cpp",
    "line": 268,
    "function": null,
    "comment": "pr2_base_controller.cpp:268:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller.cpp",
    "line": 269,
    "function": null,
    "comment": "pr2_base_controller.cpp:269:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller.cpp",
    "line": 272,
    "function": null,
    "comment": "pr2_base_controller.cpp:272:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller.cpp",
    "line": 273,
    "function": null,
    "comment": "pr2_base_controller.cpp:273:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller.cpp",
    "line": 279,
    "function": null,
    "comment": "pr2_base_controller.cpp:279:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.cpp",
    "line": 281,
    "function": null,
    "comment": "pr2_base_controller.cpp:281:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller.cpp",
    "line": 283,
    "function": null,
    "comment": "pr2_base_controller.cpp:283:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller.cpp",
    "line": 284,
    "function": null,
    "comment": "pr2_base_controller.cpp:284:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller.cpp",
    "line": 285,
    "function": null,
    "comment": "pr2_base_controller.cpp:285:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller.cpp",
    "line": 286,
    "function": null,
    "comment": "pr2_base_controller.cpp:286:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller.cpp",
    "line": 295,
    "function": null,
    "comment": "pr2_base_controller.cpp:295:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller.cpp",
    "line": 296,
    "function": null,
    "comment": "pr2_base_controller.cpp:296:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "pr2_base_controller.cpp",
    "line": 301,
    "function": null,
    "comment": "pr2_base_controller.cpp:301:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller.cpp",
    "line": 310,
    "function": null,
    "comment": "pr2_base_controller.cpp:310:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "pr2_base_controller.cpp",
    "line": 314,
    "function": null,
    "comment": "pr2_base_controller.cpp:314:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller.cpp",
    "line": 318,
    "function": null,
    "comment": "pr2_base_controller.cpp:318:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller.cpp",
    "line": 319,
    "function": null,
    "comment": "pr2_base_controller.cpp:319:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller.cpp",
    "line": 320,
    "function": null,
    "comment": "pr2_base_controller.cpp:320:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller.cpp",
    "line": 324,
    "function": null,
    "comment": "pr2_base_controller.cpp:324:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller.cpp",
    "line": 325,
    "function": null,
    "comment": "pr2_base_controller.cpp:325:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller.cpp",
    "line": 330,
    "function": null,
    "comment": "pr2_base_controller.cpp:330:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller.cpp",
    "line": 331,
    "function": null,
    "comment": "pr2_base_controller.cpp:331:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.cpp",
    "line": 333,
    "function": null,
    "comment": "pr2_base_controller.cpp:333:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.cpp",
    "line": 334,
    "function": null,
    "comment": "pr2_base_controller.cpp:334:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.cpp",
    "line": 335,
    "function": null,
    "comment": "pr2_base_controller.cpp:335:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.cpp",
    "line": 337,
    "function": null,
    "comment": "pr2_base_controller.cpp:337:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.cpp",
    "line": 338,
    "function": null,
    "comment": "pr2_base_controller.cpp:338:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.cpp",
    "line": 339,
    "function": null,
    "comment": "pr2_base_controller.cpp:339:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller.cpp",
    "line": 341,
    "function": null,
    "comment": "pr2_base_controller.cpp:341:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller.cpp",
    "line": 342,
    "function": null,
    "comment": "pr2_base_controller.cpp:342:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.cpp",
    "line": 343,
    "function": null,
    "comment": "pr2_base_controller.cpp:343:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.cpp",
    "line": 344,
    "function": null,
    "comment": "pr2_base_controller.cpp:344:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.cpp",
    "line": 345,
    "function": null,
    "comment": "pr2_base_controller.cpp:345:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.cpp",
    "line": 346,
    "function": null,
    "comment": "pr2_base_controller.cpp:346:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.cpp",
    "line": 348,
    "function": null,
    "comment": "pr2_base_controller.cpp:348:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.cpp",
    "line": 349,
    "function": null,
    "comment": "pr2_base_controller.cpp:349:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.cpp",
    "line": 350,
    "function": null,
    "comment": "pr2_base_controller.cpp:350:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller.cpp",
    "line": 358,
    "function": null,
    "comment": "pr2_base_controller.cpp:358:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller.cpp",
    "line": 367,
    "function": null,
    "comment": "pr2_base_controller.cpp:367:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller.cpp",
    "line": 374,
    "function": null,
    "comment": "pr2_base_controller.cpp:374:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.cpp",
    "line": 379,
    "function": null,
    "comment": "pr2_base_controller.cpp:379:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller.cpp",
    "line": 381,
    "function": null,
    "comment": "pr2_base_controller.cpp:381:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller.cpp",
    "line": 382,
    "function": null,
    "comment": "pr2_base_controller.cpp:382:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_base_controller.cpp",
    "line": 385,
    "function": null,
    "comment": "pr2_base_controller.cpp:385:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller.cpp",
    "line": 387,
    "function": null,
    "comment": "pr2_base_controller.cpp:387:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller.cpp",
    "line": 388,
    "function": null,
    "comment": "pr2_base_controller.cpp:388:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller.cpp",
    "line": 390,
    "function": null,
    "comment": "pr2_base_controller.cpp:390:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller.cpp",
    "line": 391,
    "function": null,
    "comment": "pr2_base_controller.cpp:391:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "pr2_base_controller.cpp",
    "line": 394,
    "function": null,
    "comment": "pr2_base_controller.cpp:394:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller.cpp",
    "line": 395,
    "function": null,
    "comment": "pr2_base_controller.cpp:395:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.cpp",
    "line": 399,
    "function": null,
    "comment": "pr2_base_controller.cpp:399:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller.cpp",
    "line": 407,
    "function": null,
    "comment": "pr2_base_controller.cpp:407:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller.cpp",
    "line": 408,
    "function": null,
    "comment": "pr2_base_controller.cpp:408:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.cpp",
    "line": 412,
    "function": null,
    "comment": "pr2_base_controller.cpp:412:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.cpp",
    "line": 413,
    "function": null,
    "comment": "pr2_base_controller.cpp:413:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller.cpp",
    "line": 422,
    "function": null,
    "comment": "pr2_base_controller.cpp:422:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller.cpp",
    "line": 423,
    "function": null,
    "comment": "pr2_base_controller.cpp:423:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller.cpp",
    "line": 424,
    "function": null,
    "comment": "pr2_base_controller.cpp:424:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.cpp",
    "line": 425,
    "function": null,
    "comment": "pr2_base_controller.cpp:425:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller.cpp",
    "line": 430,
    "function": null,
    "comment": "pr2_base_controller.cpp:430:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller.cpp",
    "line": 441,
    "function": null,
    "comment": "pr2_base_controller.cpp:441:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "pr2_base_controller.cpp",
    "line": 441,
    "function": null,
    "comment": "pr2_base_controller.cpp:441:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller.cpp",
    "line": 442,
    "function": null,
    "comment": "pr2_base_controller.cpp:442:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.cpp",
    "line": 444,
    "function": null,
    "comment": "pr2_base_controller.cpp:444:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.cpp",
    "line": 446,
    "function": null,
    "comment": "pr2_base_controller.cpp:446:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.cpp",
    "line": 447,
    "function": null,
    "comment": "pr2_base_controller.cpp:447:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.cpp",
    "line": 452,
    "function": null,
    "comment": "pr2_base_controller.cpp:452:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.cpp",
    "line": 453,
    "function": null,
    "comment": "pr2_base_controller.cpp:453:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.cpp",
    "line": 454,
    "function": null,
    "comment": "pr2_base_controller.cpp:454:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller.cpp",
    "line": 459,
    "function": null,
    "comment": "pr2_base_controller.cpp:459:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller.cpp",
    "line": 460,
    "function": null,
    "comment": "pr2_base_controller.cpp:460:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "pr2_base_controller.cpp",
    "line": 460,
    "function": null,
    "comment": "pr2_base_controller.cpp:460:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller.cpp",
    "line": 461,
    "function": null,
    "comment": "pr2_base_controller.cpp:461:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_base_controller.cpp",
    "line": 462,
    "function": null,
    "comment": "pr2_base_controller.cpp:462:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller.cpp",
    "line": 467,
    "function": null,
    "comment": "pr2_base_controller.cpp:467:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller.cpp",
    "line": 468,
    "function": null,
    "comment": "pr2_base_controller.cpp:468:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_base_controller.cpp",
    "line": 470,
    "function": null,
    "comment": "pr2_base_controller.cpp:470:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_base_controller.cpp",
    "line": 475,
    "function": null,
    "comment": "pr2_base_controller.cpp:475:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "pr2_base_controller.cpp",
    "line": 481,
    "function": null,
    "comment": "pr2_base_controller.cpp:481:  Namespace should be terminated with '// namespace controller'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "pr2_base_controller.cpp",
    "line": 481,
    "function": null,
    "comment": "pr2_base_controller.cpp:481:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "pr2_base_controller.cpp",
    "line": 172,
    "function": null,
    "comment": "pr2_base_controller.cpp:172:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "pr2_base_controller.cpp",
    "line": 281,
    "function": null,
    "comment": "pr2_base_controller.cpp:281:  Add #include <algorithm> for min  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 41,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:41:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 41,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:41:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 43,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:43:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 43,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:43:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 44,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:44:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 44,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:44:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 45,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:45:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 45,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:45:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 47,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:47:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 48,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:48:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 49,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:49:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 50,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:50:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 54,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:54:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 55,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:55:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 55,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:55:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 58,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:58:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 59,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:59:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 61,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:61:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 62,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:62:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 67,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:67:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 68,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:68:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 68,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:68:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 72,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:72:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 72,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:72:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 75,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:75:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 76,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:76:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 76,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:76:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 77,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:77:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 80,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:80:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 81,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:81:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 81,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:81:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 82,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:82:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 85,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:85:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 87,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:87:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 88,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:88:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 94,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:94:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 95,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:95:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 96,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:96:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 99,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:99:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 100,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:100:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 103,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:103:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 104,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:104:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 111,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:111:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 117,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:117:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 124,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:124:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 125,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:125:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 126,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:126:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 127,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:127:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 128,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:128:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 130,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:130:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 132,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:132:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 136,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:136:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 163,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:163:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 166,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:166:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 167,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:167:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 168,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:168:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 169,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:169:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 171,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:171:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 172,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:172:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 173,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:173:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 174,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:174:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 175,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:175:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 177,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:177:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 179,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:179:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 181,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:181:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 185,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:185:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 188,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:188:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 190,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:190:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 191,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:191:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 192,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:192:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 193,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:193:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 197,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:197:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 202,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:202:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 203,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:203:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 204,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:204:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 205,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:205:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 209,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:209:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 212,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:212:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 212,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:212:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 213,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:213:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 217,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:217:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 218,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:218:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 222,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:222:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 223,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:223:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 224,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:224:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 227,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:227:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 228,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:228:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 230,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:230:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 232,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:232:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 233,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:233:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 234,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:234:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 235,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:235:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 240,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:240:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 241,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:241:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 242,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:242:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 244,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:244:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 246,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:246:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 248,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:248:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 250,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:250:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 255,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:255:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 256,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:256:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 259,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:259:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 260,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:260:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 261,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:261:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 268,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:268:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 269,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:269:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 269,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:269:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 270,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:270:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 274,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:274:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 275,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:275:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 275,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:275:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 276,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:276:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 279,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:279:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 281,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:281:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 283,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:283:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 285,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:285:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 286,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:286:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 287,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:287:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 289,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:289:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 290,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:290:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 291,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:291:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 293,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:293:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 294,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:294:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 295,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:295:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 297,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:297:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 297,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:297:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 298,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:298:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 301,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:301:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 301,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:301:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 301,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:301:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 301,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:301:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 302,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:302:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 302,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:302:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 306,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:306:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 307,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:307:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 308,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:308:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 313,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:313:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 314,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:314:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 317,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:317:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 318,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:318:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 320,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:320:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 321,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:321:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 321,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:321:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 322,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:322:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 326,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:326:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 327,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:327:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 328,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:328:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 329,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:329:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 330,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:330:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 331,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:331:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 332,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:332:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 333,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:333:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 336,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:336:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 337,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:337:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 339,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:339:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 340,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:340:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 341,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:341:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 343,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:343:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 346,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:346:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 347,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:347:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 350,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:350:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 351,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:351:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 352,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:352:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 352,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:352:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 356,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:356:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 357,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:357:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 358,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:358:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 401,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:401:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 402,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:402:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 403,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:403:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 403,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:403:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 404,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:404:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 404,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:404:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 408,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:408:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 410,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:410:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 412,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:412:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 413,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:413:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 418,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:418:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 419,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:419:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 421,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:421:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 424,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:424:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 425,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:425:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 426,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:426:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 427,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:427:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 428,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:428:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 429,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:429:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 432,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:432:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 435,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:435:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 437,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:437:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 439,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:439:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 440,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:440:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 441,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:441:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 442,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:442:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 443,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:443:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 448,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:448:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 450,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:450:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 451,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:451:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 456,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:456:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 457,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:457:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 458,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:458:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 462,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:462:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 462,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:462:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 464,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:464:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 464,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:464:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 467,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:467:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 469,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:469:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 472,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:472:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 473,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:473:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 476,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:476:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 476,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:476:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 478,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:478:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 480,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:480:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 482,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:482:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 486,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:486:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 487,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:487:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 488,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:488:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 494,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:494:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 496,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:496:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 501,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:501:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 502,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:502:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 503,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:503:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 504,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:504:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 507,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:507:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 508,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:508:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 509,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:509:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 515,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:515:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 517,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:517:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 522,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:522:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 523,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:523:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 524,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:524:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 525,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:525:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 227,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:227:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 326,
    "function": null,
    "comment": "laser_scanner_traj_controller.cpp:326:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_controller.cpp",
    "line": 39,
    "function": null,
    "comment": "pr2_gripper_controller.cpp:39:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "pr2_gripper_controller.cpp",
    "line": 39,
    "function": null,
    "comment": "pr2_gripper_controller.cpp:39:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "pr2_gripper_controller.cpp",
    "line": 41,
    "function": null,
    "comment": "pr2_gripper_controller.cpp:41:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "pr2_gripper_controller.cpp",
    "line": 43,
    "function": null,
    "comment": "pr2_gripper_controller.cpp:43:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_controller.cpp",
    "line": 48,
    "function": null,
    "comment": "pr2_gripper_controller.cpp:48:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_controller.cpp",
    "line": 52,
    "function": null,
    "comment": "pr2_gripper_controller.cpp:52:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_controller.cpp",
    "line": 56,
    "function": null,
    "comment": "pr2_gripper_controller.cpp:56:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_controller.cpp",
    "line": 57,
    "function": null,
    "comment": "pr2_gripper_controller.cpp:57:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "pr2_gripper_controller.cpp",
    "line": 63,
    "function": null,
    "comment": "pr2_gripper_controller.cpp:63:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_controller.cpp",
    "line": 68,
    "function": null,
    "comment": "pr2_gripper_controller.cpp:68:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_controller.cpp",
    "line": 74,
    "function": null,
    "comment": "pr2_gripper_controller.cpp:74:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_controller.cpp",
    "line": 81,
    "function": null,
    "comment": "pr2_gripper_controller.cpp:81:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_controller.cpp",
    "line": 91,
    "function": null,
    "comment": "pr2_gripper_controller.cpp:91:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_controller.cpp",
    "line": 101,
    "function": null,
    "comment": "pr2_gripper_controller.cpp:101:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_controller.cpp",
    "line": 121,
    "function": null,
    "comment": "pr2_gripper_controller.cpp:121:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_controller.cpp",
    "line": 122,
    "function": null,
    "comment": "pr2_gripper_controller.cpp:122:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_gripper_controller.cpp",
    "line": 126,
    "function": null,
    "comment": "pr2_gripper_controller.cpp:126:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_controller.cpp",
    "line": 127,
    "function": null,
    "comment": "pr2_gripper_controller.cpp:127:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_gripper_controller.cpp",
    "line": 128,
    "function": null,
    "comment": "pr2_gripper_controller.cpp:128:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_controller.cpp",
    "line": 129,
    "function": null,
    "comment": "pr2_gripper_controller.cpp:129:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_controller.cpp",
    "line": 133,
    "function": null,
    "comment": "pr2_gripper_controller.cpp:133:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_controller.cpp",
    "line": 152,
    "function": null,
    "comment": "pr2_gripper_controller.cpp:152:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_controller.cpp",
    "line": 153,
    "function": null,
    "comment": "pr2_gripper_controller.cpp:153:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "pr2_gripper_controller.cpp",
    "line": 157,
    "function": null,
    "comment": "pr2_gripper_controller.cpp:157:  Namespace should be terminated with '// namespace controller'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "pr2_gripper_controller.cpp",
    "line": 62,
    "function": null,
    "comment": "pr2_gripper_controller.cpp:62:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "pr2_gripper_controller.cpp",
    "line": 122,
    "function": null,
    "comment": "pr2_gripper_controller.cpp:122:  Add #include <algorithm> for min  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "test_odom.cpp",
    "line": 37,
    "function": null,
    "comment": "test_odom.cpp:37:  Include 'geometry_msgs/Twist.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "test_odom.cpp",
    "line": 39,
    "function": null,
    "comment": "test_odom.cpp:39:  Include 'geometry_msgs/Quaternion.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "test_odom.cpp",
    "line": 41,
    "function": null,
    "comment": "test_odom.cpp:41:  Include 'fstream' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "test_odom.cpp",
    "line": 46,
    "function": null,
    "comment": "test_odom.cpp:46:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "test_odom.cpp",
    "line": 54,
    "function": null,
    "comment": "test_odom.cpp:54:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "test_odom.cpp",
    "line": 83,
    "function": null,
    "comment": "test_odom.cpp:83:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "test_odom.cpp",
    "line": 84,
    "function": null,
    "comment": "test_odom.cpp:84:  public: should be indented +1 space inside class test_run_base  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "test_odom.cpp",
    "line": 85,
    "function": null,
    "comment": "test_odom.cpp:85:  Do not leave a blank line after 'public:'  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "test_odom.cpp",
    "line": 86,
    "function": null,
    "comment": "test_odom.cpp:86:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "test_odom.cpp",
    "line": 86,
    "function": null,
    "comment": "test_odom.cpp:86:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "test_odom.cpp",
    "line": 86,
    "function": null,
    "comment": "test_odom.cpp:86:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not use meaningless empty statements.",
    "file": "test_odom.cpp",
    "line": 86,
    "function": null,
    "comment": "test_odom.cpp:86:  You don't need a ; after a }  [readability/braces] [4]",
    "tags": ["code-standards","google-cpp","empty-statement","ambiguous-code"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "test_odom.cpp",
    "line": 93,
    "function": null,
    "comment": "test_odom.cpp:93:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "test_odom.cpp",
    "line": 95,
    "function": null,
    "comment": "test_odom.cpp:95:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "test_odom.cpp",
    "line": 98,
    "function": null,
    "comment": "test_odom.cpp:98:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "test_odom.cpp",
    "line": 99,
    "function": null,
    "comment": "test_odom.cpp:99:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "test_odom.cpp",
    "line": 100,
    "function": null,
    "comment": "test_odom.cpp:100:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "test_odom.cpp",
    "line": 102,
    "function": null,
    "comment": "test_odom.cpp:102:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "test_odom.cpp",
    "line": 103,
    "function": null,
    "comment": "test_odom.cpp:103:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "test_odom.cpp",
    "line": 107,
    "function": null,
    "comment": "test_odom.cpp:107:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "test_odom.cpp",
    "line": 127,
    "function": null,
    "comment": "test_odom.cpp:127:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "test_odom.cpp",
    "line": 130,
    "function": null,
    "comment": "test_odom.cpp:130:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "test_odom.cpp",
    "line": 133,
    "function": null,
    "comment": "test_odom.cpp:133:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "test_odom.cpp",
    "line": 136,
    "function": null,
    "comment": "test_odom.cpp:136:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "test_odom.cpp",
    "line": 137,
    "function": null,
    "comment": "test_odom.cpp:137:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "test_odom.cpp",
    "line": 137,
    "function": null,
    "comment": "test_odom.cpp:137:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "test_odom.cpp",
    "line": 142,
    "function": null,
    "comment": "test_odom.cpp:142:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "test_odom.cpp",
    "line": 143,
    "function": null,
    "comment": "test_odom.cpp:143:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "test_odom.cpp",
    "line": 147,
    "function": null,
    "comment": "test_odom.cpp:147:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "test_odom.cpp",
    "line": 158,
    "function": null,
    "comment": "test_odom.cpp:158:  Missing space before ( in while(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "test_odom.cpp",
    "line": 159,
    "function": null,
    "comment": "test_odom.cpp:159:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "test_odom.cpp",
    "line": 162,
    "function": null,
    "comment": "test_odom.cpp:162:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "test_odom.cpp",
    "line": 165,
    "function": null,
    "comment": "test_odom.cpp:165:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "test_odom.cpp",
    "line": 167,
    "function": null,
    "comment": "test_odom.cpp:167:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "test_odom.cpp",
    "line": 168,
    "function": null,
    "comment": "test_odom.cpp:168:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "test_odom.cpp",
    "line": 177,
    "function": null,
    "comment": "test_odom.cpp:177:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "test_odom.cpp",
    "line": 177,
    "function": null,
    "comment": "test_odom.cpp:177:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "test_base_controller.cpp",
    "line": null,
    "function": null,
    "comment": "test_base_controller.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "test_base_controller.cpp",
    "line": 3,
    "function": null,
    "comment": "test_base_controller.cpp:3:  Include 'hardware_interface/hardware_interface.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "test_base_controller.cpp",
    "line": 6,
    "function": null,
    "comment": "test_base_controller.cpp:6:  Include 'ros/node.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "test_base_controller.cpp",
    "line": 9,
    "function": null,
    "comment": "test_base_controller.cpp:9:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "test_base_controller.cpp",
    "line": 10,
    "function": null,
    "comment": "test_base_controller.cpp:10:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "test_base_controller.cpp",
    "line": 11,
    "function": null,
    "comment": "test_base_controller.cpp:11:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "test_base_controller.cpp",
    "line": 12,
    "function": null,
    "comment": "test_base_controller.cpp:12:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "test_base_controller.cpp",
    "line": 13,
    "function": null,
    "comment": "test_base_controller.cpp:13:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "test_base_controller.cpp",
    "line": 16,
    "function": null,
    "comment": "test_base_controller.cpp:16:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "test_base_controller.cpp",
    "line": 27,
    "function": null,
    "comment": "test_base_controller.cpp:27:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "test_base_controller.cpp",
    "line": 36,
    "function": null,
    "comment": "test_base_controller.cpp:36:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "test_base_controller.cpp",
    "line": 46,
    "function": null,
    "comment": "test_base_controller.cpp:46:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "test_joint_trajectory_controller.cpp",
    "line": 36,
    "function": null,
    "comment": "test_joint_trajectory_controller.cpp:36:  Include 'manipulation_msgs/JointTraj.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "test_joint_trajectory_controller.cpp",
    "line": 41,
    "function": null,
    "comment": "test_joint_trajectory_controller.cpp:41:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "test_joint_trajectory_controller.cpp",
    "line": 45,
    "function": null,
    "comment": "test_joint_trajectory_controller.cpp:45:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "test_joint_trajectory_controller.cpp",
    "line": 46,
    "function": null,
    "comment": "test_joint_trajectory_controller.cpp:46:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "test_joint_trajectory_controller.cpp",
    "line": 47,
    "function": null,
    "comment": "test_joint_trajectory_controller.cpp:47:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "test_joint_trajectory_controller.cpp",
    "line": 49,
    "function": null,
    "comment": "test_joint_trajectory_controller.cpp:49:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "test_joint_trajectory_controller.cpp",
    "line": 50,
    "function": null,
    "comment": "test_joint_trajectory_controller.cpp:50:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "test_joint_trajectory_controller.cpp",
    "line": 65,
    "function": null,
    "comment": "test_joint_trajectory_controller.cpp:65:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "test_joint_trajectory_controller.cpp",
    "line": 65,
    "function": null,
    "comment": "test_joint_trajectory_controller.cpp:65:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "test_joint_trajectory_controller.cpp",
    "line": 65,
    "function": null,
    "comment": "test_joint_trajectory_controller.cpp:65:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "test_joint_trajectory_controller.cpp",
    "line": 73,
    "function": null,
    "comment": "test_joint_trajectory_controller.cpp:73:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "test_joint_trajectory_controller.cpp",
    "line": 73,
    "function": null,
    "comment": "test_joint_trajectory_controller.cpp:73:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "test_joint_trajectory_controller.cpp",
    "line": 75,
    "function": null,
    "comment": "test_joint_trajectory_controller.cpp:75:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "test_joint_trajectory_controller.cpp",
    "line": 77,
    "function": null,
    "comment": "test_joint_trajectory_controller.cpp:77:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "test_joint_trajectory_controller.cpp",
    "line": 77,
    "function": null,
    "comment": "test_joint_trajectory_controller.cpp:77:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "test_whole_body_controller.cpp",
    "line": 36,
    "function": null,
    "comment": "test_whole_body_controller.cpp:36:  Include 'manipulation_msgs/JointTraj.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "test_whole_body_controller.cpp",
    "line": 41,
    "function": null,
    "comment": "test_whole_body_controller.cpp:41:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "test_whole_body_controller.cpp",
    "line": 45,
    "function": null,
    "comment": "test_whole_body_controller.cpp:45:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "test_whole_body_controller.cpp",
    "line": 46,
    "function": null,
    "comment": "test_whole_body_controller.cpp:46:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "test_whole_body_controller.cpp",
    "line": 47,
    "function": null,
    "comment": "test_whole_body_controller.cpp:47:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "test_whole_body_controller.cpp",
    "line": 49,
    "function": null,
    "comment": "test_whole_body_controller.cpp:49:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "test_whole_body_controller.cpp",
    "line": 50,
    "function": null,
    "comment": "test_whole_body_controller.cpp:50:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "test_whole_body_controller.cpp",
    "line": 65,
    "function": null,
    "comment": "test_whole_body_controller.cpp:65:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "test_whole_body_controller.cpp",
    "line": 65,
    "function": null,
    "comment": "test_whole_body_controller.cpp:65:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "test_whole_body_controller.cpp",
    "line": 65,
    "function": null,
    "comment": "test_whole_body_controller.cpp:65:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "test_whole_body_controller.cpp",
    "line": 80,
    "function": null,
    "comment": "test_whole_body_controller.cpp:80:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "test_whole_body_controller.cpp",
    "line": 80,
    "function": null,
    "comment": "test_whole_body_controller.cpp:80:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "test_whole_body_controller.cpp",
    "line": 82,
    "function": null,
    "comment": "test_whole_body_controller.cpp:82:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "test_whole_body_controller.cpp",
    "line": 84,
    "function": null,
    "comment": "test_whole_body_controller.cpp:84:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "test_whole_body_controller.cpp",
    "line": 84,
    "function": null,
    "comment": "test_whole_body_controller.cpp:84:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "test_run_base_controller.cpp",
    "line": 37,
    "function": null,
    "comment": "test_run_base_controller.cpp:37:  Include 'nav_msgs/Odometry.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "test_run_base_controller.cpp",
    "line": 38,
    "function": null,
    "comment": "test_run_base_controller.cpp:38:  Include 'geometry_msgs/Twist.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not include the same file twice.",
    "file": "test_run_base_controller.cpp",
    "line": 39,
    "function": null,
    "comment": "test_run_base_controller.cpp:39:  'nav_msgs/Odometry.h' already included at test_run_base_controller.cpp:37  [build/include] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "test_run_base_controller.cpp",
    "line": 40,
    "function": null,
    "comment": "test_run_base_controller.cpp:40:  Include 'geometry_msgs/Quaternion.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "test_run_base_controller.cpp",
    "line": 45,
    "function": null,
    "comment": "test_run_base_controller.cpp:45:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "test_run_base_controller.cpp",
    "line": 53,
    "function": null,
    "comment": "test_run_base_controller.cpp:53:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "test_run_base_controller.cpp",
    "line": 82,
    "function": null,
    "comment": "test_run_base_controller.cpp:82:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "test_run_base_controller.cpp",
    "line": 83,
    "function": null,
    "comment": "test_run_base_controller.cpp:83:  public: should be indented +1 space inside class test_run_base  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "test_run_base_controller.cpp",
    "line": 84,
    "function": null,
    "comment": "test_run_base_controller.cpp:84:  Do not leave a blank line after 'public:'  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "test_run_base_controller.cpp",
    "line": 85,
    "function": null,
    "comment": "test_run_base_controller.cpp:85:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "test_run_base_controller.cpp",
    "line": 85,
    "function": null,
    "comment": "test_run_base_controller.cpp:85:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "test_run_base_controller.cpp",
    "line": 85,
    "function": null,
    "comment": "test_run_base_controller.cpp:85:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not use meaningless empty statements.",
    "file": "test_run_base_controller.cpp",
    "line": 85,
    "function": null,
    "comment": "test_run_base_controller.cpp:85:  You don't need a ; after a }  [readability/braces] [4]",
    "tags": ["code-standards","google-cpp","empty-statement","ambiguous-code"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "test_run_base_controller.cpp",
    "line": 96,
    "function": null,
    "comment": "test_run_base_controller.cpp:96:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "test_run_base_controller.cpp",
    "line": 101,
    "function": null,
    "comment": "test_run_base_controller.cpp:101:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "test_run_base_controller.cpp",
    "line": 102,
    "function": null,
    "comment": "test_run_base_controller.cpp:102:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "test_run_base_controller.cpp",
    "line": 102,
    "function": null,
    "comment": "test_run_base_controller.cpp:102:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "test_run_base_controller.cpp",
    "line": 106,
    "function": null,
    "comment": "test_run_base_controller.cpp:106:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "test_run_base_controller.cpp",
    "line": 107,
    "function": null,
    "comment": "test_run_base_controller.cpp:107:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "test_run_base_controller.cpp",
    "line": 107,
    "function": null,
    "comment": "test_run_base_controller.cpp:107:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "test_run_base_controller.cpp",
    "line": 111,
    "function": null,
    "comment": "test_run_base_controller.cpp:111:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "test_run_base_controller.cpp",
    "line": 112,
    "function": null,
    "comment": "test_run_base_controller.cpp:112:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "test_run_base_controller.cpp",
    "line": 113,
    "function": null,
    "comment": "test_run_base_controller.cpp:113:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "test_run_base_controller.cpp",
    "line": 115,
    "function": null,
    "comment": "test_run_base_controller.cpp:115:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "test_run_base_controller.cpp",
    "line": 116,
    "function": null,
    "comment": "test_run_base_controller.cpp:116:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "test_run_base_controller.cpp",
    "line": 124,
    "function": null,
    "comment": "test_run_base_controller.cpp:124:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "test_run_base_controller.cpp",
    "line": 124,
    "function": null,
    "comment": "test_run_base_controller.cpp:124:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "test_run_base_controller.cpp",
    "line": 126,
    "function": null,
    "comment": "test_run_base_controller.cpp:126:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "test_run_base_controller.cpp",
    "line": 146,
    "function": null,
    "comment": "test_run_base_controller.cpp:146:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "test_run_base_controller.cpp",
    "line": 149,
    "function": null,
    "comment": "test_run_base_controller.cpp:149:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "test_run_base_controller.cpp",
    "line": 152,
    "function": null,
    "comment": "test_run_base_controller.cpp:152:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "test_run_base_controller.cpp",
    "line": 155,
    "function": null,
    "comment": "test_run_base_controller.cpp:155:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "test_run_base_controller.cpp",
    "line": 156,
    "function": null,
    "comment": "test_run_base_controller.cpp:156:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "test_run_base_controller.cpp",
    "line": 156,
    "function": null,
    "comment": "test_run_base_controller.cpp:156:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "test_run_base_controller.cpp",
    "line": 160,
    "function": null,
    "comment": "test_run_base_controller.cpp:160:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "test_run_base_controller.cpp",
    "line": 162,
    "function": null,
    "comment": "test_run_base_controller.cpp:162:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "test_run_base_controller.cpp",
    "line": 168,
    "function": null,
    "comment": "test_run_base_controller.cpp:168:  Missing space before ( in while(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "test_run_base_controller.cpp",
    "line": 169,
    "function": null,
    "comment": "test_run_base_controller.cpp:169:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "test_run_base_controller.cpp",
    "line": 171,
    "function": null,
    "comment": "test_run_base_controller.cpp:171:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "test_run_base_controller.cpp",
    "line": 172,
    "function": null,
    "comment": "test_run_base_controller.cpp:172:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "test_run_base_controller.cpp",
    "line": 176,
    "function": null,
    "comment": "test_run_base_controller.cpp:176:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "test_run_base_controller.cpp",
    "line": 177,
    "function": null,
    "comment": "test_run_base_controller.cpp:177:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "test_run_base_controller.cpp",
    "line": 179,
    "function": null,
    "comment": "test_run_base_controller.cpp:179:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "test_run_base_controller.cpp",
    "line": 183,
    "function": null,
    "comment": "test_run_base_controller.cpp:183:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "test_run_base_controller.cpp",
    "line": 183,
    "function": null,
    "comment": "test_run_base_controller.cpp:183:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "test_arm_trajectory_controller.cpp",
    "line": 36,
    "function": null,
    "comment": "test_arm_trajectory_controller.cpp:36:  Include 'manipulation_msgs/JointTraj.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "test_arm_trajectory_controller.cpp",
    "line": 41,
    "function": null,
    "comment": "test_arm_trajectory_controller.cpp:41:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "test_arm_trajectory_controller.cpp",
    "line": 45,
    "function": null,
    "comment": "test_arm_trajectory_controller.cpp:45:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "test_arm_trajectory_controller.cpp",
    "line": 46,
    "function": null,
    "comment": "test_arm_trajectory_controller.cpp:46:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "test_arm_trajectory_controller.cpp",
    "line": 47,
    "function": null,
    "comment": "test_arm_trajectory_controller.cpp:47:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "test_arm_trajectory_controller.cpp",
    "line": 49,
    "function": null,
    "comment": "test_arm_trajectory_controller.cpp:49:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "test_arm_trajectory_controller.cpp",
    "line": 50,
    "function": null,
    "comment": "test_arm_trajectory_controller.cpp:50:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "test_arm_trajectory_controller.cpp",
    "line": 65,
    "function": null,
    "comment": "test_arm_trajectory_controller.cpp:65:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "test_arm_trajectory_controller.cpp",
    "line": 65,
    "function": null,
    "comment": "test_arm_trajectory_controller.cpp:65:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "test_arm_trajectory_controller.cpp",
    "line": 65,
    "function": null,
    "comment": "test_arm_trajectory_controller.cpp:65:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "test_arm_trajectory_controller.cpp",
    "line": 66,
    "function": null,
    "comment": "test_arm_trajectory_controller.cpp:66:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "test_arm_trajectory_controller.cpp",
    "line": 68,
    "function": null,
    "comment": "test_arm_trajectory_controller.cpp:68:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "test_arm_trajectory_controller.cpp",
    "line": 68,
    "function": null,
    "comment": "test_arm_trajectory_controller.cpp:68:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "test_arm_trajectory_controller.cpp",
    "line": 69,
    "function": null,
    "comment": "test_arm_trajectory_controller.cpp:69:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "test_arm_trajectory_controller.cpp",
    "line": 112,
    "function": null,
    "comment": "test_arm_trajectory_controller.cpp:112:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "test_arm_trajectory_controller.cpp",
    "line": 112,
    "function": null,
    "comment": "test_arm_trajectory_controller.cpp:112:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "test_arm_trajectory_controller.cpp",
    "line": 113,
    "function": null,
    "comment": "test_arm_trajectory_controller.cpp:113:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "test_arm_trajectory_controller.cpp",
    "line": 118,
    "function": null,
    "comment": "test_arm_trajectory_controller.cpp:118:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "test_arm_trajectory_controller.cpp",
    "line": 118,
    "function": null,
    "comment": "test_arm_trajectory_controller.cpp:118:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "base_kinematics.cpp",
    "line": 128,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "base_kinematics.cpp",
    "line": 164,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "base_kinematics.cpp",
    "line": 182,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "base_kinematics.cpp",
    "line": 183,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "base_kinematics.cpp",
    "line": 185,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "base_kinematics.cpp",
    "line": 208,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 175,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 221,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 318,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 327,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 421,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Declarations should be at the smallest feasible scope.",
    "file": "pr2_base_controller.cpp",
    "line": 377,
    "function": null,
    "comment": "The scope of the variable 'steer_angle_desired_m_pi' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:void f(int x",
    "tags": ["code-standards","jsf-av-cpp","scope"]
  },
  {
    "rule": "Declarations should be at the smallest feasible scope.",
    "file": "pr2_base_controller.cpp",
    "line": 378,
    "function": null,
    "comment": "The scope of the variable 'error_steer' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:void f(int x){    int i",
    "tags": ["code-standards","jsf-av-cpp","scope"]
  },
  {
    "rule": "Declarations should be at the smallest feasible scope.",
    "file": "pr2_base_controller.cpp",
    "line": 378,
    "function": null,
    "comment": "The scope of the variable 'error_steer_m_pi' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:void f(int x){    ",
    "tags": ["code-standards","jsf-av-cpp","scope"]
  },
  {
    "rule": "Declarations should be at the smallest feasible scope.",
    "file": "pr2_base_controller.cpp",
    "line": 440,
    "function": null,
    "comment": "The scope of the variable 'steer_angle_actual' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:void f(int x){  ",
    "tags": ["code-standards","jsf-av-cpp","scope"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "pr2_base_controller.cpp",
    "line": 81,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "pr2_base_controller.cpp",
    "line": 117,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "pr2_base_controller.cpp",
    "line": 147,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "pr2_base_controller.cpp",
    "line": 163,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "pr2_base_controller.cpp",
    "line": 203,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "pr2_base_controller.cpp",
    "line": 207,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "pr2_base_controller.cpp",
    "line": 268,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "pr2_base_controller.cpp",
    "line": 272,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "pr2_base_controller.cpp",
    "line": 330,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "pr2_base_controller.cpp",
    "line": 341,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "pr2_base_controller.cpp",
    "line": 381,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "pr2_base_controller.cpp",
    "line": 387,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "pr2_base_controller.cpp",
    "line": 423,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "pr2_base_controller.cpp",
    "line": 441,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "pr2_base_controller.cpp",
    "line": 460,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "pr2_base_controller.cpp",
    "line": 468,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "pr2_base_controller.cpp",
    "line": 470,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Declarations should be at the smallest feasible scope.",
    "file": "pr2_base_controller2.cpp",
    "line": 385,
    "function": null,
    "comment": "The scope of the variable 'steer_angle_desired_m_pi' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:void f(int x",
    "tags": ["code-standards","jsf-av-cpp","scope"]
  },
  {
    "rule": "Declarations should be at the smallest feasible scope.",
    "file": "pr2_base_controller2.cpp",
    "line": 386,
    "function": null,
    "comment": "The scope of the variable 'error_steer' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:void f(int x){    int i",
    "tags": ["code-standards","jsf-av-cpp","scope"]
  },
  {
    "rule": "Declarations should be at the smallest feasible scope.",
    "file": "pr2_base_controller2.cpp",
    "line": 386,
    "function": null,
    "comment": "The scope of the variable 'error_steer_m_pi' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:void f(int x){    ",
    "tags": ["code-standards","jsf-av-cpp","scope"]
  },
  {
    "rule": "Declarations should be at the smallest feasible scope.",
    "file": "pr2_base_controller2.cpp",
    "line": 454,
    "function": null,
    "comment": "The scope of the variable 'steer_angle_actual' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:void f(int x){  ",
    "tags": ["code-standards","jsf-av-cpp","scope"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "pr2_base_controller2.cpp",
    "line": 81,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "pr2_base_controller2.cpp",
    "line": 118,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "pr2_base_controller2.cpp",
    "line": 149,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "pr2_base_controller2.cpp",
    "line": 165,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "pr2_base_controller2.cpp",
    "line": 210,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "pr2_base_controller2.cpp",
    "line": 214,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "pr2_base_controller2.cpp",
    "line": 275,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "pr2_base_controller2.cpp",
    "line": 279,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "pr2_base_controller2.cpp",
    "line": 337,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "pr2_base_controller2.cpp",
    "line": 348,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "pr2_base_controller2.cpp",
    "line": 389,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "pr2_base_controller2.cpp",
    "line": 395,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "pr2_base_controller2.cpp",
    "line": 431,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "pr2_base_controller2.cpp",
    "line": 448,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "pr2_base_controller2.cpp",
    "line": 455,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Ensure that no expression is redundant.",
    "file": "pr2_odometry.cpp",
    "line": 353,
    "function": null,
    "comment": "Variable 'wheel_speed' is reassigned a value before the old one has been used.",
    "tags": ["hicpp","code-standards","redundancy"]
  },
  {
    "rule": "Declarations should be at the smallest feasible scope.",
    "file": "pr2_odometry.cpp",
    "line": 287,
    "function": null,
    "comment": "The scope of the variable 'odom_multiplier' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:void f(int x){    i",
    "tags": ["code-standards","jsf-av-cpp","scope"]
  },
  {
    "rule": "Declarations should be at the smallest feasible scope.",
    "file": "pr2_odometry.cpp",
    "line": 342,
    "function": null,
    "comment": "The scope of the variable 'steer_angle' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:void f(int x){    int i",
    "tags": ["code-standards","jsf-av-cpp","scope"]
  },
  {
    "rule": "Declarations should be at the smallest feasible scope.",
    "file": "pr2_odometry.cpp",
    "line": 342,
    "function": null,
    "comment": "The scope of the variable 'wheel_speed' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:void f(int x){    int i",
    "tags": ["code-standards","jsf-av-cpp","scope"]
  },
  {
    "rule": "Declarations should be at the smallest feasible scope.",
    "file": "pr2_odometry.cpp",
    "line": 342,
    "function": null,
    "comment": "The scope of the variable 'costh' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:void f(int x){    int i = 0;",
    "tags": ["code-standards","jsf-av-cpp","scope"]
  },
  {
    "rule": "Declarations should be at the smallest feasible scope.",
    "file": "pr2_odometry.cpp",
    "line": 342,
    "function": null,
    "comment": "The scope of the variable 'sinth' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:void f(int x){    int i = 0;",
    "tags": ["code-standards","jsf-av-cpp","scope"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "pr2_odometry.cpp",
    "line": 123,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "pr2_odometry.cpp",
    "line": 346,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "pr2_odometry.cpp",
    "line": 380,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "pr2_odometry.cpp",
    "line": 393,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "pr2_odometry.cpp",
    "line": 400,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "pr2_odometry.cpp",
    "line": 416,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "pr2_odometry.cpp",
    "line": 417,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "pr2_odometry.cpp",
    "line": 418,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "pr2_odometry.cpp",
    "line": 435,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "pr2_odometry.cpp",
    "line": 436,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "pr2_odometry.cpp",
    "line": 437,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "pr2_odometry.cpp",
    "line": 457,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "pr2_odometry.cpp",
    "line": 483,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Declarations should be at the smallest feasible scope.",
    "file": "trajectory.cpp",
    "line": 398,
    "function": null,
    "comment": "The scope of the variable 'dT' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:void f(int x){    int i = 0;   ",
    "tags": ["code-standards","jsf-av-cpp","scope"]
  },
  {
    "rule": "Declarations should be at the smallest feasible scope.",
    "file": "trajectory.cpp",
    "line": 446,
    "function": null,
    "comment": "The scope of the variable 'dT' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:void f(int x){    int i = 0;   ",
    "tags": ["code-standards","jsf-av-cpp","scope"]
  },
  {
    "rule": "Declarations should be at the smallest feasible scope.",
    "file": "trajectory.cpp",
    "line": 499,
    "function": null,
    "comment": "The scope of the variable 'dT' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:void f(int x){    int i = 0;   ",
    "tags": ["code-standards","jsf-av-cpp","scope"]
  },
  {
    "rule": "Declarations should be at the smallest feasible scope.",
    "file": "trajectory.cpp",
    "line": 835,
    "function": null,
    "comment": "The scope of the variable 'dT' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:void f(int x){    int i = 0;   ",
    "tags": ["code-standards","jsf-av-cpp","scope"]
  },
  {
    "rule": "Declarations should be at the smallest feasible scope.",
    "file": "trajectory.cpp",
    "line": 905,
    "function": null,
    "comment": "The scope of the variable 'dT' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:void f(int x){    int i = 0;   ",
    "tags": ["code-standards","jsf-av-cpp","scope"]
  },
  {
    "rule": "Declarations should be at the smallest feasible scope.",
    "file": "trajectory.cpp",
    "line": 974,
    "function": null,
    "comment": "The scope of the variable 'dT' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:void f(int x){    int i = 0;   ",
    "tags": ["code-standards","jsf-av-cpp","scope"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 44,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 51,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 60,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 65,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 68,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 71,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 87,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 106,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 111,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 130,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 142,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 146,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 163,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 173,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 187,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 204,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 208,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 219,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 236,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 240,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 254,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 261,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 263,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 287,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 307,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 349,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 357,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 365,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 373,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 381,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 383,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 396,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 417,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 426,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 444,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 464,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 472,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 497,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 517,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 524,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 576,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 594,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 631,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 644,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 649,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 656,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 662,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 676,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 683,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 694,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 716,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 732,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 777,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 792,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 816,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 818,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 833,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 854,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 868,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 893,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 903,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 926,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 940,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 965,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 972,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 994,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 1008,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 1040,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 1046,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 1057,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory.cpp",
    "line": 1061,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not rely on the sequence of evaluation within an expression.",
    "file": "trajectory.cpp",
    "line": 304,
    "function": null,
    "comment": "Found assignment as a subexpression.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","evaluation-order","expressions"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "test_arm_trajectory_controller.cpp",
    "line": 38,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "test_arm_trajectory_controller.cpp",
    "line": 40,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "test_arm_trajectory_controller.cpp",
    "line": 45,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "test_arm_trajectory_controller.cpp",
    "line": 60,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "test_arm_trajectory_controller.cpp",
    "line": 61,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "test_arm_trajectory_controller.cpp",
    "line": 65,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "test_arm_trajectory_controller.cpp",
    "line": 68,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "test_joint_trajectory_controller.cpp",
    "line": 38,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "test_joint_trajectory_controller.cpp",
    "line": 40,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "test_joint_trajectory_controller.cpp",
    "line": 45,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "test_joint_trajectory_controller.cpp",
    "line": 60,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "test_joint_trajectory_controller.cpp",
    "line": 61,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "test_joint_trajectory_controller.cpp",
    "line": 65,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Declarations should be at the smallest feasible scope.",
    "file": "test_odom.cpp",
    "line": 125,
    "function": null,
    "comment": "The scope of the variable 'file_num' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:void f(int x){    int i = ",
    "tags": ["code-standards","jsf-av-cpp","scope"]
  },
  {
    "rule": "Ensure that no expression is redundant.",
    "file": "test_odom.cpp",
    "line": 144,
    "function": null,
    "comment": "Variable 'file_num' is assigned a value that is never used.",
    "tags": ["hicpp","code-standards","redundancy"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "test_odom.cpp",
    "line": 43,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "test_odom.cpp",
    "line": 45,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "test_odom.cpp",
    "line": 98,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "test_odom.cpp",
    "line": 125,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Ensure that no expression is redundant.",
    "file": "test_run_base_controller.cpp",
    "line": 144,
    "function": null,
    "comment": "Variable 'file_num' is assigned a value that is never used.",
    "tags": ["hicpp","code-standards","redundancy"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "test_run_base_controller.cpp",
    "line": 42,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "test_run_base_controller.cpp",
    "line": 44,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "test_run_base_controller.cpp",
    "line": 93,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "test_run_base_controller.cpp",
    "line": 111,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "test_whole_body_controller.cpp",
    "line": 38,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "test_whole_body_controller.cpp",
    "line": 40,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "test_whole_body_controller.cpp",
    "line": 45,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "test_whole_body_controller.cpp",
    "line": 60,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "test_whole_body_controller.cpp",
    "line": 61,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "test_whole_body_controller.cpp",
    "line": 65,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "trajectory.cpp",
    "line": 250,
    "function": null,
    "comment": "The function 'addPoint' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "trajectory.cpp",
    "line": 77,
    "function": null,
    "comment": "The function 'clear' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "trajectory.cpp",
    "line": 649,
    "function": null,
    "comment": "The function 'getDuration' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "trajectory.cpp",
    "line": 644,
    "function": null,
    "comment": "The function 'getNumberPoints' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "trajectory.cpp",
    "line": 676,
    "function": null,
    "comment": "The function 'getTimeStamps' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "trajectory.cpp",
    "line": 1073,
    "function": null,
    "comment": "The function 'getTrajectory' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "trajectory.cpp",
    "line": 381,
    "function": null,
    "comment": "The function 'minimizeSegmentTimes' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "trajectory.cpp",
    "line": 163,
    "function": null,
    "comment": "The function 'setJointWraps' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "test_run_base_controller.cpp",
    "line": 95,
    "function": null,
    "comment": "The function 'subscriber_connect' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "trajectory.cpp",
    "line": 1046,
    "function": null,
    "comment": "The function 'write' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "send_laser_traj_cmd_ms2.py",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "send_periodic_cmd.py",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "pointhead.py",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "control_base_position.py",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "control_base_position.py",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "control_base_position_ground_truth.py",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "control_base_position_ground_truth.py",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "control_laser.py",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "send_periodic_cmd_srv.py",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "base_kinematics.cpp",
    "line": 44,
    "function": "init",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "pr2_base_controller2.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "pr2_base_controller2.cpp",
    "line": 41,
    "function": "PLUGINLIB_EXPORT_CLASS",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 15",
    "file": "pr2_base_controller2.cpp",
    "line": 41,
    "function": "PLUGINLIB_EXPORT_CLASS",
    "comment": "CC is greater than 15",
    "tags": ["metrics","ros","cyclomatic-complexity","kth"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "pr2_odometry.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "pr2_odometry.cpp",
    "line": 41,
    "function": "PLUGINLIB_EXPORT_CLASS",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 15",
    "file": "pr2_odometry.cpp",
    "line": 41,
    "function": "PLUGINLIB_EXPORT_CLASS",
    "comment": "CC is greater than 15",
    "tags": ["metrics","ros","cyclomatic-complexity","kth"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "caster_controller.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "caster_controller.cpp",
    "line": 37,
    "function": "PLUGINLIB_EXPORT_CLASS",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 15",
    "file": "caster_controller.cpp",
    "line": 37,
    "function": "PLUGINLIB_EXPORT_CLASS",
    "comment": "CC is greater than 15",
    "tags": ["metrics","ros","cyclomatic-complexity","kth"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "trajectory.cpp",
    "line": 972,
    "function": "parameterizeBlendedLinear",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "trajectory.cpp",
    "line": 903,
    "function": "parameterizeCubic",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "trajectory.cpp",
    "line": 833,
    "function": "parameterizeLinear",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "pr2_base_controller.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "pr2_base_controller.cpp",
    "line": 41,
    "function": "PLUGINLIB_EXPORT_CLASS",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 15",
    "file": "pr2_base_controller.cpp",
    "line": 41,
    "function": "PLUGINLIB_EXPORT_CLASS",
    "comment": "CC is greater than 15",
    "tags": ["metrics","ros","cyclomatic-complexity","kth"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "laser_scanner_traj_controller.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum coupling between objects: 5",
    "file": "laser_scanner_traj_controller.cpp",
    "line": null,
    "function": null,
    "comment": "CBO is greater than 5, LaserScannerTrajController, 6",
    "tags": ["metrics","nasa-satc","ros","coupling"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 58,
    "function": "init",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 15",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 58,
    "function": "init",
    "comment": "CC is greater than 15",
    "tags": ["metrics","ros","cyclomatic-complexity","kth"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "laser_scanner_traj_controller.cpp",
    "line": 313,
    "function": "setTrajCmd",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum coupling between objects: 5",
    "file": "laser_scanner_traj_controller.cpp",
    "line": null,
    "function": null,
    "comment": "CBO is greater than 5, LaserScannerTrajControllerNode, 6",
    "tags": ["metrics","nasa-satc","ros","coupling"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "pr2_gripper_controller.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "pr2_gripper_controller.cpp",
    "line": 56,
    "function": "init",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "test_odom.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "test_odom.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "test_base_controller.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "test_base_controller.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "test_joint_trajectory_controller.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "test_joint_trajectory_controller.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "test_whole_body_controller.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "test_whole_body_controller.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "test_run_base_controller.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "test_run_base_controller.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "test_arm_trajectory_controller.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "test_arm_trajectory_controller.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  }
]