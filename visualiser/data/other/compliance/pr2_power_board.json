[
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "power_node.h",
    "line": null,
    "function": null,
    "comment": "power_node.h:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "All headers must be protected against multiple inclusion by",
    "file": "power_node.h",
    "line": null,
    "function": null,
    "comment": "power_node.h:0:  No #ifndef header guard found.  [build/header_guard] [5]",
    "tags": ["ros","code-standards","google-cpp","ros-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "Do not include the C standard headers. Use the C++ headers instead.",
    "file": "power_node.h",
    "line": 4,
    "function": null,
    "comment": "power_node.h:4:  Include 'ctime' instead of 'time.h'.  [build/include] [5]",
    "tags": ["hicpp","code-standards","headers","include","preprocessor","deprecation","c"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "power_node.h",
    "line": 6,
    "function": null,
    "comment": "power_node.h:6:  Include 'pr2_power_board/PowerBoardCommand.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "power_node.h",
    "line": 7,
    "function": null,
    "comment": "power_node.h:7:  Include 'boost/thread/mutex.hpp' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node.h",
    "line": 9,
    "function": null,
    "comment": "power_node.h:9:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node.h",
    "line": 10,
    "function": null,
    "comment": "power_node.h:10:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "power_node.h",
    "line": 11,
    "function": null,
    "comment": "power_node.h:11:  public: should be indented +1 space inside class Interface  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "power_node.h",
    "line": 12,
    "function": null,
    "comment": "power_node.h:12:  Do not leave a blank line after 'public:'  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "power_node.h",
    "line": 16,
    "function": null,
    "comment": "power_node.h:16:  Single-parameter constructors should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "power_node.h",
    "line": 21,
    "function": null,
    "comment": "power_node.h:21:  Is this a non-const reference? If so, make const or use a pointer: fd_set &set  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "power_node.h",
    "line": 21,
    "function": null,
    "comment": "power_node.h:21:  Is this a non-const reference? If so, make const or use a pointer: int &max_sock  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node.h",
    "line": 27,
    "function": null,
    "comment": "power_node.h:27:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node.h",
    "line": 28,
    "function": null,
    "comment": "power_node.h:28:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "power_node.h",
    "line": 29,
    "function": null,
    "comment": "power_node.h:29:  public: should be indented +1 space inside class Device  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node.h",
    "line": 31,
    "function": null,
    "comment": "power_node.h:31:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node.h",
    "line": 33,
    "function": null,
    "comment": "power_node.h:33:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node.h",
    "line": 37,
    "function": null,
    "comment": "power_node.h:37:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node.h",
    "line": 39,
    "function": null,
    "comment": "power_node.h:39:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node.h",
    "line": 43,
    "function": null,
    "comment": "power_node.h:43:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not use meaningless empty statements.",
    "file": "power_node.h",
    "line": 45,
    "function": null,
    "comment": "power_node.h:45:  You don't need a ; after a }  [readability/braces] [4]",
    "tags": ["code-standards","google-cpp","empty-statement","ambiguous-code"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "power_node.h",
    "line": 46,
    "function": null,
    "comment": "power_node.h:46:  private: should be indented +1 space inside class Device  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node.h",
    "line": 50,
    "function": null,
    "comment": "power_node.h:50:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node.h",
    "line": 55,
    "function": null,
    "comment": "power_node.h:55:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "power_node.h",
    "line": 56,
    "function": null,
    "comment": "power_node.h:56:  public: should be indented +1 space inside class PowerBoard  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node.h",
    "line": 57,
    "function": null,
    "comment": "power_node.h:57:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "power_node.h",
    "line": 57,
    "function": null,
    "comment": "power_node.h:57:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "power_node.h",
    "line": 57,
    "function": null,
    "comment": "power_node.h:57:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "power_node.h",
    "line": 57,
    "function": null,
    "comment": "power_node.h:57:  Constructors callable with one argument should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "power_node.h",
    "line": 58,
    "function": null,
    "comment": "power_node.h:58:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "power_node.h",
    "line": 58,
    "function": null,
    "comment": "power_node.h:58:  Is this a non-const reference? If so, make const or use a pointer: pr2_power_board::PowerBoardCommand::Request &req_  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "power_node.h",
    "line": 59,
    "function": null,
    "comment": "power_node.h:59:  Is this a non-const reference? If so, make const or use a pointer: pr2_power_board::PowerBoardCommand::Response &res_  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node.h",
    "line": 69,
    "function": null,
    "comment": "power_node.h:69:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "power_node.h",
    "line": 71,
    "function": null,
    "comment": "power_node.h:71:  private: should be indented +1 space inside class PowerBoard  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "power_node.h",
    "line": 69,
    "function": null,
    "comment": "power_node.h:69:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "power_node2.h",
    "line": null,
    "function": null,
    "comment": "power_node2.h:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "All headers must be protected against multiple inclusion by",
    "file": "power_node2.h",
    "line": null,
    "function": null,
    "comment": "power_node2.h:0:  No #ifndef header guard found.  [build/header_guard] [5]",
    "tags": ["ros","code-standards","google-cpp","ros-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "Do not include the C standard headers. Use the C++ headers instead.",
    "file": "power_node2.h",
    "line": 4,
    "function": null,
    "comment": "power_node2.h:4:  Include 'ctime' instead of 'time.h'.  [build/include] [5]",
    "tags": ["hicpp","code-standards","headers","include","preprocessor","deprecation","c"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "power_node2.h",
    "line": 7,
    "function": null,
    "comment": "power_node2.h:7:  Include 'pr2_power_board/PowerBoardCommand.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "power_node2.h",
    "line": 9,
    "function": null,
    "comment": "power_node2.h:9:  Include 'pr2_msgs/BatteryServer2.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "power_node2.h",
    "line": 10,
    "function": null,
    "comment": "power_node2.h:10:  Include 'boost/thread/mutex.hpp' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node2.h",
    "line": 12,
    "function": null,
    "comment": "power_node2.h:12:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node2.h",
    "line": 13,
    "function": null,
    "comment": "power_node2.h:13:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "power_node2.h",
    "line": 14,
    "function": null,
    "comment": "power_node2.h:14:  public: should be indented +1 space inside class Interface  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "power_node2.h",
    "line": 15,
    "function": null,
    "comment": "power_node2.h:15:  Do not leave a blank line after 'public:'  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "power_node2.h",
    "line": 21,
    "function": null,
    "comment": "power_node2.h:21:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "power_node2.h",
    "line": 23,
    "function": null,
    "comment": "power_node2.h:23:  Is this a non-const reference? If so, make const or use a pointer: fd_set &set  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "power_node2.h",
    "line": 23,
    "function": null,
    "comment": "power_node2.h:23:  Is this a non-const reference? If so, make const or use a pointer: int &max_sock  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node2.h",
    "line": 28,
    "function": null,
    "comment": "power_node2.h:28:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node2.h",
    "line": 29,
    "function": null,
    "comment": "power_node2.h:29:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "power_node2.h",
    "line": 30,
    "function": null,
    "comment": "power_node2.h:30:  public: should be indented +1 space inside class Device  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node2.h",
    "line": 32,
    "function": null,
    "comment": "power_node2.h:32:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node2.h",
    "line": 34,
    "function": null,
    "comment": "power_node2.h:34:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node2.h",
    "line": 38,
    "function": null,
    "comment": "power_node2.h:38:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node2.h",
    "line": 40,
    "function": null,
    "comment": "power_node2.h:40:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node2.h",
    "line": 44,
    "function": null,
    "comment": "power_node2.h:44:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not use meaningless empty statements.",
    "file": "power_node2.h",
    "line": 46,
    "function": null,
    "comment": "power_node2.h:46:  You don't need a ; after a }  [readability/braces] [4]",
    "tags": ["code-standards","google-cpp","empty-statement","ambiguous-code"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "power_node2.h",
    "line": 47,
    "function": null,
    "comment": "power_node2.h:47:  private: should be indented +1 space inside class Device  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node2.h",
    "line": 51,
    "function": null,
    "comment": "power_node2.h:51:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node2.h",
    "line": 56,
    "function": null,
    "comment": "power_node2.h:56:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "power_node2.h",
    "line": 57,
    "function": null,
    "comment": "power_node2.h:57:  public: should be indented +1 space inside class PowerBoard  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node2.h",
    "line": 58,
    "function": null,
    "comment": "power_node2.h:58:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "power_node2.h",
    "line": 58,
    "function": null,
    "comment": "power_node2.h:58:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "power_node2.h",
    "line": 58,
    "function": null,
    "comment": "power_node2.h:58:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "power_node2.h",
    "line": 59,
    "function": null,
    "comment": "power_node2.h:59:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "power_node2.h",
    "line": 59,
    "function": null,
    "comment": "power_node2.h:59:  Is this a non-const reference? If so, make const or use a pointer: pr2_power_board::PowerBoardCommand::Request &req_  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "power_node2.h",
    "line": 60,
    "function": null,
    "comment": "power_node2.h:60:  Is this a non-const reference? If so, make const or use a pointer: pr2_power_board::PowerBoardCommand::Response &res_  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "power_node2.h",
    "line": 61,
    "function": null,
    "comment": "power_node2.h:61:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "power_node2.h",
    "line": 61,
    "function": null,
    "comment": "power_node2.h:61:  Is this a non-const reference? If so, make const or use a pointer: pr2_power_board::PowerBoardCommand2::Request &req_  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "power_node2.h",
    "line": 62,
    "function": null,
    "comment": "power_node2.h:62:  Is this a non-const reference? If so, make const or use a pointer: pr2_power_board::PowerBoardCommand2::Response &res_  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node2.h",
    "line": 72,
    "function": null,
    "comment": "power_node2.h:72:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node2.h",
    "line": 75,
    "function": null,
    "comment": "power_node2.h:75:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "power_node2.h",
    "line": 75,
    "function": null,
    "comment": "power_node2.h:75:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "power_node2.h",
    "line": 77,
    "function": null,
    "comment": "power_node2.h:77:  private: should be indented +1 space inside class PowerBoard  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "power_node2.h",
    "line": 88,
    "function": null,
    "comment": "power_node2.h:88:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node2.h",
    "line": 89,
    "function": null,
    "comment": "power_node2.h:89:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "power_node2.h",
    "line": 96,
    "function": null,
    "comment": "power_node2.h:96:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "power_node2.h",
    "line": 85,
    "function": null,
    "comment": "power_node2.h:85:  Add #include <map> for map<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_.",
    "file": "power_comm.h",
    "line": 30,
    "function": null,
    "comment": "power_comm.h:30:  #ifndef header guard has wrong style, please use: _HOME_ANDRE_ROS_HAROS_ANALYSER_POWER_COMM_H_  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the guard's end should be '#endif  // <PROJECT>_<PATH>_<FILE>_H_' or '#endif  /* <PROJECT>_<PATH>_<FILE>_H_ */'.",
    "file": "power_comm.h",
    "line": 187,
    "function": null,
    "comment": "power_comm.h:187:  #endif line should be '#endif  // _HOME_ANDRE_ROS_HAROS_ANALYSER_POWER_COMM_H_'  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_comm.h",
    "line": 36,
    "function": null,
    "comment": "power_comm.h:36:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "power_comm.h",
    "line": 46,
    "function": null,
    "comment": "power_comm.h:46:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_comm.h",
    "line": 48,
    "function": null,
    "comment": "power_comm.h:48:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_comm.h",
    "line": 49,
    "function": null,
    "comment": "power_comm.h:49:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_comm.h",
    "line": 50,
    "function": null,
    "comment": "power_comm.h:50:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_comm.h",
    "line": 53,
    "function": null,
    "comment": "power_comm.h:53:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_comm.h",
    "line": 54,
    "function": null,
    "comment": "power_comm.h:54:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "power_comm.h",
    "line": 54,
    "function": null,
    "comment": "power_comm.h:54:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_comm.h",
    "line": 54,
    "function": null,
    "comment": "power_comm.h:54:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_comm.h",
    "line": 55,
    "function": null,
    "comment": "power_comm.h:55:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_comm.h",
    "line": 56,
    "function": null,
    "comment": "power_comm.h:56:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_comm.h",
    "line": 58,
    "function": null,
    "comment": "power_comm.h:58:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "power_comm.h",
    "line": 59,
    "function": null,
    "comment": "power_comm.h:59:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_comm.h",
    "line": 62,
    "function": null,
    "comment": "power_comm.h:62:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_comm.h",
    "line": 63,
    "function": null,
    "comment": "power_comm.h:63:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_comm.h",
    "line": 69,
    "function": null,
    "comment": "power_comm.h:69:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "power_comm.h",
    "line": 96,
    "function": null,
    "comment": "power_comm.h:96:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_comm.h",
    "line": 99,
    "function": null,
    "comment": "power_comm.h:99:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_comm.h",
    "line": 100,
    "function": null,
    "comment": "power_comm.h:100:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_comm.h",
    "line": 106,
    "function": null,
    "comment": "power_comm.h:106:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_comm.h",
    "line": 115,
    "function": null,
    "comment": "power_comm.h:115:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_comm.h",
    "line": 119,
    "function": null,
    "comment": "power_comm.h:119:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "power_comm.h",
    "line": 130,
    "function": null,
    "comment": "power_comm.h:130:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "power_comm.h",
    "line": 131,
    "function": null,
    "comment": "power_comm.h:131:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_comm.h",
    "line": 133,
    "function": null,
    "comment": "power_comm.h:133:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_comm.h",
    "line": 134,
    "function": null,
    "comment": "power_comm.h:134:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "power_comm.h",
    "line": 135,
    "function": null,
    "comment": "power_comm.h:135:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "power_comm.h",
    "line": 136,
    "function": null,
    "comment": "power_comm.h:136:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "power_comm.h",
    "line": 137,
    "function": null,
    "comment": "power_comm.h:137:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_comm.h",
    "line": 139,
    "function": null,
    "comment": "power_comm.h:139:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_comm.h",
    "line": 140,
    "function": null,
    "comment": "power_comm.h:140:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_comm.h",
    "line": 140,
    "function": null,
    "comment": "power_comm.h:140:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_comm.h",
    "line": 143,
    "function": null,
    "comment": "power_comm.h:143:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "power_comm.h",
    "line": 144,
    "function": null,
    "comment": "power_comm.h:144:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_comm.h",
    "line": 144,
    "function": null,
    "comment": "power_comm.h:144:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_comm.h",
    "line": 152,
    "function": null,
    "comment": "power_comm.h:152:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "power_comm.h",
    "line": 153,
    "function": null,
    "comment": "power_comm.h:153:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_comm.h",
    "line": 156,
    "function": null,
    "comment": "power_comm.h:156:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "power_comm.h",
    "line": 159,
    "function": null,
    "comment": "power_comm.h:159:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_comm.h",
    "line": 163,
    "function": null,
    "comment": "power_comm.h:163:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "power_comm.h",
    "line": 172,
    "function": null,
    "comment": "power_comm.h:172:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_comm.h",
    "line": 175,
    "function": null,
    "comment": "power_comm.h:175:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "power_comm.h",
    "line": 177,
    "function": null,
    "comment": "power_comm.h:177:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "power_comm.h",
    "line": 178,
    "function": null,
    "comment": "power_comm.h:178:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_comm.h",
    "line": 181,
    "function": null,
    "comment": "power_comm.h:181:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_comm.h",
    "line": 182,
    "function": null,
    "comment": "power_comm.h:182:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "power_comm.h",
    "line": 183,
    "function": null,
    "comment": "power_comm.h:183:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "power_comm.h",
    "line": 185,
    "function": null,
    "comment": "power_comm.h:185:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not include the C standard headers. Use the C++ headers instead.",
    "file": "power_node.cpp",
    "line": 30,
    "function": null,
    "comment": "power_node.cpp:30:  Include 'cstdio' instead of 'stdio.h'.  [build/include] [5]",
    "tags": ["hicpp","code-standards","headers","include","preprocessor","deprecation","c"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "power_node.cpp",
    "line": 31,
    "function": null,
    "comment": "power_node.cpp:31:  Include 'stdint.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not include the C standard headers. Use the C++ headers instead.",
    "file": "power_node.cpp",
    "line": 31,
    "function": null,
    "comment": "power_node.cpp:31:  Include 'cstdint' instead of 'stdint.h'.  [build/include] [5]",
    "tags": ["hicpp","code-standards","headers","include","preprocessor","deprecation","c"]
  },
  {
    "rule": "Do not include the C standard headers. Use the C++ headers instead.",
    "file": "power_node.cpp",
    "line": 32,
    "function": null,
    "comment": "power_node.cpp:32:  Include 'cstring' instead of 'string.h'.  [build/include] [5]",
    "tags": ["hicpp","code-standards","headers","include","preprocessor","deprecation","c"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "power_node.cpp",
    "line": 34,
    "function": null,
    "comment": "power_node.cpp:34:  Include 'stdlib.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not include the C standard headers. Use the C++ headers instead.",
    "file": "power_node.cpp",
    "line": 34,
    "function": null,
    "comment": "power_node.cpp:34:  Include 'cstdlib' instead of 'stdlib.h'.  [build/include] [5]",
    "tags": ["hicpp","code-standards","headers","include","preprocessor","deprecation","c"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "power_node.cpp",
    "line": 37,
    "function": null,
    "comment": "power_node.cpp:37:  Include 'assert.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not include the C standard headers. Use the C++ headers instead.",
    "file": "power_node.cpp",
    "line": 37,
    "function": null,
    "comment": "power_node.cpp:37:  Include 'cassert' instead of 'assert.h'.  [build/include] [5]",
    "tags": ["hicpp","code-standards","headers","include","preprocessor","deprecation","c"]
  },
  {
    "rule": "Do not include the C standard headers. Use the C++ headers instead.",
    "file": "power_node.cpp",
    "line": 38,
    "function": null,
    "comment": "power_node.cpp:38:  Include 'cerrno' instead of 'errno.h'.  [build/include] [5]",
    "tags": ["hicpp","code-standards","headers","include","preprocessor","deprecation","c"]
  },
  {
    "rule": "Do not include the C standard headers. Use the C++ headers instead.",
    "file": "power_node.cpp",
    "line": 39,
    "function": null,
    "comment": "power_node.cpp:39:  Include 'csignal' instead of 'signal.h'.  [build/include] [5]",
    "tags": ["hicpp","code-standards","headers","include","preprocessor","deprecation","c"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "power_node.cpp",
    "line": 41,
    "function": null,
    "comment": "power_node.cpp:41:  Include 'sstream' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "power_node.cpp",
    "line": 42,
    "function": null,
    "comment": "power_node.cpp:42:  Include 'iostream' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "power_node.cpp",
    "line": 43,
    "function": null,
    "comment": "power_node.cpp:43:  Found C system header after C++ system header. Should be: power_node.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "power_node.cpp",
    "line": 44,
    "function": null,
    "comment": "power_node.cpp:44:  Found C system header after C++ system header. Should be: power_node.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not include the same file twice.",
    "file": "power_node.cpp",
    "line": 47,
    "function": null,
    "comment": "power_node.cpp:47:  'sys/types.h' already included at power_node.cpp:36  [build/include] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "power_node.cpp",
    "line": 48,
    "function": null,
    "comment": "power_node.cpp:48:  Found C system header after C++ system header. Should be: power_node.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "power_node.cpp",
    "line": 49,
    "function": null,
    "comment": "power_node.cpp:49:  Found C system header after C++ system header. Should be: power_node.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "power_node.cpp",
    "line": 50,
    "function": null,
    "comment": "power_node.cpp:50:  Found C system header after C++ system header. Should be: power_node.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not include the same file twice.",
    "file": "power_node.cpp",
    "line": 51,
    "function": null,
    "comment": "power_node.cpp:51:  'sys/socket.h' already included at power_node.cpp:48  [build/include] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "power_node.cpp",
    "line": 52,
    "function": null,
    "comment": "power_node.cpp:52:  Found C system header after C++ system header. Should be: power_node.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "power_node.cpp",
    "line": 53,
    "function": null,
    "comment": "power_node.cpp:53:  Found C system header after C++ system header. Should be: power_node.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "power_node.cpp",
    "line": 55,
    "function": null,
    "comment": "power_node.cpp:55:  Found C system header after C++ system header. Should be: power_node.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include the directory when naming header files.",
    "file": "power_node.cpp",
    "line": 57,
    "function": null,
    "comment": "power_node.cpp:57:  Include the directory when naming .h files  [build/include] [4]",
    "tags": ["code-standards","google-cpp","naming","headers","include"]
  },
  {
    "rule": "Include the directory when naming header files.",
    "file": "power_node.cpp",
    "line": 58,
    "function": null,
    "comment": "power_node.cpp:58:  Include the directory when naming .h files  [build/include] [4]",
    "tags": ["code-standards","google-cpp","naming","headers","include"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "power_node.cpp",
    "line": 59,
    "function": null,
    "comment": "power_node.cpp:59:  Include 'diagnostic_msgs/DiagnosticArray.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "power_node.cpp",
    "line": 63,
    "function": null,
    "comment": "power_node.cpp:63:  Include 'ros/ros.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "power_node.cpp",
    "line": 65,
    "function": null,
    "comment": "power_node.cpp:65:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "power_node.cpp",
    "line": 75,
    "function": null,
    "comment": "power_node.cpp:75:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node.cpp",
    "line": 79,
    "function": null,
    "comment": "power_node.cpp:79:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node.cpp",
    "line": 81,
    "function": null,
    "comment": "power_node.cpp:81:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node.cpp",
    "line": 82,
    "function": null,
    "comment": "power_node.cpp:82:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node.cpp",
    "line": 83,
    "function": null,
    "comment": "power_node.cpp:83:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node.cpp",
    "line": 84,
    "function": null,
    "comment": "power_node.cpp:84:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node.cpp",
    "line": 85,
    "function": null,
    "comment": "power_node.cpp:85:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node.cpp",
    "line": 86,
    "function": null,
    "comment": "power_node.cpp:86:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node.cpp",
    "line": 87,
    "function": null,
    "comment": "power_node.cpp:87:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node.cpp",
    "line": 88,
    "function": null,
    "comment": "power_node.cpp:88:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "power_node.cpp",
    "line": 88,
    "function": null,
    "comment": "power_node.cpp:88:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "power_node.cpp",
    "line": 102,
    "function": null,
    "comment": "power_node.cpp:102:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node.cpp",
    "line": 109,
    "function": null,
    "comment": "power_node.cpp:109:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node.cpp",
    "line": 111,
    "function": null,
    "comment": "power_node.cpp:111:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node.cpp",
    "line": 112,
    "function": null,
    "comment": "power_node.cpp:112:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node.cpp",
    "line": 113,
    "function": null,
    "comment": "power_node.cpp:113:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node.cpp",
    "line": 114,
    "function": null,
    "comment": "power_node.cpp:114:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node.cpp",
    "line": 115,
    "function": null,
    "comment": "power_node.cpp:115:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node.cpp",
    "line": 116,
    "function": null,
    "comment": "power_node.cpp:116:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node.cpp",
    "line": 118,
    "function": null,
    "comment": "power_node.cpp:118:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "power_node.cpp",
    "line": 126,
    "function": null,
    "comment": "power_node.cpp:126:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node.cpp",
    "line": 129,
    "function": null,
    "comment": "power_node.cpp:129:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "power_node.cpp",
    "line": 129,
    "function": null,
    "comment": "power_node.cpp:129:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node.cpp",
    "line": 129,
    "function": null,
    "comment": "power_node.cpp:129:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "power_node.cpp",
    "line": 129,
    "function": null,
    "comment": "power_node.cpp:129:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node.cpp",
    "line": 130,
    "function": null,
    "comment": "power_node.cpp:130:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node.cpp",
    "line": 133,
    "function": null,
    "comment": "power_node.cpp:133:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "power_node.cpp",
    "line": 136,
    "function": null,
    "comment": "power_node.cpp:136:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "power_node.cpp",
    "line": 138,
    "function": null,
    "comment": "power_node.cpp:138:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "power_node.cpp",
    "line": 143,
    "function": null,
    "comment": "power_node.cpp:143:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "power_node.cpp",
    "line": 150,
    "function": null,
    "comment": "power_node.cpp:150:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node.cpp",
    "line": 163,
    "function": null,
    "comment": "power_node.cpp:163:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "power_node.cpp",
    "line": 164,
    "function": null,
    "comment": "power_node.cpp:164:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Use 2 spaces for indentation.",
    "file": "power_node.cpp",
    "line": 171,
    "function": null,
    "comment": "power_node.cpp:171:  Weird number of spaces at line-start.  Are you using a 2-space indent?  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "power_node.cpp",
    "line": 173,
    "function": null,
    "comment": "power_node.cpp:173:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "power_node.cpp",
    "line": 181,
    "function": null,
    "comment": "power_node.cpp:181:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node.cpp",
    "line": 187,
    "function": null,
    "comment": "power_node.cpp:187:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "power_node.cpp",
    "line": 193,
    "function": null,
    "comment": "power_node.cpp:193:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node.cpp",
    "line": 203,
    "function": null,
    "comment": "power_node.cpp:203:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "power_node.cpp",
    "line": 204,
    "function": null,
    "comment": "power_node.cpp:204:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Use 2 spaces for indentation.",
    "file": "power_node.cpp",
    "line": 221,
    "function": null,
    "comment": "power_node.cpp:221:  Weird number of spaces at line-start.  Are you using a 2-space indent?  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "power_node.cpp",
    "line": 225,
    "function": null,
    "comment": "power_node.cpp:225:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "power_node.cpp",
    "line": 233,
    "function": null,
    "comment": "power_node.cpp:233:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "power_node.cpp",
    "line": 241,
    "function": null,
    "comment": "power_node.cpp:241:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node.cpp",
    "line": 247,
    "function": null,
    "comment": "power_node.cpp:247:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node.cpp",
    "line": 254,
    "function": null,
    "comment": "power_node.cpp:254:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "power_node.cpp",
    "line": 255,
    "function": null,
    "comment": "power_node.cpp:255:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node.cpp",
    "line": 264,
    "function": null,
    "comment": "power_node.cpp:264:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "power_node.cpp",
    "line": 265,
    "function": null,
    "comment": "power_node.cpp:265:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "power_node.cpp",
    "line": 266,
    "function": null,
    "comment": "power_node.cpp:266:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "power_node.cpp",
    "line": 275,
    "function": null,
    "comment": "power_node.cpp:275:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "power_node.cpp",
    "line": 276,
    "function": null,
    "comment": "power_node.cpp:276:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "power_node.cpp",
    "line": 281,
    "function": null,
    "comment": "power_node.cpp:281:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "power_node.cpp",
    "line": 282,
    "function": null,
    "comment": "power_node.cpp:282:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node.cpp",
    "line": 285,
    "function": null,
    "comment": "power_node.cpp:285:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node.cpp",
    "line": 286,
    "function": null,
    "comment": "power_node.cpp:286:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "power_node.cpp",
    "line": 288,
    "function": null,
    "comment": "power_node.cpp:288:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "power_node.cpp",
    "line": 294,
    "function": null,
    "comment": "power_node.cpp:294:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "power_node.cpp",
    "line": 295,
    "function": null,
    "comment": "power_node.cpp:295:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "power_node.cpp",
    "line": 295,
    "function": null,
    "comment": "power_node.cpp:295:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node.cpp",
    "line": 296,
    "function": null,
    "comment": "power_node.cpp:296:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "power_node.cpp",
    "line": 296,
    "function": null,
    "comment": "power_node.cpp:296:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "power_node.cpp",
    "line": 300,
    "function": null,
    "comment": "power_node.cpp:300:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "power_node.cpp",
    "line": 300,
    "function": null,
    "comment": "power_node.cpp:300:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "power_node.cpp",
    "line": 302,
    "function": null,
    "comment": "power_node.cpp:302:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "power_node.cpp",
    "line": 304,
    "function": null,
    "comment": "power_node.cpp:304:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "power_node.cpp",
    "line": 305,
    "function": null,
    "comment": "power_node.cpp:305:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "power_node.cpp",
    "line": 310,
    "function": null,
    "comment": "power_node.cpp:310:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node.cpp",
    "line": 311,
    "function": null,
    "comment": "power_node.cpp:311:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "power_node.cpp",
    "line": 311,
    "function": null,
    "comment": "power_node.cpp:311:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "power_node.cpp",
    "line": 318,
    "function": null,
    "comment": "power_node.cpp:318:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node.cpp",
    "line": 323,
    "function": null,
    "comment": "power_node.cpp:323:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "power_node.cpp",
    "line": 330,
    "function": null,
    "comment": "power_node.cpp:330:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "power_node.cpp",
    "line": 330,
    "function": null,
    "comment": "power_node.cpp:330:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "power_node.cpp",
    "line": 333,
    "function": null,
    "comment": "power_node.cpp:333:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "power_node.cpp",
    "line": 333,
    "function": null,
    "comment": "power_node.cpp:333:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "power_node.cpp",
    "line": 336,
    "function": null,
    "comment": "power_node.cpp:336:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "power_node.cpp",
    "line": 336,
    "function": null,
    "comment": "power_node.cpp:336:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "power_node.cpp",
    "line": 339,
    "function": null,
    "comment": "power_node.cpp:339:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "power_node.cpp",
    "line": 339,
    "function": null,
    "comment": "power_node.cpp:339:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "power_node.cpp",
    "line": 342,
    "function": null,
    "comment": "power_node.cpp:342:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "power_node.cpp",
    "line": 342,
    "function": null,
    "comment": "power_node.cpp:342:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "power_node.cpp",
    "line": 342,
    "function": null,
    "comment": "power_node.cpp:342:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node.cpp",
    "line": 355,
    "function": null,
    "comment": "power_node.cpp:355:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node.cpp",
    "line": 356,
    "function": null,
    "comment": "power_node.cpp:356:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "power_node.cpp",
    "line": 360,
    "function": null,
    "comment": "power_node.cpp:360:  Missing spaces around ==  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "power_node.cpp",
    "line": 363,
    "function": null,
    "comment": "power_node.cpp:363:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "power_node.cpp",
    "line": 363,
    "function": null,
    "comment": "power_node.cpp:363:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "power_node.cpp",
    "line": 363,
    "function": null,
    "comment": "power_node.cpp:363:  Missing spaces around ==  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "power_node.cpp",
    "line": 366,
    "function": null,
    "comment": "power_node.cpp:366:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "power_node.cpp",
    "line": 366,
    "function": null,
    "comment": "power_node.cpp:366:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "power_node.cpp",
    "line": 366,
    "function": null,
    "comment": "power_node.cpp:366:  Missing spaces around ==  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "power_node.cpp",
    "line": 369,
    "function": null,
    "comment": "power_node.cpp:369:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "power_node.cpp",
    "line": 369,
    "function": null,
    "comment": "power_node.cpp:369:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "power_node.cpp",
    "line": 369,
    "function": null,
    "comment": "power_node.cpp:369:  Missing spaces around ==  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node.cpp",
    "line": 379,
    "function": null,
    "comment": "power_node.cpp:379:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node.cpp",
    "line": 380,
    "function": null,
    "comment": "power_node.cpp:380:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node.cpp",
    "line": 380,
    "function": null,
    "comment": "power_node.cpp:380:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node.cpp",
    "line": 381,
    "function": null,
    "comment": "power_node.cpp:381:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "power_node.cpp",
    "line": 385,
    "function": null,
    "comment": "power_node.cpp:385:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node.cpp",
    "line": 391,
    "function": null,
    "comment": "power_node.cpp:391:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node.cpp",
    "line": 400,
    "function": null,
    "comment": "power_node.cpp:400:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node.cpp",
    "line": 401,
    "function": null,
    "comment": "power_node.cpp:401:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node.cpp",
    "line": 401,
    "function": null,
    "comment": "power_node.cpp:401:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "power_node.cpp",
    "line": 402,
    "function": null,
    "comment": "power_node.cpp:402:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "power_node.cpp",
    "line": 402,
    "function": null,
    "comment": "power_node.cpp:402:  Missing space before ( in switch(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node.cpp",
    "line": 418,
    "function": null,
    "comment": "power_node.cpp:418:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node.cpp",
    "line": 419,
    "function": null,
    "comment": "power_node.cpp:419:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node.cpp",
    "line": 419,
    "function": null,
    "comment": "power_node.cpp:419:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "power_node.cpp",
    "line": 420,
    "function": null,
    "comment": "power_node.cpp:420:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "power_node.cpp",
    "line": 420,
    "function": null,
    "comment": "power_node.cpp:420:  Missing space before ( in switch(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node.cpp",
    "line": 440,
    "function": null,
    "comment": "power_node.cpp:440:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node.cpp",
    "line": 441,
    "function": null,
    "comment": "power_node.cpp:441:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "power_node.cpp",
    "line": 441,
    "function": null,
    "comment": "power_node.cpp:441:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node.cpp",
    "line": 442,
    "function": null,
    "comment": "power_node.cpp:442:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node.cpp",
    "line": 446,
    "function": null,
    "comment": "power_node.cpp:446:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node.cpp",
    "line": 447,
    "function": null,
    "comment": "power_node.cpp:447:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node.cpp",
    "line": 449,
    "function": null,
    "comment": "power_node.cpp:449:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node.cpp",
    "line": 450,
    "function": null,
    "comment": "power_node.cpp:450:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node.cpp",
    "line": 454,
    "function": null,
    "comment": "power_node.cpp:454:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "power_node.cpp",
    "line": 454,
    "function": null,
    "comment": "power_node.cpp:454:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node.cpp",
    "line": 455,
    "function": null,
    "comment": "power_node.cpp:455:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "power_node.cpp",
    "line": 456,
    "function": null,
    "comment": "power_node.cpp:456:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node.cpp",
    "line": 456,
    "function": null,
    "comment": "power_node.cpp:456:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "power_node.cpp",
    "line": 456,
    "function": null,
    "comment": "power_node.cpp:456:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node.cpp",
    "line": 457,
    "function": null,
    "comment": "power_node.cpp:457:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "power_node.cpp",
    "line": 463,
    "function": null,
    "comment": "power_node.cpp:463:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node.cpp",
    "line": 464,
    "function": null,
    "comment": "power_node.cpp:464:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "power_node.cpp",
    "line": 465,
    "function": null,
    "comment": "power_node.cpp:465:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node.cpp",
    "line": 466,
    "function": null,
    "comment": "power_node.cpp:466:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node.cpp",
    "line": 484,
    "function": null,
    "comment": "power_node.cpp:484:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node.cpp",
    "line": 485,
    "function": null,
    "comment": "power_node.cpp:485:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node.cpp",
    "line": 487,
    "function": null,
    "comment": "power_node.cpp:487:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node.cpp",
    "line": 497,
    "function": null,
    "comment": "power_node.cpp:497:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "power_node.cpp",
    "line": 497,
    "function": null,
    "comment": "power_node.cpp:497:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node.cpp",
    "line": 498,
    "function": null,
    "comment": "power_node.cpp:498:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "power_node.cpp",
    "line": 499,
    "function": null,
    "comment": "power_node.cpp:499:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node.cpp",
    "line": 499,
    "function": null,
    "comment": "power_node.cpp:499:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "power_node.cpp",
    "line": 499,
    "function": null,
    "comment": "power_node.cpp:499:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node.cpp",
    "line": 500,
    "function": null,
    "comment": "power_node.cpp:500:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "power_node.cpp",
    "line": 506,
    "function": null,
    "comment": "power_node.cpp:506:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node.cpp",
    "line": 507,
    "function": null,
    "comment": "power_node.cpp:507:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "power_node.cpp",
    "line": 508,
    "function": null,
    "comment": "power_node.cpp:508:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node.cpp",
    "line": 509,
    "function": null,
    "comment": "power_node.cpp:509:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node.cpp",
    "line": 528,
    "function": null,
    "comment": "power_node.cpp:528:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node.cpp",
    "line": 532,
    "function": null,
    "comment": "power_node.cpp:532:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node.cpp",
    "line": 534,
    "function": null,
    "comment": "power_node.cpp:534:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node.cpp",
    "line": 535,
    "function": null,
    "comment": "power_node.cpp:535:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node.cpp",
    "line": 537,
    "function": null,
    "comment": "power_node.cpp:537:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node.cpp",
    "line": 542,
    "function": null,
    "comment": "power_node.cpp:542:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node.cpp",
    "line": 547,
    "function": null,
    "comment": "power_node.cpp:547:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "power_node.cpp",
    "line": 548,
    "function": null,
    "comment": "power_node.cpp:548:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node.cpp",
    "line": 552,
    "function": null,
    "comment": "power_node.cpp:552:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "power_node.cpp",
    "line": 558,
    "function": null,
    "comment": "power_node.cpp:558:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "power_node.cpp",
    "line": 558,
    "function": null,
    "comment": "power_node.cpp:558:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "power_node.cpp",
    "line": 561,
    "function": null,
    "comment": "power_node.cpp:561:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "power_node.cpp",
    "line": 561,
    "function": null,
    "comment": "power_node.cpp:561:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "power_node.cpp",
    "line": 564,
    "function": null,
    "comment": "power_node.cpp:564:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node.cpp",
    "line": 565,
    "function": null,
    "comment": "power_node.cpp:565:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "power_node.cpp",
    "line": 566,
    "function": null,
    "comment": "power_node.cpp:566:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node.cpp",
    "line": 568,
    "function": null,
    "comment": "power_node.cpp:568:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node.cpp",
    "line": 574,
    "function": null,
    "comment": "power_node.cpp:574:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node.cpp",
    "line": 574,
    "function": null,
    "comment": "power_node.cpp:574:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "power_node.cpp",
    "line": 580,
    "function": null,
    "comment": "power_node.cpp:580:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "power_node.cpp",
    "line": 580,
    "function": null,
    "comment": "power_node.cpp:580:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "power_node.cpp",
    "line": 580,
    "function": null,
    "comment": "power_node.cpp:580:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "power_node.cpp",
    "line": 580,
    "function": null,
    "comment": "power_node.cpp:580:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "power_node.cpp",
    "line": 584,
    "function": null,
    "comment": "power_node.cpp:584:  Using C-style cast.  Use reinterpret_cast<MessageHeader*>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "power_node.cpp",
    "line": 586,
    "function": null,
    "comment": "power_node.cpp:586:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node.cpp",
    "line": 587,
    "function": null,
    "comment": "power_node.cpp:587:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "power_node.cpp",
    "line": 588,
    "function": null,
    "comment": "power_node.cpp:588:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node.cpp",
    "line": 589,
    "function": null,
    "comment": "power_node.cpp:589:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "power_node.cpp",
    "line": 590,
    "function": null,
    "comment": "power_node.cpp:590:  Using C-style cast.  Use reinterpret_cast<PowerMessage*>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "power_node.cpp",
    "line": 600,
    "function": null,
    "comment": "power_node.cpp:600:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "power_node.cpp",
    "line": 600,
    "function": null,
    "comment": "power_node.cpp:600:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "power_node.cpp",
    "line": 600,
    "function": null,
    "comment": "power_node.cpp:600:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "power_node.cpp",
    "line": 605,
    "function": null,
    "comment": "power_node.cpp:605:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "power_node.cpp",
    "line": 605,
    "function": null,
    "comment": "power_node.cpp:605:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node.cpp",
    "line": 606,
    "function": null,
    "comment": "power_node.cpp:606:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "power_node.cpp",
    "line": 607,
    "function": null,
    "comment": "power_node.cpp:607:  Using C-style cast.  Use reinterpret_cast<TransitionMessage *>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "power_node.cpp",
    "line": 612,
    "function": null,
    "comment": "power_node.cpp:612:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "power_node.cpp",
    "line": 612,
    "function": null,
    "comment": "power_node.cpp:612:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "power_node.cpp",
    "line": 612,
    "function": null,
    "comment": "power_node.cpp:612:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "power_node.cpp",
    "line": 617,
    "function": null,
    "comment": "power_node.cpp:617:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node.cpp",
    "line": 618,
    "function": null,
    "comment": "power_node.cpp:618:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "power_node.cpp",
    "line": 623,
    "function": null,
    "comment": "power_node.cpp:623:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "power_node.cpp",
    "line": 623,
    "function": null,
    "comment": "power_node.cpp:623:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "power_node.cpp",
    "line": 623,
    "function": null,
    "comment": "power_node.cpp:623:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node.cpp",
    "line": 632,
    "function": null,
    "comment": "power_node.cpp:632:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "power_node.cpp",
    "line": 632,
    "function": null,
    "comment": "power_node.cpp:632:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "power_node.cpp",
    "line": 632,
    "function": null,
    "comment": "power_node.cpp:632:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node.cpp",
    "line": 633,
    "function": null,
    "comment": "power_node.cpp:633:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node.cpp",
    "line": 635,
    "function": null,
    "comment": "power_node.cpp:635:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node.cpp",
    "line": 638,
    "function": null,
    "comment": "power_node.cpp:638:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "power_node.cpp",
    "line": 638,
    "function": null,
    "comment": "power_node.cpp:638:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node.cpp",
    "line": 639,
    "function": null,
    "comment": "power_node.cpp:639:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node.cpp",
    "line": 641,
    "function": null,
    "comment": "power_node.cpp:641:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node.cpp",
    "line": 648,
    "function": null,
    "comment": "power_node.cpp:648:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "power_node.cpp",
    "line": 649,
    "function": null,
    "comment": "power_node.cpp:649:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node.cpp",
    "line": 650,
    "function": null,
    "comment": "power_node.cpp:650:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node.cpp",
    "line": 656,
    "function": null,
    "comment": "power_node.cpp:656:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node.cpp",
    "line": 658,
    "function": null,
    "comment": "power_node.cpp:658:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node.cpp",
    "line": 659,
    "function": null,
    "comment": "power_node.cpp:659:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node.cpp",
    "line": 663,
    "function": null,
    "comment": "power_node.cpp:663:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node.cpp",
    "line": 665,
    "function": null,
    "comment": "power_node.cpp:665:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node.cpp",
    "line": 666,
    "function": null,
    "comment": "power_node.cpp:666:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "power_node.cpp",
    "line": 666,
    "function": null,
    "comment": "power_node.cpp:666:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node.cpp",
    "line": 672,
    "function": null,
    "comment": "power_node.cpp:672:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "power_node.cpp",
    "line": 673,
    "function": null,
    "comment": "power_node.cpp:673:  Missing space before ( in while(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node.cpp",
    "line": 674,
    "function": null,
    "comment": "power_node.cpp:674:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node.cpp",
    "line": 676,
    "function": null,
    "comment": "power_node.cpp:676:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node.cpp",
    "line": 681,
    "function": null,
    "comment": "power_node.cpp:681:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "power_node.cpp",
    "line": 683,
    "function": null,
    "comment": "power_node.cpp:683:  Missing space before ( in while(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node.cpp",
    "line": 684,
    "function": null,
    "comment": "power_node.cpp:684:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node.cpp",
    "line": 686,
    "function": null,
    "comment": "power_node.cpp:686:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node.cpp",
    "line": 688,
    "function": null,
    "comment": "power_node.cpp:688:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "power_node.cpp",
    "line": 689,
    "function": null,
    "comment": "power_node.cpp:689:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node.cpp",
    "line": 690,
    "function": null,
    "comment": "power_node.cpp:690:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node.cpp",
    "line": 696,
    "function": null,
    "comment": "power_node.cpp:696:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "power_node.cpp",
    "line": 703,
    "function": null,
    "comment": "power_node.cpp:703:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node.cpp",
    "line": 704,
    "function": null,
    "comment": "power_node.cpp:704:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "power_node.cpp",
    "line": 707,
    "function": null,
    "comment": "power_node.cpp:707:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node.cpp",
    "line": 708,
    "function": null,
    "comment": "power_node.cpp:708:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node.cpp",
    "line": 724,
    "function": null,
    "comment": "power_node.cpp:724:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node.cpp",
    "line": 727,
    "function": null,
    "comment": "power_node.cpp:727:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node.cpp",
    "line": 730,
    "function": null,
    "comment": "power_node.cpp:730:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node.cpp",
    "line": 733,
    "function": null,
    "comment": "power_node.cpp:733:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node.cpp",
    "line": 736,
    "function": null,
    "comment": "power_node.cpp:736:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node.cpp",
    "line": 742,
    "function": null,
    "comment": "power_node.cpp:742:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node.cpp",
    "line": 746,
    "function": null,
    "comment": "power_node.cpp:746:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node.cpp",
    "line": 749,
    "function": null,
    "comment": "power_node.cpp:749:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node.cpp",
    "line": 752,
    "function": null,
    "comment": "power_node.cpp:752:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node.cpp",
    "line": 765,
    "function": null,
    "comment": "power_node.cpp:765:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node.cpp",
    "line": 772,
    "function": null,
    "comment": "power_node.cpp:772:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node.cpp",
    "line": 775,
    "function": null,
    "comment": "power_node.cpp:775:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node.cpp",
    "line": 778,
    "function": null,
    "comment": "power_node.cpp:778:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node.cpp",
    "line": 780,
    "function": null,
    "comment": "power_node.cpp:780:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node.cpp",
    "line": 781,
    "function": null,
    "comment": "power_node.cpp:781:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node.cpp",
    "line": 794,
    "function": null,
    "comment": "power_node.cpp:794:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node.cpp",
    "line": 806,
    "function": null,
    "comment": "power_node.cpp:806:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "power_node.cpp",
    "line": 807,
    "function": null,
    "comment": "power_node.cpp:807:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node.cpp",
    "line": 808,
    "function": null,
    "comment": "power_node.cpp:808:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node.cpp",
    "line": 814,
    "function": null,
    "comment": "power_node.cpp:814:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node.cpp",
    "line": 815,
    "function": null,
    "comment": "power_node.cpp:815:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "power_node.cpp",
    "line": 817,
    "function": null,
    "comment": "power_node.cpp:817:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "power_node.cpp",
    "line": 817,
    "function": null,
    "comment": "power_node.cpp:817:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node.cpp",
    "line": 818,
    "function": null,
    "comment": "power_node.cpp:818:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "power_node.cpp",
    "line": 823,
    "function": null,
    "comment": "power_node.cpp:823:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node.cpp",
    "line": 824,
    "function": null,
    "comment": "power_node.cpp:824:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node.cpp",
    "line": 825,
    "function": null,
    "comment": "power_node.cpp:825:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "power_node.cpp",
    "line": 828,
    "function": null,
    "comment": "power_node.cpp:828:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node.cpp",
    "line": 829,
    "function": null,
    "comment": "power_node.cpp:829:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "power_node.cpp",
    "line": 832,
    "function": null,
    "comment": "power_node.cpp:832:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node.cpp",
    "line": 833,
    "function": null,
    "comment": "power_node.cpp:833:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "power_node.cpp",
    "line": 836,
    "function": null,
    "comment": "power_node.cpp:836:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node.cpp",
    "line": 837,
    "function": null,
    "comment": "power_node.cpp:837:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "power_node.cpp",
    "line": 840,
    "function": null,
    "comment": "power_node.cpp:840:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node.cpp",
    "line": 841,
    "function": null,
    "comment": "power_node.cpp:841:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "power_node.cpp",
    "line": 844,
    "function": null,
    "comment": "power_node.cpp:844:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node.cpp",
    "line": 845,
    "function": null,
    "comment": "power_node.cpp:845:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "power_node.cpp",
    "line": 848,
    "function": null,
    "comment": "power_node.cpp:848:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node.cpp",
    "line": 849,
    "function": null,
    "comment": "power_node.cpp:849:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "power_node.cpp",
    "line": 852,
    "function": null,
    "comment": "power_node.cpp:852:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node.cpp",
    "line": 858,
    "function": null,
    "comment": "power_node.cpp:858:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node.cpp",
    "line": 881,
    "function": null,
    "comment": "power_node.cpp:881:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node.cpp",
    "line": 886,
    "function": null,
    "comment": "power_node.cpp:886:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "power_node.cpp",
    "line": 891,
    "function": null,
    "comment": "power_node.cpp:891:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "power_node.cpp",
    "line": 892,
    "function": null,
    "comment": "power_node.cpp:892:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "power_node.cpp",
    "line": 892,
    "function": null,
    "comment": "power_node.cpp:892:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "power_node.cpp",
    "line": 900,
    "function": null,
    "comment": "power_node.cpp:900:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "power_node.cpp",
    "line": 901,
    "function": null,
    "comment": "power_node.cpp:901:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "power_node.cpp",
    "line": 901,
    "function": null,
    "comment": "power_node.cpp:901:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node.cpp",
    "line": 909,
    "function": null,
    "comment": "power_node.cpp:909:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node.cpp",
    "line": 918,
    "function": null,
    "comment": "power_node.cpp:918:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "power_node.cpp",
    "line": 930,
    "function": null,
    "comment": "power_node.cpp:930:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node.cpp",
    "line": 931,
    "function": null,
    "comment": "power_node.cpp:931:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "power_node.cpp",
    "line": 934,
    "function": null,
    "comment": "power_node.cpp:934:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "power_node.cpp",
    "line": 934,
    "function": null,
    "comment": "power_node.cpp:934:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node.cpp",
    "line": 935,
    "function": null,
    "comment": "power_node.cpp:935:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "power_node.cpp",
    "line": 937,
    "function": null,
    "comment": "power_node.cpp:937:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node.cpp",
    "line": 938,
    "function": null,
    "comment": "power_node.cpp:938:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node.cpp",
    "line": 939,
    "function": null,
    "comment": "power_node.cpp:939:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "power_node.cpp",
    "line": 940,
    "function": null,
    "comment": "power_node.cpp:940:  Using C-style cast.  Use reinterpret_cast<sockaddr_in*>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node.cpp",
    "line": 943,
    "function": null,
    "comment": "power_node.cpp:943:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node.cpp",
    "line": 946,
    "function": null,
    "comment": "power_node.cpp:946:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node.cpp",
    "line": 947,
    "function": null,
    "comment": "power_node.cpp:947:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "power_node.cpp",
    "line": 950,
    "function": null,
    "comment": "power_node.cpp:950:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node.cpp",
    "line": 951,
    "function": null,
    "comment": "power_node.cpp:951:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node.cpp",
    "line": 952,
    "function": null,
    "comment": "power_node.cpp:952:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node.cpp",
    "line": 956,
    "function": null,
    "comment": "power_node.cpp:956:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "power_node.cpp",
    "line": 962,
    "function": null,
    "comment": "power_node.cpp:962:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node.cpp",
    "line": 963,
    "function": null,
    "comment": "power_node.cpp:963:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node.cpp",
    "line": 965,
    "function": null,
    "comment": "power_node.cpp:965:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node.cpp",
    "line": 966,
    "function": null,
    "comment": "power_node.cpp:966:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "power_node.cpp",
    "line": 968,
    "function": null,
    "comment": "power_node.cpp:968:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node.cpp",
    "line": 971,
    "function": null,
    "comment": "power_node.cpp:971:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node.cpp",
    "line": 972,
    "function": null,
    "comment": "power_node.cpp:972:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "power_node.cpp",
    "line": 977,
    "function": null,
    "comment": "power_node.cpp:977:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node.cpp",
    "line": 978,
    "function": null,
    "comment": "power_node.cpp:978:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "power_node.cpp",
    "line": 981,
    "function": null,
    "comment": "power_node.cpp:981:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "power_node.cpp",
    "line": 983,
    "function": null,
    "comment": "power_node.cpp:983:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "power_node.cpp",
    "line": 985,
    "function": null,
    "comment": "power_node.cpp:985:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "power_node.cpp",
    "line": 988,
    "function": null,
    "comment": "power_node.cpp:988:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "power_node.cpp",
    "line": 993,
    "function": null,
    "comment": "power_node.cpp:993:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node.cpp",
    "line": 994,
    "function": null,
    "comment": "power_node.cpp:994:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node.cpp",
    "line": 1001,
    "function": null,
    "comment": "power_node.cpp:1001:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node.cpp",
    "line": 1007,
    "function": null,
    "comment": "power_node.cpp:1007:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node.cpp",
    "line": 1014,
    "function": null,
    "comment": "power_node.cpp:1014:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "power_node.cpp",
    "line": 1017,
    "function": null,
    "comment": "power_node.cpp:1017:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "power_node.cpp",
    "line": 1020,
    "function": null,
    "comment": "power_node.cpp:1020:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node.cpp",
    "line": 1021,
    "function": null,
    "comment": "power_node.cpp:1021:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "power_node.cpp",
    "line": 1032,
    "function": null,
    "comment": "power_node.cpp:1032:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "power_node.cpp",
    "line": 1032,
    "function": null,
    "comment": "power_node.cpp:1032:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "power_node.cpp",
    "line": 1033,
    "function": null,
    "comment": "power_node.cpp:1033:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "power_node.cpp",
    "line": 1033,
    "function": null,
    "comment": "power_node.cpp:1033:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "power_node.cpp",
    "line": 1035,
    "function": null,
    "comment": "power_node.cpp:1035:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node.cpp",
    "line": 1035,
    "function": null,
    "comment": "power_node.cpp:1035:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node.cpp",
    "line": 1043,
    "function": null,
    "comment": "power_node.cpp:1043:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "power_node.cpp",
    "line": 1046,
    "function": null,
    "comment": "power_node.cpp:1046:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "power_node.cpp",
    "line": 1049,
    "function": null,
    "comment": "power_node.cpp:1049:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node.cpp",
    "line": 1050,
    "function": null,
    "comment": "power_node.cpp:1050:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node.cpp",
    "line": 1050,
    "function": null,
    "comment": "power_node.cpp:1050:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node.cpp",
    "line": 1051,
    "function": null,
    "comment": "power_node.cpp:1051:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node.cpp",
    "line": 1052,
    "function": null,
    "comment": "power_node.cpp:1052:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node.cpp",
    "line": 1053,
    "function": null,
    "comment": "power_node.cpp:1053:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node.cpp",
    "line": 1054,
    "function": null,
    "comment": "power_node.cpp:1054:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "power_node.cpp",
    "line": 285,
    "function": null,
    "comment": "power_node.cpp:285:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Do not include the C standard headers. Use the C++ headers instead.",
    "file": "power_node_simulator.cpp",
    "line": 30,
    "function": null,
    "comment": "power_node_simulator.cpp:30:  Include 'cstdio' instead of 'stdio.h'.  [build/include] [5]",
    "tags": ["hicpp","code-standards","headers","include","preprocessor","deprecation","c"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "power_node_simulator.cpp",
    "line": 31,
    "function": null,
    "comment": "power_node_simulator.cpp:31:  Include 'stdint.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not include the C standard headers. Use the C++ headers instead.",
    "file": "power_node_simulator.cpp",
    "line": 31,
    "function": null,
    "comment": "power_node_simulator.cpp:31:  Include 'cstdint' instead of 'stdint.h'.  [build/include] [5]",
    "tags": ["hicpp","code-standards","headers","include","preprocessor","deprecation","c"]
  },
  {
    "rule": "Do not include the C standard headers. Use the C++ headers instead.",
    "file": "power_node_simulator.cpp",
    "line": 32,
    "function": null,
    "comment": "power_node_simulator.cpp:32:  Include 'cstring' instead of 'string.h'.  [build/include] [5]",
    "tags": ["hicpp","code-standards","headers","include","preprocessor","deprecation","c"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "power_node_simulator.cpp",
    "line": 34,
    "function": null,
    "comment": "power_node_simulator.cpp:34:  Include 'stdlib.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not include the C standard headers. Use the C++ headers instead.",
    "file": "power_node_simulator.cpp",
    "line": 34,
    "function": null,
    "comment": "power_node_simulator.cpp:34:  Include 'cstdlib' instead of 'stdlib.h'.  [build/include] [5]",
    "tags": ["hicpp","code-standards","headers","include","preprocessor","deprecation","c"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "power_node_simulator.cpp",
    "line": 37,
    "function": null,
    "comment": "power_node_simulator.cpp:37:  Include 'assert.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not include the C standard headers. Use the C++ headers instead.",
    "file": "power_node_simulator.cpp",
    "line": 37,
    "function": null,
    "comment": "power_node_simulator.cpp:37:  Include 'cassert' instead of 'assert.h'.  [build/include] [5]",
    "tags": ["hicpp","code-standards","headers","include","preprocessor","deprecation","c"]
  },
  {
    "rule": "Do not include the C standard headers. Use the C++ headers instead.",
    "file": "power_node_simulator.cpp",
    "line": 38,
    "function": null,
    "comment": "power_node_simulator.cpp:38:  Include 'cerrno' instead of 'errno.h'.  [build/include] [5]",
    "tags": ["hicpp","code-standards","headers","include","preprocessor","deprecation","c"]
  },
  {
    "rule": "Do not include the C standard headers. Use the C++ headers instead.",
    "file": "power_node_simulator.cpp",
    "line": 39,
    "function": null,
    "comment": "power_node_simulator.cpp:39:  Include 'csignal' instead of 'signal.h'.  [build/include] [5]",
    "tags": ["hicpp","code-standards","headers","include","preprocessor","deprecation","c"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "power_node_simulator.cpp",
    "line": 41,
    "function": null,
    "comment": "power_node_simulator.cpp:41:  Include 'sstream' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "power_node_simulator.cpp",
    "line": 42,
    "function": null,
    "comment": "power_node_simulator.cpp:42:  Include 'iostream' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "power_node_simulator.cpp",
    "line": 43,
    "function": null,
    "comment": "power_node_simulator.cpp:43:  Found C system header after C++ system header. Should be: power_node_simulator.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not include the same file twice.",
    "file": "power_node_simulator.cpp",
    "line": 46,
    "function": null,
    "comment": "power_node_simulator.cpp:46:  'sys/types.h' already included at power_node_simulator.cpp:36  [build/include] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "power_node_simulator.cpp",
    "line": 47,
    "function": null,
    "comment": "power_node_simulator.cpp:47:  Found C system header after C++ system header. Should be: power_node_simulator.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "power_node_simulator.cpp",
    "line": 48,
    "function": null,
    "comment": "power_node_simulator.cpp:48:  Found C system header after C++ system header. Should be: power_node_simulator.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "power_node_simulator.cpp",
    "line": 49,
    "function": null,
    "comment": "power_node_simulator.cpp:49:  Found C system header after C++ system header. Should be: power_node_simulator.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not include the same file twice.",
    "file": "power_node_simulator.cpp",
    "line": 50,
    "function": null,
    "comment": "power_node_simulator.cpp:50:  'sys/socket.h' already included at power_node_simulator.cpp:47  [build/include] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "power_node_simulator.cpp",
    "line": 51,
    "function": null,
    "comment": "power_node_simulator.cpp:51:  Found C system header after C++ system header. Should be: power_node_simulator.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "power_node_simulator.cpp",
    "line": 52,
    "function": null,
    "comment": "power_node_simulator.cpp:52:  Found C system header after C++ system header. Should be: power_node_simulator.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include the directory when naming header files.",
    "file": "power_node_simulator.cpp",
    "line": 54,
    "function": null,
    "comment": "power_node_simulator.cpp:54:  Include the directory when naming .h files  [build/include] [4]",
    "tags": ["code-standards","google-cpp","naming","headers","include"]
  },
  {
    "rule": "Include the directory when naming header files.",
    "file": "power_node_simulator.cpp",
    "line": 55,
    "function": null,
    "comment": "power_node_simulator.cpp:55:  Include the directory when naming .h files  [build/include] [4]",
    "tags": ["code-standards","google-cpp","naming","headers","include"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "power_node_simulator.cpp",
    "line": 56,
    "function": null,
    "comment": "power_node_simulator.cpp:56:  Include 'diagnostic_msgs/DiagnosticMessage.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "power_node_simulator.cpp",
    "line": 59,
    "function": null,
    "comment": "power_node_simulator.cpp:59:  Include 'ros/console.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "power_node_simulator.cpp",
    "line": 61,
    "function": null,
    "comment": "power_node_simulator.cpp:61:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node_simulator.cpp",
    "line": 71,
    "function": null,
    "comment": "power_node_simulator.cpp:71:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node_simulator.cpp",
    "line": 73,
    "function": null,
    "comment": "power_node_simulator.cpp:73:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node_simulator.cpp",
    "line": 74,
    "function": null,
    "comment": "power_node_simulator.cpp:74:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node_simulator.cpp",
    "line": 75,
    "function": null,
    "comment": "power_node_simulator.cpp:75:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node_simulator.cpp",
    "line": 76,
    "function": null,
    "comment": "power_node_simulator.cpp:76:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node_simulator.cpp",
    "line": 77,
    "function": null,
    "comment": "power_node_simulator.cpp:77:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node_simulator.cpp",
    "line": 78,
    "function": null,
    "comment": "power_node_simulator.cpp:78:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node_simulator.cpp",
    "line": 79,
    "function": null,
    "comment": "power_node_simulator.cpp:79:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node_simulator.cpp",
    "line": 80,
    "function": null,
    "comment": "power_node_simulator.cpp:80:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "power_node_simulator.cpp",
    "line": 80,
    "function": null,
    "comment": "power_node_simulator.cpp:80:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "power_node_simulator.cpp",
    "line": 94,
    "function": null,
    "comment": "power_node_simulator.cpp:94:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node_simulator.cpp",
    "line": 101,
    "function": null,
    "comment": "power_node_simulator.cpp:101:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node_simulator.cpp",
    "line": 103,
    "function": null,
    "comment": "power_node_simulator.cpp:103:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node_simulator.cpp",
    "line": 104,
    "function": null,
    "comment": "power_node_simulator.cpp:104:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node_simulator.cpp",
    "line": 105,
    "function": null,
    "comment": "power_node_simulator.cpp:105:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node_simulator.cpp",
    "line": 106,
    "function": null,
    "comment": "power_node_simulator.cpp:106:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node_simulator.cpp",
    "line": 107,
    "function": null,
    "comment": "power_node_simulator.cpp:107:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node_simulator.cpp",
    "line": 108,
    "function": null,
    "comment": "power_node_simulator.cpp:108:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node_simulator.cpp",
    "line": 110,
    "function": null,
    "comment": "power_node_simulator.cpp:110:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "power_node_simulator.cpp",
    "line": 118,
    "function": null,
    "comment": "power_node_simulator.cpp:118:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node_simulator.cpp",
    "line": 124,
    "function": null,
    "comment": "power_node_simulator.cpp:124:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node_simulator.cpp",
    "line": 125,
    "function": null,
    "comment": "power_node_simulator.cpp:125:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "power_node_simulator.cpp",
    "line": 127,
    "function": null,
    "comment": "power_node_simulator.cpp:127:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "power_node_simulator.cpp",
    "line": 133,
    "function": null,
    "comment": "power_node_simulator.cpp:133:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "power_node_simulator.cpp",
    "line": 140,
    "function": null,
    "comment": "power_node_simulator.cpp:140:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node_simulator.cpp",
    "line": 141,
    "function": null,
    "comment": "power_node_simulator.cpp:141:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "power_node_simulator.cpp",
    "line": 149,
    "function": null,
    "comment": "power_node_simulator.cpp:149:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node_simulator.cpp",
    "line": 154,
    "function": null,
    "comment": "power_node_simulator.cpp:154:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "power_node_simulator.cpp",
    "line": 161,
    "function": null,
    "comment": "power_node_simulator.cpp:161:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "power_node_simulator.cpp",
    "line": 161,
    "function": null,
    "comment": "power_node_simulator.cpp:161:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "power_node_simulator.cpp",
    "line": 164,
    "function": null,
    "comment": "power_node_simulator.cpp:164:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "power_node_simulator.cpp",
    "line": 164,
    "function": null,
    "comment": "power_node_simulator.cpp:164:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "power_node_simulator.cpp",
    "line": 167,
    "function": null,
    "comment": "power_node_simulator.cpp:167:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "power_node_simulator.cpp",
    "line": 167,
    "function": null,
    "comment": "power_node_simulator.cpp:167:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "power_node_simulator.cpp",
    "line": 170,
    "function": null,
    "comment": "power_node_simulator.cpp:170:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "power_node_simulator.cpp",
    "line": 170,
    "function": null,
    "comment": "power_node_simulator.cpp:170:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "power_node_simulator.cpp",
    "line": 176,
    "function": null,
    "comment": "power_node_simulator.cpp:176:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "power_node_simulator.cpp",
    "line": 176,
    "function": null,
    "comment": "power_node_simulator.cpp:176:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "power_node_simulator.cpp",
    "line": 176,
    "function": null,
    "comment": "power_node_simulator.cpp:176:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node_simulator.cpp",
    "line": 189,
    "function": null,
    "comment": "power_node_simulator.cpp:189:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node_simulator.cpp",
    "line": 190,
    "function": null,
    "comment": "power_node_simulator.cpp:190:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "power_node_simulator.cpp",
    "line": 194,
    "function": null,
    "comment": "power_node_simulator.cpp:194:  Missing spaces around ==  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "power_node_simulator.cpp",
    "line": 197,
    "function": null,
    "comment": "power_node_simulator.cpp:197:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "power_node_simulator.cpp",
    "line": 197,
    "function": null,
    "comment": "power_node_simulator.cpp:197:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "power_node_simulator.cpp",
    "line": 197,
    "function": null,
    "comment": "power_node_simulator.cpp:197:  Missing spaces around ==  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "power_node_simulator.cpp",
    "line": 200,
    "function": null,
    "comment": "power_node_simulator.cpp:200:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "power_node_simulator.cpp",
    "line": 200,
    "function": null,
    "comment": "power_node_simulator.cpp:200:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "power_node_simulator.cpp",
    "line": 200,
    "function": null,
    "comment": "power_node_simulator.cpp:200:  Missing spaces around ==  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "power_node_simulator.cpp",
    "line": 203,
    "function": null,
    "comment": "power_node_simulator.cpp:203:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "power_node_simulator.cpp",
    "line": 203,
    "function": null,
    "comment": "power_node_simulator.cpp:203:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "power_node_simulator.cpp",
    "line": 203,
    "function": null,
    "comment": "power_node_simulator.cpp:203:  Missing spaces around ==  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node_simulator.cpp",
    "line": 212,
    "function": null,
    "comment": "power_node_simulator.cpp:212:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node_simulator.cpp",
    "line": 215,
    "function": null,
    "comment": "power_node_simulator.cpp:215:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node_simulator.cpp",
    "line": 224,
    "function": null,
    "comment": "power_node_simulator.cpp:224:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node_simulator.cpp",
    "line": 225,
    "function": null,
    "comment": "power_node_simulator.cpp:225:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node_simulator.cpp",
    "line": 225,
    "function": null,
    "comment": "power_node_simulator.cpp:225:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "power_node_simulator.cpp",
    "line": 226,
    "function": null,
    "comment": "power_node_simulator.cpp:226:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "power_node_simulator.cpp",
    "line": 226,
    "function": null,
    "comment": "power_node_simulator.cpp:226:  Missing space before ( in switch(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node_simulator.cpp",
    "line": 242,
    "function": null,
    "comment": "power_node_simulator.cpp:242:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node_simulator.cpp",
    "line": 243,
    "function": null,
    "comment": "power_node_simulator.cpp:243:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node_simulator.cpp",
    "line": 243,
    "function": null,
    "comment": "power_node_simulator.cpp:243:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "power_node_simulator.cpp",
    "line": 244,
    "function": null,
    "comment": "power_node_simulator.cpp:244:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "power_node_simulator.cpp",
    "line": 244,
    "function": null,
    "comment": "power_node_simulator.cpp:244:  Missing space before ( in switch(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node_simulator.cpp",
    "line": 262,
    "function": null,
    "comment": "power_node_simulator.cpp:262:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node_simulator.cpp",
    "line": 264,
    "function": null,
    "comment": "power_node_simulator.cpp:264:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "power_node_simulator.cpp",
    "line": 269,
    "function": null,
    "comment": "power_node_simulator.cpp:269:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node_simulator.cpp",
    "line": 270,
    "function": null,
    "comment": "power_node_simulator.cpp:270:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node_simulator.cpp",
    "line": 287,
    "function": null,
    "comment": "power_node_simulator.cpp:287:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node_simulator.cpp",
    "line": 289,
    "function": null,
    "comment": "power_node_simulator.cpp:289:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "power_node_simulator.cpp",
    "line": 294,
    "function": null,
    "comment": "power_node_simulator.cpp:294:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node_simulator.cpp",
    "line": 295,
    "function": null,
    "comment": "power_node_simulator.cpp:295:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node_simulator.cpp",
    "line": 309,
    "function": null,
    "comment": "power_node_simulator.cpp:309:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "power_node_simulator.cpp",
    "line": 309,
    "function": null,
    "comment": "power_node_simulator.cpp:309:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "power_node_simulator.cpp",
    "line": 309,
    "function": null,
    "comment": "power_node_simulator.cpp:309:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "power_node_simulator.cpp",
    "line": 309,
    "function": null,
    "comment": "power_node_simulator.cpp:309:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node_simulator.cpp",
    "line": 310,
    "function": null,
    "comment": "power_node_simulator.cpp:310:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "power_node_simulator.cpp",
    "line": 311,
    "function": null,
    "comment": "power_node_simulator.cpp:311:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node_simulator.cpp",
    "line": 313,
    "function": null,
    "comment": "power_node_simulator.cpp:313:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node_simulator.cpp",
    "line": 315,
    "function": null,
    "comment": "power_node_simulator.cpp:315:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "power_node_simulator.cpp",
    "line": 315,
    "function": null,
    "comment": "power_node_simulator.cpp:315:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node_simulator.cpp",
    "line": 316,
    "function": null,
    "comment": "power_node_simulator.cpp:316:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node_simulator.cpp",
    "line": 318,
    "function": null,
    "comment": "power_node_simulator.cpp:318:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node_simulator.cpp",
    "line": 325,
    "function": null,
    "comment": "power_node_simulator.cpp:325:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node_simulator.cpp",
    "line": 327,
    "function": null,
    "comment": "power_node_simulator.cpp:327:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node_simulator.cpp",
    "line": 328,
    "function": null,
    "comment": "power_node_simulator.cpp:328:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "power_node_simulator.cpp",
    "line": 328,
    "function": null,
    "comment": "power_node_simulator.cpp:328:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node_simulator.cpp",
    "line": 334,
    "function": null,
    "comment": "power_node_simulator.cpp:334:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "power_node_simulator.cpp",
    "line": 336,
    "function": null,
    "comment": "power_node_simulator.cpp:336:  Missing space before ( in while(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node_simulator.cpp",
    "line": 337,
    "function": null,
    "comment": "power_node_simulator.cpp:337:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node_simulator.cpp",
    "line": 339,
    "function": null,
    "comment": "power_node_simulator.cpp:339:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node_simulator.cpp",
    "line": 341,
    "function": null,
    "comment": "power_node_simulator.cpp:341:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "power_node_simulator.cpp",
    "line": 342,
    "function": null,
    "comment": "power_node_simulator.cpp:342:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node_simulator.cpp",
    "line": 343,
    "function": null,
    "comment": "power_node_simulator.cpp:343:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node_simulator.cpp",
    "line": 349,
    "function": null,
    "comment": "power_node_simulator.cpp:349:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "power_node_simulator.cpp",
    "line": 354,
    "function": null,
    "comment": "power_node_simulator.cpp:354:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node_simulator.cpp",
    "line": 355,
    "function": null,
    "comment": "power_node_simulator.cpp:355:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "power_node_simulator.cpp",
    "line": 358,
    "function": null,
    "comment": "power_node_simulator.cpp:358:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node_simulator.cpp",
    "line": 359,
    "function": null,
    "comment": "power_node_simulator.cpp:359:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node_simulator.cpp",
    "line": 375,
    "function": null,
    "comment": "power_node_simulator.cpp:375:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node_simulator.cpp",
    "line": 378,
    "function": null,
    "comment": "power_node_simulator.cpp:378:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node_simulator.cpp",
    "line": 381,
    "function": null,
    "comment": "power_node_simulator.cpp:381:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node_simulator.cpp",
    "line": 384,
    "function": null,
    "comment": "power_node_simulator.cpp:384:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node_simulator.cpp",
    "line": 387,
    "function": null,
    "comment": "power_node_simulator.cpp:387:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node_simulator.cpp",
    "line": 393,
    "function": null,
    "comment": "power_node_simulator.cpp:393:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node_simulator.cpp",
    "line": 397,
    "function": null,
    "comment": "power_node_simulator.cpp:397:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node_simulator.cpp",
    "line": 400,
    "function": null,
    "comment": "power_node_simulator.cpp:400:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node_simulator.cpp",
    "line": 403,
    "function": null,
    "comment": "power_node_simulator.cpp:403:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node_simulator.cpp",
    "line": 416,
    "function": null,
    "comment": "power_node_simulator.cpp:416:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node_simulator.cpp",
    "line": 423,
    "function": null,
    "comment": "power_node_simulator.cpp:423:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node_simulator.cpp",
    "line": 426,
    "function": null,
    "comment": "power_node_simulator.cpp:426:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node_simulator.cpp",
    "line": 429,
    "function": null,
    "comment": "power_node_simulator.cpp:429:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node_simulator.cpp",
    "line": 432,
    "function": null,
    "comment": "power_node_simulator.cpp:432:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node_simulator.cpp",
    "line": 445,
    "function": null,
    "comment": "power_node_simulator.cpp:445:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "power_node_simulator.cpp",
    "line": 453,
    "function": null,
    "comment": "power_node_simulator.cpp:453:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "power_node_simulator.cpp",
    "line": 453,
    "function": null,
    "comment": "power_node_simulator.cpp:453:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node_simulator.cpp",
    "line": 454,
    "function": null,
    "comment": "power_node_simulator.cpp:454:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node_simulator.cpp",
    "line": 460,
    "function": null,
    "comment": "power_node_simulator.cpp:460:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node_simulator.cpp",
    "line": 464,
    "function": null,
    "comment": "power_node_simulator.cpp:464:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node_simulator.cpp",
    "line": 468,
    "function": null,
    "comment": "power_node_simulator.cpp:468:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node_simulator.cpp",
    "line": 472,
    "function": null,
    "comment": "power_node_simulator.cpp:472:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node_simulator.cpp",
    "line": 476,
    "function": null,
    "comment": "power_node_simulator.cpp:476:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node_simulator.cpp",
    "line": 480,
    "function": null,
    "comment": "power_node_simulator.cpp:480:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node_simulator.cpp",
    "line": 484,
    "function": null,
    "comment": "power_node_simulator.cpp:484:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node_simulator.cpp",
    "line": 492,
    "function": null,
    "comment": "power_node_simulator.cpp:492:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "power_node_simulator.cpp",
    "line": 495,
    "function": null,
    "comment": "power_node_simulator.cpp:495:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node_simulator.cpp",
    "line": 500,
    "function": null,
    "comment": "power_node_simulator.cpp:500:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "power_node_simulator.cpp",
    "line": 504,
    "function": null,
    "comment": "power_node_simulator.cpp:504:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "power_node_simulator.cpp",
    "line": 505,
    "function": null,
    "comment": "power_node_simulator.cpp:505:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "power_node_simulator.cpp",
    "line": 505,
    "function": null,
    "comment": "power_node_simulator.cpp:505:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node_simulator.cpp",
    "line": 515,
    "function": null,
    "comment": "power_node_simulator.cpp:515:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node_simulator.cpp",
    "line": 520,
    "function": null,
    "comment": "power_node_simulator.cpp:520:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node_simulator.cpp",
    "line": 522,
    "function": null,
    "comment": "power_node_simulator.cpp:522:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node_simulator.cpp",
    "line": 523,
    "function": null,
    "comment": "power_node_simulator.cpp:523:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "power_node_simulator.cpp",
    "line": 523,
    "function": null,
    "comment": "power_node_simulator.cpp:523:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node_simulator.cpp",
    "line": 523,
    "function": null,
    "comment": "power_node_simulator.cpp:523:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node_simulator.cpp",
    "line": 524,
    "function": null,
    "comment": "power_node_simulator.cpp:524:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node_simulator.cpp",
    "line": 525,
    "function": null,
    "comment": "power_node_simulator.cpp:525:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node_simulator.cpp",
    "line": 527,
    "function": null,
    "comment": "power_node_simulator.cpp:527:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node_simulator.cpp",
    "line": 527,
    "function": null,
    "comment": "power_node_simulator.cpp:527:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node_simulator.cpp",
    "line": 528,
    "function": null,
    "comment": "power_node_simulator.cpp:528:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node_simulator.cpp",
    "line": 560,
    "function": null,
    "comment": "power_node_simulator.cpp:560:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node_simulator.cpp",
    "line": 562,
    "function": null,
    "comment": "power_node_simulator.cpp:562:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "power_node_simulator.cpp",
    "line": 562,
    "function": null,
    "comment": "power_node_simulator.cpp:562:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node_simulator.cpp",
    "line": 563,
    "function": null,
    "comment": "power_node_simulator.cpp:563:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "power_node_simulator.cpp",
    "line": 567,
    "function": null,
    "comment": "power_node_simulator.cpp:567:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "power_node_simulator.cpp",
    "line": 569,
    "function": null,
    "comment": "power_node_simulator.cpp:569:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node_simulator.cpp",
    "line": 574,
    "function": null,
    "comment": "power_node_simulator.cpp:574:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node_simulator.cpp",
    "line": 579,
    "function": null,
    "comment": "power_node_simulator.cpp:579:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "power_node_simulator.cpp",
    "line": 585,
    "function": null,
    "comment": "power_node_simulator.cpp:585:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "power_node_simulator.cpp",
    "line": 585,
    "function": null,
    "comment": "power_node_simulator.cpp:585:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "power_node_simulator.cpp",
    "line": 586,
    "function": null,
    "comment": "power_node_simulator.cpp:586:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "power_node_simulator.cpp",
    "line": 586,
    "function": null,
    "comment": "power_node_simulator.cpp:586:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "power_node_simulator.cpp",
    "line": 588,
    "function": null,
    "comment": "power_node_simulator.cpp:588:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node_simulator.cpp",
    "line": 588,
    "function": null,
    "comment": "power_node_simulator.cpp:588:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node_simulator.cpp",
    "line": 594,
    "function": null,
    "comment": "power_node_simulator.cpp:594:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "power_node_simulator.cpp",
    "line": 597,
    "function": null,
    "comment": "power_node_simulator.cpp:597:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "power_node_simulator.cpp",
    "line": 124,
    "function": null,
    "comment": "power_node_simulator.cpp:124:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Do not include the C standard headers. Use the C++ headers instead.",
    "file": "power_node2.cpp",
    "line": 30,
    "function": null,
    "comment": "power_node2.cpp:30:  Include 'cstdio' instead of 'stdio.h'.  [build/include] [5]",
    "tags": ["hicpp","code-standards","headers","include","preprocessor","deprecation","c"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "power_node2.cpp",
    "line": 31,
    "function": null,
    "comment": "power_node2.cpp:31:  Include 'stdint.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not include the C standard headers. Use the C++ headers instead.",
    "file": "power_node2.cpp",
    "line": 31,
    "function": null,
    "comment": "power_node2.cpp:31:  Include 'cstdint' instead of 'stdint.h'.  [build/include] [5]",
    "tags": ["hicpp","code-standards","headers","include","preprocessor","deprecation","c"]
  },
  {
    "rule": "Do not include the C standard headers. Use the C++ headers instead.",
    "file": "power_node2.cpp",
    "line": 32,
    "function": null,
    "comment": "power_node2.cpp:32:  Include 'cstring' instead of 'string.h'.  [build/include] [5]",
    "tags": ["hicpp","code-standards","headers","include","preprocessor","deprecation","c"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "power_node2.cpp",
    "line": 34,
    "function": null,
    "comment": "power_node2.cpp:34:  Include 'stdlib.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not include the C standard headers. Use the C++ headers instead.",
    "file": "power_node2.cpp",
    "line": 34,
    "function": null,
    "comment": "power_node2.cpp:34:  Include 'cstdlib' instead of 'stdlib.h'.  [build/include] [5]",
    "tags": ["hicpp","code-standards","headers","include","preprocessor","deprecation","c"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "power_node2.cpp",
    "line": 37,
    "function": null,
    "comment": "power_node2.cpp:37:  Include 'assert.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not include the C standard headers. Use the C++ headers instead.",
    "file": "power_node2.cpp",
    "line": 37,
    "function": null,
    "comment": "power_node2.cpp:37:  Include 'cassert' instead of 'assert.h'.  [build/include] [5]",
    "tags": ["hicpp","code-standards","headers","include","preprocessor","deprecation","c"]
  },
  {
    "rule": "Do not include the C standard headers. Use the C++ headers instead.",
    "file": "power_node2.cpp",
    "line": 38,
    "function": null,
    "comment": "power_node2.cpp:38:  Include 'cerrno' instead of 'errno.h'.  [build/include] [5]",
    "tags": ["hicpp","code-standards","headers","include","preprocessor","deprecation","c"]
  },
  {
    "rule": "Do not include the C standard headers. Use the C++ headers instead.",
    "file": "power_node2.cpp",
    "line": 39,
    "function": null,
    "comment": "power_node2.cpp:39:  Include 'csignal' instead of 'signal.h'.  [build/include] [5]",
    "tags": ["hicpp","code-standards","headers","include","preprocessor","deprecation","c"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "power_node2.cpp",
    "line": 41,
    "function": null,
    "comment": "power_node2.cpp:41:  Include 'sstream' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "power_node2.cpp",
    "line": 42,
    "function": null,
    "comment": "power_node2.cpp:42:  Include 'iostream' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "power_node2.cpp",
    "line": 43,
    "function": null,
    "comment": "power_node2.cpp:43:  Found C system header after C++ system header. Should be: power_node2.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "power_node2.cpp",
    "line": 44,
    "function": null,
    "comment": "power_node2.cpp:44:  Found C system header after C++ system header. Should be: power_node2.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not include the same file twice.",
    "file": "power_node2.cpp",
    "line": 47,
    "function": null,
    "comment": "power_node2.cpp:47:  'sys/types.h' already included at power_node2.cpp:36  [build/include] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "power_node2.cpp",
    "line": 48,
    "function": null,
    "comment": "power_node2.cpp:48:  Found C system header after C++ system header. Should be: power_node2.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "power_node2.cpp",
    "line": 49,
    "function": null,
    "comment": "power_node2.cpp:49:  Found C system header after C++ system header. Should be: power_node2.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "power_node2.cpp",
    "line": 50,
    "function": null,
    "comment": "power_node2.cpp:50:  Found C system header after C++ system header. Should be: power_node2.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not include the same file twice.",
    "file": "power_node2.cpp",
    "line": 51,
    "function": null,
    "comment": "power_node2.cpp:51:  'sys/socket.h' already included at power_node2.cpp:48  [build/include] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "power_node2.cpp",
    "line": 52,
    "function": null,
    "comment": "power_node2.cpp:52:  Found C system header after C++ system header. Should be: power_node2.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "power_node2.cpp",
    "line": 53,
    "function": null,
    "comment": "power_node2.cpp:53:  Found C system header after C++ system header. Should be: power_node2.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "power_node2.cpp",
    "line": 55,
    "function": null,
    "comment": "power_node2.cpp:55:  Found C system header after C++ system header. Should be: power_node2.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include the directory when naming header files.",
    "file": "power_node2.cpp",
    "line": 57,
    "function": null,
    "comment": "power_node2.cpp:57:  Include the directory when naming .h files  [build/include] [4]",
    "tags": ["code-standards","google-cpp","naming","headers","include"]
  },
  {
    "rule": "Include the directory when naming header files.",
    "file": "power_node2.cpp",
    "line": 58,
    "function": null,
    "comment": "power_node2.cpp:58:  Include the directory when naming .h files  [build/include] [4]",
    "tags": ["code-standards","google-cpp","naming","headers","include"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "power_node2.cpp",
    "line": 59,
    "function": null,
    "comment": "power_node2.cpp:59:  Include 'diagnostic_msgs/DiagnosticArray.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "power_node2.cpp",
    "line": 63,
    "function": null,
    "comment": "power_node2.cpp:63:  Include 'ros/ros.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "power_node2.cpp",
    "line": 67,
    "function": null,
    "comment": "power_node2.cpp:67:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "power_node2.cpp",
    "line": 77,
    "function": null,
    "comment": "power_node2.cpp:77:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node2.cpp",
    "line": 81,
    "function": null,
    "comment": "power_node2.cpp:81:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node2.cpp",
    "line": 83,
    "function": null,
    "comment": "power_node2.cpp:83:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node2.cpp",
    "line": 84,
    "function": null,
    "comment": "power_node2.cpp:84:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node2.cpp",
    "line": 85,
    "function": null,
    "comment": "power_node2.cpp:85:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node2.cpp",
    "line": 86,
    "function": null,
    "comment": "power_node2.cpp:86:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node2.cpp",
    "line": 87,
    "function": null,
    "comment": "power_node2.cpp:87:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node2.cpp",
    "line": 88,
    "function": null,
    "comment": "power_node2.cpp:88:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node2.cpp",
    "line": 89,
    "function": null,
    "comment": "power_node2.cpp:89:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node2.cpp",
    "line": 90,
    "function": null,
    "comment": "power_node2.cpp:90:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "power_node2.cpp",
    "line": 90,
    "function": null,
    "comment": "power_node2.cpp:90:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "power_node2.cpp",
    "line": 104,
    "function": null,
    "comment": "power_node2.cpp:104:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node2.cpp",
    "line": 111,
    "function": null,
    "comment": "power_node2.cpp:111:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node2.cpp",
    "line": 113,
    "function": null,
    "comment": "power_node2.cpp:113:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node2.cpp",
    "line": 114,
    "function": null,
    "comment": "power_node2.cpp:114:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node2.cpp",
    "line": 115,
    "function": null,
    "comment": "power_node2.cpp:115:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node2.cpp",
    "line": 116,
    "function": null,
    "comment": "power_node2.cpp:116:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node2.cpp",
    "line": 117,
    "function": null,
    "comment": "power_node2.cpp:117:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node2.cpp",
    "line": 118,
    "function": null,
    "comment": "power_node2.cpp:118:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node2.cpp",
    "line": 120,
    "function": null,
    "comment": "power_node2.cpp:120:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "power_node2.cpp",
    "line": 128,
    "function": null,
    "comment": "power_node2.cpp:128:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node2.cpp",
    "line": 131,
    "function": null,
    "comment": "power_node2.cpp:131:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "power_node2.cpp",
    "line": 131,
    "function": null,
    "comment": "power_node2.cpp:131:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node2.cpp",
    "line": 131,
    "function": null,
    "comment": "power_node2.cpp:131:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "power_node2.cpp",
    "line": 131,
    "function": null,
    "comment": "power_node2.cpp:131:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node2.cpp",
    "line": 132,
    "function": null,
    "comment": "power_node2.cpp:132:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node2.cpp",
    "line": 135,
    "function": null,
    "comment": "power_node2.cpp:135:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "power_node2.cpp",
    "line": 138,
    "function": null,
    "comment": "power_node2.cpp:138:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "power_node2.cpp",
    "line": 140,
    "function": null,
    "comment": "power_node2.cpp:140:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node2.cpp",
    "line": 143,
    "function": null,
    "comment": "power_node2.cpp:143:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node2.cpp",
    "line": 144,
    "function": null,
    "comment": "power_node2.cpp:144:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "power_node2.cpp",
    "line": 145,
    "function": null,
    "comment": "power_node2.cpp:145:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "power_node2.cpp",
    "line": 145,
    "function": null,
    "comment": "power_node2.cpp:145:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "power_node2.cpp",
    "line": 149,
    "function": null,
    "comment": "power_node2.cpp:149:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node2.cpp",
    "line": 162,
    "function": null,
    "comment": "power_node2.cpp:162:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "power_node2.cpp",
    "line": 163,
    "function": null,
    "comment": "power_node2.cpp:163:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Use 2 spaces for indentation.",
    "file": "power_node2.cpp",
    "line": 170,
    "function": null,
    "comment": "power_node2.cpp:170:  Weird number of spaces at line-start.  Are you using a 2-space indent?  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "power_node2.cpp",
    "line": 172,
    "function": null,
    "comment": "power_node2.cpp:172:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "power_node2.cpp",
    "line": 181,
    "function": null,
    "comment": "power_node2.cpp:181:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node2.cpp",
    "line": 188,
    "function": null,
    "comment": "power_node2.cpp:188:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node2.cpp",
    "line": 194,
    "function": null,
    "comment": "power_node2.cpp:194:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node2.cpp",
    "line": 195,
    "function": null,
    "comment": "power_node2.cpp:195:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "power_node2.cpp",
    "line": 196,
    "function": null,
    "comment": "power_node2.cpp:196:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "power_node2.cpp",
    "line": 205,
    "function": null,
    "comment": "power_node2.cpp:205:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node2.cpp",
    "line": 206,
    "function": null,
    "comment": "power_node2.cpp:206:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "power_node2.cpp",
    "line": 207,
    "function": null,
    "comment": "power_node2.cpp:207:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node2.cpp",
    "line": 217,
    "function": null,
    "comment": "power_node2.cpp:217:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use 2 spaces for indentation.",
    "file": "power_node2.cpp",
    "line": 218,
    "function": null,
    "comment": "power_node2.cpp:218:  Weird number of spaces at line-start.  Are you using a 2-space indent?  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "power_node2.cpp",
    "line": 220,
    "function": null,
    "comment": "power_node2.cpp:220:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node2.cpp",
    "line": 231,
    "function": null,
    "comment": "power_node2.cpp:231:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "power_node2.cpp",
    "line": 232,
    "function": null,
    "comment": "power_node2.cpp:232:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "power_node2.cpp",
    "line": 233,
    "function": null,
    "comment": "power_node2.cpp:233:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "power_node2.cpp",
    "line": 242,
    "function": null,
    "comment": "power_node2.cpp:242:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "power_node2.cpp",
    "line": 243,
    "function": null,
    "comment": "power_node2.cpp:243:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "power_node2.cpp",
    "line": 248,
    "function": null,
    "comment": "power_node2.cpp:248:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "power_node2.cpp",
    "line": 249,
    "function": null,
    "comment": "power_node2.cpp:249:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node2.cpp",
    "line": 252,
    "function": null,
    "comment": "power_node2.cpp:252:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "power_node2.cpp",
    "line": 252,
    "function": null,
    "comment": "power_node2.cpp:252:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node2.cpp",
    "line": 253,
    "function": null,
    "comment": "power_node2.cpp:253:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node2.cpp",
    "line": 262,
    "function": null,
    "comment": "power_node2.cpp:262:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node2.cpp",
    "line": 263,
    "function": null,
    "comment": "power_node2.cpp:263:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "power_node2.cpp",
    "line": 265,
    "function": null,
    "comment": "power_node2.cpp:265:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node2.cpp",
    "line": 266,
    "function": null,
    "comment": "power_node2.cpp:266:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node2.cpp",
    "line": 267,
    "function": null,
    "comment": "power_node2.cpp:267:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node2.cpp",
    "line": 268,
    "function": null,
    "comment": "power_node2.cpp:268:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "power_node2.cpp",
    "line": 270,
    "function": null,
    "comment": "power_node2.cpp:270:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node2.cpp",
    "line": 271,
    "function": null,
    "comment": "power_node2.cpp:271:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "power_node2.cpp",
    "line": 272,
    "function": null,
    "comment": "power_node2.cpp:272:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "power_node2.cpp",
    "line": 276,
    "function": null,
    "comment": "power_node2.cpp:276:  Missing space before ( in switch(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node2.cpp",
    "line": 277,
    "function": null,
    "comment": "power_node2.cpp:277:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "power_node2.cpp",
    "line": 295,
    "function": null,
    "comment": "power_node2.cpp:295:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node2.cpp",
    "line": 296,
    "function": null,
    "comment": "power_node2.cpp:296:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node2.cpp",
    "line": 297,
    "function": null,
    "comment": "power_node2.cpp:297:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node2.cpp",
    "line": 298,
    "function": null,
    "comment": "power_node2.cpp:298:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node2.cpp",
    "line": 302,
    "function": null,
    "comment": "power_node2.cpp:302:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node2.cpp",
    "line": 306,
    "function": null,
    "comment": "power_node2.cpp:306:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "power_node2.cpp",
    "line": 312,
    "function": null,
    "comment": "power_node2.cpp:312:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "power_node2.cpp",
    "line": 312,
    "function": null,
    "comment": "power_node2.cpp:312:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "power_node2.cpp",
    "line": 315,
    "function": null,
    "comment": "power_node2.cpp:315:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "power_node2.cpp",
    "line": 315,
    "function": null,
    "comment": "power_node2.cpp:315:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "power_node2.cpp",
    "line": 318,
    "function": null,
    "comment": "power_node2.cpp:318:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "power_node2.cpp",
    "line": 318,
    "function": null,
    "comment": "power_node2.cpp:318:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "power_node2.cpp",
    "line": 321,
    "function": null,
    "comment": "power_node2.cpp:321:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "power_node2.cpp",
    "line": 321,
    "function": null,
    "comment": "power_node2.cpp:321:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "power_node2.cpp",
    "line": 324,
    "function": null,
    "comment": "power_node2.cpp:324:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "power_node2.cpp",
    "line": 324,
    "function": null,
    "comment": "power_node2.cpp:324:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "power_node2.cpp",
    "line": 324,
    "function": null,
    "comment": "power_node2.cpp:324:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "power_node2.cpp",
    "line": 331,
    "function": null,
    "comment": "power_node2.cpp:331:  Missing spaces around ==  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "power_node2.cpp",
    "line": 334,
    "function": null,
    "comment": "power_node2.cpp:334:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "power_node2.cpp",
    "line": 334,
    "function": null,
    "comment": "power_node2.cpp:334:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "power_node2.cpp",
    "line": 334,
    "function": null,
    "comment": "power_node2.cpp:334:  Missing spaces around ==  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "power_node2.cpp",
    "line": 337,
    "function": null,
    "comment": "power_node2.cpp:337:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "power_node2.cpp",
    "line": 337,
    "function": null,
    "comment": "power_node2.cpp:337:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "power_node2.cpp",
    "line": 337,
    "function": null,
    "comment": "power_node2.cpp:337:  Missing spaces around ==  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "power_node2.cpp",
    "line": 340,
    "function": null,
    "comment": "power_node2.cpp:340:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "power_node2.cpp",
    "line": 340,
    "function": null,
    "comment": "power_node2.cpp:340:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "power_node2.cpp",
    "line": 340,
    "function": null,
    "comment": "power_node2.cpp:340:  Missing spaces around ==  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node2.cpp",
    "line": 347,
    "function": null,
    "comment": "power_node2.cpp:347:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "power_node2.cpp",
    "line": 348,
    "function": null,
    "comment": "power_node2.cpp:348:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node2.cpp",
    "line": 354,
    "function": null,
    "comment": "power_node2.cpp:354:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "power_node2.cpp",
    "line": 359,
    "function": null,
    "comment": "power_node2.cpp:359:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node2.cpp",
    "line": 364,
    "function": null,
    "comment": "power_node2.cpp:364:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node2.cpp",
    "line": 372,
    "function": null,
    "comment": "power_node2.cpp:372:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node2.cpp",
    "line": 373,
    "function": null,
    "comment": "power_node2.cpp:373:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node2.cpp",
    "line": 373,
    "function": null,
    "comment": "power_node2.cpp:373:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "power_node2.cpp",
    "line": 374,
    "function": null,
    "comment": "power_node2.cpp:374:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "power_node2.cpp",
    "line": 374,
    "function": null,
    "comment": "power_node2.cpp:374:  Missing space before ( in switch(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node2.cpp",
    "line": 390,
    "function": null,
    "comment": "power_node2.cpp:390:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node2.cpp",
    "line": 391,
    "function": null,
    "comment": "power_node2.cpp:391:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node2.cpp",
    "line": 391,
    "function": null,
    "comment": "power_node2.cpp:391:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "power_node2.cpp",
    "line": 392,
    "function": null,
    "comment": "power_node2.cpp:392:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "power_node2.cpp",
    "line": 392,
    "function": null,
    "comment": "power_node2.cpp:392:  Missing space before ( in switch(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node2.cpp",
    "line": 412,
    "function": null,
    "comment": "power_node2.cpp:412:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node2.cpp",
    "line": 413,
    "function": null,
    "comment": "power_node2.cpp:413:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "power_node2.cpp",
    "line": 413,
    "function": null,
    "comment": "power_node2.cpp:413:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node2.cpp",
    "line": 414,
    "function": null,
    "comment": "power_node2.cpp:414:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node2.cpp",
    "line": 418,
    "function": null,
    "comment": "power_node2.cpp:418:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node2.cpp",
    "line": 419,
    "function": null,
    "comment": "power_node2.cpp:419:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node2.cpp",
    "line": 421,
    "function": null,
    "comment": "power_node2.cpp:421:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node2.cpp",
    "line": 422,
    "function": null,
    "comment": "power_node2.cpp:422:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node2.cpp",
    "line": 434,
    "function": null,
    "comment": "power_node2.cpp:434:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node2.cpp",
    "line": 435,
    "function": null,
    "comment": "power_node2.cpp:435:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node2.cpp",
    "line": 437,
    "function": null,
    "comment": "power_node2.cpp:437:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node2.cpp",
    "line": 458,
    "function": null,
    "comment": "power_node2.cpp:458:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node2.cpp",
    "line": 461,
    "function": null,
    "comment": "power_node2.cpp:461:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node2.cpp",
    "line": 463,
    "function": null,
    "comment": "power_node2.cpp:463:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node2.cpp",
    "line": 464,
    "function": null,
    "comment": "power_node2.cpp:464:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node2.cpp",
    "line": 466,
    "function": null,
    "comment": "power_node2.cpp:466:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node2.cpp",
    "line": 471,
    "function": null,
    "comment": "power_node2.cpp:471:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node2.cpp",
    "line": 476,
    "function": null,
    "comment": "power_node2.cpp:476:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "power_node2.cpp",
    "line": 477,
    "function": null,
    "comment": "power_node2.cpp:477:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node2.cpp",
    "line": 481,
    "function": null,
    "comment": "power_node2.cpp:481:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "power_node2.cpp",
    "line": 487,
    "function": null,
    "comment": "power_node2.cpp:487:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "power_node2.cpp",
    "line": 487,
    "function": null,
    "comment": "power_node2.cpp:487:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "power_node2.cpp",
    "line": 490,
    "function": null,
    "comment": "power_node2.cpp:490:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "power_node2.cpp",
    "line": 490,
    "function": null,
    "comment": "power_node2.cpp:490:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node2.cpp",
    "line": 496,
    "function": null,
    "comment": "power_node2.cpp:496:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node2.cpp",
    "line": 496,
    "function": null,
    "comment": "power_node2.cpp:496:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node2.cpp",
    "line": 497,
    "function": null,
    "comment": "power_node2.cpp:497:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "power_node2.cpp",
    "line": 497,
    "function": null,
    "comment": "power_node2.cpp:497:  Using C-style cast.  Use reinterpret_cast<sockaddr*>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "power_node2.cpp",
    "line": 502,
    "function": null,
    "comment": "power_node2.cpp:502:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "power_node2.cpp",
    "line": 502,
    "function": null,
    "comment": "power_node2.cpp:502:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "power_node2.cpp",
    "line": 502,
    "function": null,
    "comment": "power_node2.cpp:502:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "power_node2.cpp",
    "line": 502,
    "function": null,
    "comment": "power_node2.cpp:502:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "power_node2.cpp",
    "line": 512,
    "function": null,
    "comment": "power_node2.cpp:512:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node2.cpp",
    "line": 513,
    "function": null,
    "comment": "power_node2.cpp:513:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "power_node2.cpp",
    "line": 515,
    "function": null,
    "comment": "power_node2.cpp:515:  Using C-style cast.  Use reinterpret_cast<MessageHeader*>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node2.cpp",
    "line": 517,
    "function": null,
    "comment": "power_node2.cpp:517:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "power_node2.cpp",
    "line": 518,
    "function": null,
    "comment": "power_node2.cpp:518:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node2.cpp",
    "line": 519,
    "function": null,
    "comment": "power_node2.cpp:519:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "power_node2.cpp",
    "line": 520,
    "function": null,
    "comment": "power_node2.cpp:520:  Using C-style cast.  Use reinterpret_cast<PowerMessage*>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "power_node2.cpp",
    "line": 530,
    "function": null,
    "comment": "power_node2.cpp:530:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "power_node2.cpp",
    "line": 530,
    "function": null,
    "comment": "power_node2.cpp:530:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "power_node2.cpp",
    "line": 530,
    "function": null,
    "comment": "power_node2.cpp:530:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "power_node2.cpp",
    "line": 535,
    "function": null,
    "comment": "power_node2.cpp:535:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "power_node2.cpp",
    "line": 535,
    "function": null,
    "comment": "power_node2.cpp:535:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node2.cpp",
    "line": 536,
    "function": null,
    "comment": "power_node2.cpp:536:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "power_node2.cpp",
    "line": 537,
    "function": null,
    "comment": "power_node2.cpp:537:  Using C-style cast.  Use reinterpret_cast<TransitionMessage *>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "power_node2.cpp",
    "line": 542,
    "function": null,
    "comment": "power_node2.cpp:542:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "power_node2.cpp",
    "line": 542,
    "function": null,
    "comment": "power_node2.cpp:542:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "power_node2.cpp",
    "line": 542,
    "function": null,
    "comment": "power_node2.cpp:542:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "power_node2.cpp",
    "line": 547,
    "function": null,
    "comment": "power_node2.cpp:547:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node2.cpp",
    "line": 548,
    "function": null,
    "comment": "power_node2.cpp:548:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "power_node2.cpp",
    "line": 553,
    "function": null,
    "comment": "power_node2.cpp:553:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "power_node2.cpp",
    "line": 553,
    "function": null,
    "comment": "power_node2.cpp:553:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "power_node2.cpp",
    "line": 553,
    "function": null,
    "comment": "power_node2.cpp:553:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node2.cpp",
    "line": 562,
    "function": null,
    "comment": "power_node2.cpp:562:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node2.cpp",
    "line": 562,
    "function": null,
    "comment": "power_node2.cpp:562:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "power_node2.cpp",
    "line": 562,
    "function": null,
    "comment": "power_node2.cpp:562:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "power_node2.cpp",
    "line": 562,
    "function": null,
    "comment": "power_node2.cpp:562:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node2.cpp",
    "line": 565,
    "function": null,
    "comment": "power_node2.cpp:565:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node2.cpp",
    "line": 567,
    "function": null,
    "comment": "power_node2.cpp:567:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node2.cpp",
    "line": 570,
    "function": null,
    "comment": "power_node2.cpp:570:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "power_node2.cpp",
    "line": 570,
    "function": null,
    "comment": "power_node2.cpp:570:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node2.cpp",
    "line": 571,
    "function": null,
    "comment": "power_node2.cpp:571:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node2.cpp",
    "line": 573,
    "function": null,
    "comment": "power_node2.cpp:573:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "power_node2.cpp",
    "line": 577,
    "function": null,
    "comment": "power_node2.cpp:577:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "power_node2.cpp",
    "line": 579,
    "function": null,
    "comment": "power_node2.cpp:579:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node2.cpp",
    "line": 583,
    "function": null,
    "comment": "power_node2.cpp:583:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node2.cpp",
    "line": 586,
    "function": null,
    "comment": "power_node2.cpp:586:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node2.cpp",
    "line": 587,
    "function": null,
    "comment": "power_node2.cpp:587:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node2.cpp",
    "line": 589,
    "function": null,
    "comment": "power_node2.cpp:589:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node2.cpp",
    "line": 590,
    "function": null,
    "comment": "power_node2.cpp:590:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node2.cpp",
    "line": 593,
    "function": null,
    "comment": "power_node2.cpp:593:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node2.cpp",
    "line": 597,
    "function": null,
    "comment": "power_node2.cpp:597:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node2.cpp",
    "line": 599,
    "function": null,
    "comment": "power_node2.cpp:599:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node2.cpp",
    "line": 602,
    "function": null,
    "comment": "power_node2.cpp:602:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "power_node2.cpp",
    "line": 604,
    "function": null,
    "comment": "power_node2.cpp:604:  Using C-style cast.  Use static_cast<float>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node2.cpp",
    "line": 609,
    "function": null,
    "comment": "power_node2.cpp:609:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node2.cpp",
    "line": 614,
    "function": null,
    "comment": "power_node2.cpp:614:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "power_node2.cpp",
    "line": 628,
    "function": null,
    "comment": "power_node2.cpp:628:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node2.cpp",
    "line": 629,
    "function": null,
    "comment": "power_node2.cpp:629:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node2.cpp",
    "line": 629,
    "function": null,
    "comment": "power_node2.cpp:629:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "power_node2.cpp",
    "line": 629,
    "function": null,
    "comment": "power_node2.cpp:629:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node2.cpp",
    "line": 631,
    "function": null,
    "comment": "power_node2.cpp:631:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node2.cpp",
    "line": 634,
    "function": null,
    "comment": "power_node2.cpp:634:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node2.cpp",
    "line": 639,
    "function": null,
    "comment": "power_node2.cpp:639:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node2.cpp",
    "line": 643,
    "function": null,
    "comment": "power_node2.cpp:643:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "power_node2.cpp",
    "line": 644,
    "function": null,
    "comment": "power_node2.cpp:644:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node2.cpp",
    "line": 645,
    "function": null,
    "comment": "power_node2.cpp:645:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "power_node2.cpp",
    "line": 646,
    "function": null,
    "comment": "power_node2.cpp:646:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node2.cpp",
    "line": 653,
    "function": null,
    "comment": "power_node2.cpp:653:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "power_node2.cpp",
    "line": 654,
    "function": null,
    "comment": "power_node2.cpp:654:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node2.cpp",
    "line": 655,
    "function": null,
    "comment": "power_node2.cpp:655:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node2.cpp",
    "line": 656,
    "function": null,
    "comment": "power_node2.cpp:656:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "power_node2.cpp",
    "line": 656,
    "function": null,
    "comment": "power_node2.cpp:656:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "power_node2.cpp",
    "line": 658,
    "function": null,
    "comment": "power_node2.cpp:658:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "power_node2.cpp",
    "line": 660,
    "function": null,
    "comment": "power_node2.cpp:660:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "power_node2.cpp",
    "line": 663,
    "function": null,
    "comment": "power_node2.cpp:663:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node2.cpp",
    "line": 671,
    "function": null,
    "comment": "power_node2.cpp:671:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "power_node2.cpp",
    "line": 672,
    "function": null,
    "comment": "power_node2.cpp:672:  Missing space before ( in while(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node2.cpp",
    "line": 673,
    "function": null,
    "comment": "power_node2.cpp:673:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node2.cpp",
    "line": 675,
    "function": null,
    "comment": "power_node2.cpp:675:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node2.cpp",
    "line": 680,
    "function": null,
    "comment": "power_node2.cpp:680:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "power_node2.cpp",
    "line": 686,
    "function": null,
    "comment": "power_node2.cpp:686:  Missing space before ( in while(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node2.cpp",
    "line": 687,
    "function": null,
    "comment": "power_node2.cpp:687:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node2.cpp",
    "line": 689,
    "function": null,
    "comment": "power_node2.cpp:689:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node2.cpp",
    "line": 691,
    "function": null,
    "comment": "power_node2.cpp:691:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node2.cpp",
    "line": 697,
    "function": null,
    "comment": "power_node2.cpp:697:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "power_node2.cpp",
    "line": 704,
    "function": null,
    "comment": "power_node2.cpp:704:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node2.cpp",
    "line": 705,
    "function": null,
    "comment": "power_node2.cpp:705:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "power_node2.cpp",
    "line": 708,
    "function": null,
    "comment": "power_node2.cpp:708:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node2.cpp",
    "line": 709,
    "function": null,
    "comment": "power_node2.cpp:709:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node2.cpp",
    "line": 715,
    "function": null,
    "comment": "power_node2.cpp:715:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "power_node2.cpp",
    "line": 716,
    "function": null,
    "comment": "power_node2.cpp:716:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node2.cpp",
    "line": 719,
    "function": null,
    "comment": "power_node2.cpp:719:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node2.cpp",
    "line": 720,
    "function": null,
    "comment": "power_node2.cpp:720:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node2.cpp",
    "line": 724,
    "function": null,
    "comment": "power_node2.cpp:724:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node2.cpp",
    "line": 727,
    "function": null,
    "comment": "power_node2.cpp:727:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node2.cpp",
    "line": 728,
    "function": null,
    "comment": "power_node2.cpp:728:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node2.cpp",
    "line": 730,
    "function": null,
    "comment": "power_node2.cpp:730:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node2.cpp",
    "line": 731,
    "function": null,
    "comment": "power_node2.cpp:731:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node2.cpp",
    "line": 733,
    "function": null,
    "comment": "power_node2.cpp:733:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node2.cpp",
    "line": 734,
    "function": null,
    "comment": "power_node2.cpp:734:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node2.cpp",
    "line": 736,
    "function": null,
    "comment": "power_node2.cpp:736:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node2.cpp",
    "line": 737,
    "function": null,
    "comment": "power_node2.cpp:737:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node2.cpp",
    "line": 739,
    "function": null,
    "comment": "power_node2.cpp:739:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node2.cpp",
    "line": 740,
    "function": null,
    "comment": "power_node2.cpp:740:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node2.cpp",
    "line": 742,
    "function": null,
    "comment": "power_node2.cpp:742:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node2.cpp",
    "line": 743,
    "function": null,
    "comment": "power_node2.cpp:743:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node2.cpp",
    "line": 746,
    "function": null,
    "comment": "power_node2.cpp:746:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node2.cpp",
    "line": 749,
    "function": null,
    "comment": "power_node2.cpp:749:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node2.cpp",
    "line": 750,
    "function": null,
    "comment": "power_node2.cpp:750:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node2.cpp",
    "line": 750,
    "function": null,
    "comment": "power_node2.cpp:750:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "power_node2.cpp",
    "line": 751,
    "function": null,
    "comment": "power_node2.cpp:751:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node2.cpp",
    "line": 752,
    "function": null,
    "comment": "power_node2.cpp:752:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node2.cpp",
    "line": 754,
    "function": null,
    "comment": "power_node2.cpp:754:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node2.cpp",
    "line": 755,
    "function": null,
    "comment": "power_node2.cpp:755:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node2.cpp",
    "line": 757,
    "function": null,
    "comment": "power_node2.cpp:757:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node2.cpp",
    "line": 758,
    "function": null,
    "comment": "power_node2.cpp:758:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node2.cpp",
    "line": 760,
    "function": null,
    "comment": "power_node2.cpp:760:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node2.cpp",
    "line": 761,
    "function": null,
    "comment": "power_node2.cpp:761:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node2.cpp",
    "line": 763,
    "function": null,
    "comment": "power_node2.cpp:763:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node2.cpp",
    "line": 764,
    "function": null,
    "comment": "power_node2.cpp:764:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node2.cpp",
    "line": 767,
    "function": null,
    "comment": "power_node2.cpp:767:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node2.cpp",
    "line": 768,
    "function": null,
    "comment": "power_node2.cpp:768:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node2.cpp",
    "line": 769,
    "function": null,
    "comment": "power_node2.cpp:769:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node2.cpp",
    "line": 771,
    "function": null,
    "comment": "power_node2.cpp:771:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node2.cpp",
    "line": 772,
    "function": null,
    "comment": "power_node2.cpp:772:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node2.cpp",
    "line": 774,
    "function": null,
    "comment": "power_node2.cpp:774:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node2.cpp",
    "line": 775,
    "function": null,
    "comment": "power_node2.cpp:775:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node2.cpp",
    "line": 776,
    "function": null,
    "comment": "power_node2.cpp:776:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node2.cpp",
    "line": 777,
    "function": null,
    "comment": "power_node2.cpp:777:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node2.cpp",
    "line": 777,
    "function": null,
    "comment": "power_node2.cpp:777:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node2.cpp",
    "line": 780,
    "function": null,
    "comment": "power_node2.cpp:780:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node2.cpp",
    "line": 781,
    "function": null,
    "comment": "power_node2.cpp:781:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node2.cpp",
    "line": 782,
    "function": null,
    "comment": "power_node2.cpp:782:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node2.cpp",
    "line": 783,
    "function": null,
    "comment": "power_node2.cpp:783:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node2.cpp",
    "line": 784,
    "function": null,
    "comment": "power_node2.cpp:784:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node2.cpp",
    "line": 785,
    "function": null,
    "comment": "power_node2.cpp:785:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node2.cpp",
    "line": 787,
    "function": null,
    "comment": "power_node2.cpp:787:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node2.cpp",
    "line": 788,
    "function": null,
    "comment": "power_node2.cpp:788:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node2.cpp",
    "line": 791,
    "function": null,
    "comment": "power_node2.cpp:791:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node2.cpp",
    "line": 794,
    "function": null,
    "comment": "power_node2.cpp:794:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node2.cpp",
    "line": 796,
    "function": null,
    "comment": "power_node2.cpp:796:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node2.cpp",
    "line": 797,
    "function": null,
    "comment": "power_node2.cpp:797:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node2.cpp",
    "line": 803,
    "function": null,
    "comment": "power_node2.cpp:803:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node2.cpp",
    "line": 806,
    "function": null,
    "comment": "power_node2.cpp:806:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node2.cpp",
    "line": 808,
    "function": null,
    "comment": "power_node2.cpp:808:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "power_node2.cpp",
    "line": 809,
    "function": null,
    "comment": "power_node2.cpp:809:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node2.cpp",
    "line": 810,
    "function": null,
    "comment": "power_node2.cpp:810:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node2.cpp",
    "line": 811,
    "function": null,
    "comment": "power_node2.cpp:811:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node2.cpp",
    "line": 816,
    "function": null,
    "comment": "power_node2.cpp:816:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node2.cpp",
    "line": 817,
    "function": null,
    "comment": "power_node2.cpp:817:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "power_node2.cpp",
    "line": 819,
    "function": null,
    "comment": "power_node2.cpp:819:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "power_node2.cpp",
    "line": 819,
    "function": null,
    "comment": "power_node2.cpp:819:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node2.cpp",
    "line": 820,
    "function": null,
    "comment": "power_node2.cpp:820:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node2.cpp",
    "line": 822,
    "function": null,
    "comment": "power_node2.cpp:822:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "power_node2.cpp",
    "line": 825,
    "function": null,
    "comment": "power_node2.cpp:825:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node2.cpp",
    "line": 826,
    "function": null,
    "comment": "power_node2.cpp:826:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node2.cpp",
    "line": 827,
    "function": null,
    "comment": "power_node2.cpp:827:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "power_node2.cpp",
    "line": 830,
    "function": null,
    "comment": "power_node2.cpp:830:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node2.cpp",
    "line": 831,
    "function": null,
    "comment": "power_node2.cpp:831:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "power_node2.cpp",
    "line": 834,
    "function": null,
    "comment": "power_node2.cpp:834:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node2.cpp",
    "line": 835,
    "function": null,
    "comment": "power_node2.cpp:835:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "power_node2.cpp",
    "line": 838,
    "function": null,
    "comment": "power_node2.cpp:838:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node2.cpp",
    "line": 839,
    "function": null,
    "comment": "power_node2.cpp:839:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "power_node2.cpp",
    "line": 842,
    "function": null,
    "comment": "power_node2.cpp:842:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node2.cpp",
    "line": 843,
    "function": null,
    "comment": "power_node2.cpp:843:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "power_node2.cpp",
    "line": 846,
    "function": null,
    "comment": "power_node2.cpp:846:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node2.cpp",
    "line": 847,
    "function": null,
    "comment": "power_node2.cpp:847:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "power_node2.cpp",
    "line": 850,
    "function": null,
    "comment": "power_node2.cpp:850:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node2.cpp",
    "line": 851,
    "function": null,
    "comment": "power_node2.cpp:851:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "power_node2.cpp",
    "line": 854,
    "function": null,
    "comment": "power_node2.cpp:854:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node2.cpp",
    "line": 859,
    "function": null,
    "comment": "power_node2.cpp:859:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node2.cpp",
    "line": 864,
    "function": null,
    "comment": "power_node2.cpp:864:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node2.cpp",
    "line": 886,
    "function": null,
    "comment": "power_node2.cpp:886:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "power_node2.cpp",
    "line": 887,
    "function": null,
    "comment": "power_node2.cpp:887:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node2.cpp",
    "line": 893,
    "function": null,
    "comment": "power_node2.cpp:893:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "power_node2.cpp",
    "line": 902,
    "function": null,
    "comment": "power_node2.cpp:902:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node2.cpp",
    "line": 903,
    "function": null,
    "comment": "power_node2.cpp:903:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node2.cpp",
    "line": 906,
    "function": null,
    "comment": "power_node2.cpp:906:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node2.cpp",
    "line": 912,
    "function": null,
    "comment": "power_node2.cpp:912:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node2.cpp",
    "line": 917,
    "function": null,
    "comment": "power_node2.cpp:917:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node2.cpp",
    "line": 922,
    "function": null,
    "comment": "power_node2.cpp:922:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node2.cpp",
    "line": 923,
    "function": null,
    "comment": "power_node2.cpp:923:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "power_node2.cpp",
    "line": 924,
    "function": null,
    "comment": "power_node2.cpp:924:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node2.cpp",
    "line": 929,
    "function": null,
    "comment": "power_node2.cpp:929:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node2.cpp",
    "line": 930,
    "function": null,
    "comment": "power_node2.cpp:930:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node2.cpp",
    "line": 937,
    "function": null,
    "comment": "power_node2.cpp:937:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node2.cpp",
    "line": 947,
    "function": null,
    "comment": "power_node2.cpp:947:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node2.cpp",
    "line": 961,
    "function": null,
    "comment": "power_node2.cpp:961:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node2.cpp",
    "line": 968,
    "function": null,
    "comment": "power_node2.cpp:968:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "power_node2.cpp",
    "line": 971,
    "function": null,
    "comment": "power_node2.cpp:971:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "power_node2.cpp",
    "line": 974,
    "function": null,
    "comment": "power_node2.cpp:974:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node2.cpp",
    "line": 975,
    "function": null,
    "comment": "power_node2.cpp:975:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "power_node2.cpp",
    "line": 980,
    "function": null,
    "comment": "power_node2.cpp:980:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node2.cpp",
    "line": 981,
    "function": null,
    "comment": "power_node2.cpp:981:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node2.cpp",
    "line": 982,
    "function": null,
    "comment": "power_node2.cpp:982:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "power_node2.cpp",
    "line": 995,
    "function": null,
    "comment": "power_node2.cpp:995:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "power_node2.cpp",
    "line": 995,
    "function": null,
    "comment": "power_node2.cpp:995:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "power_node2.cpp",
    "line": 996,
    "function": null,
    "comment": "power_node2.cpp:996:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "power_node2.cpp",
    "line": 996,
    "function": null,
    "comment": "power_node2.cpp:996:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "power_node2.cpp",
    "line": 998,
    "function": null,
    "comment": "power_node2.cpp:998:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node2.cpp",
    "line": 998,
    "function": null,
    "comment": "power_node2.cpp:998:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "power_node2.cpp",
    "line": 999,
    "function": null,
    "comment": "power_node2.cpp:999:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node2.cpp",
    "line": 999,
    "function": null,
    "comment": "power_node2.cpp:999:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "power_node2.cpp",
    "line": 1000,
    "function": null,
    "comment": "power_node2.cpp:1000:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "power_node2.cpp",
    "line": 1000,
    "function": null,
    "comment": "power_node2.cpp:1000:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "power_node2.cpp",
    "line": 1002,
    "function": null,
    "comment": "power_node2.cpp:1002:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "power_node2.cpp",
    "line": 1002,
    "function": null,
    "comment": "power_node2.cpp:1002:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "power_node2.cpp",
    "line": 1005,
    "function": null,
    "comment": "power_node2.cpp:1005:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "power_node2.cpp",
    "line": 1006,
    "function": null,
    "comment": "power_node2.cpp:1006:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "power_node2.cpp",
    "line": 1009,
    "function": null,
    "comment": "power_node2.cpp:1009:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "power_node2.cpp",
    "line": 1009,
    "function": null,
    "comment": "power_node2.cpp:1009:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node2.cpp",
    "line": 1009,
    "function": null,
    "comment": "power_node2.cpp:1009:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "power_node2.cpp",
    "line": 1011,
    "function": null,
    "comment": "power_node2.cpp:1011:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "power_node2.cpp",
    "line": 1019,
    "function": null,
    "comment": "power_node2.cpp:1019:  Missing space before ( in while(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node2.cpp",
    "line": 1020,
    "function": null,
    "comment": "power_node2.cpp:1020:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "power_node2.cpp",
    "line": 1022,
    "function": null,
    "comment": "power_node2.cpp:1022:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node2.cpp",
    "line": 1023,
    "function": null,
    "comment": "power_node2.cpp:1023:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "power_node2.cpp",
    "line": 1025,
    "function": null,
    "comment": "power_node2.cpp:1025:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "power_node2.cpp",
    "line": 1029,
    "function": null,
    "comment": "power_node2.cpp:1029:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node2.cpp",
    "line": 1030,
    "function": null,
    "comment": "power_node2.cpp:1030:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node2.cpp",
    "line": 1036,
    "function": null,
    "comment": "power_node2.cpp:1036:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node2.cpp",
    "line": 1050,
    "function": null,
    "comment": "power_node2.cpp:1050:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "power_node2.cpp",
    "line": 1053,
    "function": null,
    "comment": "power_node2.cpp:1053:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "power_node2.cpp",
    "line": 1056,
    "function": null,
    "comment": "power_node2.cpp:1056:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node2.cpp",
    "line": 1057,
    "function": null,
    "comment": "power_node2.cpp:1057:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "power_node2.cpp",
    "line": 1057,
    "function": null,
    "comment": "power_node2.cpp:1057:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node2.cpp",
    "line": 1058,
    "function": null,
    "comment": "power_node2.cpp:1058:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node2.cpp",
    "line": 1059,
    "function": null,
    "comment": "power_node2.cpp:1059:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node2.cpp",
    "line": 1060,
    "function": null,
    "comment": "power_node2.cpp:1060:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "power_node2.cpp",
    "line": 1061,
    "function": null,
    "comment": "power_node2.cpp:1061:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "power_node2.cpp",
    "line": 618,
    "function": null,
    "comment": "power_node2.cpp:618:  Add #include <map> for map<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "power_node2.cpp",
    "line": 968,
    "function": null,
    "comment": "power_node2.cpp:968:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "power_node2.cpp",
    "line": 620,
    "function": null,
    "comment": "power_node2.cpp:620:  Add #include <algorithm> for max  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Non-empty case blocks must not fall through to the next case.",
    "file": "power_node.cpp",
    "line": 403,
    "function": null,
    "comment": "Non-empty case without a break statement.",
    "tags": ["hicpp","code-standards","switch","case","fall-through"]
  },
  {
    "rule": "Non-empty case blocks must not fall through to the next case.",
    "file": "power_node.cpp",
    "line": 405,
    "function": null,
    "comment": "Non-empty case without a break statement.",
    "tags": ["hicpp","code-standards","switch","case","fall-through"]
  },
  {
    "rule": "Non-empty case blocks must not fall through to the next case.",
    "file": "power_node.cpp",
    "line": 407,
    "function": null,
    "comment": "Non-empty case without a break statement.",
    "tags": ["hicpp","code-standards","switch","case","fall-through"]
  },
  {
    "rule": "Non-empty case blocks must not fall through to the next case.",
    "file": "power_node.cpp",
    "line": 409,
    "function": null,
    "comment": "Non-empty case without a break statement.",
    "tags": ["hicpp","code-standards","switch","case","fall-through"]
  },
  {
    "rule": "Non-empty case blocks must not fall through to the next case.",
    "file": "power_node.cpp",
    "line": 411,
    "function": null,
    "comment": "Non-empty case without a break statement.",
    "tags": ["hicpp","code-standards","switch","case","fall-through"]
  },
  {
    "rule": "Non-empty case blocks must not fall through to the next case.",
    "file": "power_node.cpp",
    "line": 423,
    "function": null,
    "comment": "Non-empty case without a break statement.",
    "tags": ["hicpp","code-standards","switch","case","fall-through"]
  },
  {
    "rule": "Non-empty case blocks must not fall through to the next case.",
    "file": "power_node.cpp",
    "line": 425,
    "function": null,
    "comment": "Non-empty case without a break statement.",
    "tags": ["hicpp","code-standards","switch","case","fall-through"]
  },
  {
    "rule": "Non-empty case blocks must not fall through to the next case.",
    "file": "power_node.cpp",
    "line": 427,
    "function": null,
    "comment": "Non-empty case without a break statement.",
    "tags": ["hicpp","code-standards","switch","case","fall-through"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node.cpp",
    "line": 91,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node.cpp",
    "line": 92,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node.cpp",
    "line": 93,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node.cpp",
    "line": 94,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node.cpp",
    "line": 95,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node.cpp",
    "line": 96,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node.cpp",
    "line": 97,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node.cpp",
    "line": 98,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node.cpp",
    "line": 162,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node.cpp",
    "line": 172,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node.cpp",
    "line": 202,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node.cpp",
    "line": 222,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node.cpp",
    "line": 275,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node.cpp",
    "line": 285,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node.cpp",
    "line": 292,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node.cpp",
    "line": 302,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node.cpp",
    "line": 378,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node.cpp",
    "line": 381,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node.cpp",
    "line": 439,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node.cpp",
    "line": 465,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node.cpp",
    "line": 484,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node.cpp",
    "line": 508,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node.cpp",
    "line": 527,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node.cpp",
    "line": 545,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node.cpp",
    "line": 550,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node.cpp",
    "line": 575,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node.cpp",
    "line": 632,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node.cpp",
    "line": 689,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node.cpp",
    "line": 807,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node.cpp",
    "line": 817,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node.cpp",
    "line": 892,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node.cpp",
    "line": 901,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node.cpp",
    "line": 917,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node.cpp",
    "line": 920,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node.cpp",
    "line": 932,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node.cpp",
    "line": 934,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node.cpp",
    "line": 1006,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node.cpp",
    "line": 1010,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Wrap use of the C Standard Library.",
    "file": "power_node.cpp",
    "line": 377,
    "function": null,
    "comment": "Found use of errno.",
    "tags": ["hicpp","code-standards","c","libraries","c-standard-library","misra-cpp"]
  },
  {
    "rule": "Non-empty case blocks must not fall through to the next case.",
    "file": "power_node2.cpp",
    "line": 375,
    "function": null,
    "comment": "Non-empty case without a break statement.",
    "tags": ["hicpp","code-standards","switch","case","fall-through"]
  },
  {
    "rule": "Non-empty case blocks must not fall through to the next case.",
    "file": "power_node2.cpp",
    "line": 377,
    "function": null,
    "comment": "Non-empty case without a break statement.",
    "tags": ["hicpp","code-standards","switch","case","fall-through"]
  },
  {
    "rule": "Non-empty case blocks must not fall through to the next case.",
    "file": "power_node2.cpp",
    "line": 379,
    "function": null,
    "comment": "Non-empty case without a break statement.",
    "tags": ["hicpp","code-standards","switch","case","fall-through"]
  },
  {
    "rule": "Non-empty case blocks must not fall through to the next case.",
    "file": "power_node2.cpp",
    "line": 381,
    "function": null,
    "comment": "Non-empty case without a break statement.",
    "tags": ["hicpp","code-standards","switch","case","fall-through"]
  },
  {
    "rule": "Non-empty case blocks must not fall through to the next case.",
    "file": "power_node2.cpp",
    "line": 383,
    "function": null,
    "comment": "Non-empty case without a break statement.",
    "tags": ["hicpp","code-standards","switch","case","fall-through"]
  },
  {
    "rule": "Non-empty case blocks must not fall through to the next case.",
    "file": "power_node2.cpp",
    "line": 395,
    "function": null,
    "comment": "Non-empty case without a break statement.",
    "tags": ["hicpp","code-standards","switch","case","fall-through"]
  },
  {
    "rule": "Non-empty case blocks must not fall through to the next case.",
    "file": "power_node2.cpp",
    "line": 397,
    "function": null,
    "comment": "Non-empty case without a break statement.",
    "tags": ["hicpp","code-standards","switch","case","fall-through"]
  },
  {
    "rule": "Non-empty case blocks must not fall through to the next case.",
    "file": "power_node2.cpp",
    "line": 399,
    "function": null,
    "comment": "Non-empty case without a break statement.",
    "tags": ["hicpp","code-standards","switch","case","fall-through"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node2.cpp",
    "line": 93,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node2.cpp",
    "line": 94,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node2.cpp",
    "line": 95,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node2.cpp",
    "line": 96,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node2.cpp",
    "line": 97,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node2.cpp",
    "line": 98,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node2.cpp",
    "line": 99,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node2.cpp",
    "line": 100,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node2.cpp",
    "line": 161,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node2.cpp",
    "line": 171,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node2.cpp",
    "line": 205,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node2.cpp",
    "line": 216,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node2.cpp",
    "line": 242,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node2.cpp",
    "line": 252,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node2.cpp",
    "line": 355,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node2.cpp",
    "line": 411,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node2.cpp",
    "line": 434,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node2.cpp",
    "line": 457,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node2.cpp",
    "line": 474,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node2.cpp",
    "line": 479,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node2.cpp",
    "line": 497,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node2.cpp",
    "line": 613,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node2.cpp",
    "line": 624,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node2.cpp",
    "line": 657,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node2.cpp",
    "line": 809,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node2.cpp",
    "line": 819,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node2.cpp",
    "line": 885,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node2.cpp",
    "line": 898,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node2.cpp",
    "line": 936,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node2.cpp",
    "line": 939,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node2.cpp",
    "line": 960,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Wrap use of the C Standard Library.",
    "file": "power_node2.cpp",
    "line": 353,
    "function": null,
    "comment": "Found use of errno.",
    "tags": ["hicpp","code-standards","c","libraries","c-standard-library","misra-cpp"]
  },
  {
    "rule": "Wrap use of the C Standard Library.",
    "file": "power_node2.cpp",
    "line": 897,
    "function": null,
    "comment": "Found use of errno.",
    "tags": ["hicpp","code-standards","c","libraries","c-standard-library","misra-cpp"]
  },
  {
    "rule": "Non-empty case blocks must not fall through to the next case.",
    "file": "power_node_simulator.cpp",
    "line": 227,
    "function": null,
    "comment": "Non-empty case without a break statement.",
    "tags": ["hicpp","code-standards","switch","case","fall-through"]
  },
  {
    "rule": "Non-empty case blocks must not fall through to the next case.",
    "file": "power_node_simulator.cpp",
    "line": 229,
    "function": null,
    "comment": "Non-empty case without a break statement.",
    "tags": ["hicpp","code-standards","switch","case","fall-through"]
  },
  {
    "rule": "Non-empty case blocks must not fall through to the next case.",
    "file": "power_node_simulator.cpp",
    "line": 231,
    "function": null,
    "comment": "Non-empty case without a break statement.",
    "tags": ["hicpp","code-standards","switch","case","fall-through"]
  },
  {
    "rule": "Non-empty case blocks must not fall through to the next case.",
    "file": "power_node_simulator.cpp",
    "line": 233,
    "function": null,
    "comment": "Non-empty case without a break statement.",
    "tags": ["hicpp","code-standards","switch","case","fall-through"]
  },
  {
    "rule": "Non-empty case blocks must not fall through to the next case.",
    "file": "power_node_simulator.cpp",
    "line": 235,
    "function": null,
    "comment": "Non-empty case without a break statement.",
    "tags": ["hicpp","code-standards","switch","case","fall-through"]
  },
  {
    "rule": "Non-empty case blocks must not fall through to the next case.",
    "file": "power_node_simulator.cpp",
    "line": 247,
    "function": null,
    "comment": "Non-empty case without a break statement.",
    "tags": ["hicpp","code-standards","switch","case","fall-through"]
  },
  {
    "rule": "Non-empty case blocks must not fall through to the next case.",
    "file": "power_node_simulator.cpp",
    "line": 249,
    "function": null,
    "comment": "Non-empty case without a break statement.",
    "tags": ["hicpp","code-standards","switch","case","fall-through"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node_simulator.cpp",
    "line": 83,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node_simulator.cpp",
    "line": 84,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node_simulator.cpp",
    "line": 85,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node_simulator.cpp",
    "line": 86,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node_simulator.cpp",
    "line": 87,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node_simulator.cpp",
    "line": 88,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node_simulator.cpp",
    "line": 89,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node_simulator.cpp",
    "line": 90,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node_simulator.cpp",
    "line": 124,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node_simulator.cpp",
    "line": 131,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node_simulator.cpp",
    "line": 133,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node_simulator.cpp",
    "line": 261,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node_simulator.cpp",
    "line": 269,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node_simulator.cpp",
    "line": 286,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node_simulator.cpp",
    "line": 294,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node_simulator.cpp",
    "line": 309,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node_simulator.cpp",
    "line": 342,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node_simulator.cpp",
    "line": 453,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node_simulator.cpp",
    "line": 505,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node_simulator.cpp",
    "line": 514,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node_simulator.cpp",
    "line": 558,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "power_node_simulator.cpp",
    "line": 578,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Wrap use of the C Standard Library.",
    "file": "power_node_simulator.cpp",
    "line": 211,
    "function": null,
    "comment": "Found use of errno.",
    "tags": ["hicpp","code-standards","c","libraries","c-standard-library","misra-cpp"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "power_node.cpp",
    "line": 281,
    "function": null,
    "comment": "The function 'IsReadSet' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "setup.py",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "power_wires.py",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "pr2_power_board_panel.py",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "__init__.py",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "test_power.py",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "fake_powerboard.py",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "power_node.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "power_node.cpp",
    "line": 906,
    "function": "CreateAllInterfaces",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "power_node.cpp",
    "line": 191,
    "function": "Init",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum coupling between objects: 5",
    "file": "power_node.cpp",
    "line": null,
    "function": null,
    "comment": "CBO is greater than 5, PowerBoard, 7",
    "tags": ["metrics","nasa-satc","ros","coupling"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "power_node.cpp",
    "line": 516,
    "function": "collect_messages",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 15",
    "file": "power_node.cpp",
    "line": 516,
    "function": "collect_messages",
    "comment": "CC is greater than 15",
    "tags": ["metrics","ros","cyclomatic-complexity","kth"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "power_node.cpp",
    "line": 428,
    "function": "process_message",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "power_node.cpp",
    "line": 669,
    "function": "sendMessages",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "power_node.cpp",
    "line": 274,
    "function": "send_command",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 15",
    "file": "power_node.cpp",
    "line": 274,
    "function": "send_command",
    "comment": "CC is greater than 15",
    "tags": ["metrics","ros","cyclomatic-complexity","kth"]
  },
  {
    "rule": "Maximum coupling between objects: 5",
    "file": "power_node_simulator.cpp",
    "line": null,
    "function": null,
    "comment": "CBO is greater than 5, PowerBoard, 6",
    "tags": ["metrics","nasa-satc","ros","coupling"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "power_node_simulator.cpp",
    "line": 113,
    "function": "send_command",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 15",
    "file": "power_node_simulator.cpp",
    "line": 113,
    "function": "send_command",
    "comment": "CC is greater than 15",
    "tags": ["metrics","ros","cyclomatic-complexity","kth"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "power_node2.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Maximum coupling between objects: 5",
    "file": "power_node2.cpp",
    "line": null,
    "function": null,
    "comment": "CBO is greater than 5, PowerBoard, 8",
    "tags": ["metrics","nasa-satc","ros","coupling"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "power_node2.cpp",
    "line": 446,
    "function": "collect_messages",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 15",
    "file": "power_node2.cpp",
    "line": 446,
    "function": "collect_messages",
    "comment": "CC is greater than 15",
    "tags": ["metrics","ros","cyclomatic-complexity","kth"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "power_node2.cpp",
    "line": 241,
    "function": "send_command",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 15",
    "file": "power_node2.cpp",
    "line": 241,
    "function": "send_command",
    "comment": "CC is greater than 15",
    "tags": ["metrics","ros","cyclomatic-complexity","kth"]
  }
]