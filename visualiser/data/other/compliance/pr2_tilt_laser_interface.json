[
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "grab_result.cpp",
    "line": null,
    "function": null,
    "comment": "grab_result.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "grab_result.cpp",
    "line": 2,
    "function": null,
    "comment": "grab_result.cpp:2:  Include 'pr2_tilt_laser_interface/GetSnapshotActionResult.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "grab_result.cpp",
    "line": 3,
    "function": null,
    "comment": "grab_result.cpp:3:  Include 'pr2_tilt_laser_interface/GetSnapshotActionFeedback.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "grab_result.cpp",
    "line": 5,
    "function": null,
    "comment": "grab_result.cpp:5:  Include 'pcl/io/pcd_io.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "grab_result.cpp",
    "line": 8,
    "function": null,
    "comment": "grab_result.cpp:8:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "grab_result.cpp",
    "line": 9,
    "function": null,
    "comment": "grab_result.cpp:9:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "grab_result.cpp",
    "line": 10,
    "function": null,
    "comment": "grab_result.cpp:10:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "grab_result.cpp",
    "line": 11,
    "function": null,
    "comment": "grab_result.cpp:11:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "grab_result.cpp",
    "line": 13,
    "function": null,
    "comment": "grab_result.cpp:13:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "grab_result.cpp",
    "line": 14,
    "function": null,
    "comment": "grab_result.cpp:14:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "grab_result.cpp",
    "line": 17,
    "function": null,
    "comment": "grab_result.cpp:17:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "grab_result.cpp",
    "line": 18,
    "function": null,
    "comment": "grab_result.cpp:18:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "grab_result.cpp",
    "line": 19,
    "function": null,
    "comment": "grab_result.cpp:19:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "grab_result.cpp",
    "line": 20,
    "function": null,
    "comment": "grab_result.cpp:20:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "grab_result.cpp",
    "line": 22,
    "function": null,
    "comment": "grab_result.cpp:22:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "grab_result.cpp",
    "line": 23,
    "function": null,
    "comment": "grab_result.cpp:23:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "grab_result.cpp",
    "line": 26,
    "function": null,
    "comment": "grab_result.cpp:26:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "grab_result.cpp",
    "line": 27,
    "function": null,
    "comment": "grab_result.cpp:27:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "grab_result.cpp",
    "line": 28,
    "function": null,
    "comment": "grab_result.cpp:28:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "grab_result.cpp",
    "line": 29,
    "function": null,
    "comment": "grab_result.cpp:29:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "grab_result.cpp",
    "line": 32,
    "function": null,
    "comment": "grab_result.cpp:32:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "grab_result.cpp",
    "line": 33,
    "function": null,
    "comment": "grab_result.cpp:33:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "grab_result.cpp",
    "line": 34,
    "function": null,
    "comment": "grab_result.cpp:34:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "grab_result.cpp",
    "line": 35,
    "function": null,
    "comment": "grab_result.cpp:35:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "grab_result.cpp",
    "line": 39,
    "function": null,
    "comment": "grab_result.cpp:39:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "grab_result.cpp",
    "line": 41,
    "function": null,
    "comment": "grab_result.cpp:41:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "grab_result.cpp",
    "line": 42,
    "function": null,
    "comment": "grab_result.cpp:42:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "grab_result.cpp",
    "line": 42,
    "function": null,
    "comment": "grab_result.cpp:42:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "grab_result.cpp",
    "line": 43,
    "function": null,
    "comment": "grab_result.cpp:43:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "grab_result.cpp",
    "line": 45,
    "function": null,
    "comment": "grab_result.cpp:45:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "grab_result.cpp",
    "line": 46,
    "function": null,
    "comment": "grab_result.cpp:46:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "grab_result.cpp",
    "line": 47,
    "function": null,
    "comment": "grab_result.cpp:47:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "grab_result.cpp",
    "line": 48,
    "function": null,
    "comment": "grab_result.cpp:48:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "snapshotter_action.cpp",
    "line": 41,
    "function": null,
    "comment": "snapshotter_action.cpp:41:  Include 'laser_geometry/laser_geometry.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "snapshotter_action.cpp",
    "line": 43,
    "function": null,
    "comment": "snapshotter_action.cpp:43:  Include 'pcl_conversions/pcl_conversions.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "snapshotter_action.cpp",
    "line": 47,
    "function": null,
    "comment": "snapshotter_action.cpp:47:  Found C system header after other header. Should be: snapshotter_action.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "snapshotter_action.cpp",
    "line": 48,
    "function": null,
    "comment": "snapshotter_action.cpp:48:  Found C system header after other header. Should be: snapshotter_action.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "snapshotter_action.cpp",
    "line": 50,
    "function": null,
    "comment": "snapshotter_action.cpp:50:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "snapshotter_action.cpp",
    "line": 50,
    "function": null,
    "comment": "snapshotter_action.cpp:50:  Is this a non-const reference? If so, make const or use a pointer: sensor_msgs::PointCloud2& dest  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "snapshotter_action.cpp",
    "line": 51,
    "function": null,
    "comment": "snapshotter_action.cpp:51:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "To-do comments should look like '// TODO(my_username): Stuff.'.",
    "file": "snapshotter_action.cpp",
    "line": 52,
    "function": null,
    "comment": "snapshotter_action.cpp:52:  Missing username in TODO; it should look like '// TODO(my_username): Stuff.'  [readability/todo] [2]",
    "tags": ["comments","code-standards","formatting","google-cpp","todo-comment"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "snapshotter_action.cpp",
    "line": 55,
    "function": null,
    "comment": "snapshotter_action.cpp:55:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "snapshotter_action.cpp",
    "line": 58,
    "function": null,
    "comment": "snapshotter_action.cpp:58:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "snapshotter_action.cpp",
    "line": 63,
    "function": null,
    "comment": "snapshotter_action.cpp:63:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "snapshotter_action.cpp",
    "line": 64,
    "function": null,
    "comment": "snapshotter_action.cpp:64:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "snapshotter_action.cpp",
    "line": 67,
    "function": null,
    "comment": "snapshotter_action.cpp:67:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "snapshotter_action.cpp",
    "line": 68,
    "function": null,
    "comment": "snapshotter_action.cpp:68:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "snapshotter_action.cpp",
    "line": 71,
    "function": null,
    "comment": "snapshotter_action.cpp:71:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "snapshotter_action.cpp",
    "line": 72,
    "function": null,
    "comment": "snapshotter_action.cpp:72:  Using C-style cast.  Use reinterpret_cast<float*>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "snapshotter_action.cpp",
    "line": 77,
    "function": null,
    "comment": "snapshotter_action.cpp:77:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "snapshotter_action.cpp",
    "line": 80,
    "function": null,
    "comment": "snapshotter_action.cpp:80:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "snapshotter_action.cpp",
    "line": 82,
    "function": null,
    "comment": "snapshotter_action.cpp:82:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "snapshotter_action.cpp",
    "line": 92,
    "function": null,
    "comment": "snapshotter_action.cpp:92:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "snapshotter_action.cpp",
    "line": 93,
    "function": null,
    "comment": "snapshotter_action.cpp:93:  public: should be indented +1 space inside class Snapshotter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "snapshotter_action.cpp",
    "line": 96,
    "function": null,
    "comment": "snapshotter_action.cpp:96:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "snapshotter_action.cpp",
    "line": 97,
    "function": null,
    "comment": "snapshotter_action.cpp:97:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "snapshotter_action.cpp",
    "line": 104,
    "function": null,
    "comment": "snapshotter_action.cpp:104:  private: should be indented +1 space inside class Snapshotter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "snapshotter_action.cpp",
    "line": 125,
    "function": null,
    "comment": "snapshotter_action.cpp:125:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "snapshotter_action.cpp",
    "line": 125,
    "function": null,
    "comment": "snapshotter_action.cpp:125:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "snapshotter_action.cpp",
    "line": 132,
    "function": null,
    "comment": "snapshotter_action.cpp:132:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "snapshotter_action.cpp",
    "line": 133,
    "function": null,
    "comment": "snapshotter_action.cpp:133:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "snapshotter_action.cpp",
    "line": 133,
    "function": null,
    "comment": "snapshotter_action.cpp:133:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "snapshotter_action.cpp",
    "line": 134,
    "function": null,
    "comment": "snapshotter_action.cpp:134:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "snapshotter_action.cpp",
    "line": 134,
    "function": null,
    "comment": "snapshotter_action.cpp:134:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "To-do comments should look like '// TODO(my_username): Stuff.'.",
    "file": "snapshotter_action.cpp",
    "line": 137,
    "function": null,
    "comment": "snapshotter_action.cpp:137:  Missing username in TODO; it should look like '// TODO(my_username): Stuff.'  [readability/todo] [2]",
    "tags": ["comments","code-standards","formatting","google-cpp","todo-comment"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "snapshotter_action.cpp",
    "line": 138,
    "function": null,
    "comment": "snapshotter_action.cpp:138:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "snapshotter_action.cpp",
    "line": 148,
    "function": null,
    "comment": "snapshotter_action.cpp:148:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "snapshotter_action.cpp",
    "line": 150,
    "function": null,
    "comment": "snapshotter_action.cpp:150:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "snapshotter_action.cpp",
    "line": 150,
    "function": null,
    "comment": "snapshotter_action.cpp:150:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "snapshotter_action.cpp",
    "line": 157,
    "function": null,
    "comment": "snapshotter_action.cpp:157:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "snapshotter_action.cpp",
    "line": 163,
    "function": null,
    "comment": "snapshotter_action.cpp:163:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "snapshotter_action.cpp",
    "line": 164,
    "function": null,
    "comment": "snapshotter_action.cpp:164:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "snapshotter_action.cpp",
    "line": 166,
    "function": null,
    "comment": "snapshotter_action.cpp:166:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "snapshotter_action.cpp",
    "line": 168,
    "function": null,
    "comment": "snapshotter_action.cpp:168:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "snapshotter_action.cpp",
    "line": 173,
    "function": null,
    "comment": "snapshotter_action.cpp:173:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "snapshotter_action.cpp",
    "line": 174,
    "function": null,
    "comment": "snapshotter_action.cpp:174:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "snapshotter_action.cpp",
    "line": 180,
    "function": null,
    "comment": "snapshotter_action.cpp:180:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "snapshotter_action.cpp",
    "line": 182,
    "function": null,
    "comment": "snapshotter_action.cpp:182:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "snapshotter_action.cpp",
    "line": 184,
    "function": null,
    "comment": "snapshotter_action.cpp:184:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "snapshotter_action.cpp",
    "line": 184,
    "function": null,
    "comment": "snapshotter_action.cpp:184:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "snapshotter_action.cpp",
    "line": 185,
    "function": null,
    "comment": "snapshotter_action.cpp:185:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "snapshotter_action.cpp",
    "line": 185,
    "function": null,
    "comment": "snapshotter_action.cpp:185:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "snapshotter_action.cpp",
    "line": 187,
    "function": null,
    "comment": "snapshotter_action.cpp:187:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "snapshotter_action.cpp",
    "line": 188,
    "function": null,
    "comment": "snapshotter_action.cpp:188:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "snapshotter_action.cpp",
    "line": 189,
    "function": null,
    "comment": "snapshotter_action.cpp:189:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "snapshotter_action.cpp",
    "line": 189,
    "function": null,
    "comment": "snapshotter_action.cpp:189:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "snapshotter_action.cpp",
    "line": 191,
    "function": null,
    "comment": "snapshotter_action.cpp:191:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "snapshotter_action.cpp",
    "line": 193,
    "function": null,
    "comment": "snapshotter_action.cpp:193:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "snapshotter_action.cpp",
    "line": 194,
    "function": null,
    "comment": "snapshotter_action.cpp:194:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "snapshotter_action.cpp",
    "line": 195,
    "function": null,
    "comment": "snapshotter_action.cpp:195:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "snapshotter_action.cpp",
    "line": 195,
    "function": null,
    "comment": "snapshotter_action.cpp:195:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "snapshotter_action.cpp",
    "line": 198,
    "function": null,
    "comment": "snapshotter_action.cpp:198:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "snapshotter_action.cpp",
    "line": 200,
    "function": null,
    "comment": "snapshotter_action.cpp:200:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "To-do comments should look like '// TODO(my_username): Stuff.'.",
    "file": "snapshotter_action.cpp",
    "line": 201,
    "function": null,
    "comment": "snapshotter_action.cpp:201:  Missing username in TODO; it should look like '// TODO(my_username): Stuff.'  [readability/todo] [2]",
    "tags": ["comments","code-standards","formatting","google-cpp","todo-comment"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "snapshotter_action.cpp",
    "line": 202,
    "function": null,
    "comment": "snapshotter_action.cpp:202:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "snapshotter_action.cpp",
    "line": 206,
    "function": null,
    "comment": "snapshotter_action.cpp:206:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "snapshotter_action.cpp",
    "line": 207,
    "function": null,
    "comment": "snapshotter_action.cpp:207:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "snapshotter_action.cpp",
    "line": 208,
    "function": null,
    "comment": "snapshotter_action.cpp:208:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "snapshotter_action.cpp",
    "line": 210,
    "function": null,
    "comment": "snapshotter_action.cpp:210:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "snapshotter_action.cpp",
    "line": 213,
    "function": null,
    "comment": "snapshotter_action.cpp:213:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "snapshotter_action.cpp",
    "line": 215,
    "function": null,
    "comment": "snapshotter_action.cpp:215:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "snapshotter_action.cpp",
    "line": 219,
    "function": null,
    "comment": "snapshotter_action.cpp:219:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "snapshotter_action.cpp",
    "line": 221,
    "function": null,
    "comment": "snapshotter_action.cpp:221:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "snapshotter_action.cpp",
    "line": 224,
    "function": null,
    "comment": "snapshotter_action.cpp:224:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "snapshotter_action.cpp",
    "line": 231,
    "function": null,
    "comment": "snapshotter_action.cpp:231:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "snapshotter_action.cpp",
    "line": 238,
    "function": null,
    "comment": "snapshotter_action.cpp:238:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "snapshotter_action.cpp",
    "line": 239,
    "function": null,
    "comment": "snapshotter_action.cpp:239:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "snapshotter_action.cpp",
    "line": 252,
    "function": null,
    "comment": "snapshotter_action.cpp:252:  Missing spaces around ==  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "snapshotter_action.cpp",
    "line": 253,
    "function": null,
    "comment": "snapshotter_action.cpp:253:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "snapshotter_action.cpp",
    "line": 257,
    "function": null,
    "comment": "snapshotter_action.cpp:257:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "snapshotter_action.cpp",
    "line": 258,
    "function": null,
    "comment": "snapshotter_action.cpp:258:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "snapshotter_action.cpp",
    "line": 258,
    "function": null,
    "comment": "snapshotter_action.cpp:258:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "snapshotter_action.cpp",
    "line": 258,
    "function": null,
    "comment": "snapshotter_action.cpp:258:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "snapshotter_action.cpp",
    "line": 269,
    "function": null,
    "comment": "snapshotter_action.cpp:269:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "snapshotter_action.cpp",
    "line": 283,
    "function": null,
    "comment": "snapshotter_action.cpp:283:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "snapshotter_action.cpp",
    "line": 289,
    "function": null,
    "comment": "snapshotter_action.cpp:289:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "snapshotter_action.cpp",
    "line": 294,
    "function": null,
    "comment": "snapshotter_action.cpp:294:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "snapshotter_action.cpp",
    "line": 302,
    "function": null,
    "comment": "snapshotter_action.cpp:302:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "snapshotter_action.cpp",
    "line": 304,
    "function": null,
    "comment": "snapshotter_action.cpp:304:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "snapshotter_action.cpp",
    "line": 307,
    "function": null,
    "comment": "snapshotter_action.cpp:307:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "snapshotter_action.cpp",
    "line": 313,
    "function": null,
    "comment": "snapshotter_action.cpp:313:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "snapshotter_action.cpp",
    "line": 315,
    "function": null,
    "comment": "snapshotter_action.cpp:315:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "snapshotter_action.cpp",
    "line": 316,
    "function": null,
    "comment": "snapshotter_action.cpp:316:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "snapshotter_action.cpp",
    "line": 317,
    "function": null,
    "comment": "snapshotter_action.cpp:317:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "snapshotter_action.cpp",
    "line": 318,
    "function": null,
    "comment": "snapshotter_action.cpp:318:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "snapshotter_action.cpp",
    "line": 319,
    "function": null,
    "comment": "snapshotter_action.cpp:319:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "snapshotter_action.cpp",
    "line": 320,
    "function": null,
    "comment": "snapshotter_action.cpp:320:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "snapshotter_action.cpp",
    "line": 321,
    "function": null,
    "comment": "snapshotter_action.cpp:321:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "snapshotter_action.cpp",
    "line": 322,
    "function": null,
    "comment": "snapshotter_action.cpp:322:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "snapshotter_action.cpp",
    "line": 323,
    "function": null,
    "comment": "snapshotter_action.cpp:323:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "snapshotter_action.cpp",
    "line": 324,
    "function": null,
    "comment": "snapshotter_action.cpp:324:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "snapshotter_action.cpp",
    "line": 327,
    "function": null,
    "comment": "snapshotter_action.cpp:327:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "snapshotter_action.cpp",
    "line": 123,
    "function": null,
    "comment": "snapshotter_action.cpp:123:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "snapshotter_action.cpp",
    "line": 203,
    "function": null,
    "comment": "snapshotter_action.cpp:203:  Add #include <algorithm> for swap  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "grab_result.cpp",
    "line": 26,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "grab_result.cpp",
    "line": 27,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Declarations should be at the smallest feasible scope.",
    "file": "snapshotter_action.cpp",
    "line": 69,
    "function": null,
    "comment": "The scope of the variable 'time_ptr' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:void f(int x){    int i = ",
    "tags": ["code-standards","jsf-av-cpp","scope"]
  },
  {
    "rule": "Do not use default arguments.",
    "file": "snapshotter_action.cpp",
    "line": 96,
    "function": null,
    "comment": "Found function with default arguments.",
    "tags": ["hicpp","code-standards","functions","parameters","default-arguments","arguments"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "snapshotter_action.cpp",
    "line": 55,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "snapshotter_action.cpp",
    "line": 67,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "snapshotter_action.cpp",
    "line": 70,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "snapshotter_action.cpp",
    "line": 112,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "snapshotter_action.cpp",
    "line": 312,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not write code that expects floating point calculations to yield exact results.",
    "file": "snapshotter_action.cpp",
    "line": 252,
    "function": null,
    "comment": "Found float equality check.",
    "tags": ["hicpp","code-standards","floats","floating-point"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "grab_result.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "snapshotter_action.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum coupling between objects: 5",
    "file": "snapshotter_action.cpp",
    "line": null,
    "function": null,
    "comment": "CBO is greater than 5, Snapshotter, 15",
    "tags": ["metrics","nasa-satc","ros","coupling"]
  }
]