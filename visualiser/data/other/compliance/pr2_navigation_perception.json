[
  {
    "rule": "The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_.",
    "file": "pr2_point_cloud_footprint_filter.h",
    "line": 35,
    "function": null,
    "comment": "pr2_point_cloud_footprint_filter.h:35:  #ifndef header guard has wrong style, please use: _HOME_ANDRE_ROS_HAROS_ANALYSER_PR2_POINT_CLOUD_FOOTPRINT_FILTER_H_  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the guard's end should be '#endif  // <PROJECT>_<PATH>_<FILE>_H_' or '#endif  /* <PROJECT>_<PATH>_<FILE>_H_ */'.",
    "file": "pr2_point_cloud_footprint_filter.h",
    "line": 133,
    "function": null,
    "comment": "pr2_point_cloud_footprint_filter.h:133:  #endif line should be '#endif  // _HOME_ANDRE_ROS_HAROS_ANALYSER_PR2_POINT_CLOUD_FOOTPRINT_FILTER_H_'  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "pr2_point_cloud_footprint_filter.h",
    "line": 45,
    "function": null,
    "comment": "pr2_point_cloud_footprint_filter.h:45:  Include 'filters/filter_base.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "pr2_point_cloud_footprint_filter.h",
    "line": 47,
    "function": null,
    "comment": "pr2_point_cloud_footprint_filter.h:47:  Include 'ros/ros.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "pr2_point_cloud_footprint_filter.h",
    "line": 48,
    "function": null,
    "comment": "pr2_point_cloud_footprint_filter.h:48:  Found C system header after other header. Should be: pr2_point_cloud_footprint_filter.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "pr2_point_cloud_footprint_filter.h",
    "line": 49,
    "function": null,
    "comment": "pr2_point_cloud_footprint_filter.h:49:  Found C system header after other header. Should be: pr2_point_cloud_footprint_filter.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "pr2_point_cloud_footprint_filter.h",
    "line": 50,
    "function": null,
    "comment": "pr2_point_cloud_footprint_filter.h:50:  Found C system header after other header. Should be: pr2_point_cloud_footprint_filter.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "pr2_point_cloud_footprint_filter.h",
    "line": 51,
    "function": null,
    "comment": "pr2_point_cloud_footprint_filter.h:51:  Found C system header after other header. Should be: pr2_point_cloud_footprint_filter.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_point_cloud_footprint_filter.h",
    "line": 54,
    "function": null,
    "comment": "pr2_point_cloud_footprint_filter.h:54:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_point_cloud_footprint_filter.h",
    "line": 58,
    "function": null,
    "comment": "pr2_point_cloud_footprint_filter.h:58:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_point_cloud_footprint_filter.h",
    "line": 59,
    "function": null,
    "comment": "pr2_point_cloud_footprint_filter.h:59:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "pr2_point_cloud_footprint_filter.h",
    "line": 60,
    "function": null,
    "comment": "pr2_point_cloud_footprint_filter.h:60:  public: should be indented +1 space inside class PR2PointCloudFootprintFilterNew  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_point_cloud_footprint_filter.h",
    "line": 64,
    "function": null,
    "comment": "pr2_point_cloud_footprint_filter.h:64:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_point_cloud_footprint_filter.h",
    "line": 65,
    "function": null,
    "comment": "pr2_point_cloud_footprint_filter.h:65:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_point_cloud_footprint_filter.h",
    "line": 66,
    "function": null,
    "comment": "pr2_point_cloud_footprint_filter.h:66:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_point_cloud_footprint_filter.h",
    "line": 67,
    "function": null,
    "comment": "pr2_point_cloud_footprint_filter.h:67:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "pr2_point_cloud_footprint_filter.h",
    "line": 74,
    "function": null,
    "comment": "pr2_point_cloud_footprint_filter.h:74:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_point_cloud_footprint_filter.h",
    "line": 74,
    "function": null,
    "comment": "pr2_point_cloud_footprint_filter.h:74:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "pr2_point_cloud_footprint_filter.h",
    "line": 75,
    "function": null,
    "comment": "pr2_point_cloud_footprint_filter.h:75:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "pr2_point_cloud_footprint_filter.h",
    "line": 75,
    "function": null,
    "comment": "pr2_point_cloud_footprint_filter.h:75:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_point_cloud_footprint_filter.h",
    "line": 78,
    "function": null,
    "comment": "pr2_point_cloud_footprint_filter.h:78:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "pr2_point_cloud_footprint_filter.h",
    "line": 78,
    "function": null,
    "comment": "pr2_point_cloud_footprint_filter.h:78:  Is this a non-const reference? If so, make const or use a pointer: sensor_msgs::PointCloud2& filtered_scan2  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_point_cloud_footprint_filter.h",
    "line": 79,
    "function": null,
    "comment": "pr2_point_cloud_footprint_filter.h:79:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_point_cloud_footprint_filter.h",
    "line": 80,
    "function": null,
    "comment": "pr2_point_cloud_footprint_filter.h:80:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "pr2_point_cloud_footprint_filter.h",
    "line": 80,
    "function": null,
    "comment": "pr2_point_cloud_footprint_filter.h:80:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "pr2_point_cloud_footprint_filter.h",
    "line": 88,
    "function": null,
    "comment": "pr2_point_cloud_footprint_filter.h:88:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "pr2_point_cloud_footprint_filter.h",
    "line": 88,
    "function": null,
    "comment": "pr2_point_cloud_footprint_filter.h:88:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_point_cloud_footprint_filter.h",
    "line": 91,
    "function": null,
    "comment": "pr2_point_cloud_footprint_filter.h:91:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "pr2_point_cloud_footprint_filter.h",
    "line": 94,
    "function": null,
    "comment": "pr2_point_cloud_footprint_filter.h:94:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "pr2_point_cloud_footprint_filter.h",
    "line": 94,
    "function": null,
    "comment": "pr2_point_cloud_footprint_filter.h:94:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "pr2_point_cloud_footprint_filter.h",
    "line": 100,
    "function": null,
    "comment": "pr2_point_cloud_footprint_filter.h:100:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "pr2_point_cloud_footprint_filter.h",
    "line": 103,
    "function": null,
    "comment": "pr2_point_cloud_footprint_filter.h:103:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_point_cloud_footprint_filter.h",
    "line": 104,
    "function": null,
    "comment": "pr2_point_cloud_footprint_filter.h:104:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "pr2_point_cloud_footprint_filter.h",
    "line": 105,
    "function": null,
    "comment": "pr2_point_cloud_footprint_filter.h:105:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "pr2_point_cloud_footprint_filter.h",
    "line": 105,
    "function": null,
    "comment": "pr2_point_cloud_footprint_filter.h:105:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "pr2_point_cloud_footprint_filter.h",
    "line": 112,
    "function": null,
    "comment": "pr2_point_cloud_footprint_filter.h:112:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "pr2_point_cloud_footprint_filter.h",
    "line": 119,
    "function": null,
    "comment": "pr2_point_cloud_footprint_filter.h:119:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "pr2_point_cloud_footprint_filter.h",
    "line": 119,
    "function": null,
    "comment": "pr2_point_cloud_footprint_filter.h:119:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_point_cloud_footprint_filter.h",
    "line": 120,
    "function": null,
    "comment": "pr2_point_cloud_footprint_filter.h:120:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "pr2_point_cloud_footprint_filter.h",
    "line": 120,
    "function": null,
    "comment": "pr2_point_cloud_footprint_filter.h:120:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "pr2_point_cloud_footprint_filter.h",
    "line": 125,
    "function": null,
    "comment": "pr2_point_cloud_footprint_filter.h:125:  private: should be indented +1 space inside class PR2PointCloudFootprintFilterNew  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "pr2_point_cloud_footprint_filter.h",
    "line": 129,
    "function": null,
    "comment": "pr2_point_cloud_footprint_filter.h:129:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "pr2_point_cloud_footprint_filter.h",
    "line": 129,
    "function": null,
    "comment": "pr2_point_cloud_footprint_filter.h:129:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "pr2_point_cloud_footprint_filter.h",
    "line": 131,
    "function": null,
    "comment": "pr2_point_cloud_footprint_filter.h:131:  Namespace should be terminated with '// namespace pr2_laser_filters'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "pr2_point_cloud_footprint_filter.h",
    "line": 133,
    "function": null,
    "comment": "pr2_point_cloud_footprint_filter.h:133:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "pr2_point_cloud_filters.cpp",
    "line": 31,
    "function": null,
    "comment": "pr2_point_cloud_filters.cpp:31:  Include 'pr2_laser_filters/pr2_point_cloud_footprint_filter.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "pr2_point_cloud_filters.cpp",
    "line": 32,
    "function": null,
    "comment": "pr2_point_cloud_filters.cpp:32:  Include 'filters/filter_base.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_point_cloud_filters.cpp",
    "line": 35,
    "function": null,
    "comment": "pr2_point_cloud_filters.cpp:35:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "pr2_point_cloud_filters.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "pr2_point_cloud_filters.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  }
]