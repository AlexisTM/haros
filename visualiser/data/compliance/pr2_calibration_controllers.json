[
  {
    "rule": "All headers must be protected against multiple inclusion by",
    "file": "gripper_calibration_controller.h",
    "line": null,
    "function": null,
    "comment": "gripper_calibration_controller.h:0:  No #ifndef header guard found.  [build/header_guard] [5]",
    "tags": ["ros","code-standards","google-cpp","ros-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "gripper_calibration_controller.h",
    "line": 41,
    "function": null,
    "comment": "gripper_calibration_controller.h:41:  Include 'realtime_tools/realtime_publisher.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "gripper_calibration_controller.h",
    "line": 43,
    "function": null,
    "comment": "gripper_calibration_controller.h:43:  Include 'pr2_controllers_msgs/QueryCalibrationState.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "gripper_calibration_controller.h",
    "line": 46,
    "function": null,
    "comment": "gripper_calibration_controller.h:46:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "gripper_calibration_controller.h",
    "line": 49,
    "function": null,
    "comment": "gripper_calibration_controller.h:49:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "gripper_calibration_controller.h",
    "line": 50,
    "function": null,
    "comment": "gripper_calibration_controller.h:50:  public: should be indented +1 space inside class GripperCalibrationController  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "gripper_calibration_controller.h",
    "line": 54,
    "function": null,
    "comment": "gripper_calibration_controller.h:54:  Is this a non-const reference? If so, make const or use a pointer: ros::NodeHandle &n  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "gripper_calibration_controller.h",
    "line": 58,
    "function": null,
    "comment": "gripper_calibration_controller.h:58:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "gripper_calibration_controller.h",
    "line": 58,
    "function": null,
    "comment": "gripper_calibration_controller.h:58:  Is this a non-const reference? If so, make const or use a pointer: pr2_controllers_msgs::QueryCalibrationState::Request& req  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "gripper_calibration_controller.h",
    "line": 58,
    "function": null,
    "comment": "gripper_calibration_controller.h:58:  Is this a non-const reference? If so, make const or use a pointer: pr2_controllers_msgs::QueryCalibrationState::Response& resp  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "gripper_calibration_controller.h",
    "line": 61,
    "function": null,
    "comment": "gripper_calibration_controller.h:61:  protected: should be indented +1 space inside class GripperCalibrationController  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "gripper_calibration_controller.h",
    "line": 62,
    "function": null,
    "comment": "gripper_calibration_controller.h:62:  Do not leave a blank line after 'protected:'  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "gripper_calibration_controller.h",
    "line": 63,
    "function": null,
    "comment": "gripper_calibration_controller.h:63:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "gripper_calibration_controller.h",
    "line": 72,
    "function": null,
    "comment": "gripper_calibration_controller.h:72:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "gripper_calibration_controller.h",
    "line": 82,
    "function": null,
    "comment": "gripper_calibration_controller.h:82:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "gripper_calibration_controller.h",
    "line": 86,
    "function": null,
    "comment": "gripper_calibration_controller.h:86:  Namespace should be terminated with '// namespace controller'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "gripper_calibration_controller.h",
    "line": 77,
    "function": null,
    "comment": "gripper_calibration_controller.h:77:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_.",
    "file": "caster_calibration_controller.h",
    "line": 34,
    "function": null,
    "comment": "caster_calibration_controller.h:34:  #ifndef header guard has wrong style, please use: _HOME_ANDRE_ROS_HAROS_ANALYSER_CASTER_CALIBRATION_CONTROLLER_H_  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the guard's end should be '#endif  // <PROJECT>_<PATH>_<FILE>_H_' or '#endif  /* <PROJECT>_<PATH>_<FILE>_H_ */'.",
    "file": "caster_calibration_controller.h",
    "line": 89,
    "function": null,
    "comment": "caster_calibration_controller.h:89:  #endif line should be '#endif  // _HOME_ANDRE_ROS_HAROS_ANALYSER_CASTER_CALIBRATION_CONTROLLER_H_'  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "caster_calibration_controller.h",
    "line": 38,
    "function": null,
    "comment": "caster_calibration_controller.h:38:  Include 'pr2_mechanism_controllers/caster_controller.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "caster_calibration_controller.h",
    "line": 41,
    "function": null,
    "comment": "caster_calibration_controller.h:41:  Include 'pr2_controllers_msgs/QueryCalibrationState.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "caster_calibration_controller.h",
    "line": 43,
    "function": null,
    "comment": "caster_calibration_controller.h:43:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "caster_calibration_controller.h",
    "line": 46,
    "function": null,
    "comment": "caster_calibration_controller.h:46:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "caster_calibration_controller.h",
    "line": 47,
    "function": null,
    "comment": "caster_calibration_controller.h:47:  public: should be indented +1 space inside class CasterCalibrationController  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "caster_calibration_controller.h",
    "line": 51,
    "function": null,
    "comment": "caster_calibration_controller.h:51:  Is this a non-const reference? If so, make const or use a pointer: ros::NodeHandle &n  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "caster_calibration_controller.h",
    "line": 55,
    "function": null,
    "comment": "caster_calibration_controller.h:55:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "caster_calibration_controller.h",
    "line": 55,
    "function": null,
    "comment": "caster_calibration_controller.h:55:  Is this a non-const reference? If so, make const or use a pointer: pr2_controllers_msgs::QueryCalibrationState::Request& req  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "caster_calibration_controller.h",
    "line": 55,
    "function": null,
    "comment": "caster_calibration_controller.h:55:  Is this a non-const reference? If so, make const or use a pointer: pr2_controllers_msgs::QueryCalibrationState::Response& resp  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "caster_calibration_controller.h",
    "line": 57,
    "function": null,
    "comment": "caster_calibration_controller.h:57:  protected: should be indented +1 space inside class CasterCalibrationController  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "caster_calibration_controller.h",
    "line": 58,
    "function": null,
    "comment": "caster_calibration_controller.h:58:  Do not leave a blank line after 'protected:'  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "caster_calibration_controller.h",
    "line": 84,
    "function": null,
    "comment": "caster_calibration_controller.h:84:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "caster_calibration_controller.h",
    "line": 87,
    "function": null,
    "comment": "caster_calibration_controller.h:87:  Namespace should be terminated with '// namespace controller'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "caster_calibration_controller.h",
    "line": 87,
    "function": null,
    "comment": "caster_calibration_controller.h:87:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "caster_calibration_controller.h",
    "line": 78,
    "function": null,
    "comment": "caster_calibration_controller.h:78:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "All headers must be protected against multiple inclusion by",
    "file": "fake_calibration_controller.h",
    "line": null,
    "function": null,
    "comment": "fake_calibration_controller.h:0:  No #ifndef header guard found.  [build/header_guard] [5]",
    "tags": ["ros","code-standards","google-cpp","ros-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "fake_calibration_controller.h",
    "line": 41,
    "function": null,
    "comment": "fake_calibration_controller.h:41:  Include 'realtime_tools/realtime_publisher.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "fake_calibration_controller.h",
    "line": 43,
    "function": null,
    "comment": "fake_calibration_controller.h:43:  Include 'pr2_controllers_msgs/QueryCalibrationState.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "fake_calibration_controller.h",
    "line": 46,
    "function": null,
    "comment": "fake_calibration_controller.h:46:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "fake_calibration_controller.h",
    "line": 49,
    "function": null,
    "comment": "fake_calibration_controller.h:49:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "fake_calibration_controller.h",
    "line": 50,
    "function": null,
    "comment": "fake_calibration_controller.h:50:  public: should be indented +1 space inside class FakeCalibrationController  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "fake_calibration_controller.h",
    "line": 54,
    "function": null,
    "comment": "fake_calibration_controller.h:54:  Is this a non-const reference? If so, make const or use a pointer: ros::NodeHandle &n  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "fake_calibration_controller.h",
    "line": 58,
    "function": null,
    "comment": "fake_calibration_controller.h:58:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "fake_calibration_controller.h",
    "line": 58,
    "function": null,
    "comment": "fake_calibration_controller.h:58:  Is this a non-const reference? If so, make const or use a pointer: pr2_controllers_msgs::QueryCalibrationState::Request& req  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "fake_calibration_controller.h",
    "line": 58,
    "function": null,
    "comment": "fake_calibration_controller.h:58:  Is this a non-const reference? If so, make const or use a pointer: pr2_controllers_msgs::QueryCalibrationState::Response& resp  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "fake_calibration_controller.h",
    "line": 61,
    "function": null,
    "comment": "fake_calibration_controller.h:61:  protected: should be indented +1 space inside class FakeCalibrationController  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "fake_calibration_controller.h",
    "line": 62,
    "function": null,
    "comment": "fake_calibration_controller.h:62:  Do not leave a blank line after 'protected:'  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "fake_calibration_controller.h",
    "line": 67,
    "function": null,
    "comment": "fake_calibration_controller.h:67:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "fake_calibration_controller.h",
    "line": 73,
    "function": null,
    "comment": "fake_calibration_controller.h:73:  Namespace should be terminated with '// namespace controller'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_.",
    "file": "wrist_calibration_controller.h",
    "line": 34,
    "function": null,
    "comment": "wrist_calibration_controller.h:34:  #ifndef header guard has wrong style, please use: _HOME_ANDRE_ROS_HAROS_ANALYSER_WRIST_CALIBRATION_CONTROLLER_H_  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the guard's end should be '#endif  // <PROJECT>_<PATH>_<FILE>_H_' or '#endif  /* <PROJECT>_<PATH>_<FILE>_H_ */'.",
    "file": "wrist_calibration_controller.h",
    "line": 95,
    "function": null,
    "comment": "wrist_calibration_controller.h:95:  #endif line should be '#endif  // _HOME_ANDRE_ROS_HAROS_ANALYSER_WRIST_CALIBRATION_CONTROLLER_H_'  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "wrist_calibration_controller.h",
    "line": 38,
    "function": null,
    "comment": "wrist_calibration_controller.h:38:  Include 'realtime_tools/realtime_publisher.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "wrist_calibration_controller.h",
    "line": 39,
    "function": null,
    "comment": "wrist_calibration_controller.h:39:  Include 'pr2_mechanism_model/wrist_transmission.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "wrist_calibration_controller.h",
    "line": 41,
    "function": null,
    "comment": "wrist_calibration_controller.h:41:  Include 'pr2_controllers_msgs/QueryCalibrationState.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wrist_calibration_controller.h",
    "line": 43,
    "function": null,
    "comment": "wrist_calibration_controller.h:43:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_calibration_controller.h",
    "line": 46,
    "function": null,
    "comment": "wrist_calibration_controller.h:46:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "wrist_calibration_controller.h",
    "line": 47,
    "function": null,
    "comment": "wrist_calibration_controller.h:47:  public: should be indented +1 space inside class WristCalibrationController  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "wrist_calibration_controller.h",
    "line": 51,
    "function": null,
    "comment": "wrist_calibration_controller.h:51:  Is this a non-const reference? If so, make const or use a pointer: ros::NodeHandle &n  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_calibration_controller.h",
    "line": 55,
    "function": null,
    "comment": "wrist_calibration_controller.h:55:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "wrist_calibration_controller.h",
    "line": 55,
    "function": null,
    "comment": "wrist_calibration_controller.h:55:  Is this a non-const reference? If so, make const or use a pointer: pr2_controllers_msgs::QueryCalibrationState::Request& req  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "wrist_calibration_controller.h",
    "line": 55,
    "function": null,
    "comment": "wrist_calibration_controller.h:55:  Is this a non-const reference? If so, make const or use a pointer: pr2_controllers_msgs::QueryCalibrationState::Response& resp  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "wrist_calibration_controller.h",
    "line": 57,
    "function": null,
    "comment": "wrist_calibration_controller.h:57:  protected: should be indented +1 space inside class WristCalibrationController  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "wrist_calibration_controller.h",
    "line": 58,
    "function": null,
    "comment": "wrist_calibration_controller.h:58:  Do not leave a blank line after 'protected:'  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wrist_calibration_controller.h",
    "line": 59,
    "function": null,
    "comment": "wrist_calibration_controller.h:59:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_calibration_controller.h",
    "line": 68,
    "function": null,
    "comment": "wrist_calibration_controller.h:68:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "wrist_calibration_controller.h",
    "line": 93,
    "function": null,
    "comment": "wrist_calibration_controller.h:93:  Namespace should be terminated with '// namespace controller'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "wrist_calibration_controller.h",
    "line": 87,
    "function": null,
    "comment": "wrist_calibration_controller.h:87:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_.",
    "file": "joint_calibration_controller.h",
    "line": 35,
    "function": null,
    "comment": "joint_calibration_controller.h:35:  #ifndef header guard has wrong style, please use: _HOME_ANDRE_ROS_HAROS_ANALYSER_JOINT_CALIBRATION_CONTROLLER_H_  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the symbol name should be <PACKAGE>_<PATH>_<FILE>_H.",
    "file": "joint_calibration_controller.h",
    "line": 35,
    "function": null,
    "comment": "joint_calibration_controller.h:35:  #ifndef header guard has wrong style, please use: JOINT_CALIBRATION_CONTROLLER_H  [build/header_guard] [5]",
    "tags": ["ros","code-standards","ros-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the guard's end should be '#endif  // <PROJECT>_<PATH>_<FILE>_H_' or '#endif  /* <PROJECT>_<PATH>_<FILE>_H_ */'.",
    "file": "joint_calibration_controller.h",
    "line": 86,
    "function": null,
    "comment": "joint_calibration_controller.h:86:  #endif line should be '#endif  // _HOME_ANDRE_ROS_HAROS_ANALYSER_JOINT_CALIBRATION_CONTROLLER_H_'  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "joint_calibration_controller.h",
    "line": 39,
    "function": null,
    "comment": "joint_calibration_controller.h:39:  Include 'pr2_mechanism_model/robot.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "joint_calibration_controller.h",
    "line": 41,
    "function": null,
    "comment": "joint_calibration_controller.h:41:  Include 'realtime_tools/realtime_publisher.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "joint_calibration_controller.h",
    "line": 43,
    "function": null,
    "comment": "joint_calibration_controller.h:43:  Include 'pr2_controllers_msgs/QueryCalibrationState.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_calibration_controller.h",
    "line": 47,
    "function": null,
    "comment": "joint_calibration_controller.h:47:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_calibration_controller.h",
    "line": 50,
    "function": null,
    "comment": "joint_calibration_controller.h:50:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "joint_calibration_controller.h",
    "line": 51,
    "function": null,
    "comment": "joint_calibration_controller.h:51:  public: should be indented +1 space inside class JointCalibrationController  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "joint_calibration_controller.h",
    "line": 55,
    "function": null,
    "comment": "joint_calibration_controller.h:55:  Is this a non-const reference? If so, make const or use a pointer: ros::NodeHandle &n  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_calibration_controller.h",
    "line": 59,
    "function": null,
    "comment": "joint_calibration_controller.h:59:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "joint_calibration_controller.h",
    "line": 59,
    "function": null,
    "comment": "joint_calibration_controller.h:59:  Is this a non-const reference? If so, make const or use a pointer: pr2_controllers_msgs::QueryCalibrationState::Request& req  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "joint_calibration_controller.h",
    "line": 59,
    "function": null,
    "comment": "joint_calibration_controller.h:59:  Is this a non-const reference? If so, make const or use a pointer: pr2_controllers_msgs::QueryCalibrationState::Response& resp  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "joint_calibration_controller.h",
    "line": 62,
    "function": null,
    "comment": "joint_calibration_controller.h:62:  protected: should be indented +1 space inside class JointCalibrationController  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_calibration_controller.h",
    "line": 67,
    "function": null,
    "comment": "joint_calibration_controller.h:67:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "joint_calibration_controller.h",
    "line": 83,
    "function": null,
    "comment": "joint_calibration_controller.h:83:  Namespace should be terminated with '// namespace controller'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "gripper_calibration_controller.cpp",
    "line": 37,
    "function": null,
    "comment": "gripper_calibration_controller.cpp:37:  Include 'pluginlib/class_list_macros.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "gripper_calibration_controller.cpp",
    "line": 39,
    "function": null,
    "comment": "gripper_calibration_controller.cpp:39:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "gripper_calibration_controller.cpp",
    "line": 40,
    "function": null,
    "comment": "gripper_calibration_controller.cpp:40:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "gripper_calibration_controller.cpp",
    "line": 42,
    "function": null,
    "comment": "gripper_calibration_controller.cpp:42:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "gripper_calibration_controller.cpp",
    "line": 45,
    "function": null,
    "comment": "gripper_calibration_controller.cpp:45:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "gripper_calibration_controller.cpp",
    "line": 49,
    "function": null,
    "comment": "gripper_calibration_controller.cpp:49:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "gripper_calibration_controller.cpp",
    "line": 53,
    "function": null,
    "comment": "gripper_calibration_controller.cpp:53:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "gripper_calibration_controller.cpp",
    "line": 58,
    "function": null,
    "comment": "gripper_calibration_controller.cpp:58:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "gripper_calibration_controller.cpp",
    "line": 63,
    "function": null,
    "comment": "gripper_calibration_controller.cpp:63:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "gripper_calibration_controller.cpp",
    "line": 67,
    "function": null,
    "comment": "gripper_calibration_controller.cpp:67:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "gripper_calibration_controller.cpp",
    "line": 69,
    "function": null,
    "comment": "gripper_calibration_controller.cpp:69:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "gripper_calibration_controller.cpp",
    "line": 70,
    "function": null,
    "comment": "gripper_calibration_controller.cpp:70:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "gripper_calibration_controller.cpp",
    "line": 73,
    "function": null,
    "comment": "gripper_calibration_controller.cpp:73:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "gripper_calibration_controller.cpp",
    "line": 74,
    "function": null,
    "comment": "gripper_calibration_controller.cpp:74:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "gripper_calibration_controller.cpp",
    "line": 76,
    "function": null,
    "comment": "gripper_calibration_controller.cpp:76:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "gripper_calibration_controller.cpp",
    "line": 79,
    "function": null,
    "comment": "gripper_calibration_controller.cpp:79:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "gripper_calibration_controller.cpp",
    "line": 82,
    "function": null,
    "comment": "gripper_calibration_controller.cpp:82:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "gripper_calibration_controller.cpp",
    "line": 82,
    "function": null,
    "comment": "gripper_calibration_controller.cpp:82:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "gripper_calibration_controller.cpp",
    "line": 82,
    "function": null,
    "comment": "gripper_calibration_controller.cpp:82:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "gripper_calibration_controller.cpp",
    "line": 92,
    "function": null,
    "comment": "gripper_calibration_controller.cpp:92:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "gripper_calibration_controller.cpp",
    "line": 93,
    "function": null,
    "comment": "gripper_calibration_controller.cpp:93:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "gripper_calibration_controller.cpp",
    "line": 99,
    "function": null,
    "comment": "gripper_calibration_controller.cpp:99:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "gripper_calibration_controller.cpp",
    "line": 104,
    "function": null,
    "comment": "gripper_calibration_controller.cpp:104:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "gripper_calibration_controller.cpp",
    "line": 112,
    "function": null,
    "comment": "gripper_calibration_controller.cpp:112:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "gripper_calibration_controller.cpp",
    "line": 113,
    "function": null,
    "comment": "gripper_calibration_controller.cpp:113:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "gripper_calibration_controller.cpp",
    "line": 117,
    "function": null,
    "comment": "gripper_calibration_controller.cpp:117:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "gripper_calibration_controller.cpp",
    "line": 128,
    "function": null,
    "comment": "gripper_calibration_controller.cpp:128:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "gripper_calibration_controller.cpp",
    "line": 130,
    "function": null,
    "comment": "gripper_calibration_controller.cpp:130:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "gripper_calibration_controller.cpp",
    "line": 131,
    "function": null,
    "comment": "gripper_calibration_controller.cpp:131:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "gripper_calibration_controller.cpp",
    "line": 131,
    "function": null,
    "comment": "gripper_calibration_controller.cpp:131:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "gripper_calibration_controller.cpp",
    "line": 134,
    "function": null,
    "comment": "gripper_calibration_controller.cpp:134:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "gripper_calibration_controller.cpp",
    "line": 134,
    "function": null,
    "comment": "gripper_calibration_controller.cpp:134:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "gripper_calibration_controller.cpp",
    "line": 135,
    "function": null,
    "comment": "gripper_calibration_controller.cpp:135:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "gripper_calibration_controller.cpp",
    "line": 136,
    "function": null,
    "comment": "gripper_calibration_controller.cpp:136:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "gripper_calibration_controller.cpp",
    "line": 143,
    "function": null,
    "comment": "gripper_calibration_controller.cpp:143:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "gripper_calibration_controller.cpp",
    "line": 143,
    "function": null,
    "comment": "gripper_calibration_controller.cpp:143:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "gripper_calibration_controller.cpp",
    "line": 143,
    "function": null,
    "comment": "gripper_calibration_controller.cpp:143:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "gripper_calibration_controller.cpp",
    "line": 143,
    "function": null,
    "comment": "gripper_calibration_controller.cpp:143:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "gripper_calibration_controller.cpp",
    "line": 151,
    "function": null,
    "comment": "gripper_calibration_controller.cpp:151:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "gripper_calibration_controller.cpp",
    "line": 154,
    "function": null,
    "comment": "gripper_calibration_controller.cpp:154:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "gripper_calibration_controller.cpp",
    "line": 161,
    "function": null,
    "comment": "gripper_calibration_controller.cpp:161:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "gripper_calibration_controller.cpp",
    "line": 168,
    "function": null,
    "comment": "gripper_calibration_controller.cpp:168:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "gripper_calibration_controller.cpp",
    "line": 169,
    "function": null,
    "comment": "gripper_calibration_controller.cpp:169:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "gripper_calibration_controller.cpp",
    "line": 170,
    "function": null,
    "comment": "gripper_calibration_controller.cpp:170:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "gripper_calibration_controller.cpp",
    "line": 177,
    "function": null,
    "comment": "gripper_calibration_controller.cpp:177:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "gripper_calibration_controller.cpp",
    "line": 182,
    "function": null,
    "comment": "gripper_calibration_controller.cpp:182:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "gripper_calibration_controller.cpp",
    "line": 199,
    "function": null,
    "comment": "gripper_calibration_controller.cpp:199:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "gripper_calibration_controller.cpp",
    "line": 213,
    "function": null,
    "comment": "gripper_calibration_controller.cpp:213:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "gripper_calibration_controller.cpp",
    "line": 219,
    "function": null,
    "comment": "gripper_calibration_controller.cpp:219:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "gripper_calibration_controller.cpp",
    "line": 221,
    "function": null,
    "comment": "gripper_calibration_controller.cpp:221:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "gripper_calibration_controller.cpp",
    "line": 229,
    "function": null,
    "comment": "gripper_calibration_controller.cpp:229:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "gripper_calibration_controller.cpp",
    "line": 237,
    "function": null,
    "comment": "gripper_calibration_controller.cpp:237:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "gripper_calibration_controller.cpp",
    "line": 248,
    "function": null,
    "comment": "gripper_calibration_controller.cpp:248:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "gripper_calibration_controller.cpp",
    "line": 249,
    "function": null,
    "comment": "gripper_calibration_controller.cpp:249:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "gripper_calibration_controller.cpp",
    "line": 250,
    "function": null,
    "comment": "gripper_calibration_controller.cpp:250:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "gripper_calibration_controller.cpp",
    "line": 250,
    "function": null,
    "comment": "gripper_calibration_controller.cpp:250:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "gripper_calibration_controller.cpp",
    "line": 251,
    "function": null,
    "comment": "gripper_calibration_controller.cpp:251:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "gripper_calibration_controller.cpp",
    "line": 252,
    "function": null,
    "comment": "gripper_calibration_controller.cpp:252:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "gripper_calibration_controller.cpp",
    "line": 253,
    "function": null,
    "comment": "gripper_calibration_controller.cpp:253:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "gripper_calibration_controller.cpp",
    "line": 261,
    "function": null,
    "comment": "gripper_calibration_controller.cpp:261:  Namespace should be terminated with '// namespace controller'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "gripper_calibration_controller.cpp",
    "line": 110,
    "function": null,
    "comment": "gripper_calibration_controller.cpp:110:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_calibration_controller.cpp",
    "line": 37,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:37:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wrist_calibration_controller.cpp",
    "line": 39,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:39:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_calibration_controller.cpp",
    "line": 44,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:44:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_calibration_controller.cpp",
    "line": 48,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:48:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_calibration_controller.cpp",
    "line": 57,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:57:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_calibration_controller.cpp",
    "line": 66,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:66:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_calibration_controller.cpp",
    "line": 67,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:67:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_calibration_controller.cpp",
    "line": 71,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:71:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_calibration_controller.cpp",
    "line": 77,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:77:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_calibration_controller.cpp",
    "line": 78,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:78:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_calibration_controller.cpp",
    "line": 86,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:86:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_calibration_controller.cpp",
    "line": 87,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:87:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_calibration_controller.cpp",
    "line": 91,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:91:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_calibration_controller.cpp",
    "line": 97,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:97:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_calibration_controller.cpp",
    "line": 98,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:98:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_calibration_controller.cpp",
    "line": 107,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:107:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_calibration_controller.cpp",
    "line": 108,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:108:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_calibration_controller.cpp",
    "line": 112,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:112:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wrist_calibration_controller.cpp",
    "line": 112,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:112:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "wrist_calibration_controller.cpp",
    "line": 112,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:112:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_calibration_controller.cpp",
    "line": 113,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:113:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_calibration_controller.cpp",
    "line": 116,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:116:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "wrist_calibration_controller.cpp",
    "line": 116,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:116:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_calibration_controller.cpp",
    "line": 117,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:117:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wrist_calibration_controller.cpp",
    "line": 120,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:120:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "wrist_calibration_controller.cpp",
    "line": 120,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:120:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_calibration_controller.cpp",
    "line": 122,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:122:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_calibration_controller.cpp",
    "line": 126,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:126:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wrist_calibration_controller.cpp",
    "line": 126,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:126:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "wrist_calibration_controller.cpp",
    "line": 126,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:126:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_calibration_controller.cpp",
    "line": 127,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:127:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "wrist_calibration_controller.cpp",
    "line": 129,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:129:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "wrist_calibration_controller.cpp",
    "line": 129,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:129:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wrist_calibration_controller.cpp",
    "line": 129,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:129:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "wrist_calibration_controller.cpp",
    "line": 129,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:129:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_calibration_controller.cpp",
    "line": 130,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:130:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "wrist_calibration_controller.cpp",
    "line": 132,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:132:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "wrist_calibration_controller.cpp",
    "line": 132,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:132:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wrist_calibration_controller.cpp",
    "line": 132,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:132:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "wrist_calibration_controller.cpp",
    "line": 132,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:132:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_calibration_controller.cpp",
    "line": 133,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:133:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_calibration_controller.cpp",
    "line": 138,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:138:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_calibration_controller.cpp",
    "line": 139,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:139:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_calibration_controller.cpp",
    "line": 143,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:143:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wrist_calibration_controller.cpp",
    "line": 143,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:143:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "wrist_calibration_controller.cpp",
    "line": 143,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:143:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_calibration_controller.cpp",
    "line": 144,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:144:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_calibration_controller.cpp",
    "line": 147,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:147:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "wrist_calibration_controller.cpp",
    "line": 147,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:147:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_calibration_controller.cpp",
    "line": 148,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:148:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wrist_calibration_controller.cpp",
    "line": 151,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:151:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "wrist_calibration_controller.cpp",
    "line": 151,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:151:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_calibration_controller.cpp",
    "line": 153,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:153:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_calibration_controller.cpp",
    "line": 157,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:157:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wrist_calibration_controller.cpp",
    "line": 157,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:157:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "wrist_calibration_controller.cpp",
    "line": 157,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:157:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_calibration_controller.cpp",
    "line": 158,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:158:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "wrist_calibration_controller.cpp",
    "line": 160,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:160:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "wrist_calibration_controller.cpp",
    "line": 160,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:160:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wrist_calibration_controller.cpp",
    "line": 160,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:160:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "wrist_calibration_controller.cpp",
    "line": 160,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:160:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_calibration_controller.cpp",
    "line": 161,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:161:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "wrist_calibration_controller.cpp",
    "line": 163,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:163:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "wrist_calibration_controller.cpp",
    "line": 163,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:163:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wrist_calibration_controller.cpp",
    "line": 163,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:163:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "wrist_calibration_controller.cpp",
    "line": 163,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:163:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_calibration_controller.cpp",
    "line": 164,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:164:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_calibration_controller.cpp",
    "line": 170,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:170:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_calibration_controller.cpp",
    "line": 171,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:171:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_calibration_controller.cpp",
    "line": 175,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:175:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_calibration_controller.cpp",
    "line": 183,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:183:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_calibration_controller.cpp",
    "line": 184,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:184:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_calibration_controller.cpp",
    "line": 188,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:188:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_calibration_controller.cpp",
    "line": 200,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:200:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "wrist_calibration_controller.cpp",
    "line": 200,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:200:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_calibration_controller.cpp",
    "line": 202,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:202:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_calibration_controller.cpp",
    "line": 203,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:203:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wrist_calibration_controller.cpp",
    "line": 204,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:204:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "wrist_calibration_controller.cpp",
    "line": 208,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:208:  Closing ) should be moved to the previous line  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wrist_calibration_controller.cpp",
    "line": 210,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:210:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "wrist_calibration_controller.cpp",
    "line": 210,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:210:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_calibration_controller.cpp",
    "line": 211,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:211:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_calibration_controller.cpp",
    "line": 212,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:212:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "wrist_calibration_controller.cpp",
    "line": 218,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:218:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "wrist_calibration_controller.cpp",
    "line": 218,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:218:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wrist_calibration_controller.cpp",
    "line": 218,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:218:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "wrist_calibration_controller.cpp",
    "line": 218,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:218:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_calibration_controller.cpp",
    "line": 219,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:219:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_calibration_controller.cpp",
    "line": 227,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:227:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_calibration_controller.cpp",
    "line": 228,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:228:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_calibration_controller.cpp",
    "line": 232,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:232:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_calibration_controller.cpp",
    "line": 269,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:269:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_calibration_controller.cpp",
    "line": 272,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:272:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_calibration_controller.cpp",
    "line": 279,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:279:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_calibration_controller.cpp",
    "line": 288,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:288:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "wrist_calibration_controller.cpp",
    "line": 289,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:289:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_calibration_controller.cpp",
    "line": 290,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:290:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_calibration_controller.cpp",
    "line": 298,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:298:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "wrist_calibration_controller.cpp",
    "line": 302,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:302:  Missing space before ( in switch(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_calibration_controller.cpp",
    "line": 303,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:303:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_calibration_controller.cpp",
    "line": 315,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:315:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_calibration_controller.cpp",
    "line": 327,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:327:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "wrist_calibration_controller.cpp",
    "line": 331,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:331:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wrist_calibration_controller.cpp",
    "line": 334,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:334:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_calibration_controller.cpp",
    "line": 338,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:338:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_calibration_controller.cpp",
    "line": 350,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:350:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_calibration_controller.cpp",
    "line": 351,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:351:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_calibration_controller.cpp",
    "line": 352,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:352:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "wrist_calibration_controller.cpp",
    "line": 357,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:357:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_calibration_controller.cpp",
    "line": 358,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:358:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_calibration_controller.cpp",
    "line": 359,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:359:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_calibration_controller.cpp",
    "line": 360,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:360:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_calibration_controller.cpp",
    "line": 361,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:361:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_calibration_controller.cpp",
    "line": 363,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:363:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "wrist_calibration_controller.cpp",
    "line": 370,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:370:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wrist_calibration_controller.cpp",
    "line": 386,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:386:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_calibration_controller.cpp",
    "line": 390,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:390:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_calibration_controller.cpp",
    "line": 398,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:398:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_calibration_controller.cpp",
    "line": 399,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:399:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_calibration_controller.cpp",
    "line": 400,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:400:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "wrist_calibration_controller.cpp",
    "line": 405,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:405:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_calibration_controller.cpp",
    "line": 406,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:406:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_calibration_controller.cpp",
    "line": 407,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:407:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_calibration_controller.cpp",
    "line": 408,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:408:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_calibration_controller.cpp",
    "line": 409,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:409:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_calibration_controller.cpp",
    "line": 411,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:411:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_calibration_controller.cpp",
    "line": 427,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:427:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_calibration_controller.cpp",
    "line": 431,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:431:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_calibration_controller.cpp",
    "line": 437,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:437:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_calibration_controller.cpp",
    "line": 447,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:447:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_calibration_controller.cpp",
    "line": 451,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:451:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_calibration_controller.cpp",
    "line": 452,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:452:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_calibration_controller.cpp",
    "line": 453,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:453:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wrist_calibration_controller.cpp",
    "line": 472,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:472:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wrist_calibration_controller.cpp",
    "line": 473,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:473:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "wrist_calibration_controller.cpp",
    "line": 474,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:474:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "wrist_calibration_controller.cpp",
    "line": 475,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:475:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wrist_calibration_controller.cpp",
    "line": 475,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:475:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "wrist_calibration_controller.cpp",
    "line": 476,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:476:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "wrist_calibration_controller.cpp",
    "line": 477,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:477:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "wrist_calibration_controller.cpp",
    "line": 478,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:478:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_calibration_controller.cpp",
    "line": 485,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:485:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "wrist_calibration_controller.cpp",
    "line": 493,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:493:  Namespace should be terminated with '// namespace controller'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "wrist_calibration_controller.cpp",
    "line": 249,
    "function": null,
    "comment": "wrist_calibration_controller.cpp:249:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "joint_calibration_controller.cpp",
    "line": 37,
    "function": null,
    "comment": "joint_calibration_controller.cpp:37:  Include 'pluginlib/class_list_macros.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_calibration_controller.cpp",
    "line": 39,
    "function": null,
    "comment": "joint_calibration_controller.cpp:39:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "joint_calibration_controller.cpp",
    "line": 41,
    "function": null,
    "comment": "joint_calibration_controller.cpp:41:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint_calibration_controller.cpp",
    "line": 43,
    "function": null,
    "comment": "joint_calibration_controller.cpp:43:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_calibration_controller.cpp",
    "line": 48,
    "function": null,
    "comment": "joint_calibration_controller.cpp:48:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_calibration_controller.cpp",
    "line": 52,
    "function": null,
    "comment": "joint_calibration_controller.cpp:52:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_calibration_controller.cpp",
    "line": 55,
    "function": null,
    "comment": "joint_calibration_controller.cpp:55:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_calibration_controller.cpp",
    "line": 56,
    "function": null,
    "comment": "joint_calibration_controller.cpp:56:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_calibration_controller.cpp",
    "line": 63,
    "function": null,
    "comment": "joint_calibration_controller.cpp:63:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_calibration_controller.cpp",
    "line": 68,
    "function": null,
    "comment": "joint_calibration_controller.cpp:68:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_calibration_controller.cpp",
    "line": 74,
    "function": null,
    "comment": "joint_calibration_controller.cpp:74:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_calibration_controller.cpp",
    "line": 75,
    "function": null,
    "comment": "joint_calibration_controller.cpp:75:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_calibration_controller.cpp",
    "line": 83,
    "function": null,
    "comment": "joint_calibration_controller.cpp:83:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_calibration_controller.cpp",
    "line": 84,
    "function": null,
    "comment": "joint_calibration_controller.cpp:84:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_calibration_controller.cpp",
    "line": 88,
    "function": null,
    "comment": "joint_calibration_controller.cpp:88:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "joint_calibration_controller.cpp",
    "line": 99,
    "function": null,
    "comment": "joint_calibration_controller.cpp:99:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_calibration_controller.cpp",
    "line": 100,
    "function": null,
    "comment": "joint_calibration_controller.cpp:100:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_calibration_controller.cpp",
    "line": 102,
    "function": null,
    "comment": "joint_calibration_controller.cpp:102:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "joint_calibration_controller.cpp",
    "line": 103,
    "function": null,
    "comment": "joint_calibration_controller.cpp:103:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_calibration_controller.cpp",
    "line": 103,
    "function": null,
    "comment": "joint_calibration_controller.cpp:103:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "joint_calibration_controller.cpp",
    "line": 106,
    "function": null,
    "comment": "joint_calibration_controller.cpp:106:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_calibration_controller.cpp",
    "line": 107,
    "function": null,
    "comment": "joint_calibration_controller.cpp:107:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "joint_calibration_controller.cpp",
    "line": 108,
    "function": null,
    "comment": "joint_calibration_controller.cpp:108:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "joint_calibration_controller.cpp",
    "line": 114,
    "function": null,
    "comment": "joint_calibration_controller.cpp:114:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "joint_calibration_controller.cpp",
    "line": 114,
    "function": null,
    "comment": "joint_calibration_controller.cpp:114:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint_calibration_controller.cpp",
    "line": 114,
    "function": null,
    "comment": "joint_calibration_controller.cpp:114:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "joint_calibration_controller.cpp",
    "line": 114,
    "function": null,
    "comment": "joint_calibration_controller.cpp:114:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_calibration_controller.cpp",
    "line": 121,
    "function": null,
    "comment": "joint_calibration_controller.cpp:121:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_calibration_controller.cpp",
    "line": 122,
    "function": null,
    "comment": "joint_calibration_controller.cpp:122:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_calibration_controller.cpp",
    "line": 126,
    "function": null,
    "comment": "joint_calibration_controller.cpp:126:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_calibration_controller.cpp",
    "line": 133,
    "function": null,
    "comment": "joint_calibration_controller.cpp:133:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_calibration_controller.cpp",
    "line": 134,
    "function": null,
    "comment": "joint_calibration_controller.cpp:134:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_calibration_controller.cpp",
    "line": 139,
    "function": null,
    "comment": "joint_calibration_controller.cpp:139:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint_calibration_controller.cpp",
    "line": 139,
    "function": null,
    "comment": "joint_calibration_controller.cpp:139:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "joint_calibration_controller.cpp",
    "line": 139,
    "function": null,
    "comment": "joint_calibration_controller.cpp:139:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_calibration_controller.cpp",
    "line": 140,
    "function": null,
    "comment": "joint_calibration_controller.cpp:140:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_calibration_controller.cpp",
    "line": 143,
    "function": null,
    "comment": "joint_calibration_controller.cpp:143:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "joint_calibration_controller.cpp",
    "line": 143,
    "function": null,
    "comment": "joint_calibration_controller.cpp:143:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_calibration_controller.cpp",
    "line": 144,
    "function": null,
    "comment": "joint_calibration_controller.cpp:144:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint_calibration_controller.cpp",
    "line": 147,
    "function": null,
    "comment": "joint_calibration_controller.cpp:147:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "joint_calibration_controller.cpp",
    "line": 147,
    "function": null,
    "comment": "joint_calibration_controller.cpp:147:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_calibration_controller.cpp",
    "line": 149,
    "function": null,
    "comment": "joint_calibration_controller.cpp:149:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_calibration_controller.cpp",
    "line": 153,
    "function": null,
    "comment": "joint_calibration_controller.cpp:153:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint_calibration_controller.cpp",
    "line": 153,
    "function": null,
    "comment": "joint_calibration_controller.cpp:153:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "joint_calibration_controller.cpp",
    "line": 153,
    "function": null,
    "comment": "joint_calibration_controller.cpp:153:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_calibration_controller.cpp",
    "line": 155,
    "function": null,
    "comment": "joint_calibration_controller.cpp:155:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "joint_calibration_controller.cpp",
    "line": 157,
    "function": null,
    "comment": "joint_calibration_controller.cpp:157:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "joint_calibration_controller.cpp",
    "line": 157,
    "function": null,
    "comment": "joint_calibration_controller.cpp:157:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint_calibration_controller.cpp",
    "line": 157,
    "function": null,
    "comment": "joint_calibration_controller.cpp:157:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "joint_calibration_controller.cpp",
    "line": 157,
    "function": null,
    "comment": "joint_calibration_controller.cpp:157:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_calibration_controller.cpp",
    "line": 160,
    "function": null,
    "comment": "joint_calibration_controller.cpp:160:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "joint_calibration_controller.cpp",
    "line": 162,
    "function": null,
    "comment": "joint_calibration_controller.cpp:162:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "joint_calibration_controller.cpp",
    "line": 162,
    "function": null,
    "comment": "joint_calibration_controller.cpp:162:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint_calibration_controller.cpp",
    "line": 162,
    "function": null,
    "comment": "joint_calibration_controller.cpp:162:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "joint_calibration_controller.cpp",
    "line": 162,
    "function": null,
    "comment": "joint_calibration_controller.cpp:162:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_calibration_controller.cpp",
    "line": 164,
    "function": null,
    "comment": "joint_calibration_controller.cpp:164:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_calibration_controller.cpp",
    "line": 173,
    "function": null,
    "comment": "joint_calibration_controller.cpp:173:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_calibration_controller.cpp",
    "line": 176,
    "function": null,
    "comment": "joint_calibration_controller.cpp:176:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_calibration_controller.cpp",
    "line": 184,
    "function": null,
    "comment": "joint_calibration_controller.cpp:184:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_calibration_controller.cpp",
    "line": 191,
    "function": null,
    "comment": "joint_calibration_controller.cpp:191:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "joint_calibration_controller.cpp",
    "line": 192,
    "function": null,
    "comment": "joint_calibration_controller.cpp:192:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_calibration_controller.cpp",
    "line": 193,
    "function": null,
    "comment": "joint_calibration_controller.cpp:193:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_calibration_controller.cpp",
    "line": 201,
    "function": null,
    "comment": "joint_calibration_controller.cpp:201:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "joint_calibration_controller.cpp",
    "line": 205,
    "function": null,
    "comment": "joint_calibration_controller.cpp:205:  Missing space before ( in switch(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_calibration_controller.cpp",
    "line": 206,
    "function": null,
    "comment": "joint_calibration_controller.cpp:206:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "joint_calibration_controller.cpp",
    "line": 214,
    "function": null,
    "comment": "joint_calibration_controller.cpp:214:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint_calibration_controller.cpp",
    "line": 214,
    "function": null,
    "comment": "joint_calibration_controller.cpp:214:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "joint_calibration_controller.cpp",
    "line": 214,
    "function": null,
    "comment": "joint_calibration_controller.cpp:214:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_calibration_controller.cpp",
    "line": 222,
    "function": null,
    "comment": "joint_calibration_controller.cpp:222:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "joint_calibration_controller.cpp",
    "line": 223,
    "function": null,
    "comment": "joint_calibration_controller.cpp:223:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "joint_calibration_controller.cpp",
    "line": 225,
    "function": null,
    "comment": "joint_calibration_controller.cpp:225:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "joint_calibration_controller.cpp",
    "line": 228,
    "function": null,
    "comment": "joint_calibration_controller.cpp:228:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint_calibration_controller.cpp",
    "line": 231,
    "function": null,
    "comment": "joint_calibration_controller.cpp:231:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_calibration_controller.cpp",
    "line": 235,
    "function": null,
    "comment": "joint_calibration_controller.cpp:235:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_calibration_controller.cpp",
    "line": 236,
    "function": null,
    "comment": "joint_calibration_controller.cpp:236:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_calibration_controller.cpp",
    "line": 237,
    "function": null,
    "comment": "joint_calibration_controller.cpp:237:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "joint_calibration_controller.cpp",
    "line": 238,
    "function": null,
    "comment": "joint_calibration_controller.cpp:238:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "joint_calibration_controller.cpp",
    "line": 239,
    "function": null,
    "comment": "joint_calibration_controller.cpp:239:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_calibration_controller.cpp",
    "line": 239,
    "function": null,
    "comment": "joint_calibration_controller.cpp:239:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "joint_calibration_controller.cpp",
    "line": 239,
    "function": null,
    "comment": "joint_calibration_controller.cpp:239:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "joint_calibration_controller.cpp",
    "line": 240,
    "function": null,
    "comment": "joint_calibration_controller.cpp:240:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "joint_calibration_controller.cpp",
    "line": 241,
    "function": null,
    "comment": "joint_calibration_controller.cpp:241:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_calibration_controller.cpp",
    "line": 241,
    "function": null,
    "comment": "joint_calibration_controller.cpp:241:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "joint_calibration_controller.cpp",
    "line": 242,
    "function": null,
    "comment": "joint_calibration_controller.cpp:242:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_calibration_controller.cpp",
    "line": 242,
    "function": null,
    "comment": "joint_calibration_controller.cpp:242:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "joint_calibration_controller.cpp",
    "line": 243,
    "function": null,
    "comment": "joint_calibration_controller.cpp:243:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "joint_calibration_controller.cpp",
    "line": 244,
    "function": null,
    "comment": "joint_calibration_controller.cpp:244:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "joint_calibration_controller.cpp",
    "line": 249,
    "function": null,
    "comment": "joint_calibration_controller.cpp:249:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_calibration_controller.cpp",
    "line": 250,
    "function": null,
    "comment": "joint_calibration_controller.cpp:250:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint_calibration_controller.cpp",
    "line": 261,
    "function": null,
    "comment": "joint_calibration_controller.cpp:261:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint_calibration_controller.cpp",
    "line": 262,
    "function": null,
    "comment": "joint_calibration_controller.cpp:262:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "joint_calibration_controller.cpp",
    "line": 262,
    "function": null,
    "comment": "joint_calibration_controller.cpp:262:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "joint_calibration_controller.cpp",
    "line": 263,
    "function": null,
    "comment": "joint_calibration_controller.cpp:263:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "joint_calibration_controller.cpp",
    "line": 264,
    "function": null,
    "comment": "joint_calibration_controller.cpp:264:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint_calibration_controller.cpp",
    "line": 264,
    "function": null,
    "comment": "joint_calibration_controller.cpp:264:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "joint_calibration_controller.cpp",
    "line": 265,
    "function": null,
    "comment": "joint_calibration_controller.cpp:265:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "joint_calibration_controller.cpp",
    "line": 266,
    "function": null,
    "comment": "joint_calibration_controller.cpp:266:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "joint_calibration_controller.cpp",
    "line": 267,
    "function": null,
    "comment": "joint_calibration_controller.cpp:267:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "joint_calibration_controller.cpp",
    "line": 276,
    "function": null,
    "comment": "joint_calibration_controller.cpp:276:  Namespace should be terminated with '// namespace controller'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "joint_calibration_controller.cpp",
    "line": 276,
    "function": null,
    "comment": "joint_calibration_controller.cpp:276:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "joint_calibration_controller.cpp",
    "line": 119,
    "function": null,
    "comment": "joint_calibration_controller.cpp:119:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "caster_calibration_controller.cpp",
    "line": 37,
    "function": null,
    "comment": "caster_calibration_controller.cpp:37:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "caster_calibration_controller.cpp",
    "line": 39,
    "function": null,
    "comment": "caster_calibration_controller.cpp:39:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "caster_calibration_controller.cpp",
    "line": 43,
    "function": null,
    "comment": "caster_calibration_controller.cpp:43:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "caster_calibration_controller.cpp",
    "line": 44,
    "function": null,
    "comment": "caster_calibration_controller.cpp:44:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "caster_calibration_controller.cpp",
    "line": 48,
    "function": null,
    "comment": "caster_calibration_controller.cpp:48:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "caster_calibration_controller.cpp",
    "line": 55,
    "function": null,
    "comment": "caster_calibration_controller.cpp:55:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "caster_calibration_controller.cpp",
    "line": 56,
    "function": null,
    "comment": "caster_calibration_controller.cpp:56:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "caster_calibration_controller.cpp",
    "line": 64,
    "function": null,
    "comment": "caster_calibration_controller.cpp:64:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "caster_calibration_controller.cpp",
    "line": 69,
    "function": null,
    "comment": "caster_calibration_controller.cpp:69:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "caster_calibration_controller.cpp",
    "line": 75,
    "function": null,
    "comment": "caster_calibration_controller.cpp:75:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "caster_calibration_controller.cpp",
    "line": 76,
    "function": null,
    "comment": "caster_calibration_controller.cpp:76:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "caster_calibration_controller.cpp",
    "line": 81,
    "function": null,
    "comment": "caster_calibration_controller.cpp:81:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "caster_calibration_controller.cpp",
    "line": 82,
    "function": null,
    "comment": "caster_calibration_controller.cpp:82:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "caster_calibration_controller.cpp",
    "line": 87,
    "function": null,
    "comment": "caster_calibration_controller.cpp:87:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "caster_calibration_controller.cpp",
    "line": 87,
    "function": null,
    "comment": "caster_calibration_controller.cpp:87:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "caster_calibration_controller.cpp",
    "line": 87,
    "function": null,
    "comment": "caster_calibration_controller.cpp:87:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "caster_calibration_controller.cpp",
    "line": 88,
    "function": null,
    "comment": "caster_calibration_controller.cpp:88:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "caster_calibration_controller.cpp",
    "line": 91,
    "function": null,
    "comment": "caster_calibration_controller.cpp:91:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "caster_calibration_controller.cpp",
    "line": 91,
    "function": null,
    "comment": "caster_calibration_controller.cpp:91:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "caster_calibration_controller.cpp",
    "line": 92,
    "function": null,
    "comment": "caster_calibration_controller.cpp:92:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "caster_calibration_controller.cpp",
    "line": 95,
    "function": null,
    "comment": "caster_calibration_controller.cpp:95:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "caster_calibration_controller.cpp",
    "line": 95,
    "function": null,
    "comment": "caster_calibration_controller.cpp:95:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "caster_calibration_controller.cpp",
    "line": 97,
    "function": null,
    "comment": "caster_calibration_controller.cpp:97:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "caster_calibration_controller.cpp",
    "line": 101,
    "function": null,
    "comment": "caster_calibration_controller.cpp:101:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "caster_calibration_controller.cpp",
    "line": 101,
    "function": null,
    "comment": "caster_calibration_controller.cpp:101:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "caster_calibration_controller.cpp",
    "line": 101,
    "function": null,
    "comment": "caster_calibration_controller.cpp:101:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "caster_calibration_controller.cpp",
    "line": 103,
    "function": null,
    "comment": "caster_calibration_controller.cpp:103:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "caster_calibration_controller.cpp",
    "line": 105,
    "function": null,
    "comment": "caster_calibration_controller.cpp:105:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "caster_calibration_controller.cpp",
    "line": 105,
    "function": null,
    "comment": "caster_calibration_controller.cpp:105:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "caster_calibration_controller.cpp",
    "line": 105,
    "function": null,
    "comment": "caster_calibration_controller.cpp:105:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "caster_calibration_controller.cpp",
    "line": 105,
    "function": null,
    "comment": "caster_calibration_controller.cpp:105:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "caster_calibration_controller.cpp",
    "line": 108,
    "function": null,
    "comment": "caster_calibration_controller.cpp:108:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "caster_calibration_controller.cpp",
    "line": 110,
    "function": null,
    "comment": "caster_calibration_controller.cpp:110:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "caster_calibration_controller.cpp",
    "line": 110,
    "function": null,
    "comment": "caster_calibration_controller.cpp:110:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "caster_calibration_controller.cpp",
    "line": 110,
    "function": null,
    "comment": "caster_calibration_controller.cpp:110:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "caster_calibration_controller.cpp",
    "line": 110,
    "function": null,
    "comment": "caster_calibration_controller.cpp:110:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "caster_calibration_controller.cpp",
    "line": 112,
    "function": null,
    "comment": "caster_calibration_controller.cpp:112:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "caster_calibration_controller.cpp",
    "line": 116,
    "function": null,
    "comment": "caster_calibration_controller.cpp:116:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "caster_calibration_controller.cpp",
    "line": 121,
    "function": null,
    "comment": "caster_calibration_controller.cpp:121:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "caster_calibration_controller.cpp",
    "line": 128,
    "function": null,
    "comment": "caster_calibration_controller.cpp:128:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "caster_calibration_controller.cpp",
    "line": 133,
    "function": null,
    "comment": "caster_calibration_controller.cpp:133:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "caster_calibration_controller.cpp",
    "line": 143,
    "function": null,
    "comment": "caster_calibration_controller.cpp:143:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "caster_calibration_controller.cpp",
    "line": 144,
    "function": null,
    "comment": "caster_calibration_controller.cpp:144:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "caster_calibration_controller.cpp",
    "line": 148,
    "function": null,
    "comment": "caster_calibration_controller.cpp:148:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "caster_calibration_controller.cpp",
    "line": 161,
    "function": null,
    "comment": "caster_calibration_controller.cpp:161:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "caster_calibration_controller.cpp",
    "line": 163,
    "function": null,
    "comment": "caster_calibration_controller.cpp:163:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "caster_calibration_controller.cpp",
    "line": 164,
    "function": null,
    "comment": "caster_calibration_controller.cpp:164:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "caster_calibration_controller.cpp",
    "line": 164,
    "function": null,
    "comment": "caster_calibration_controller.cpp:164:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "caster_calibration_controller.cpp",
    "line": 167,
    "function": null,
    "comment": "caster_calibration_controller.cpp:167:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "caster_calibration_controller.cpp",
    "line": 167,
    "function": null,
    "comment": "caster_calibration_controller.cpp:167:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "caster_calibration_controller.cpp",
    "line": 168,
    "function": null,
    "comment": "caster_calibration_controller.cpp:168:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "caster_calibration_controller.cpp",
    "line": 169,
    "function": null,
    "comment": "caster_calibration_controller.cpp:169:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "caster_calibration_controller.cpp",
    "line": 176,
    "function": null,
    "comment": "caster_calibration_controller.cpp:176:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "caster_calibration_controller.cpp",
    "line": 176,
    "function": null,
    "comment": "caster_calibration_controller.cpp:176:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "caster_calibration_controller.cpp",
    "line": 176,
    "function": null,
    "comment": "caster_calibration_controller.cpp:176:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "caster_calibration_controller.cpp",
    "line": 176,
    "function": null,
    "comment": "caster_calibration_controller.cpp:176:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "caster_calibration_controller.cpp",
    "line": 184,
    "function": null,
    "comment": "caster_calibration_controller.cpp:184:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "caster_calibration_controller.cpp",
    "line": 185,
    "function": null,
    "comment": "caster_calibration_controller.cpp:185:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "caster_calibration_controller.cpp",
    "line": 189,
    "function": null,
    "comment": "caster_calibration_controller.cpp:189:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "caster_calibration_controller.cpp",
    "line": 196,
    "function": null,
    "comment": "caster_calibration_controller.cpp:196:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "caster_calibration_controller.cpp",
    "line": 197,
    "function": null,
    "comment": "caster_calibration_controller.cpp:197:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "caster_calibration_controller.cpp",
    "line": 208,
    "function": null,
    "comment": "caster_calibration_controller.cpp:208:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "caster_calibration_controller.cpp",
    "line": 211,
    "function": null,
    "comment": "caster_calibration_controller.cpp:211:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "caster_calibration_controller.cpp",
    "line": 217,
    "function": null,
    "comment": "caster_calibration_controller.cpp:217:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "caster_calibration_controller.cpp",
    "line": 226,
    "function": null,
    "comment": "caster_calibration_controller.cpp:226:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "caster_calibration_controller.cpp",
    "line": 227,
    "function": null,
    "comment": "caster_calibration_controller.cpp:227:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "caster_calibration_controller.cpp",
    "line": 228,
    "function": null,
    "comment": "caster_calibration_controller.cpp:228:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "caster_calibration_controller.cpp",
    "line": 237,
    "function": null,
    "comment": "caster_calibration_controller.cpp:237:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "caster_calibration_controller.cpp",
    "line": 242,
    "function": null,
    "comment": "caster_calibration_controller.cpp:242:  Missing space before ( in switch(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "caster_calibration_controller.cpp",
    "line": 243,
    "function": null,
    "comment": "caster_calibration_controller.cpp:243:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "caster_calibration_controller.cpp",
    "line": 253,
    "function": null,
    "comment": "caster_calibration_controller.cpp:253:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "caster_calibration_controller.cpp",
    "line": 256,
    "function": null,
    "comment": "caster_calibration_controller.cpp:256:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "caster_calibration_controller.cpp",
    "line": 259,
    "function": null,
    "comment": "caster_calibration_controller.cpp:259:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "caster_calibration_controller.cpp",
    "line": 260,
    "function": null,
    "comment": "caster_calibration_controller.cpp:260:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "caster_calibration_controller.cpp",
    "line": 261,
    "function": null,
    "comment": "caster_calibration_controller.cpp:261:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "caster_calibration_controller.cpp",
    "line": 262,
    "function": null,
    "comment": "caster_calibration_controller.cpp:262:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "caster_calibration_controller.cpp",
    "line": 263,
    "function": null,
    "comment": "caster_calibration_controller.cpp:263:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "caster_calibration_controller.cpp",
    "line": 265,
    "function": null,
    "comment": "caster_calibration_controller.cpp:265:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "caster_calibration_controller.cpp",
    "line": 266,
    "function": null,
    "comment": "caster_calibration_controller.cpp:266:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "caster_calibration_controller.cpp",
    "line": 272,
    "function": null,
    "comment": "caster_calibration_controller.cpp:272:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "caster_calibration_controller.cpp",
    "line": 274,
    "function": null,
    "comment": "caster_calibration_controller.cpp:274:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "caster_calibration_controller.cpp",
    "line": 275,
    "function": null,
    "comment": "caster_calibration_controller.cpp:275:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "caster_calibration_controller.cpp",
    "line": 279,
    "function": null,
    "comment": "caster_calibration_controller.cpp:279:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "caster_calibration_controller.cpp",
    "line": 283,
    "function": null,
    "comment": "caster_calibration_controller.cpp:283:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "caster_calibration_controller.cpp",
    "line": 284,
    "function": null,
    "comment": "caster_calibration_controller.cpp:284:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "caster_calibration_controller.cpp",
    "line": 289,
    "function": null,
    "comment": "caster_calibration_controller.cpp:289:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "caster_calibration_controller.cpp",
    "line": 291,
    "function": null,
    "comment": "caster_calibration_controller.cpp:291:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "caster_calibration_controller.cpp",
    "line": 296,
    "function": null,
    "comment": "caster_calibration_controller.cpp:296:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "caster_calibration_controller.cpp",
    "line": 303,
    "function": null,
    "comment": "caster_calibration_controller.cpp:303:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "caster_calibration_controller.cpp",
    "line": 304,
    "function": null,
    "comment": "caster_calibration_controller.cpp:304:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "caster_calibration_controller.cpp",
    "line": 305,
    "function": null,
    "comment": "caster_calibration_controller.cpp:305:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "caster_calibration_controller.cpp",
    "line": 305,
    "function": null,
    "comment": "caster_calibration_controller.cpp:305:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "caster_calibration_controller.cpp",
    "line": 307,
    "function": null,
    "comment": "caster_calibration_controller.cpp:307:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "caster_calibration_controller.cpp",
    "line": 308,
    "function": null,
    "comment": "caster_calibration_controller.cpp:308:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "caster_calibration_controller.cpp",
    "line": 318,
    "function": null,
    "comment": "caster_calibration_controller.cpp:318:  Namespace should be terminated with '// namespace controller'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "caster_calibration_controller.cpp",
    "line": 318,
    "function": null,
    "comment": "caster_calibration_controller.cpp:318:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "caster_calibration_controller.cpp",
    "line": 182,
    "function": null,
    "comment": "caster_calibration_controller.cpp:182:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "fake_calibration_controller.cpp",
    "line": 37,
    "function": null,
    "comment": "fake_calibration_controller.cpp:37:  Include 'pluginlib/class_list_macros.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "fake_calibration_controller.cpp",
    "line": 39,
    "function": null,
    "comment": "fake_calibration_controller.cpp:39:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "fake_calibration_controller.cpp",
    "line": 40,
    "function": null,
    "comment": "fake_calibration_controller.cpp:40:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "fake_calibration_controller.cpp",
    "line": 42,
    "function": null,
    "comment": "fake_calibration_controller.cpp:42:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "fake_calibration_controller.cpp",
    "line": 45,
    "function": null,
    "comment": "fake_calibration_controller.cpp:45:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "fake_calibration_controller.cpp",
    "line": 49,
    "function": null,
    "comment": "fake_calibration_controller.cpp:49:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "fake_calibration_controller.cpp",
    "line": 53,
    "function": null,
    "comment": "fake_calibration_controller.cpp:53:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "fake_calibration_controller.cpp",
    "line": 58,
    "function": null,
    "comment": "fake_calibration_controller.cpp:58:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "fake_calibration_controller.cpp",
    "line": 65,
    "function": null,
    "comment": "fake_calibration_controller.cpp:65:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "fake_calibration_controller.cpp",
    "line": 70,
    "function": null,
    "comment": "fake_calibration_controller.cpp:70:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "fake_calibration_controller.cpp",
    "line": 77,
    "function": null,
    "comment": "fake_calibration_controller.cpp:77:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "fake_calibration_controller.cpp",
    "line": 80,
    "function": null,
    "comment": "fake_calibration_controller.cpp:80:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "fake_calibration_controller.cpp",
    "line": 87,
    "function": null,
    "comment": "fake_calibration_controller.cpp:87:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "fake_calibration_controller.cpp",
    "line": 91,
    "function": null,
    "comment": "fake_calibration_controller.cpp:91:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "fake_calibration_controller.cpp",
    "line": 92,
    "function": null,
    "comment": "fake_calibration_controller.cpp:92:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "fake_calibration_controller.cpp",
    "line": 93,
    "function": null,
    "comment": "fake_calibration_controller.cpp:93:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "fake_calibration_controller.cpp",
    "line": 100,
    "function": null,
    "comment": "fake_calibration_controller.cpp:100:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "fake_calibration_controller.cpp",
    "line": 105,
    "function": null,
    "comment": "fake_calibration_controller.cpp:105:  Namespace should be terminated with '// namespace controller'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "fake_calibration_controller.cpp",
    "line": 63,
    "function": null,
    "comment": "fake_calibration_controller.cpp:63:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "caster_calibration_controller.cpp",
    "line": 49,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "caster_calibration_controller.cpp",
    "line": 51,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Non-empty case blocks must not fall through to the next case.",
    "file": "gripper_calibration_controller.cpp",
    "line": 183,
    "function": null,
    "comment": "Non-empty case without a break statement.",
    "tags": ["hicpp","code-standards","switch","case","fall-through"]
  },
  {
    "rule": "Non-empty case blocks must not fall through to the next case.",
    "file": "gripper_calibration_controller.cpp",
    "line": 196,
    "function": null,
    "comment": "Non-empty case without a break statement.",
    "tags": ["hicpp","code-standards","switch","case","fall-through"]
  },
  {
    "rule": "Non-empty case blocks must not fall through to the next case.",
    "file": "gripper_calibration_controller.cpp",
    "line": 205,
    "function": null,
    "comment": "Non-empty case without a break statement.",
    "tags": ["hicpp","code-standards","switch","case","fall-through"]
  },
  {
    "rule": "Non-empty case blocks must not fall through to the next case.",
    "file": "gripper_calibration_controller.cpp",
    "line": 219,
    "function": null,
    "comment": "Non-empty case without a break statement.",
    "tags": ["hicpp","code-standards","switch","case","fall-through"]
  },
  {
    "rule": "Non-empty case blocks must not fall through to the next case.",
    "file": "gripper_calibration_controller.cpp",
    "line": 229,
    "function": null,
    "comment": "Non-empty case without a break statement.",
    "tags": ["hicpp","code-standards","switch","case","fall-through"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "gripper_calibration_controller.cpp",
    "line": 75,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "gripper_calibration_controller.cpp",
    "line": 138,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "gripper_calibration_controller.cpp",
    "line": 241,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Non-empty case blocks must not fall through to the next case.",
    "file": "joint_calibration_controller.cpp",
    "line": 211,
    "function": null,
    "comment": "Non-empty case without a break statement.",
    "tags": ["hicpp","code-standards","switch","case","fall-through"]
  },
  {
    "rule": "Non-empty case blocks must not fall through to the next case.",
    "file": "joint_calibration_controller.cpp",
    "line": 219,
    "function": null,
    "comment": "Non-empty case without a break statement.",
    "tags": ["hicpp","code-standards","switch","case","fall-through"]
  },
  {
    "rule": "Ensure that no expression is redundant.",
    "file": "wrist_calibration_controller.cpp",
    "line": 258,
    "function": null,
    "comment": "Variable 'LEFT_MOTOR' is assigned a value that is never used.",
    "tags": ["hicpp","code-standards","redundancy"]
  },
  {
    "rule": "Ensure that no expression is redundant.",
    "file": "wrist_calibration_controller.cpp",
    "line": 259,
    "function": null,
    "comment": "Variable 'RIGHT_MOTOR' is assigned a value that is never used.",
    "tags": ["hicpp","code-standards","redundancy"]
  },
  {
    "rule": "Non-empty case blocks must not fall through to the next case.",
    "file": "wrist_calibration_controller.cpp",
    "line": 313,
    "function": null,
    "comment": "Non-empty case without a break statement.",
    "tags": ["hicpp","code-standards","switch","case","fall-through"]
  },
  {
    "rule": "Non-empty case blocks must not fall through to the next case.",
    "file": "wrist_calibration_controller.cpp",
    "line": 323,
    "function": null,
    "comment": "Non-empty case without a break statement.",
    "tags": ["hicpp","code-standards","switch","case","fall-through"]
  },
  {
    "rule": "Non-empty case blocks must not fall through to the next case.",
    "file": "wrist_calibration_controller.cpp",
    "line": 381,
    "function": null,
    "comment": "Non-empty case without a break statement.",
    "tags": ["hicpp","code-standards","switch","case","fall-through"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wrist_calibration_controller.cpp",
    "line": 49,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wrist_calibration_controller.cpp",
    "line": 51,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wrist_calibration_controller.cpp",
    "line": 258,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wrist_calibration_controller.cpp",
    "line": 259,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wrist_calibration_controller.cpp",
    "line": 260,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wrist_calibration_controller.cpp",
    "line": 261,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wrist_calibration_controller.cpp",
    "line": 426,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wrist_calibration_controller.cpp",
    "line": 427,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wrist_calibration_controller.cpp",
    "line": 428,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wrist_calibration_controller.cpp",
    "line": 429,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not rely on the sequence of evaluation within an expression.",
    "file": "wrist_calibration_controller.cpp",
    "line": 360,
    "function": null,
    "comment": "Found assignment as a subexpression.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","evaluation-order","expressions"]
  },
  {
    "rule": "Do not rely on the sequence of evaluation within an expression.",
    "file": "wrist_calibration_controller.cpp",
    "line": 408,
    "function": null,
    "comment": "Found assignment as a subexpression.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","evaluation-order","expressions"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "caster_calibration_controller.cpp",
    "line": 216,
    "function": null,
    "comment": "The function 'starting' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "gripper_calibration_controller.cpp",
    "line": 42,
    "function": "PLUGINLIB_EXPORT_CLASS",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 15",
    "file": "gripper_calibration_controller.cpp",
    "line": 42,
    "function": "PLUGINLIB_EXPORT_CLASS",
    "comment": "CC is greater than 15",
    "tags": ["metrics","ros","cyclomatic-complexity","kth"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "wrist_calibration_controller.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "wrist_calibration_controller.cpp",
    "line": 37,
    "function": "PLUGINLIB_EXPORT_CLASS",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 15",
    "file": "wrist_calibration_controller.cpp",
    "line": 37,
    "function": "PLUGINLIB_EXPORT_CLASS",
    "comment": "CC is greater than 15",
    "tags": ["metrics","ros","cyclomatic-complexity","kth"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "joint_calibration_controller.cpp",
    "line": 55,
    "function": "init",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 15",
    "file": "joint_calibration_controller.cpp",
    "line": 55,
    "function": "init",
    "comment": "CC is greater than 15",
    "tags": ["metrics","ros","cyclomatic-complexity","kth"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "joint_calibration_controller.cpp",
    "line": 200,
    "function": "update",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 15",
    "file": "joint_calibration_controller.cpp",
    "line": 200,
    "function": "update",
    "comment": "CC is greater than 15",
    "tags": ["metrics","ros","cyclomatic-complexity","kth"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "caster_calibration_controller.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "caster_calibration_controller.cpp",
    "line": 37,
    "function": "PLUGINLIB_EXPORT_CLASS",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 15",
    "file": "caster_calibration_controller.cpp",
    "line": 37,
    "function": "PLUGINLIB_EXPORT_CLASS",
    "comment": "CC is greater than 15",
    "tags": ["metrics","ros","cyclomatic-complexity","kth"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "fake_calibration_controller.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "fake_calibration_controller.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  }
]