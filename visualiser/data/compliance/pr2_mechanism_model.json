[
  {
    "rule": "The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_.",
    "file": "tree.h",
    "line": 39,
    "function": null,
    "comment": "tree.h:39:  #ifndef header guard has wrong style, please use: _HOME_ANDRE_ROS_HAROS_ANALYSER_TREE_H_  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the symbol name should be <PACKAGE>_<PATH>_<FILE>_H.",
    "file": "tree.h",
    "line": 39,
    "function": null,
    "comment": "tree.h:39:  #ifndef header guard has wrong style, please use: TREE_H  [build/header_guard] [5]",
    "tags": ["ros","code-standards","ros-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the guard's end should be '#endif  // <PROJECT>_<PATH>_<FILE>_H_' or '#endif  /* <PROJECT>_<PATH>_<FILE>_H_ */'.",
    "file": "tree.h",
    "line": 231,
    "function": null,
    "comment": "tree.h:231:  #endif line should be '#endif  // _HOME_ANDRE_ROS_HAROS_ANALYSER_TREE_H_'  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "tree.h",
    "line": 43,
    "function": null,
    "comment": "tree.h:43:  Include 'kdl/chain.hpp' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "tree.h",
    "line": 45,
    "function": null,
    "comment": "tree.h:45:  Include 'kdl/jntarray.hpp' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "tree.h",
    "line": 50,
    "function": null,
    "comment": "tree.h:50:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "tree.h",
    "line": 53,
    "function": null,
    "comment": "tree.h:53:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "tree.h",
    "line": 54,
    "function": null,
    "comment": "tree.h:54:  public: should be indented +1 space inside class Tree  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Do not use meaningless empty statements.",
    "file": "tree.h",
    "line": 55,
    "function": null,
    "comment": "tree.h:55:  You don't need a ; after a }  [readability/braces] [4]",
    "tags": ["code-standards","google-cpp","empty-statement","ambiguous-code"]
  },
  {
    "rule": "Do not use meaningless empty statements.",
    "file": "tree.h",
    "line": 56,
    "function": null,
    "comment": "tree.h:56:  You don't need a ; after a }  [readability/braces] [4]",
    "tags": ["code-standards","google-cpp","empty-statement","ambiguous-code"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "tree.h",
    "line": 72,
    "function": null,
    "comment": "tree.h:72:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "tree.h",
    "line": 76,
    "function": null,
    "comment": "tree.h:76:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "tree.h",
    "line": 79,
    "function": null,
    "comment": "tree.h:79:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "tree.h",
    "line": 86,
    "function": null,
    "comment": "tree.h:86:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "tree.h",
    "line": 93,
    "function": null,
    "comment": "tree.h:93:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "tree.h",
    "line": 97,
    "function": null,
    "comment": "tree.h:97:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "tree.h",
    "line": 100,
    "function": null,
    "comment": "tree.h:100:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "tree.h",
    "line": 110,
    "function": null,
    "comment": "tree.h:110:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "tree.h",
    "line": 116,
    "function": null,
    "comment": "tree.h:116:  private: should be indented +1 space inside class Tree  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "tree.h",
    "line": 118,
    "function": null,
    "comment": "tree.h:118:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "tree.h",
    "line": 123,
    "function": null,
    "comment": "tree.h:123:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "tree.h",
    "line": 131,
    "function": null,
    "comment": "tree.h:131:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "tree.h",
    "line": 132,
    "function": null,
    "comment": "tree.h:132:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "tree.h",
    "line": 138,
    "function": null,
    "comment": "tree.h:138:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "tree.h",
    "line": 142,
    "function": null,
    "comment": "tree.h:142:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "tree.h",
    "line": 150,
    "function": null,
    "comment": "tree.h:150:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "tree.h",
    "line": 151,
    "function": null,
    "comment": "tree.h:151:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "tree.h",
    "line": 157,
    "function": null,
    "comment": "tree.h:157:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "tree.h",
    "line": 165,
    "function": null,
    "comment": "tree.h:165:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "tree.h",
    "line": 166,
    "function": null,
    "comment": "tree.h:166:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "tree.h",
    "line": 172,
    "function": null,
    "comment": "tree.h:172:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "tree.h",
    "line": 180,
    "function": null,
    "comment": "tree.h:180:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "tree.h",
    "line": 181,
    "function": null,
    "comment": "tree.h:181:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "tree.h",
    "line": 187,
    "function": null,
    "comment": "tree.h:187:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "tree.h",
    "line": 195,
    "function": null,
    "comment": "tree.h:195:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "tree.h",
    "line": 196,
    "function": null,
    "comment": "tree.h:196:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "tree.h",
    "line": 202,
    "function": null,
    "comment": "tree.h:202:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "tree.h",
    "line": 204,
    "function": null,
    "comment": "tree.h:204:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "tree.h",
    "line": 212,
    "function": null,
    "comment": "tree.h:212:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "tree.h",
    "line": 217,
    "function": null,
    "comment": "tree.h:217:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "tree.h",
    "line": 225,
    "function": null,
    "comment": "tree.h:225:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "tree.h",
    "line": 229,
    "function": null,
    "comment": "tree.h:229:  Namespace should be terminated with '// namespace pr2_mechanism_model'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "tree.h",
    "line": 229,
    "function": null,
    "comment": "tree.h:229:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "tree.h",
    "line": 119,
    "function": null,
    "comment": "tree.h:119:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_.",
    "file": "joint_calibration_simulator.h",
    "line": 31,
    "function": null,
    "comment": "joint_calibration_simulator.h:31:  #ifndef header guard has wrong style, please use: _HOME_ANDRE_ROS_HAROS_ANALYSER_JOINT_CALIBRATION_SIMULATOR_H_  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the guard's end should be '#endif  // <PROJECT>_<PATH>_<FILE>_H_' or '#endif  /* <PROJECT>_<PATH>_<FILE>_H_ */'.",
    "file": "joint_calibration_simulator.h",
    "line": 61,
    "function": null,
    "comment": "joint_calibration_simulator.h:61:  #endif line should be '#endif  // _HOME_ANDRE_ROS_HAROS_ANALYSER_JOINT_CALIBRATION_SIMULATOR_H_'  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "joint_calibration_simulator.h",
    "line": 36,
    "function": null,
    "comment": "joint_calibration_simulator.h:36:  Found C system header after other header. Should be: joint_calibration_simulator.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_calibration_simulator.h",
    "line": 40,
    "function": null,
    "comment": "joint_calibration_simulator.h:40:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_calibration_simulator.h",
    "line": 43,
    "function": null,
    "comment": "joint_calibration_simulator.h:43:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "joint_calibration_simulator.h",
    "line": 44,
    "function": null,
    "comment": "joint_calibration_simulator.h:44:  public: should be indented +1 space inside class JointCalibrationSimulator  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "joint_calibration_simulator.h",
    "line": 49,
    "function": null,
    "comment": "joint_calibration_simulator.h:49:  private: should be indented +1 space inside class JointCalibrationSimulator  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_calibration_simulator.h",
    "line": 52,
    "function": null,
    "comment": "joint_calibration_simulator.h:52:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "joint_calibration_simulator.h",
    "line": 60,
    "function": null,
    "comment": "joint_calibration_simulator.h:60:  Namespace should be terminated with '// namespace pr2_mechanism_model'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_.",
    "file": "wrist_transmission.h",
    "line": 57,
    "function": null,
    "comment": "wrist_transmission.h:57:  #ifndef header guard has wrong style, please use: _HOME_ANDRE_ROS_HAROS_ANALYSER_WRIST_TRANSMISSION_H_  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the guard's end should be '#endif  // <PROJECT>_<PATH>_<FILE>_H_' or '#endif  /* <PROJECT>_<PATH>_<FILE>_H_ */'.",
    "file": "wrist_transmission.h",
    "line": 105,
    "function": null,
    "comment": "wrist_transmission.h:105:  #endif line should be '#endif  // _HOME_ANDRE_ROS_HAROS_ANALYSER_WRIST_TRANSMISSION_H_'  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "wrist_transmission.h",
    "line": 62,
    "function": null,
    "comment": "wrist_transmission.h:62:  Include 'pr2_mechanism_model/joint.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "wrist_transmission.h",
    "line": 63,
    "function": null,
    "comment": "wrist_transmission.h:63:  Include 'pr2_hardware_interface/hardware_interface.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wrist_transmission.h",
    "line": 66,
    "function": null,
    "comment": "wrist_transmission.h:66:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_transmission.h",
    "line": 69,
    "function": null,
    "comment": "wrist_transmission.h:69:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "wrist_transmission.h",
    "line": 70,
    "function": null,
    "comment": "wrist_transmission.h:70:  public: should be indented +1 space inside class WristTransmission  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_transmission.h",
    "line": 88,
    "function": null,
    "comment": "wrist_transmission.h:88:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_transmission.h",
    "line": 89,
    "function": null,
    "comment": "wrist_transmission.h:89:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "wrist_transmission.h",
    "line": 94,
    "function": null,
    "comment": "wrist_transmission.h:94:  Is this a non-const reference? If so, make const or use a pointer: std::vector<double>& ar  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "wrist_transmission.h",
    "line": 94,
    "function": null,
    "comment": "wrist_transmission.h:94:  Is this a non-const reference? If so, make const or use a pointer: std::vector<double>& jr  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "wrist_transmission.h",
    "line": 96,
    "function": null,
    "comment": "wrist_transmission.h:96:  private: should be indented +1 space inside class WristTransmission  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wrist_transmission.h",
    "line": 103,
    "function": null,
    "comment": "wrist_transmission.h:103:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "wrist_transmission.h",
    "line": 94,
    "function": null,
    "comment": "wrist_transmission.h:94:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_.",
    "file": "pr2_gripper_transmission.h",
    "line": 43,
    "function": null,
    "comment": "pr2_gripper_transmission.h:43:  #ifndef header guard has wrong style, please use: _HOME_ANDRE_ROS_HAROS_ANALYSER_PR2_GRIPPER_TRANSMISSION_H_  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the symbol name should be <PACKAGE>_<PATH>_<FILE>_H.",
    "file": "pr2_gripper_transmission.h",
    "line": 43,
    "function": null,
    "comment": "pr2_gripper_transmission.h:43:  #ifndef header guard has wrong style, please use: PR2_GRIPPER_TRANSMISSION_H  [build/header_guard] [5]",
    "tags": ["ros","code-standards","ros-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the guard's end should be '#endif  // <PROJECT>_<PATH>_<FILE>_H_' or '#endif  /* <PROJECT>_<PATH>_<FILE>_H_ */'.",
    "file": "pr2_gripper_transmission.h",
    "line": 124,
    "function": null,
    "comment": "pr2_gripper_transmission.h:124:  #endif line should be '#endif  // _HOME_ANDRE_ROS_HAROS_ANALYSER_PR2_GRIPPER_TRANSMISSION_H_'  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "Include the directory when naming header files.",
    "file": "pr2_gripper_transmission.h",
    "line": 47,
    "function": null,
    "comment": "pr2_gripper_transmission.h:47:  Include the directory when naming .h files  [build/include] [4]",
    "tags": ["code-standards","google-cpp","naming","headers","include"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "pr2_gripper_transmission.h",
    "line": 48,
    "function": null,
    "comment": "pr2_gripper_transmission.h:48:  Include 'pr2_mechanism_model/transmission.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "pr2_gripper_transmission.h",
    "line": 49,
    "function": null,
    "comment": "pr2_gripper_transmission.h:49:  Include 'pr2_mechanism_model/robot.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "pr2_gripper_transmission.h",
    "line": 50,
    "function": null,
    "comment": "pr2_gripper_transmission.h:50:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "pr2_gripper_transmission.h",
    "line": 53,
    "function": null,
    "comment": "pr2_gripper_transmission.h:53:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.h",
    "line": 56,
    "function": null,
    "comment": "pr2_gripper_transmission.h:56:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "pr2_gripper_transmission.h",
    "line": 57,
    "function": null,
    "comment": "pr2_gripper_transmission.h:57:  public: should be indented +1 space inside class PR2GripperTransmission  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.h",
    "line": 58,
    "function": null,
    "comment": "pr2_gripper_transmission.h:58:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "pr2_gripper_transmission.h",
    "line": 58,
    "function": null,
    "comment": "pr2_gripper_transmission.h:58:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "Do not use meaningless empty statements.",
    "file": "pr2_gripper_transmission.h",
    "line": 58,
    "function": null,
    "comment": "pr2_gripper_transmission.h:58:  You don't need a ; after a }  [readability/braces] [4]",
    "tags": ["code-standards","google-cpp","empty-statement","ambiguous-code"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "pr2_gripper_transmission.h",
    "line": 58,
    "function": null,
    "comment": "pr2_gripper_transmission.h:58:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "There should be a space after a semicolon, if it does not end the line.",
    "file": "pr2_gripper_transmission.h",
    "line": 58,
    "function": null,
    "comment": "pr2_gripper_transmission.h:58:  Missing space after ;  [whitespace/semicolon] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.h",
    "line": 66,
    "function": null,
    "comment": "pr2_gripper_transmission.h:66:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.h",
    "line": 67,
    "function": null,
    "comment": "pr2_gripper_transmission.h:67:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.h",
    "line": 75,
    "function": null,
    "comment": "pr2_gripper_transmission.h:75:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.h",
    "line": 88,
    "function": null,
    "comment": "pr2_gripper_transmission.h:88:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "pr2_gripper_transmission.h",
    "line": 91,
    "function": null,
    "comment": "pr2_gripper_transmission.h:91:  private: should be indented +1 space inside class PR2GripperTransmission  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.h",
    "line": 92,
    "function": null,
    "comment": "pr2_gripper_transmission.h:92:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_gripper_transmission.h",
    "line": 93,
    "function": null,
    "comment": "pr2_gripper_transmission.h:93:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.h",
    "line": 94,
    "function": null,
    "comment": "pr2_gripper_transmission.h:94:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_gripper_transmission.h",
    "line": 94,
    "function": null,
    "comment": "pr2_gripper_transmission.h:94:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "pr2_gripper_transmission.h",
    "line": 94,
    "function": null,
    "comment": "pr2_gripper_transmission.h:94:  Is this a non-const reference? If so, make const or use a pointer: double &theta  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "pr2_gripper_transmission.h",
    "line": 94,
    "function": null,
    "comment": "pr2_gripper_transmission.h:94:  Is this a non-const reference? If so, make const or use a pointer: double &dtheta_dMR  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "pr2_gripper_transmission.h",
    "line": 94,
    "function": null,
    "comment": "pr2_gripper_transmission.h:94:  Is this a non-const reference? If so, make const or use a pointer: double &dt_dtheta  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "pr2_gripper_transmission.h",
    "line": 94,
    "function": null,
    "comment": "pr2_gripper_transmission.h:94:  Is this a non-const reference? If so, make const or use a pointer: double &dt_dMR  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "pr2_gripper_transmission.h",
    "line": 94,
    "function": null,
    "comment": "pr2_gripper_transmission.h:94:  Is this a non-const reference? If so, make const or use a pointer: double &gap_size  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "pr2_gripper_transmission.h",
    "line": 94,
    "function": null,
    "comment": "pr2_gripper_transmission.h:94:  Is this a non-const reference? If so, make const or use a pointer: double &gap_velocity  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "pr2_gripper_transmission.h",
    "line": 94,
    "function": null,
    "comment": "pr2_gripper_transmission.h:94:  Is this a non-const reference? If so, make const or use a pointer: double &gap_effort  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.h",
    "line": 95,
    "function": null,
    "comment": "pr2_gripper_transmission.h:95:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_gripper_transmission.h",
    "line": 95,
    "function": null,
    "comment": "pr2_gripper_transmission.h:95:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "pr2_gripper_transmission.h",
    "line": 95,
    "function": null,
    "comment": "pr2_gripper_transmission.h:95:  Is this a non-const reference? If so, make const or use a pointer: double &MR  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "pr2_gripper_transmission.h",
    "line": 95,
    "function": null,
    "comment": "pr2_gripper_transmission.h:95:  Is this a non-const reference? If so, make const or use a pointer: double &dMR_dtheta  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "pr2_gripper_transmission.h",
    "line": 95,
    "function": null,
    "comment": "pr2_gripper_transmission.h:95:  Is this a non-const reference? If so, make const or use a pointer: double &dtheta_dt  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "pr2_gripper_transmission.h",
    "line": 95,
    "function": null,
    "comment": "pr2_gripper_transmission.h:95:  Is this a non-const reference? If so, make const or use a pointer: double &dMR_dt  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.h",
    "line": 96,
    "function": null,
    "comment": "pr2_gripper_transmission.h:96:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_gripper_transmission.h",
    "line": 96,
    "function": null,
    "comment": "pr2_gripper_transmission.h:96:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "pr2_gripper_transmission.h",
    "line": 96,
    "function": null,
    "comment": "pr2_gripper_transmission.h:96:  Is this a non-const reference? If so, make const or use a pointer: double &MR  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "pr2_gripper_transmission.h",
    "line": 96,
    "function": null,
    "comment": "pr2_gripper_transmission.h:96:  Is this a non-const reference? If so, make const or use a pointer: double &dMR_dtheta  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "pr2_gripper_transmission.h",
    "line": 96,
    "function": null,
    "comment": "pr2_gripper_transmission.h:96:  Is this a non-const reference? If so, make const or use a pointer: double &dtheta_dt  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "pr2_gripper_transmission.h",
    "line": 96,
    "function": null,
    "comment": "pr2_gripper_transmission.h:96:  Is this a non-const reference? If so, make const or use a pointer: double &dMR_dt  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.h",
    "line": 100,
    "function": null,
    "comment": "pr2_gripper_transmission.h:100:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.h",
    "line": 102,
    "function": null,
    "comment": "pr2_gripper_transmission.h:102:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "pr2_gripper_transmission.h",
    "line": 102,
    "function": null,
    "comment": "pr2_gripper_transmission.h:102:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "pr2_gripper_transmission.h",
    "line": 103,
    "function": null,
    "comment": "pr2_gripper_transmission.h:103:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "pr2_gripper_transmission.h",
    "line": 103,
    "function": null,
    "comment": "pr2_gripper_transmission.h:103:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.h",
    "line": 104,
    "function": null,
    "comment": "pr2_gripper_transmission.h:104:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "pr2_gripper_transmission.h",
    "line": 104,
    "function": null,
    "comment": "pr2_gripper_transmission.h:104:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "pr2_gripper_transmission.h",
    "line": 104,
    "function": null,
    "comment": "pr2_gripper_transmission.h:104:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.h",
    "line": 105,
    "function": null,
    "comment": "pr2_gripper_transmission.h:105:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "pr2_gripper_transmission.h",
    "line": 105,
    "function": null,
    "comment": "pr2_gripper_transmission.h:105:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "pr2_gripper_transmission.h",
    "line": 105,
    "function": null,
    "comment": "pr2_gripper_transmission.h:105:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.h",
    "line": 106,
    "function": null,
    "comment": "pr2_gripper_transmission.h:106:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "pr2_gripper_transmission.h",
    "line": 106,
    "function": null,
    "comment": "pr2_gripper_transmission.h:106:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "pr2_gripper_transmission.h",
    "line": 106,
    "function": null,
    "comment": "pr2_gripper_transmission.h:106:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.h",
    "line": 107,
    "function": null,
    "comment": "pr2_gripper_transmission.h:107:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "pr2_gripper_transmission.h",
    "line": 107,
    "function": null,
    "comment": "pr2_gripper_transmission.h:107:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "pr2_gripper_transmission.h",
    "line": 107,
    "function": null,
    "comment": "pr2_gripper_transmission.h:107:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.h",
    "line": 108,
    "function": null,
    "comment": "pr2_gripper_transmission.h:108:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "pr2_gripper_transmission.h",
    "line": 108,
    "function": null,
    "comment": "pr2_gripper_transmission.h:108:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "pr2_gripper_transmission.h",
    "line": 108,
    "function": null,
    "comment": "pr2_gripper_transmission.h:108:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.h",
    "line": 109,
    "function": null,
    "comment": "pr2_gripper_transmission.h:109:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "pr2_gripper_transmission.h",
    "line": 109,
    "function": null,
    "comment": "pr2_gripper_transmission.h:109:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "pr2_gripper_transmission.h",
    "line": 109,
    "function": null,
    "comment": "pr2_gripper_transmission.h:109:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.h",
    "line": 110,
    "function": null,
    "comment": "pr2_gripper_transmission.h:110:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "pr2_gripper_transmission.h",
    "line": 110,
    "function": null,
    "comment": "pr2_gripper_transmission.h:110:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "pr2_gripper_transmission.h",
    "line": 110,
    "function": null,
    "comment": "pr2_gripper_transmission.h:110:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.h",
    "line": 111,
    "function": null,
    "comment": "pr2_gripper_transmission.h:111:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "pr2_gripper_transmission.h",
    "line": 111,
    "function": null,
    "comment": "pr2_gripper_transmission.h:111:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "pr2_gripper_transmission.h",
    "line": 111,
    "function": null,
    "comment": "pr2_gripper_transmission.h:111:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "pr2_gripper_transmission.h",
    "line": 113,
    "function": null,
    "comment": "pr2_gripper_transmission.h:113:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "pr2_gripper_transmission.h",
    "line": 122,
    "function": null,
    "comment": "pr2_gripper_transmission.h:122:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "pr2_gripper_transmission.h",
    "line": 89,
    "function": null,
    "comment": "pr2_gripper_transmission.h:89:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_.",
    "file": "pr2_belt_transmission.h",
    "line": 30,
    "function": null,
    "comment": "pr2_belt_transmission.h:30:  #ifndef header guard has wrong style, please use: _HOME_ANDRE_ROS_HAROS_ANALYSER_PR2_BELT_TRANSMISSION_H_  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the symbol name should be <PACKAGE>_<PATH>_<FILE>_H.",
    "file": "pr2_belt_transmission.h",
    "line": 30,
    "function": null,
    "comment": "pr2_belt_transmission.h:30:  #ifndef header guard has wrong style, please use: PR2_BELT_TRANSMISSION_H  [build/header_guard] [5]",
    "tags": ["ros","code-standards","ros-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the guard's end should be '#endif  // <PROJECT>_<PATH>_<FILE>_H_' or '#endif  /* <PROJECT>_<PATH>_<FILE>_H_ */'.",
    "file": "pr2_belt_transmission.h",
    "line": 118,
    "function": null,
    "comment": "pr2_belt_transmission.h:118:  #endif line should be '#endif  // _HOME_ANDRE_ROS_HAROS_ANALYSER_PR2_BELT_TRANSMISSION_H_'  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "pr2_belt_transmission.h",
    "line": 41,
    "function": null,
    "comment": "pr2_belt_transmission.h:41:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_belt_transmission.h",
    "line": 48,
    "function": null,
    "comment": "pr2_belt_transmission.h:48:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "pr2_belt_transmission.h",
    "line": 49,
    "function": null,
    "comment": "pr2_belt_transmission.h:49:  public: should be indented +1 space inside class PR2BeltCompensatorTransmission  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_belt_transmission.h",
    "line": 58,
    "function": null,
    "comment": "pr2_belt_transmission.h:58:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_belt_transmission.h",
    "line": 59,
    "function": null,
    "comment": "pr2_belt_transmission.h:59:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "pr2_belt_transmission.h",
    "line": 65,
    "function": null,
    "comment": "pr2_belt_transmission.h:65:  private: should be indented +1 space inside class PR2BeltCompensatorTransmission  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "pr2_belt_transmission.h",
    "line": 71,
    "function": null,
    "comment": "pr2_belt_transmission.h:71:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "pr2_belt_transmission.h",
    "line": 72,
    "function": null,
    "comment": "pr2_belt_transmission.h:72:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "pr2_belt_transmission.h",
    "line": 73,
    "function": null,
    "comment": "pr2_belt_transmission.h:73:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "pr2_belt_transmission.h",
    "line": 74,
    "function": null,
    "comment": "pr2_belt_transmission.h:74:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "pr2_belt_transmission.h",
    "line": 75,
    "function": null,
    "comment": "pr2_belt_transmission.h:75:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "pr2_belt_transmission.h",
    "line": 76,
    "function": null,
    "comment": "pr2_belt_transmission.h:76:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "pr2_belt_transmission.h",
    "line": 116,
    "function": null,
    "comment": "pr2_belt_transmission.h:116:  Namespace should be terminated with '// namespace pr2_mechanism_model'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "pr2_belt_transmission.h",
    "line": 116,
    "function": null,
    "comment": "pr2_belt_transmission.h:116:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "pr2_belt_transmission.h",
    "line": 63,
    "function": null,
    "comment": "pr2_belt_transmission.h:63:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_.",
    "file": "robot.h",
    "line": 46,
    "function": null,
    "comment": "robot.h:46:  #ifndef header guard has wrong style, please use: _HOME_ANDRE_ROS_HAROS_ANALYSER_ROBOT_H_  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the guard's end should be '#endif  // <PROJECT>_<PATH>_<FILE>_H_' or '#endif  /* <PROJECT>_<PATH>_<FILE>_H_ */'.",
    "file": "robot.h",
    "line": 187,
    "function": null,
    "comment": "robot.h:187:  #endif line should be '#endif  // _HOME_ANDRE_ROS_HAROS_ANALYSER_ROBOT_H_'  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "robot.h",
    "line": 50,
    "function": null,
    "comment": "robot.h:50:  Include 'map' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "robot.h",
    "line": 52,
    "function": null,
    "comment": "robot.h:52:  Found C system header after C++ system header. Should be: robot.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "robot.h",
    "line": 53,
    "function": null,
    "comment": "robot.h:53:  Found C system header after C++ system header. Should be: robot.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "robot.h",
    "line": 54,
    "function": null,
    "comment": "robot.h:54:  Found C system header after C++ system header. Should be: robot.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "robot.h",
    "line": 61,
    "function": null,
    "comment": "robot.h:61:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "robot.h",
    "line": 66,
    "function": null,
    "comment": "robot.h:66:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "robot.h",
    "line": 79,
    "function": null,
    "comment": "robot.h:79:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "robot.h",
    "line": 80,
    "function": null,
    "comment": "robot.h:80:  public: should be indented +1 space inside class Robot  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "robot.h",
    "line": 82,
    "function": null,
    "comment": "robot.h:82:  Single-parameter constructors should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "robot.h",
    "line": 96,
    "function": null,
    "comment": "robot.h:96:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "robot.h",
    "line": 99,
    "function": null,
    "comment": "robot.h:99:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "robot.h",
    "line": 102,
    "function": null,
    "comment": "robot.h:102:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "robot.h",
    "line": 103,
    "function": null,
    "comment": "robot.h:103:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "robot.h",
    "line": 111,
    "function": null,
    "comment": "robot.h:111:  private: should be indented +1 space inside class Robot  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "robot.h",
    "line": 112,
    "function": null,
    "comment": "robot.h:112:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "robot.h",
    "line": 127,
    "function": null,
    "comment": "robot.h:127:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "robot.h",
    "line": 128,
    "function": null,
    "comment": "robot.h:128:  public: should be indented +1 space inside class RobotState  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "robot.h",
    "line": 130,
    "function": null,
    "comment": "robot.h:130:  Single-parameter constructors should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "robot.h",
    "line": 132,
    "function": null,
    "comment": "robot.h:132:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "robot.h",
    "line": 145,
    "function": null,
    "comment": "robot.h:145:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "Do not use meaningless empty statements.",
    "file": "robot.h",
    "line": 145,
    "function": null,
    "comment": "robot.h:145:  You don't need a ; after a }  [readability/braces] [4]",
    "tags": ["code-standards","google-cpp","empty-statement","ambiguous-code"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "robot.h",
    "line": 152,
    "function": null,
    "comment": "robot.h:152:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "robot.h",
    "line": 159,
    "function": null,
    "comment": "robot.h:159:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "robot.h",
    "line": 161,
    "function": null,
    "comment": "robot.h:161:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "robot.h",
    "line": 163,
    "function": null,
    "comment": "robot.h:163:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "robot.h",
    "line": 166,
    "function": null,
    "comment": "robot.h:166:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "robot.h",
    "line": 168,
    "function": null,
    "comment": "robot.h:168:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "robot.h",
    "line": 171,
    "function": null,
    "comment": "robot.h:171:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "robot.h",
    "line": 182,
    "function": null,
    "comment": "robot.h:182:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "robot.h",
    "line": 185,
    "function": null,
    "comment": "robot.h:185:  Namespace should be terminated with '// namespace pr2_mechanism_model'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_.",
    "file": "transmission.h",
    "line": 37,
    "function": null,
    "comment": "transmission.h:37:  #ifndef header guard has wrong style, please use: _HOME_ANDRE_ROS_HAROS_ANALYSER_TRANSMISSION_H_  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the guard's end should be '#endif  // <PROJECT>_<PATH>_<FILE>_H_' or '#endif  /* <PROJECT>_<PATH>_<FILE>_H_ */'.",
    "file": "transmission.h",
    "line": 101,
    "function": null,
    "comment": "transmission.h:101:  #endif line should be '#endif  // _HOME_ANDRE_ROS_HAROS_ANALYSER_TRANSMISSION_H_'  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "transmission.h",
    "line": 42,
    "function": null,
    "comment": "transmission.h:42:  Include 'pr2_hardware_interface/hardware_interface.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "transmission.h",
    "line": 44,
    "function": null,
    "comment": "transmission.h:44:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "transmission.h",
    "line": 49,
    "function": null,
    "comment": "transmission.h:49:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "transmission.h",
    "line": 50,
    "function": null,
    "comment": "transmission.h:50:  public: should be indented +1 space inside class Transmission  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "transmission.h",
    "line": 61,
    "function": null,
    "comment": "transmission.h:61:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "transmission.h",
    "line": 62,
    "function": null,
    "comment": "transmission.h:62:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "transmission.h",
    "line": 65,
    "function": null,
    "comment": "transmission.h:65:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "transmission.h",
    "line": 66,
    "function": null,
    "comment": "transmission.h:66:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "transmission.h",
    "line": 70,
    "function": null,
    "comment": "transmission.h:70:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "transmission.h",
    "line": 73,
    "function": null,
    "comment": "transmission.h:73:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "transmission.h",
    "line": 74,
    "function": null,
    "comment": "transmission.h:74:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "transmission.h",
    "line": 96,
    "function": null,
    "comment": "transmission.h:96:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "transmission.h",
    "line": 99,
    "function": null,
    "comment": "transmission.h:99:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "transmission.h",
    "line": 93,
    "function": null,
    "comment": "transmission.h:93:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "transmission.h",
    "line": 93,
    "function": null,
    "comment": "transmission.h:93:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_.",
    "file": "joint.h",
    "line": 37,
    "function": null,
    "comment": "joint.h:37:  #ifndef header guard has wrong style, please use: _HOME_ANDRE_ROS_HAROS_ANALYSER_JOINT_H_  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the guard's end should be '#endif  // <PROJECT>_<PATH>_<FILE>_H_' or '#endif  /* <PROJECT>_<PATH>_<FILE>_H_ */'.",
    "file": "joint.h",
    "line": 123,
    "function": null,
    "comment": "joint.h:123:  #endif line should be '#endif  // _HOME_ANDRE_ROS_HAROS_ANALYSER_JOINT_H_'  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint.h",
    "line": 44,
    "function": null,
    "comment": "joint.h:44:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint.h",
    "line": 49,
    "function": null,
    "comment": "joint.h:49:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "joint.h",
    "line": 53,
    "function": null,
    "comment": "joint.h:53:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint.h",
    "line": 72,
    "function": null,
    "comment": "joint.h:72:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "joint.h",
    "line": 73,
    "function": null,
    "comment": "joint.h:73:  public: should be indented +1 space inside class JointState  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint.h",
    "line": 74,
    "function": null,
    "comment": "joint.h:74:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "joint.h",
    "line": 78,
    "function": null,
    "comment": "joint.h:78:  Is this a non-const reference? If so, make const or use a pointer: double &effort_low  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "joint.h",
    "line": 78,
    "function": null,
    "comment": "joint.h:78:  Is this a non-const reference? If so, make const or use a pointer: double &effort_high  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint.h",
    "line": 110,
    "function": null,
    "comment": "joint.h:110:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "joint.h",
    "line": 121,
    "function": null,
    "comment": "joint.h:121:  Namespace should be terminated with '// namespace pr2_mechanism_model'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_.",
    "file": "simple_transmission.h",
    "line": 37,
    "function": null,
    "comment": "simple_transmission.h:37:  #ifndef header guard has wrong style, please use: _HOME_ANDRE_ROS_HAROS_ANALYSER_SIMPLE_TRANSMISSION_H_  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the guard's end should be '#endif  // <PROJECT>_<PATH>_<FILE>_H_' or '#endif  /* <PROJECT>_<PATH>_<FILE>_H_ */'.",
    "file": "simple_transmission.h",
    "line": 81,
    "function": null,
    "comment": "simple_transmission.h:81:  #endif line should be '#endif  // _HOME_ANDRE_ROS_HAROS_ANALYSER_SIMPLE_TRANSMISSION_H_'  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "simple_transmission.h",
    "line": 42,
    "function": null,
    "comment": "simple_transmission.h:42:  Include 'pr2_mechanism_model/joint.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "simple_transmission.h",
    "line": 43,
    "function": null,
    "comment": "simple_transmission.h:43:  Include 'pr2_hardware_interface/hardware_interface.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "simple_transmission.h",
    "line": 46,
    "function": null,
    "comment": "simple_transmission.h:46:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "simple_transmission.h",
    "line": 49,
    "function": null,
    "comment": "simple_transmission.h:49:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "simple_transmission.h",
    "line": 50,
    "function": null,
    "comment": "simple_transmission.h:50:  public: should be indented +1 space inside class SimpleTransmission  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "simple_transmission.h",
    "line": 51,
    "function": null,
    "comment": "simple_transmission.h:51:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "simple_transmission.h",
    "line": 61,
    "function": null,
    "comment": "simple_transmission.h:61:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "simple_transmission.h",
    "line": 62,
    "function": null,
    "comment": "simple_transmission.h:62:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "simple_transmission.h",
    "line": 68,
    "function": null,
    "comment": "simple_transmission.h:68:  private: should be indented +1 space inside class SimpleTransmission  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "simple_transmission.h",
    "line": 69,
    "function": null,
    "comment": "simple_transmission.h:69:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "simple_transmission.h",
    "line": 79,
    "function": null,
    "comment": "simple_transmission.h:79:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "simple_transmission.h",
    "line": 66,
    "function": null,
    "comment": "simple_transmission.h:66:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_.",
    "file": "chain.h",
    "line": 32,
    "function": null,
    "comment": "chain.h:32:  #ifndef header guard has wrong style, please use: _HOME_ANDRE_ROS_HAROS_ANALYSER_CHAIN_H_  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the symbol name should be <PACKAGE>_<PATH>_<FILE>_H.",
    "file": "chain.h",
    "line": 32,
    "function": null,
    "comment": "chain.h:32:  #ifndef header guard has wrong style, please use: CHAIN_H  [build/header_guard] [5]",
    "tags": ["ros","code-standards","ros-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the guard's end should be '#endif  // <PROJECT>_<PATH>_<FILE>_H_' or '#endif  /* <PROJECT>_<PATH>_<FILE>_H_ */'.",
    "file": "chain.h",
    "line": 131,
    "function": null,
    "comment": "chain.h:131:  #endif line should be '#endif  // _HOME_ANDRE_ROS_HAROS_ANALYSER_CHAIN_H_'  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "chain.h",
    "line": 36,
    "function": null,
    "comment": "chain.h:36:  Found C system header after other header. Should be: chain.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "chain.h",
    "line": 37,
    "function": null,
    "comment": "chain.h:37:  Found C system header after other header. Should be: chain.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "chain.h",
    "line": 38,
    "function": null,
    "comment": "chain.h:38:  Found C system header after other header. Should be: chain.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "chain.h",
    "line": 39,
    "function": null,
    "comment": "chain.h:39:  Found C system header after other header. Should be: chain.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "chain.h",
    "line": 41,
    "function": null,
    "comment": "chain.h:41:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "chain.h",
    "line": 44,
    "function": null,
    "comment": "chain.h:44:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "chain.h",
    "line": 45,
    "function": null,
    "comment": "chain.h:45:  public: should be indented +1 space inside class Chain  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "chain.h",
    "line": 56,
    "function": null,
    "comment": "chain.h:56:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "chain.h",
    "line": 64,
    "function": null,
    "comment": "chain.h:64:  Is this a non-const reference? If so, make const or use a pointer: Vec &v  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "chain.h",
    "line": 65,
    "function": null,
    "comment": "chain.h:65:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "chain.h",
    "line": 66,
    "function": null,
    "comment": "chain.h:66:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "chain.h",
    "line": 73,
    "function": null,
    "comment": "chain.h:73:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "chain.h",
    "line": 77,
    "function": null,
    "comment": "chain.h:77:  Is this a non-const reference? If so, make const or use a pointer: Vec &v  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "chain.h",
    "line": 78,
    "function": null,
    "comment": "chain.h:78:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "chain.h",
    "line": 79,
    "function": null,
    "comment": "chain.h:79:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "chain.h",
    "line": 100,
    "function": null,
    "comment": "chain.h:100:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "chain.h",
    "line": 101,
    "function": null,
    "comment": "chain.h:101:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "chain.h",
    "line": 110,
    "function": null,
    "comment": "chain.h:110:  Is this a non-const reference? If so, make const or use a pointer: KDL::Chain &chain  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "chain.h",
    "line": 122,
    "function": null,
    "comment": "chain.h:122:  private: should be indented +1 space inside class Chain  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "chain.h",
    "line": 126,
    "function": null,
    "comment": "chain.h:126:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "chain.h",
    "line": 129,
    "function": null,
    "comment": "chain.h:129:  Namespace should be terminated with '// namespace pr2_mechanism_model'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "chain.h",
    "line": 56,
    "function": null,
    "comment": "chain.h:56:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "chain.h",
    "line": 126,
    "function": null,
    "comment": "chain.h:126:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "chain.cpp",
    "line": 36,
    "function": null,
    "comment": "chain.cpp:36:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "chain.cpp",
    "line": 38,
    "function": null,
    "comment": "chain.cpp:38:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "chain.cpp",
    "line": 40,
    "function": null,
    "comment": "chain.cpp:40:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "chain.cpp",
    "line": 41,
    "function": null,
    "comment": "chain.cpp:41:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "chain.cpp",
    "line": 42,
    "function": null,
    "comment": "chain.cpp:42:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "chain.cpp",
    "line": 47,
    "function": null,
    "comment": "chain.cpp:47:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "chain.cpp",
    "line": 47,
    "function": null,
    "comment": "chain.cpp:47:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "chain.cpp",
    "line": 47,
    "function": null,
    "comment": "chain.cpp:47:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "chain.cpp",
    "line": 53,
    "function": null,
    "comment": "chain.cpp:53:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "chain.cpp",
    "line": 53,
    "function": null,
    "comment": "chain.cpp:53:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "chain.cpp",
    "line": 56,
    "function": null,
    "comment": "chain.cpp:56:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "chain.cpp",
    "line": 56,
    "function": null,
    "comment": "chain.cpp:56:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "chain.cpp",
    "line": 59,
    "function": null,
    "comment": "chain.cpp:59:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "chain.cpp",
    "line": 59,
    "function": null,
    "comment": "chain.cpp:59:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "chain.cpp",
    "line": 68,
    "function": null,
    "comment": "chain.cpp:68:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "chain.cpp",
    "line": 68,
    "function": null,
    "comment": "chain.cpp:68:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "chain.cpp",
    "line": 69,
    "function": null,
    "comment": "chain.cpp:69:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "chain.cpp",
    "line": 69,
    "function": null,
    "comment": "chain.cpp:69:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "chain.cpp",
    "line": 70,
    "function": null,
    "comment": "chain.cpp:70:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "chain.cpp",
    "line": 71,
    "function": null,
    "comment": "chain.cpp:71:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "chain.cpp",
    "line": 71,
    "function": null,
    "comment": "chain.cpp:71:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "chain.cpp",
    "line": 72,
    "function": null,
    "comment": "chain.cpp:72:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "chain.cpp",
    "line": 78,
    "function": null,
    "comment": "chain.cpp:78:  Using deprecated casting style.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "chain.cpp",
    "line": 84,
    "function": null,
    "comment": "chain.cpp:84:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "chain.cpp",
    "line": 87,
    "function": null,
    "comment": "chain.cpp:87:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "chain.cpp",
    "line": 93,
    "function": null,
    "comment": "chain.cpp:93:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "chain.cpp",
    "line": 96,
    "function": null,
    "comment": "chain.cpp:96:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "chain.cpp",
    "line": 102,
    "function": null,
    "comment": "chain.cpp:102:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "chain.cpp",
    "line": 105,
    "function": null,
    "comment": "chain.cpp:105:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "chain.cpp",
    "line": 111,
    "function": null,
    "comment": "chain.cpp:111:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "chain.cpp",
    "line": 113,
    "function": null,
    "comment": "chain.cpp:113:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "chain.cpp",
    "line": 121,
    "function": null,
    "comment": "chain.cpp:121:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "chain.cpp",
    "line": 127,
    "function": null,
    "comment": "chain.cpp:127:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "chain.cpp",
    "line": 134,
    "function": null,
    "comment": "chain.cpp:134:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "chain.cpp",
    "line": 137,
    "function": null,
    "comment": "chain.cpp:137:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "chain.cpp",
    "line": 144,
    "function": null,
    "comment": "chain.cpp:144:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "chain.cpp",
    "line": 151,
    "function": null,
    "comment": "chain.cpp:151:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "chain.cpp",
    "line": 158,
    "function": null,
    "comment": "chain.cpp:158:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "chain.cpp",
    "line": 166,
    "function": null,
    "comment": "chain.cpp:166:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "chain.cpp",
    "line": 175,
    "function": null,
    "comment": "chain.cpp:175:  Namespace should be terminated with '// namespace pr2_mechanism_model'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "chain.cpp",
    "line": 40,
    "function": null,
    "comment": "chain.cpp:40:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "chain.cpp",
    "line": 101,
    "function": null,
    "comment": "chain.cpp:101:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "pr2_belt_transmission.cpp",
    "line": 36,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:36:  Include 'math.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not include the C standard headers. Use the C++ headers instead.",
    "file": "pr2_belt_transmission.cpp",
    "line": 36,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:36:  Include 'cmath' instead of 'math.h'.  [build/include] [5]",
    "tags": ["hicpp","code-standards","headers","include","preprocessor","deprecation","c"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "pr2_belt_transmission.cpp",
    "line": 42,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:42:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_belt_transmission.cpp",
    "line": 45,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:45:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_belt_transmission.cpp",
    "line": 52,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:52:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_belt_transmission.cpp",
    "line": 57,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:57:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_belt_transmission.cpp",
    "line": 59,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:59:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_belt_transmission.cpp",
    "line": 60,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:60:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_belt_transmission.cpp",
    "line": 69,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:69:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_belt_transmission.cpp",
    "line": 70,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:70:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_belt_transmission.cpp",
    "line": 76,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:76:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_belt_transmission.cpp",
    "line": 80,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:80:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_belt_transmission.cpp",
    "line": 81,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:81:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "pr2_belt_transmission.cpp",
    "line": 87,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:87:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "pr2_belt_transmission.cpp",
    "line": 95,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:95:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "pr2_belt_transmission.cpp",
    "line": 105,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:105:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "pr2_belt_transmission.cpp",
    "line": 112,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:112:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "pr2_belt_transmission.cpp",
    "line": 119,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:119:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "pr2_belt_transmission.cpp",
    "line": 126,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:126:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_belt_transmission.cpp",
    "line": 156,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:156:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_belt_transmission.cpp",
    "line": 163,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:163:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_belt_transmission.cpp",
    "line": 174,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:174:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_belt_transmission.cpp",
    "line": 178,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:178:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_belt_transmission.cpp",
    "line": 179,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:179:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "pr2_belt_transmission.cpp",
    "line": 185,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:185:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "pr2_belt_transmission.cpp",
    "line": 193,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:193:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "pr2_belt_transmission.cpp",
    "line": 203,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:203:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "pr2_belt_transmission.cpp",
    "line": 210,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:210:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "pr2_belt_transmission.cpp",
    "line": 217,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:217:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "pr2_belt_transmission.cpp",
    "line": 224,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:224:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_belt_transmission.cpp",
    "line": 254,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:254:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_belt_transmission.cpp",
    "line": 255,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:255:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "pr2_belt_transmission.cpp",
    "line": 269,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:269:  Missing spaces around >  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "pr2_belt_transmission.cpp",
    "line": 269,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:269:  Extra space after (  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "pr2_belt_transmission.cpp",
    "line": 269,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:269:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_belt_transmission.cpp",
    "line": 271,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:271:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "pr2_belt_transmission.cpp",
    "line": 289,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:289:  Extra space after (  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_belt_transmission.cpp",
    "line": 313,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:313:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "pr2_belt_transmission.cpp",
    "line": 318,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:318:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_belt_transmission.cpp",
    "line": 319,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:319:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "pr2_belt_transmission.cpp",
    "line": 322,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:322:  Extra space after (  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_belt_transmission.cpp",
    "line": 343,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:343:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "pr2_belt_transmission.cpp",
    "line": 347,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:347:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_belt_transmission.cpp",
    "line": 348,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:348:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_belt_transmission.cpp",
    "line": 361,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:361:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_belt_transmission.cpp",
    "line": 385,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:385:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_belt_transmission.cpp",
    "line": 386,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:386:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_belt_transmission.cpp",
    "line": 398,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:398:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "pr2_belt_transmission.cpp",
    "line": 401,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:401:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_belt_transmission.cpp",
    "line": 402,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:402:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_belt_transmission.cpp",
    "line": 433,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:433:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_belt_transmission.cpp",
    "line": 434,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:434:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_belt_transmission.cpp",
    "line": 475,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:475:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "pr2_belt_transmission.cpp",
    "line": 480,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:480:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_belt_transmission.cpp",
    "line": 481,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:481:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_belt_transmission.cpp",
    "line": 490,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:490:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "pr2_belt_transmission.cpp",
    "line": 490,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:490:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_belt_transmission.cpp",
    "line": 491,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:491:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_belt_transmission.cpp",
    "line": 499,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:499:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_belt_transmission.cpp",
    "line": 502,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:502:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_belt_transmission.cpp",
    "line": 506,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:506:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_belt_transmission.cpp",
    "line": 509,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:509:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_belt_transmission.cpp",
    "line": 510,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:510:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_belt_transmission.cpp",
    "line": 513,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:513:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "pr2_belt_transmission.cpp",
    "line": 515,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:515:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_belt_transmission.cpp",
    "line": 528,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:528:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_belt_transmission.cpp",
    "line": 529,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:529:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_belt_transmission.cpp",
    "line": 558,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:558:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "pr2_belt_transmission.cpp",
    "line": 565,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:565:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_belt_transmission.cpp",
    "line": 566,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:566:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_belt_transmission.cpp",
    "line": 573,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:573:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "pr2_belt_transmission.cpp",
    "line": 573,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:573:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_belt_transmission.cpp",
    "line": 574,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:574:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_belt_transmission.cpp",
    "line": 577,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:577:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_belt_transmission.cpp",
    "line": 580,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:580:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_belt_transmission.cpp",
    "line": 583,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:583:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_belt_transmission.cpp",
    "line": 584,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:584:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Unary operators should have no whitespace around them.",
    "file": "pr2_belt_transmission.cpp",
    "line": 608,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:608:  Extra space for operator !   [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","unary-operator"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_belt_transmission.cpp",
    "line": 609,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:609:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "pr2_belt_transmission.cpp",
    "line": 615,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:615:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_belt_transmission.cpp",
    "line": 615,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:615:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "pr2_belt_transmission.cpp",
    "line": 615,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:615:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "pr2_belt_transmission.cpp",
    "line": 616,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:616:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "pr2_belt_transmission.cpp",
    "line": 617,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:617:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "pr2_belt_transmission.cpp",
    "line": 618,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:618:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "pr2_belt_transmission.cpp",
    "line": 620,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:620:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_belt_transmission.cpp",
    "line": 621,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:621:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_belt_transmission.cpp",
    "line": 623,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:623:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_belt_transmission.cpp",
    "line": 630,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:630:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "pr2_belt_transmission.cpp",
    "line": 633,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:633:  Namespace should be terminated with '// namespace pr2_mechanism_model'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "pr2_belt_transmission.cpp",
    "line": 633,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:633:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "pr2_belt_transmission.cpp",
    "line": 528,
    "function": null,
    "comment": "pr2_belt_transmission.cpp:528:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Do not include the C standard headers. Use the C++ headers instead.",
    "file": "wrist_transmission.cpp",
    "line": 37,
    "function": null,
    "comment": "wrist_transmission.cpp:37:  Include 'cmath' instead of 'math.h'.  [build/include] [5]",
    "tags": ["hicpp","code-standards","headers","include","preprocessor","deprecation","c"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "wrist_transmission.cpp",
    "line": 42,
    "function": null,
    "comment": "wrist_transmission.cpp:42:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "wrist_transmission.cpp",
    "line": 43,
    "function": null,
    "comment": "wrist_transmission.cpp:43:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "wrist_transmission.cpp",
    "line": 49,
    "function": null,
    "comment": "wrist_transmission.cpp:49:  Is this a non-const reference? If so, make const or use a pointer: double &value  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_transmission.cpp",
    "line": 50,
    "function": null,
    "comment": "wrist_transmission.cpp:50:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "wrist_transmission.cpp",
    "line": 51,
    "function": null,
    "comment": "wrist_transmission.cpp:51:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_transmission.cpp",
    "line": 54,
    "function": null,
    "comment": "wrist_transmission.cpp:54:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_transmission.cpp",
    "line": 62,
    "function": null,
    "comment": "wrist_transmission.cpp:62:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_transmission.cpp",
    "line": 69,
    "function": null,
    "comment": "wrist_transmission.cpp:69:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_transmission.cpp",
    "line": 78,
    "function": null,
    "comment": "wrist_transmission.cpp:78:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_transmission.cpp",
    "line": 79,
    "function": null,
    "comment": "wrist_transmission.cpp:79:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_transmission.cpp",
    "line": 86,
    "function": null,
    "comment": "wrist_transmission.cpp:86:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_transmission.cpp",
    "line": 87,
    "function": null,
    "comment": "wrist_transmission.cpp:87:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_transmission.cpp",
    "line": 95,
    "function": null,
    "comment": "wrist_transmission.cpp:95:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_transmission.cpp",
    "line": 96,
    "function": null,
    "comment": "wrist_transmission.cpp:96:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_transmission.cpp",
    "line": 103,
    "function": null,
    "comment": "wrist_transmission.cpp:103:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_transmission.cpp",
    "line": 104,
    "function": null,
    "comment": "wrist_transmission.cpp:104:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_transmission.cpp",
    "line": 113,
    "function": null,
    "comment": "wrist_transmission.cpp:113:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_transmission.cpp",
    "line": 117,
    "function": null,
    "comment": "wrist_transmission.cpp:117:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_transmission.cpp",
    "line": 120,
    "function": null,
    "comment": "wrist_transmission.cpp:120:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_transmission.cpp",
    "line": 121,
    "function": null,
    "comment": "wrist_transmission.cpp:121:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_transmission.cpp",
    "line": 127,
    "function": null,
    "comment": "wrist_transmission.cpp:127:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_transmission.cpp",
    "line": 128,
    "function": null,
    "comment": "wrist_transmission.cpp:128:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_transmission.cpp",
    "line": 134,
    "function": null,
    "comment": "wrist_transmission.cpp:134:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "wrist_transmission.cpp",
    "line": 137,
    "function": null,
    "comment": "wrist_transmission.cpp:137:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_transmission.cpp",
    "line": 138,
    "function": null,
    "comment": "wrist_transmission.cpp:138:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_transmission.cpp",
    "line": 140,
    "function": null,
    "comment": "wrist_transmission.cpp:140:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_transmission.cpp",
    "line": 141,
    "function": null,
    "comment": "wrist_transmission.cpp:141:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "wrist_transmission.cpp",
    "line": 145,
    "function": null,
    "comment": "wrist_transmission.cpp:145:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_transmission.cpp",
    "line": 146,
    "function": null,
    "comment": "wrist_transmission.cpp:146:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_transmission.cpp",
    "line": 147,
    "function": null,
    "comment": "wrist_transmission.cpp:147:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_transmission.cpp",
    "line": 154,
    "function": null,
    "comment": "wrist_transmission.cpp:154:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_transmission.cpp",
    "line": 158,
    "function": null,
    "comment": "wrist_transmission.cpp:158:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_transmission.cpp",
    "line": 161,
    "function": null,
    "comment": "wrist_transmission.cpp:161:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_transmission.cpp",
    "line": 162,
    "function": null,
    "comment": "wrist_transmission.cpp:162:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_transmission.cpp",
    "line": 168,
    "function": null,
    "comment": "wrist_transmission.cpp:168:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_transmission.cpp",
    "line": 169,
    "function": null,
    "comment": "wrist_transmission.cpp:169:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_transmission.cpp",
    "line": 175,
    "function": null,
    "comment": "wrist_transmission.cpp:175:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "wrist_transmission.cpp",
    "line": 178,
    "function": null,
    "comment": "wrist_transmission.cpp:178:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_transmission.cpp",
    "line": 179,
    "function": null,
    "comment": "wrist_transmission.cpp:179:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_transmission.cpp",
    "line": 181,
    "function": null,
    "comment": "wrist_transmission.cpp:181:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_transmission.cpp",
    "line": 182,
    "function": null,
    "comment": "wrist_transmission.cpp:182:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "wrist_transmission.cpp",
    "line": 186,
    "function": null,
    "comment": "wrist_transmission.cpp:186:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_transmission.cpp",
    "line": 187,
    "function": null,
    "comment": "wrist_transmission.cpp:187:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wrist_transmission.cpp",
    "line": 188,
    "function": null,
    "comment": "wrist_transmission.cpp:188:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_transmission.cpp",
    "line": 188,
    "function": null,
    "comment": "wrist_transmission.cpp:188:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_transmission.cpp",
    "line": 197,
    "function": null,
    "comment": "wrist_transmission.cpp:197:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_transmission.cpp",
    "line": 205,
    "function": null,
    "comment": "wrist_transmission.cpp:205:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_transmission.cpp",
    "line": 206,
    "function": null,
    "comment": "wrist_transmission.cpp:206:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_transmission.cpp",
    "line": 212,
    "function": null,
    "comment": "wrist_transmission.cpp:212:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_transmission.cpp",
    "line": 213,
    "function": null,
    "comment": "wrist_transmission.cpp:213:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_transmission.cpp",
    "line": 221,
    "function": null,
    "comment": "wrist_transmission.cpp:221:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_transmission.cpp",
    "line": 222,
    "function": null,
    "comment": "wrist_transmission.cpp:222:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_transmission.cpp",
    "line": 228,
    "function": null,
    "comment": "wrist_transmission.cpp:228:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_transmission.cpp",
    "line": 229,
    "function": null,
    "comment": "wrist_transmission.cpp:229:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_transmission.cpp",
    "line": 238,
    "function": null,
    "comment": "wrist_transmission.cpp:238:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_transmission.cpp",
    "line": 245,
    "function": null,
    "comment": "wrist_transmission.cpp:245:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_transmission.cpp",
    "line": 246,
    "function": null,
    "comment": "wrist_transmission.cpp:246:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_transmission.cpp",
    "line": 252,
    "function": null,
    "comment": "wrist_transmission.cpp:252:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "wrist_transmission.cpp",
    "line": 255,
    "function": null,
    "comment": "wrist_transmission.cpp:255:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_transmission.cpp",
    "line": 256,
    "function": null,
    "comment": "wrist_transmission.cpp:256:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_transmission.cpp",
    "line": 259,
    "function": null,
    "comment": "wrist_transmission.cpp:259:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_transmission.cpp",
    "line": 260,
    "function": null,
    "comment": "wrist_transmission.cpp:260:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "wrist_transmission.cpp",
    "line": 264,
    "function": null,
    "comment": "wrist_transmission.cpp:264:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_transmission.cpp",
    "line": 265,
    "function": null,
    "comment": "wrist_transmission.cpp:265:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_transmission.cpp",
    "line": 266,
    "function": null,
    "comment": "wrist_transmission.cpp:266:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_transmission.cpp",
    "line": 273,
    "function": null,
    "comment": "wrist_transmission.cpp:273:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_transmission.cpp",
    "line": 280,
    "function": null,
    "comment": "wrist_transmission.cpp:280:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_transmission.cpp",
    "line": 281,
    "function": null,
    "comment": "wrist_transmission.cpp:281:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_transmission.cpp",
    "line": 286,
    "function": null,
    "comment": "wrist_transmission.cpp:286:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "wrist_transmission.cpp",
    "line": 289,
    "function": null,
    "comment": "wrist_transmission.cpp:289:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_transmission.cpp",
    "line": 290,
    "function": null,
    "comment": "wrist_transmission.cpp:290:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_transmission.cpp",
    "line": 292,
    "function": null,
    "comment": "wrist_transmission.cpp:292:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_transmission.cpp",
    "line": 293,
    "function": null,
    "comment": "wrist_transmission.cpp:293:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "wrist_transmission.cpp",
    "line": 297,
    "function": null,
    "comment": "wrist_transmission.cpp:297:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_transmission.cpp",
    "line": 298,
    "function": null,
    "comment": "wrist_transmission.cpp:298:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_transmission.cpp",
    "line": 299,
    "function": null,
    "comment": "wrist_transmission.cpp:299:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_transmission.cpp",
    "line": 308,
    "function": null,
    "comment": "wrist_transmission.cpp:308:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_transmission.cpp",
    "line": 312,
    "function": null,
    "comment": "wrist_transmission.cpp:312:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "wrist_transmission.cpp",
    "line": 313,
    "function": null,
    "comment": "wrist_transmission.cpp:313:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_transmission.cpp",
    "line": 314,
    "function": null,
    "comment": "wrist_transmission.cpp:314:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_transmission.cpp",
    "line": 315,
    "function": null,
    "comment": "wrist_transmission.cpp:315:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_transmission.cpp",
    "line": 317,
    "function": null,
    "comment": "wrist_transmission.cpp:317:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "wrist_transmission.cpp",
    "line": 318,
    "function": null,
    "comment": "wrist_transmission.cpp:318:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_transmission.cpp",
    "line": 319,
    "function": null,
    "comment": "wrist_transmission.cpp:319:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_transmission.cpp",
    "line": 320,
    "function": null,
    "comment": "wrist_transmission.cpp:320:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_transmission.cpp",
    "line": 325,
    "function": null,
    "comment": "wrist_transmission.cpp:325:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_transmission.cpp",
    "line": 329,
    "function": null,
    "comment": "wrist_transmission.cpp:329:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "wrist_transmission.cpp",
    "line": 330,
    "function": null,
    "comment": "wrist_transmission.cpp:330:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_transmission.cpp",
    "line": 330,
    "function": null,
    "comment": "wrist_transmission.cpp:330:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_transmission.cpp",
    "line": 331,
    "function": null,
    "comment": "wrist_transmission.cpp:331:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_transmission.cpp",
    "line": 332,
    "function": null,
    "comment": "wrist_transmission.cpp:332:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_transmission.cpp",
    "line": 334,
    "function": null,
    "comment": "wrist_transmission.cpp:334:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "wrist_transmission.cpp",
    "line": 335,
    "function": null,
    "comment": "wrist_transmission.cpp:335:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_transmission.cpp",
    "line": 335,
    "function": null,
    "comment": "wrist_transmission.cpp:335:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_transmission.cpp",
    "line": 336,
    "function": null,
    "comment": "wrist_transmission.cpp:336:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_transmission.cpp",
    "line": 337,
    "function": null,
    "comment": "wrist_transmission.cpp:337:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Unary operators should have no whitespace around them.",
    "file": "wrist_transmission.cpp",
    "line": 340,
    "function": null,
    "comment": "wrist_transmission.cpp:340:  Extra space for operator !   [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","unary-operator"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_transmission.cpp",
    "line": 341,
    "function": null,
    "comment": "wrist_transmission.cpp:341:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "wrist_transmission.cpp",
    "line": 348,
    "function": null,
    "comment": "wrist_transmission.cpp:348:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_transmission.cpp",
    "line": 348,
    "function": null,
    "comment": "wrist_transmission.cpp:348:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "wrist_transmission.cpp",
    "line": 348,
    "function": null,
    "comment": "wrist_transmission.cpp:348:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "wrist_transmission.cpp",
    "line": 349,
    "function": null,
    "comment": "wrist_transmission.cpp:349:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "wrist_transmission.cpp",
    "line": 350,
    "function": null,
    "comment": "wrist_transmission.cpp:350:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "wrist_transmission.cpp",
    "line": 351,
    "function": null,
    "comment": "wrist_transmission.cpp:351:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "wrist_transmission.cpp",
    "line": 353,
    "function": null,
    "comment": "wrist_transmission.cpp:353:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_transmission.cpp",
    "line": 354,
    "function": null,
    "comment": "wrist_transmission.cpp:354:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_transmission.cpp",
    "line": 356,
    "function": null,
    "comment": "wrist_transmission.cpp:356:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_transmission.cpp",
    "line": 357,
    "function": null,
    "comment": "wrist_transmission.cpp:357:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "wrist_transmission.cpp",
    "line": 365,
    "function": null,
    "comment": "wrist_transmission.cpp:365:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "wrist_transmission.cpp",
    "line": 366,
    "function": null,
    "comment": "wrist_transmission.cpp:366:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_transmission.cpp",
    "line": 371,
    "function": null,
    "comment": "wrist_transmission.cpp:371:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_transmission.cpp",
    "line": 378,
    "function": null,
    "comment": "wrist_transmission.cpp:378:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_transmission.cpp",
    "line": 379,
    "function": null,
    "comment": "wrist_transmission.cpp:379:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_transmission.cpp",
    "line": 384,
    "function": null,
    "comment": "wrist_transmission.cpp:384:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_transmission.cpp",
    "line": 388,
    "function": null,
    "comment": "wrist_transmission.cpp:388:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_transmission.cpp",
    "line": 389,
    "function": null,
    "comment": "wrist_transmission.cpp:389:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wrist_transmission.cpp",
    "line": 393,
    "function": null,
    "comment": "wrist_transmission.cpp:393:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wrist_transmission.cpp",
    "line": 394,
    "function": null,
    "comment": "wrist_transmission.cpp:394:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "wrist_transmission.cpp",
    "line": 393,
    "function": null,
    "comment": "wrist_transmission.cpp:393:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "robot.cpp",
    "line": 36,
    "function": null,
    "comment": "robot.cpp:36:  Found C system header after other header. Should be: robot.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "robot.cpp",
    "line": 37,
    "function": null,
    "comment": "robot.cpp:37:  Found C system header after other header. Should be: robot.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "robot.cpp",
    "line": 38,
    "function": null,
    "comment": "robot.cpp:38:  Found C system header after other header. Should be: robot.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "robot.cpp",
    "line": 42,
    "function": null,
    "comment": "robot.cpp:42:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "robot.cpp",
    "line": 43,
    "function": null,
    "comment": "robot.cpp:43:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "robot.cpp",
    "line": 52,
    "function": null,
    "comment": "robot.cpp:52:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "robot.cpp",
    "line": 54,
    "function": null,
    "comment": "robot.cpp:54:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "robot.cpp",
    "line": 54,
    "function": null,
    "comment": "robot.cpp:54:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "robot.cpp",
    "line": 60,
    "function": null,
    "comment": "robot.cpp:60:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "robot.cpp",
    "line": 60,
    "function": null,
    "comment": "robot.cpp:60:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "robot.cpp",
    "line": 61,
    "function": null,
    "comment": "robot.cpp:61:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "robot.cpp",
    "line": 66,
    "function": null,
    "comment": "robot.cpp:66:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "robot.cpp",
    "line": 67,
    "function": null,
    "comment": "robot.cpp:67:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "robot.cpp",
    "line": 73,
    "function": null,
    "comment": "robot.cpp:73:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "robot.cpp",
    "line": 76,
    "function": null,
    "comment": "robot.cpp:76:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "robot.cpp",
    "line": 79,
    "function": null,
    "comment": "robot.cpp:79:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "robot.cpp",
    "line": 80,
    "function": null,
    "comment": "robot.cpp:80:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "robot.cpp",
    "line": 81,
    "function": null,
    "comment": "robot.cpp:81:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "robot.cpp",
    "line": 82,
    "function": null,
    "comment": "robot.cpp:82:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "robot.cpp",
    "line": 83,
    "function": null,
    "comment": "robot.cpp:83:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "robot.cpp",
    "line": 84,
    "function": null,
    "comment": "robot.cpp:84:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "robot.cpp",
    "line": 85,
    "function": null,
    "comment": "robot.cpp:85:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "robot.cpp",
    "line": 86,
    "function": null,
    "comment": "robot.cpp:86:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "robot.cpp",
    "line": 96,
    "function": null,
    "comment": "robot.cpp:96:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "robot.cpp",
    "line": 102,
    "function": null,
    "comment": "robot.cpp:102:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "robot.cpp",
    "line": 102,
    "function": null,
    "comment": "robot.cpp:102:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "robot.cpp",
    "line": 102,
    "function": null,
    "comment": "robot.cpp:102:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "robot.cpp",
    "line": 105,
    "function": null,
    "comment": "robot.cpp:105:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "robot.cpp",
    "line": 105,
    "function": null,
    "comment": "robot.cpp:105:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "robot.cpp",
    "line": 113,
    "function": null,
    "comment": "robot.cpp:113:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "robot.cpp",
    "line": 118,
    "function": null,
    "comment": "robot.cpp:118:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "robot.cpp",
    "line": 120,
    "function": null,
    "comment": "robot.cpp:120:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "robot.cpp",
    "line": 122,
    "function": null,
    "comment": "robot.cpp:122:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "robot.cpp",
    "line": 130,
    "function": null,
    "comment": "robot.cpp:130:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "robot.cpp",
    "line": 135,
    "function": null,
    "comment": "robot.cpp:135:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "robot.cpp",
    "line": 139,
    "function": null,
    "comment": "robot.cpp:139:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "robot.cpp",
    "line": 140,
    "function": null,
    "comment": "robot.cpp:140:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "robot.cpp",
    "line": 151,
    "function": null,
    "comment": "robot.cpp:151:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "robot.cpp",
    "line": 160,
    "function": null,
    "comment": "robot.cpp:160:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "robot.cpp",
    "line": 163,
    "function": null,
    "comment": "robot.cpp:163:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "robot.cpp",
    "line": 175,
    "function": null,
    "comment": "robot.cpp:175:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "robot.cpp",
    "line": 178,
    "function": null,
    "comment": "robot.cpp:178:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "robot.cpp",
    "line": 179,
    "function": null,
    "comment": "robot.cpp:179:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "robot.cpp",
    "line": 190,
    "function": null,
    "comment": "robot.cpp:190:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "robot.cpp",
    "line": 195,
    "function": null,
    "comment": "robot.cpp:195:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "robot.cpp",
    "line": 196,
    "function": null,
    "comment": "robot.cpp:196:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "robot.cpp",
    "line": 204,
    "function": null,
    "comment": "robot.cpp:204:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "robot.cpp",
    "line": 205,
    "function": null,
    "comment": "robot.cpp:205:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "robot.cpp",
    "line": 213,
    "function": null,
    "comment": "robot.cpp:213:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "robot.cpp",
    "line": 215,
    "function": null,
    "comment": "robot.cpp:215:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "robot.cpp",
    "line": 221,
    "function": null,
    "comment": "robot.cpp:221:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "robot.cpp",
    "line": 227,
    "function": null,
    "comment": "robot.cpp:227:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "robot.cpp",
    "line": 229,
    "function": null,
    "comment": "robot.cpp:229:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "robot.cpp",
    "line": 236,
    "function": null,
    "comment": "robot.cpp:236:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "robot.cpp",
    "line": 237,
    "function": null,
    "comment": "robot.cpp:237:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "robot.cpp",
    "line": 238,
    "function": null,
    "comment": "robot.cpp:238:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "robot.cpp",
    "line": 248,
    "function": null,
    "comment": "robot.cpp:248:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "robot.cpp",
    "line": 250,
    "function": null,
    "comment": "robot.cpp:250:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "robot.cpp",
    "line": 256,
    "function": null,
    "comment": "robot.cpp:256:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "robot.cpp",
    "line": 262,
    "function": null,
    "comment": "robot.cpp:262:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "robot.cpp",
    "line": 264,
    "function": null,
    "comment": "robot.cpp:264:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "robot.cpp",
    "line": 271,
    "function": null,
    "comment": "robot.cpp:271:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "robot.cpp",
    "line": 273,
    "function": null,
    "comment": "robot.cpp:273:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "robot.cpp",
    "line": 205,
    "function": null,
    "comment": "robot.cpp:205:  Add #include <map> for map<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "robot.cpp",
    "line": 205,
    "function": null,
    "comment": "robot.cpp:205:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "robot.cpp",
    "line": 118,
    "function": null,
    "comment": "robot.cpp:118:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "joint.cpp",
    "line": 39,
    "function": null,
    "comment": "joint.cpp:39:  Include 'cfloat' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "joint.cpp",
    "line": 41,
    "function": null,
    "comment": "joint.cpp:41:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "joint.cpp",
    "line": 42,
    "function": null,
    "comment": "joint.cpp:42:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint.cpp",
    "line": 46,
    "function": null,
    "comment": "joint.cpp:46:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint.cpp",
    "line": 47,
    "function": null,
    "comment": "joint.cpp:47:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "joint.cpp",
    "line": 47,
    "function": null,
    "comment": "joint.cpp:47:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint.cpp",
    "line": 49,
    "function": null,
    "comment": "joint.cpp:49:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "joint.cpp",
    "line": 56,
    "function": null,
    "comment": "joint.cpp:56:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "joint.cpp",
    "line": 56,
    "function": null,
    "comment": "joint.cpp:56:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint.cpp",
    "line": 56,
    "function": null,
    "comment": "joint.cpp:56:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "joint.cpp",
    "line": 56,
    "function": null,
    "comment": "joint.cpp:56:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint.cpp",
    "line": 66,
    "function": null,
    "comment": "joint.cpp:66:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint.cpp",
    "line": 77,
    "function": null,
    "comment": "joint.cpp:77:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "joint.cpp",
    "line": 84,
    "function": null,
    "comment": "joint.cpp:84:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint.cpp",
    "line": 88,
    "function": null,
    "comment": "joint.cpp:88:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint.cpp",
    "line": 90,
    "function": null,
    "comment": "joint.cpp:90:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint.cpp",
    "line": 102,
    "function": null,
    "comment": "joint.cpp:102:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint.cpp",
    "line": 103,
    "function": null,
    "comment": "joint.cpp:103:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint.cpp",
    "line": 108,
    "function": null,
    "comment": "joint.cpp:108:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint.cpp",
    "line": 111,
    "function": null,
    "comment": "joint.cpp:111:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "joint.cpp",
    "line": 92,
    "function": null,
    "comment": "joint.cpp:92:  Add #include <limits> for numeric_limits<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "joint.cpp",
    "line": 119,
    "function": null,
    "comment": "joint.cpp:119:  Add #include <algorithm> for max  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "tree.cpp",
    "line": 43,
    "function": null,
    "comment": "tree.cpp:43:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "tree.cpp",
    "line": 46,
    "function": null,
    "comment": "tree.cpp:46:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "tree.cpp",
    "line": 50,
    "function": null,
    "comment": "tree.cpp:50:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "tree.cpp",
    "line": 51,
    "function": null,
    "comment": "tree.cpp:51:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "tree.cpp",
    "line": 52,
    "function": null,
    "comment": "tree.cpp:52:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "tree.cpp",
    "line": 54,
    "function": null,
    "comment": "tree.cpp:54:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "tree.cpp",
    "line": 55,
    "function": null,
    "comment": "tree.cpp:55:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "tree.cpp",
    "line": 61,
    "function": null,
    "comment": "tree.cpp:61:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "tree.cpp",
    "line": 62,
    "function": null,
    "comment": "tree.cpp:62:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "tree.cpp",
    "line": 67,
    "function": null,
    "comment": "tree.cpp:67:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "tree.cpp",
    "line": 68,
    "function": null,
    "comment": "tree.cpp:68:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "tree.cpp",
    "line": 69,
    "function": null,
    "comment": "tree.cpp:69:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "tree.cpp",
    "line": 71,
    "function": null,
    "comment": "tree.cpp:71:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "tree.cpp",
    "line": 74,
    "function": null,
    "comment": "tree.cpp:74:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "tree.cpp",
    "line": 75,
    "function": null,
    "comment": "tree.cpp:75:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "tree.cpp",
    "line": 77,
    "function": null,
    "comment": "tree.cpp:77:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "tree.cpp",
    "line": 79,
    "function": null,
    "comment": "tree.cpp:79:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "tree.cpp",
    "line": 82,
    "function": null,
    "comment": "tree.cpp:82:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "tree.cpp",
    "line": 83,
    "function": null,
    "comment": "tree.cpp:83:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "tree.cpp",
    "line": 92,
    "function": null,
    "comment": "tree.cpp:92:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "tree.cpp",
    "line": 93,
    "function": null,
    "comment": "tree.cpp:93:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "tree.cpp",
    "line": 96,
    "function": null,
    "comment": "tree.cpp:96:  Using deprecated casting style.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "tree.cpp",
    "line": 101,
    "function": null,
    "comment": "tree.cpp:101:  Namespace should be terminated with '// namespace pr2_mechanism_model'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "tree.cpp",
    "line": 101,
    "function": null,
    "comment": "tree.cpp:101:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "tree.cpp",
    "line": 77,
    "function": null,
    "comment": "tree.cpp:77:  Add #include <map> for map<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "tree.cpp",
    "line": 77,
    "function": null,
    "comment": "tree.cpp:77:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Do not include the C standard headers. Use the C++ headers instead.",
    "file": "simple_transmission.cpp",
    "line": 37,
    "function": null,
    "comment": "simple_transmission.cpp:37:  Include 'cmath' instead of 'math.h'.  [build/include] [5]",
    "tags": ["hicpp","code-standards","headers","include","preprocessor","deprecation","c"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "simple_transmission.cpp",
    "line": 42,
    "function": null,
    "comment": "simple_transmission.cpp:42:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "simple_transmission.cpp",
    "line": 43,
    "function": null,
    "comment": "simple_transmission.cpp:43:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "simple_transmission.cpp",
    "line": 50,
    "function": null,
    "comment": "simple_transmission.cpp:50:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "simple_transmission.cpp",
    "line": 57,
    "function": null,
    "comment": "simple_transmission.cpp:57:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "simple_transmission.cpp",
    "line": 62,
    "function": null,
    "comment": "simple_transmission.cpp:62:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "simple_transmission.cpp",
    "line": 64,
    "function": null,
    "comment": "simple_transmission.cpp:64:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "simple_transmission.cpp",
    "line": 65,
    "function": null,
    "comment": "simple_transmission.cpp:65:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "simple_transmission.cpp",
    "line": 74,
    "function": null,
    "comment": "simple_transmission.cpp:74:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "simple_transmission.cpp",
    "line": 75,
    "function": null,
    "comment": "simple_transmission.cpp:75:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "simple_transmission.cpp",
    "line": 81,
    "function": null,
    "comment": "simple_transmission.cpp:81:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "simple_transmission.cpp",
    "line": 84,
    "function": null,
    "comment": "simple_transmission.cpp:84:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "simple_transmission.cpp",
    "line": 85,
    "function": null,
    "comment": "simple_transmission.cpp:85:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "simple_transmission.cpp",
    "line": 88,
    "function": null,
    "comment": "simple_transmission.cpp:88:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "simple_transmission.cpp",
    "line": 90,
    "function": null,
    "comment": "simple_transmission.cpp:90:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "simple_transmission.cpp",
    "line": 92,
    "function": null,
    "comment": "simple_transmission.cpp:92:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "simple_transmission.cpp",
    "line": 93,
    "function": null,
    "comment": "simple_transmission.cpp:93:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "simple_transmission.cpp",
    "line": 94,
    "function": null,
    "comment": "simple_transmission.cpp:94:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "simple_transmission.cpp",
    "line": 96,
    "function": null,
    "comment": "simple_transmission.cpp:96:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "simple_transmission.cpp",
    "line": 97,
    "function": null,
    "comment": "simple_transmission.cpp:97:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "simple_transmission.cpp",
    "line": 98,
    "function": null,
    "comment": "simple_transmission.cpp:98:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "simple_transmission.cpp",
    "line": 100,
    "function": null,
    "comment": "simple_transmission.cpp:100:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "simple_transmission.cpp",
    "line": 101,
    "function": null,
    "comment": "simple_transmission.cpp:101:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "simple_transmission.cpp",
    "line": 102,
    "function": null,
    "comment": "simple_transmission.cpp:102:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "simple_transmission.cpp",
    "line": 108,
    "function": null,
    "comment": "simple_transmission.cpp:108:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "simple_transmission.cpp",
    "line": 109,
    "function": null,
    "comment": "simple_transmission.cpp:109:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "simple_transmission.cpp",
    "line": 113,
    "function": null,
    "comment": "simple_transmission.cpp:113:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "simple_transmission.cpp",
    "line": 114,
    "function": null,
    "comment": "simple_transmission.cpp:114:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "simple_transmission.cpp",
    "line": 117,
    "function": null,
    "comment": "simple_transmission.cpp:117:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "simple_transmission.cpp",
    "line": 118,
    "function": null,
    "comment": "simple_transmission.cpp:118:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "simple_transmission.cpp",
    "line": 118,
    "function": null,
    "comment": "simple_transmission.cpp:118:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "simple_transmission.cpp",
    "line": 128,
    "function": null,
    "comment": "simple_transmission.cpp:128:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "simple_transmission.cpp",
    "line": 135,
    "function": null,
    "comment": "simple_transmission.cpp:135:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "simple_transmission.cpp",
    "line": 144,
    "function": null,
    "comment": "simple_transmission.cpp:144:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "simple_transmission.cpp",
    "line": 145,
    "function": null,
    "comment": "simple_transmission.cpp:145:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "simple_transmission.cpp",
    "line": 150,
    "function": null,
    "comment": "simple_transmission.cpp:150:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "simple_transmission.cpp",
    "line": 153,
    "function": null,
    "comment": "simple_transmission.cpp:153:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "simple_transmission.cpp",
    "line": 154,
    "function": null,
    "comment": "simple_transmission.cpp:154:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "simple_transmission.cpp",
    "line": 157,
    "function": null,
    "comment": "simple_transmission.cpp:157:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "simple_transmission.cpp",
    "line": 159,
    "function": null,
    "comment": "simple_transmission.cpp:159:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "simple_transmission.cpp",
    "line": 161,
    "function": null,
    "comment": "simple_transmission.cpp:161:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "simple_transmission.cpp",
    "line": 162,
    "function": null,
    "comment": "simple_transmission.cpp:162:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "simple_transmission.cpp",
    "line": 163,
    "function": null,
    "comment": "simple_transmission.cpp:163:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "simple_transmission.cpp",
    "line": 169,
    "function": null,
    "comment": "simple_transmission.cpp:169:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "simple_transmission.cpp",
    "line": 170,
    "function": null,
    "comment": "simple_transmission.cpp:170:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "simple_transmission.cpp",
    "line": 174,
    "function": null,
    "comment": "simple_transmission.cpp:174:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "simple_transmission.cpp",
    "line": 178,
    "function": null,
    "comment": "simple_transmission.cpp:178:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "simple_transmission.cpp",
    "line": 179,
    "function": null,
    "comment": "simple_transmission.cpp:179:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "simple_transmission.cpp",
    "line": 179,
    "function": null,
    "comment": "simple_transmission.cpp:179:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "simple_transmission.cpp",
    "line": 189,
    "function": null,
    "comment": "simple_transmission.cpp:189:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "simple_transmission.cpp",
    "line": 192,
    "function": null,
    "comment": "simple_transmission.cpp:192:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "simple_transmission.cpp",
    "line": 193,
    "function": null,
    "comment": "simple_transmission.cpp:193:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "simple_transmission.cpp",
    "line": 195,
    "function": null,
    "comment": "simple_transmission.cpp:195:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "simple_transmission.cpp",
    "line": 198,
    "function": null,
    "comment": "simple_transmission.cpp:198:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "simple_transmission.cpp",
    "line": 204,
    "function": null,
    "comment": "simple_transmission.cpp:204:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "simple_transmission.cpp",
    "line": 204,
    "function": null,
    "comment": "simple_transmission.cpp:204:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "simple_transmission.cpp",
    "line": 210,
    "function": null,
    "comment": "simple_transmission.cpp:210:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "simple_transmission.cpp",
    "line": 213,
    "function": null,
    "comment": "simple_transmission.cpp:213:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "simple_transmission.cpp",
    "line": 214,
    "function": null,
    "comment": "simple_transmission.cpp:214:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "simple_transmission.cpp",
    "line": 216,
    "function": null,
    "comment": "simple_transmission.cpp:216:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Unary operators should have no whitespace around them.",
    "file": "simple_transmission.cpp",
    "line": 219,
    "function": null,
    "comment": "simple_transmission.cpp:219:  Extra space for operator !   [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","unary-operator"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "simple_transmission.cpp",
    "line": 220,
    "function": null,
    "comment": "simple_transmission.cpp:220:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "simple_transmission.cpp",
    "line": 226,
    "function": null,
    "comment": "simple_transmission.cpp:226:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "simple_transmission.cpp",
    "line": 226,
    "function": null,
    "comment": "simple_transmission.cpp:226:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "simple_transmission.cpp",
    "line": 226,
    "function": null,
    "comment": "simple_transmission.cpp:226:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "simple_transmission.cpp",
    "line": 227,
    "function": null,
    "comment": "simple_transmission.cpp:227:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "simple_transmission.cpp",
    "line": 228,
    "function": null,
    "comment": "simple_transmission.cpp:228:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "simple_transmission.cpp",
    "line": 229,
    "function": null,
    "comment": "simple_transmission.cpp:229:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "simple_transmission.cpp",
    "line": 231,
    "function": null,
    "comment": "simple_transmission.cpp:231:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "simple_transmission.cpp",
    "line": 232,
    "function": null,
    "comment": "simple_transmission.cpp:232:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "simple_transmission.cpp",
    "line": 234,
    "function": null,
    "comment": "simple_transmission.cpp:234:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "simple_transmission.cpp",
    "line": 240,
    "function": null,
    "comment": "simple_transmission.cpp:240:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "simple_transmission.cpp",
    "line": 245,
    "function": null,
    "comment": "simple_transmission.cpp:245:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "simple_transmission.cpp",
    "line": 248,
    "function": null,
    "comment": "simple_transmission.cpp:248:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "simple_transmission.cpp",
    "line": 255,
    "function": null,
    "comment": "simple_transmission.cpp:255:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "simple_transmission.cpp",
    "line": 258,
    "function": null,
    "comment": "simple_transmission.cpp:258:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "simple_transmission.cpp",
    "line": 260,
    "function": null,
    "comment": "simple_transmission.cpp:260:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "simple_transmission.cpp",
    "line": 262,
    "function": null,
    "comment": "simple_transmission.cpp:262:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "simple_transmission.cpp",
    "line": 264,
    "function": null,
    "comment": "simple_transmission.cpp:264:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "simple_transmission.cpp",
    "line": 254,
    "function": null,
    "comment": "simple_transmission.cpp:254:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint_calibration_simulator.cpp",
    "line": 36,
    "function": null,
    "comment": "joint_calibration_simulator.cpp:36:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "joint_calibration_simulator.cpp",
    "line": 41,
    "function": null,
    "comment": "joint_calibration_simulator.cpp:41:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_calibration_simulator.cpp",
    "line": 45,
    "function": null,
    "comment": "joint_calibration_simulator.cpp:45:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_calibration_simulator.cpp",
    "line": 48,
    "function": null,
    "comment": "joint_calibration_simulator.cpp:48:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_calibration_simulator.cpp",
    "line": 49,
    "function": null,
    "comment": "joint_calibration_simulator.cpp:49:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint_calibration_simulator.cpp",
    "line": 53,
    "function": null,
    "comment": "joint_calibration_simulator.cpp:53:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "joint_calibration_simulator.cpp",
    "line": 53,
    "function": null,
    "comment": "joint_calibration_simulator.cpp:53:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint_calibration_simulator.cpp",
    "line": 54,
    "function": null,
    "comment": "joint_calibration_simulator.cpp:54:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "joint_calibration_simulator.cpp",
    "line": 54,
    "function": null,
    "comment": "joint_calibration_simulator.cpp:54:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint_calibration_simulator.cpp",
    "line": 58,
    "function": null,
    "comment": "joint_calibration_simulator.cpp:58:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "joint_calibration_simulator.cpp",
    "line": 58,
    "function": null,
    "comment": "joint_calibration_simulator.cpp:58:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "joint_calibration_simulator.cpp",
    "line": 63,
    "function": null,
    "comment": "joint_calibration_simulator.cpp:63:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "joint_calibration_simulator.cpp",
    "line": 66,
    "function": null,
    "comment": "joint_calibration_simulator.cpp:66:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint_calibration_simulator.cpp",
    "line": 68,
    "function": null,
    "comment": "joint_calibration_simulator.cpp:68:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "joint_calibration_simulator.cpp",
    "line": 68,
    "function": null,
    "comment": "joint_calibration_simulator.cpp:68:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint_calibration_simulator.cpp",
    "line": 72,
    "function": null,
    "comment": "joint_calibration_simulator.cpp:72:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "joint_calibration_simulator.cpp",
    "line": 72,
    "function": null,
    "comment": "joint_calibration_simulator.cpp:72:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_calibration_simulator.cpp",
    "line": 85,
    "function": null,
    "comment": "joint_calibration_simulator.cpp:85:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_calibration_simulator.cpp",
    "line": 86,
    "function": null,
    "comment": "joint_calibration_simulator.cpp:86:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_calibration_simulator.cpp",
    "line": 91,
    "function": null,
    "comment": "joint_calibration_simulator.cpp:91:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_calibration_simulator.cpp",
    "line": 92,
    "function": null,
    "comment": "joint_calibration_simulator.cpp:92:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint_calibration_simulator.cpp",
    "line": 101,
    "function": null,
    "comment": "joint_calibration_simulator.cpp:101:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "joint_calibration_simulator.cpp",
    "line": 101,
    "function": null,
    "comment": "joint_calibration_simulator.cpp:101:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint_calibration_simulator.cpp",
    "line": 103,
    "function": null,
    "comment": "joint_calibration_simulator.cpp:103:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "joint_calibration_simulator.cpp",
    "line": 103,
    "function": null,
    "comment": "joint_calibration_simulator.cpp:103:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "joint_calibration_simulator.cpp",
    "line": 109,
    "function": null,
    "comment": "joint_calibration_simulator.cpp:109:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "joint_calibration_simulator.cpp",
    "line": 109,
    "function": null,
    "comment": "joint_calibration_simulator.cpp:109:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint_calibration_simulator.cpp",
    "line": 109,
    "function": null,
    "comment": "joint_calibration_simulator.cpp:109:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "joint_calibration_simulator.cpp",
    "line": 109,
    "function": null,
    "comment": "joint_calibration_simulator.cpp:109:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "joint_calibration_simulator.cpp",
    "line": 111,
    "function": null,
    "comment": "joint_calibration_simulator.cpp:111:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "joint_calibration_simulator.cpp",
    "line": 116,
    "function": null,
    "comment": "joint_calibration_simulator.cpp:116:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "joint_calibration_simulator.cpp",
    "line": 116,
    "function": null,
    "comment": "joint_calibration_simulator.cpp:116:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint_calibration_simulator.cpp",
    "line": 116,
    "function": null,
    "comment": "joint_calibration_simulator.cpp:116:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "joint_calibration_simulator.cpp",
    "line": 116,
    "function": null,
    "comment": "joint_calibration_simulator.cpp:116:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint_calibration_simulator.cpp",
    "line": 123,
    "function": null,
    "comment": "joint_calibration_simulator.cpp:123:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "joint_calibration_simulator.cpp",
    "line": 123,
    "function": null,
    "comment": "joint_calibration_simulator.cpp:123:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_calibration_simulator.cpp",
    "line": 125,
    "function": null,
    "comment": "joint_calibration_simulator.cpp:125:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "joint_calibration_simulator.cpp",
    "line": 125,
    "function": null,
    "comment": "joint_calibration_simulator.cpp:125:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "joint_calibration_simulator.cpp",
    "line": 126,
    "function": null,
    "comment": "joint_calibration_simulator.cpp:126:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint_calibration_simulator.cpp",
    "line": 127,
    "function": null,
    "comment": "joint_calibration_simulator.cpp:127:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "joint_calibration_simulator.cpp",
    "line": 127,
    "function": null,
    "comment": "joint_calibration_simulator.cpp:127:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "joint_calibration_simulator.cpp",
    "line": 127,
    "function": null,
    "comment": "joint_calibration_simulator.cpp:127:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_calibration_simulator.cpp",
    "line": 128,
    "function": null,
    "comment": "joint_calibration_simulator.cpp:128:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "joint_calibration_simulator.cpp",
    "line": 128,
    "function": null,
    "comment": "joint_calibration_simulator.cpp:128:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_calibration_simulator.cpp",
    "line": 129,
    "function": null,
    "comment": "joint_calibration_simulator.cpp:129:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "joint_calibration_simulator.cpp",
    "line": 133,
    "function": null,
    "comment": "joint_calibration_simulator.cpp:133:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_calibration_simulator.cpp",
    "line": 134,
    "function": null,
    "comment": "joint_calibration_simulator.cpp:134:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "joint_calibration_simulator.cpp",
    "line": 139,
    "function": null,
    "comment": "joint_calibration_simulator.cpp:139:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "joint_calibration_simulator.cpp",
    "line": 139,
    "function": null,
    "comment": "joint_calibration_simulator.cpp:139:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint_calibration_simulator.cpp",
    "line": 139,
    "function": null,
    "comment": "joint_calibration_simulator.cpp:139:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "joint_calibration_simulator.cpp",
    "line": 139,
    "function": null,
    "comment": "joint_calibration_simulator.cpp:139:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "joint_calibration_simulator.cpp",
    "line": 139,
    "function": null,
    "comment": "joint_calibration_simulator.cpp:139:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_calibration_simulator.cpp",
    "line": 140,
    "function": null,
    "comment": "joint_calibration_simulator.cpp:140:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "joint_calibration_simulator.cpp",
    "line": 140,
    "function": null,
    "comment": "joint_calibration_simulator.cpp:140:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_calibration_simulator.cpp",
    "line": 141,
    "function": null,
    "comment": "joint_calibration_simulator.cpp:141:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "joint_calibration_simulator.cpp",
    "line": 145,
    "function": null,
    "comment": "joint_calibration_simulator.cpp:145:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_calibration_simulator.cpp",
    "line": 146,
    "function": null,
    "comment": "joint_calibration_simulator.cpp:146:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "joint_calibration_simulator.cpp",
    "line": 163,
    "function": null,
    "comment": "joint_calibration_simulator.cpp:163:  Namespace should be terminated with '// namespace pr2_mechanism_model'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "joint_calibration_simulator.cpp",
    "line": 163,
    "function": null,
    "comment": "joint_calibration_simulator.cpp:163:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "joint_calibration_simulator.cpp",
    "line": 163,
    "function": null,
    "comment": "joint_calibration_simulator.cpp:163:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "pr2_gripper_transmission.cpp",
    "line": 82,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:82:  Found C system header after C++ system header. Should be: pr2_gripper_transmission.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "pr2_gripper_transmission.cpp",
    "line": 83,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:83:  Found C system header after C++ system header. Should be: pr2_gripper_transmission.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 87,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:87:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 88,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:88:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 94,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:94:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 96,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:96:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 98,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:98:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 99,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:99:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 101,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:101:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 104,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:104:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 105,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:105:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 106,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:106:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 112,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:112:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 113,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:113:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 115,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:115:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 116,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:116:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 124,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:124:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 129,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:129:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 132,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:132:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 136,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:136:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 137,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:137:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 142,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:142:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 143,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:143:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 146,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:146:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 156,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:156:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 157,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:157:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 161,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:161:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 165,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:165:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 166,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:166:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 173,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:173:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 175,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:175:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 177,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:177:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "Statements that are not part of an if body should have an indentation level equal to or less than the if statement.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 177,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:177:  If/else bodies with multiple statements require braces  [readability/braces] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","indentation","if-else","ambiguous-indentation"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 179,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:179:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 183,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:183:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 184,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:184:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 191,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:191:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 193,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:193:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 195,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:195:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "Statements that are not part of an if body should have an indentation level equal to or less than the if statement.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 195,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:195:  If/else bodies with multiple statements require braces  [readability/braces] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","indentation","if-else","ambiguous-indentation"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 197,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:197:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 201,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:201:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 202,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:202:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 209,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:209:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 211,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:211:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 213,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:213:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "Statements that are not part of an if body should have an indentation level equal to or less than the if statement.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 213,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:213:  If/else bodies with multiple statements require braces  [readability/braces] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","indentation","if-else","ambiguous-indentation"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 215,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:215:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 219,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:219:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 220,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:220:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 226,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:226:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 228,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:228:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 230,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:230:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "Statements that are not part of an if body should have an indentation level equal to or less than the if statement.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 230,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:230:  If/else bodies with multiple statements require braces  [readability/braces] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","indentation","if-else","ambiguous-indentation"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 232,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:232:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 236,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:236:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 237,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:237:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 243,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:243:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 245,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:245:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 247,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:247:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "Statements that are not part of an if body should have an indentation level equal to or less than the if statement.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 247,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:247:  If/else bodies with multiple statements require braces  [readability/braces] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","indentation","if-else","ambiguous-indentation"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 249,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:249:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 253,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:253:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 254,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:254:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 260,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:260:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 262,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:262:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 264,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:264:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "Statements that are not part of an if body should have an indentation level equal to or less than the if statement.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 264,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:264:  If/else bodies with multiple statements require braces  [readability/braces] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","indentation","if-else","ambiguous-indentation"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 266,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:266:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 270,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:270:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 271,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:271:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 277,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:277:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 279,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:279:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 281,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:281:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "Statements that are not part of an if body should have an indentation level equal to or less than the if statement.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 281,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:281:  If/else bodies with multiple statements require braces  [readability/braces] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","indentation","if-else","ambiguous-indentation"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 283,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:283:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 287,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:287:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 288,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:288:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 294,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:294:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 296,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:296:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 298,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:298:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "Statements that are not part of an if body should have an indentation level equal to or less than the if statement.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 298,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:298:  If/else bodies with multiple statements require braces  [readability/braces] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","indentation","if-else","ambiguous-indentation"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 300,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:300:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 304,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:304:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 305,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:305:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 311,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:311:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 313,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:313:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 315,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:315:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "Statements that are not part of an if body should have an indentation level equal to or less than the if statement.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 315,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:315:  If/else bodies with multiple statements require braces  [readability/braces] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","indentation","if-else","ambiguous-indentation"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 317,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:317:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 321,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:321:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 322,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:322:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 328,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:328:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 330,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:330:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 332,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:332:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "Statements that are not part of an if body should have an indentation level equal to or less than the if statement.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 332,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:332:  If/else bodies with multiple statements require braces  [readability/braces] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","indentation","if-else","ambiguous-indentation"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 334,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:334:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 338,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:338:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 339,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:339:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 345,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:345:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 346,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:346:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 349,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:349:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 350,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:350:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 353,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:353:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 366,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:366:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 367,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:367:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 370,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:370:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 375,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:375:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 376,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:376:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 377,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:377:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 384,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:384:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 385,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:385:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 389,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:389:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 393,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:393:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 394,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:394:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 401,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:401:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 404,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:404:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 406,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:406:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 420,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:420:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 422,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:422:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 423,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:423:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 423,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:423:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 424,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:424:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 426,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:426:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 429,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:429:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 429,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:429:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 433,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:433:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 435,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:435:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 435,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:435:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "pr2_gripper_transmission.cpp",
    "line": 437,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:437:  Extra space after (  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 440,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:440:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 446,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:446:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 446,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:446:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 451,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:451:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 452,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:452:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 452,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:452:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 452,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:452:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 454,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:454:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 454,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:454:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 455,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:455:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 457,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:457:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "pr2_gripper_transmission.cpp",
    "line": 459,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:459:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 459,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:459:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 470,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:470:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 471,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:471:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 479,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:479:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 479,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:479:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 480,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:480:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 487,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:487:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 495,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:495:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 496,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:496:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 498,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:498:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 500,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:500:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 500,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:500:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 506,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:506:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "pr2_gripper_transmission.cpp",
    "line": 507,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:507:  Extra space after (  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 507,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:507:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 511,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:511:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 512,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:512:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "pr2_gripper_transmission.cpp",
    "line": 513,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:513:  Extra space after (  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 513,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:513:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 518,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:518:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "pr2_gripper_transmission.cpp",
    "line": 518,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:518:  Extra space after (  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 527,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:527:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 528,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:528:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 528,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:528:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 528,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:528:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "pr2_gripper_transmission.cpp",
    "line": 529,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:529:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 529,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:529:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 530,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:530:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 539,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:539:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 540,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:540:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 544,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:544:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else clause of an else-if clause should be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 545,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:545:  Else clause should never be on same line as else (use 2 lines)  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","google-cpp","if-else"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 548,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:548:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 549,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:549:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 550,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:550:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 551,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:551:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 551,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:551:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 553,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:553:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 554,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:554:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 554,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:554:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 565,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:565:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 565,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:565:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 569,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:569:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 571,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:571:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 574,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:574:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 577,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:577:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 577,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:577:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 580,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:580:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 580,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:580:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 583,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:583:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 587,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:587:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 589,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:589:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 601,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:601:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 601,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:601:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 604,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:604:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 610,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:610:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 610,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:610:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 615,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:615:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 618,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:618:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 621,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:621:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 622,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:622:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 626,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:626:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 627,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:627:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 631,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:631:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 632,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:632:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 632,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:632:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 634,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:634:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 640,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:640:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 643,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:643:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 643,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:643:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 645,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:645:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 646,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:646:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 647,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:647:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 647,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:647:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 649,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:649:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 650,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:650:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 651,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:651:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 652,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:652:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 656,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:656:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 662,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:662:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 667,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:667:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 668,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:668:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 670,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:670:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 676,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:676:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 681,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:681:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 684,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:684:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 685,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:685:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 689,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:689:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 693,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:693:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 694,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:694:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 694,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:694:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 697,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:697:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 699,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:699:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 701,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:701:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 703,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:703:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 705,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:705:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 707,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:707:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 712,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:712:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 717,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:717:  Missing spaces around >  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 720,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:720:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 723,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:723:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 723,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:723:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 724,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:724:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 724,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:724:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 727,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:727:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 730,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:730:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 733,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:733:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 733,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:733:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 741,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:741:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 150,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:150:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 711,
    "function": null,
    "comment": "pr2_gripper_transmission.cpp:711:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "test_wrist_transmission.cpp",
    "line": 33,
    "function": null,
    "comment": "test_wrist_transmission.cpp:33:  Include 'pr2_hardware_interface/hardware_interface.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "test_wrist_transmission.cpp",
    "line": 35,
    "function": null,
    "comment": "test_wrist_transmission.cpp:35:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "test_wrist_transmission.cpp",
    "line": 36,
    "function": null,
    "comment": "test_wrist_transmission.cpp:36:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "test_wrist_transmission.cpp",
    "line": 37,
    "function": null,
    "comment": "test_wrist_transmission.cpp:37:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "test_wrist_transmission.cpp",
    "line": 42,
    "function": null,
    "comment": "test_wrist_transmission.cpp:42:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "test_wrist_transmission.cpp",
    "line": 43,
    "function": null,
    "comment": "test_wrist_transmission.cpp:43:  public: should be indented +1 space inside class BaseFixture  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "test_wrist_transmission.cpp",
    "line": 48,
    "function": null,
    "comment": "test_wrist_transmission.cpp:48:  protected: should be indented +1 space inside class BaseFixture  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "test_wrist_transmission.cpp",
    "line": 49,
    "function": null,
    "comment": "test_wrist_transmission.cpp:49:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "test_wrist_transmission.cpp",
    "line": 51,
    "function": null,
    "comment": "test_wrist_transmission.cpp:51:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "test_wrist_transmission.cpp",
    "line": 63,
    "function": null,
    "comment": "test_wrist_transmission.cpp:63:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "test_wrist_transmission.cpp",
    "line": 63,
    "function": null,
    "comment": "test_wrist_transmission.cpp:63:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "test_wrist_transmission.cpp",
    "line": 67,
    "function": null,
    "comment": "test_wrist_transmission.cpp:67:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "test_wrist_transmission.cpp",
    "line": 77,
    "function": null,
    "comment": "test_wrist_transmission.cpp:77:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "test_wrist_transmission.cpp",
    "line": 79,
    "function": null,
    "comment": "test_wrist_transmission.cpp:79:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "test_wrist_transmission.cpp",
    "line": 93,
    "function": null,
    "comment": "test_wrist_transmission.cpp:93:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "test_wrist_transmission.cpp",
    "line": 102,
    "function": null,
    "comment": "test_wrist_transmission.cpp:102:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "test_wrist_transmission.cpp",
    "line": 111,
    "function": null,
    "comment": "test_wrist_transmission.cpp:111:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "test_wrist_transmission.cpp",
    "line": 121,
    "function": null,
    "comment": "test_wrist_transmission.cpp:121:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "test_wrist_transmission.cpp",
    "line": 123,
    "function": null,
    "comment": "test_wrist_transmission.cpp:123:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "test_wrist_transmission.cpp",
    "line": 137,
    "function": null,
    "comment": "test_wrist_transmission.cpp:137:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "test_wrist_transmission.cpp",
    "line": 147,
    "function": null,
    "comment": "test_wrist_transmission.cpp:147:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "test_wrist_transmission.cpp",
    "line": 149,
    "function": null,
    "comment": "test_wrist_transmission.cpp:149:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "test_wrist_transmission.cpp",
    "line": 163,
    "function": null,
    "comment": "test_wrist_transmission.cpp:163:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "test_wrist_transmission.cpp",
    "line": 172,
    "function": null,
    "comment": "test_wrist_transmission.cpp:172:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "test_wrist_transmission.cpp",
    "line": 182,
    "function": null,
    "comment": "test_wrist_transmission.cpp:182:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "test_wrist_transmission.cpp",
    "line": 183,
    "function": null,
    "comment": "test_wrist_transmission.cpp:183:  public: should be indented +1 space inside class PropagateSanityCheck  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "test_wrist_transmission.cpp",
    "line": 187,
    "function": null,
    "comment": "test_wrist_transmission.cpp:187:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "test_wrist_transmission.cpp",
    "line": 194,
    "function": null,
    "comment": "test_wrist_transmission.cpp:194:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "test_wrist_transmission.cpp",
    "line": 200,
    "function": null,
    "comment": "test_wrist_transmission.cpp:200:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "test_wrist_transmission.cpp",
    "line": 219,
    "function": null,
    "comment": "test_wrist_transmission.cpp:219:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "test_wrist_transmission.cpp",
    "line": 224,
    "function": null,
    "comment": "test_wrist_transmission.cpp:224:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "test_wrist_transmission.cpp",
    "line": 225,
    "function": null,
    "comment": "test_wrist_transmission.cpp:225:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "test_wrist_transmission.cpp",
    "line": 229,
    "function": null,
    "comment": "test_wrist_transmission.cpp:229:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "test_wrist_transmission.cpp",
    "line": 234,
    "function": null,
    "comment": "test_wrist_transmission.cpp:234:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "test_wrist_transmission.cpp",
    "line": 235,
    "function": null,
    "comment": "test_wrist_transmission.cpp:235:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "test_wrist_transmission.cpp",
    "line": 239,
    "function": null,
    "comment": "test_wrist_transmission.cpp:239:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "test_wrist_transmission.cpp",
    "line": 244,
    "function": null,
    "comment": "test_wrist_transmission.cpp:244:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "test_wrist_transmission.cpp",
    "line": 245,
    "function": null,
    "comment": "test_wrist_transmission.cpp:245:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "test_wrist_transmission.cpp",
    "line": 249,
    "function": null,
    "comment": "test_wrist_transmission.cpp:249:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "test_wrist_transmission.cpp",
    "line": 254,
    "function": null,
    "comment": "test_wrist_transmission.cpp:254:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "test_wrist_transmission.cpp",
    "line": 255,
    "function": null,
    "comment": "test_wrist_transmission.cpp:255:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "test_wrist_transmission.cpp",
    "line": 260,
    "function": null,
    "comment": "test_wrist_transmission.cpp:260:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "test_chain.cpp",
    "line": 32,
    "function": null,
    "comment": "test_chain.cpp:32:  Found C system header after C++ system header. Should be: test_chain.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "test_chain.cpp",
    "line": 34,
    "function": null,
    "comment": "test_chain.cpp:34:  Include 'pr2_mechanism_model/chain.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "test_chain.cpp",
    "line": 35,
    "function": null,
    "comment": "test_chain.cpp:35:  Found C system header after other header. Should be: test_chain.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "test_chain.cpp",
    "line": 37,
    "function": null,
    "comment": "test_chain.cpp:37:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "test_chain.cpp",
    "line": 38,
    "function": null,
    "comment": "test_chain.cpp:38:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "test_chain.cpp",
    "line": 43,
    "function": null,
    "comment": "test_chain.cpp:43:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "test_chain.cpp",
    "line": 44,
    "function": null,
    "comment": "test_chain.cpp:44:  protected: should be indented +1 space inside class ShortChainTest  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "test_chain.cpp",
    "line": 56,
    "function": null,
    "comment": "test_chain.cpp:56:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "test_chain.cpp",
    "line": 66,
    "function": null,
    "comment": "test_chain.cpp:66:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "test_chain.cpp",
    "line": 83,
    "function": null,
    "comment": "test_chain.cpp:83:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "test_chain.cpp",
    "line": 83,
    "function": null,
    "comment": "test_chain.cpp:83:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "test_joint_calibration_simulator.cpp",
    "line": 38,
    "function": null,
    "comment": "test_joint_calibration_simulator.cpp:38:  Found C system header after C++ system header. Should be: test_joint_calibration_simulator.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "test_joint_calibration_simulator.cpp",
    "line": 39,
    "function": null,
    "comment": "test_joint_calibration_simulator.cpp:39:  Found C system header after C++ system header. Should be: test_joint_calibration_simulator.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "test_joint_calibration_simulator.cpp",
    "line": 40,
    "function": null,
    "comment": "test_joint_calibration_simulator.cpp:40:  Found C system header after C++ system header. Should be: test_joint_calibration_simulator.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "test_joint_calibration_simulator.cpp",
    "line": 43,
    "function": null,
    "comment": "test_joint_calibration_simulator.cpp:43:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "test_joint_calibration_simulator.cpp",
    "line": 49,
    "function": null,
    "comment": "test_joint_calibration_simulator.cpp:49:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "test_joint_calibration_simulator.cpp",
    "line": 50,
    "function": null,
    "comment": "test_joint_calibration_simulator.cpp:50:  public: should be indented +1 space inside class TestParser  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "test_joint_calibration_simulator.cpp",
    "line": 51,
    "function": null,
    "comment": "test_joint_calibration_simulator.cpp:51:  Do not leave a blank line after 'public:'  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "test_joint_calibration_simulator.cpp",
    "line": 63,
    "function": null,
    "comment": "test_joint_calibration_simulator.cpp:63:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "To check for equality, use CHECK_EQ(a, b) instead of CHECK(a == b).",
    "file": "test_joint_calibration_simulator.cpp",
    "line": 64,
    "function": null,
    "comment": "test_joint_calibration_simulator.cpp:64:  Consider using ASSERT_EQ instead of ASSERT_TRUE(a == b)  [readability/check] [2]",
    "tags": ["code-standards","google-cpp","macros","equality"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "test_joint_calibration_simulator.cpp",
    "line": 69,
    "function": null,
    "comment": "test_joint_calibration_simulator.cpp:69:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "test_joint_calibration_simulator.cpp",
    "line": 70,
    "function": null,
    "comment": "test_joint_calibration_simulator.cpp:70:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "test_joint_calibration_simulator.cpp",
    "line": 83,
    "function": null,
    "comment": "test_joint_calibration_simulator.cpp:83:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "test_joint_calibration_simulator.cpp",
    "line": 90,
    "function": null,
    "comment": "test_joint_calibration_simulator.cpp:90:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "test_joint_calibration_simulator.cpp",
    "line": 97,
    "function": null,
    "comment": "test_joint_calibration_simulator.cpp:97:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "test_joint_calibration_simulator.cpp",
    "line": 105,
    "function": null,
    "comment": "test_joint_calibration_simulator.cpp:105:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "test_joint_calibration_simulator.cpp",
    "line": 108,
    "function": null,
    "comment": "test_joint_calibration_simulator.cpp:108:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "test_joint_calibration_simulator.cpp",
    "line": 116,
    "function": null,
    "comment": "test_joint_calibration_simulator.cpp:116:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "test_joint_calibration_simulator.cpp",
    "line": 119,
    "function": null,
    "comment": "test_joint_calibration_simulator.cpp:119:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "test_joint_calibration_simulator.cpp",
    "line": 131,
    "function": null,
    "comment": "test_joint_calibration_simulator.cpp:131:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "test_joint_calibration_simulator.cpp",
    "line": 137,
    "function": null,
    "comment": "test_joint_calibration_simulator.cpp:137:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "test_joint_calibration_simulator.cpp",
    "line": 144,
    "function": null,
    "comment": "test_joint_calibration_simulator.cpp:144:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "test_joint_calibration_simulator.cpp",
    "line": 147,
    "function": null,
    "comment": "test_joint_calibration_simulator.cpp:147:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "test_joint_calibration_simulator.cpp",
    "line": 155,
    "function": null,
    "comment": "test_joint_calibration_simulator.cpp:155:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "test_joint_calibration_simulator.cpp",
    "line": 158,
    "function": null,
    "comment": "test_joint_calibration_simulator.cpp:158:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "test_joint_calibration_simulator.cpp",
    "line": 162,
    "function": null,
    "comment": "test_joint_calibration_simulator.cpp:162:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "test_joint_calibration_simulator.cpp",
    "line": 166,
    "function": null,
    "comment": "test_joint_calibration_simulator.cpp:166:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "test_joint_calibration_simulator.cpp",
    "line": 169,
    "function": null,
    "comment": "test_joint_calibration_simulator.cpp:169:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "test_joint_calibration_simulator.cpp",
    "line": 173,
    "function": null,
    "comment": "test_joint_calibration_simulator.cpp:173:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "test_joint_calibration_simulator.cpp",
    "line": 181,
    "function": null,
    "comment": "test_joint_calibration_simulator.cpp:181:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "test_joint_calibration_simulator.cpp",
    "line": 187,
    "function": null,
    "comment": "test_joint_calibration_simulator.cpp:187:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "test_joint_calibration_simulator.cpp",
    "line": 194,
    "function": null,
    "comment": "test_joint_calibration_simulator.cpp:194:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "test_joint_calibration_simulator.cpp",
    "line": 197,
    "function": null,
    "comment": "test_joint_calibration_simulator.cpp:197:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "test_joint_calibration_simulator.cpp",
    "line": 205,
    "function": null,
    "comment": "test_joint_calibration_simulator.cpp:205:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "test_joint_calibration_simulator.cpp",
    "line": 208,
    "function": null,
    "comment": "test_joint_calibration_simulator.cpp:208:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "test_joint_calibration_simulator.cpp",
    "line": 221,
    "function": null,
    "comment": "test_joint_calibration_simulator.cpp:221:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "chain.cpp",
    "line": 68,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "chain.cpp",
    "line": 86,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "chain.cpp",
    "line": 95,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "chain.cpp",
    "line": 104,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "chain.cpp",
    "line": 112,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "chain.cpp",
    "line": 129,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "chain.cpp",
    "line": 137,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "chain.cpp",
    "line": 146,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "chain.cpp",
    "line": 153,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "chain.cpp",
    "line": 160,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "chain.cpp",
    "line": 165,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Declarations should be at the smallest feasible scope.",
    "file": "pr2_belt_transmission.cpp",
    "line": 447,
    "function": null,
    "comment": "The scope of the variable 'motor_pos' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:void f(int x){    int i =",
    "tags": ["code-standards","jsf-av-cpp","scope"]
  },
  {
    "rule": "Declarations should be at the smallest feasible scope.",
    "file": "pr2_belt_transmission.cpp",
    "line": 447,
    "function": null,
    "comment": "The scope of the variable 'motor_vel' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:void f(int x){    int i =",
    "tags": ["code-standards","jsf-av-cpp","scope"]
  },
  {
    "rule": "Declarations should be at the smallest feasible scope.",
    "file": "pr2_belt_transmission.cpp",
    "line": 447,
    "function": null,
    "comment": "The scope of the variable 'motor_acc' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:void f(int x){    int i =",
    "tags": ["code-standards","jsf-av-cpp","scope"]
  },
  {
    "rule": "Declarations should be at the smallest feasible scope.",
    "file": "pr2_belt_transmission.cpp",
    "line": 448,
    "function": null,
    "comment": "The scope of the variable 'joint_pos' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:void f(int x){    int i =",
    "tags": ["code-standards","jsf-av-cpp","scope"]
  },
  {
    "rule": "Declarations should be at the smallest feasible scope.",
    "file": "pr2_belt_transmission.cpp",
    "line": 448,
    "function": null,
    "comment": "The scope of the variable 'joint_vel' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:void f(int x){    int i =",
    "tags": ["code-standards","jsf-av-cpp","scope"]
  },
  {
    "rule": "Declarations should be at the smallest feasible scope.",
    "file": "pr2_belt_transmission.cpp",
    "line": 541,
    "function": null,
    "comment": "The scope of the variable 'spring_force' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:void f(int x){    int ",
    "tags": ["code-standards","jsf-av-cpp","scope"]
  },
  {
    "rule": "Do not write code that expects floating point calculations to yield exact results.",
    "file": "pr2_belt_transmission.cpp",
    "line": 342,
    "function": null,
    "comment": "Found float equality check.",
    "tags": ["hicpp","code-standards","floats","floating-point"]
  },
  {
    "rule": "Do not write code that expects floating point calculations to yield exact results.",
    "file": "pr2_belt_transmission.cpp",
    "line": 397,
    "function": null,
    "comment": "Found float equality check.",
    "tags": ["hicpp","code-standards","floats","floating-point"]
  },
  {
    "rule": "Do not write code that expects floating point calculations to yield exact results.",
    "file": "pr2_belt_transmission.cpp",
    "line": 474,
    "function": null,
    "comment": "Found float equality check.",
    "tags": ["hicpp","code-standards","floats","floating-point"]
  },
  {
    "rule": "Do not write code that expects floating point calculations to yield exact results.",
    "file": "pr2_belt_transmission.cpp",
    "line": 557,
    "function": null,
    "comment": "Found float equality check.",
    "tags": ["hicpp","code-standards","floats","floating-point"]
  },
  {
    "rule": "Declarations should be at the smallest feasible scope.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 627,
    "function": null,
    "comment": "The scope of the variable 'dtheta_dt' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:void f(int x){    int i =",
    "tags": ["code-standards","jsf-av-cpp","scope"]
  },
  {
    "rule": "Ensure that no expression is redundant.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 326,
    "function": null,
    "comment": "Variable 'r_str' is assigned a value that is never used.",
    "tags": ["hicpp","code-standards","redundancy"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "pr2_gripper_transmission.cpp",
    "line": 588,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "robot.cpp",
    "line": 81,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "robot.cpp",
    "line": 118,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "robot.cpp",
    "line": 121,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "robot.cpp",
    "line": 129,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "robot.cpp",
    "line": 141,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "robot.cpp",
    "line": 158,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "robot.cpp",
    "line": 159,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "robot.cpp",
    "line": 162,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "robot.cpp",
    "line": 173,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "robot.cpp",
    "line": 174,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "robot.cpp",
    "line": 177,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "robot.cpp",
    "line": 214,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "robot.cpp",
    "line": 220,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "robot.cpp",
    "line": 228,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "robot.cpp",
    "line": 237,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "robot.cpp",
    "line": 238,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "robot.cpp",
    "line": 249,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "robot.cpp",
    "line": 257,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "robot.cpp",
    "line": 263,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "robot.cpp",
    "line": 272,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "tree.cpp",
    "line": 91,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "test_chain.cpp",
    "line": 83,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Use at most one level of pointer indirection.",
    "file": "test_joint_calibration_simulator.cpp",
    "line": 46,
    "function": null,
    "comment": "Found two or more levels of pointer indirection.",
    "tags": ["hicpp","code-standards","pointers","multiple-pointers"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "test_joint_calibration_simulator.cpp",
    "line": 45,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "test_joint_calibration_simulator.cpp",
    "line": 220,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "test_wrist_transmission.cpp",
    "line": 259,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "test_chain.cpp",
    "line": 48,
    "function": null,
    "comment": "The function 'SetUp' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "test_chain.cpp",
    "line": 50,
    "function": null,
    "comment": "The function 'TearDown' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "chain.cpp",
    "line": 157,
    "function": null,
    "comment": "The function 'addEfforts' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "chain.cpp",
    "line": 110,
    "function": null,
    "comment": "The function 'allCalibrated' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "robot.cpp",
    "line": 247,
    "function": null,
    "comment": "The function 'enforceSafety' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "chain.cpp",
    "line": 101,
    "function": null,
    "comment": "The function 'getEfforts' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "chain.cpp",
    "line": 83,
    "function": null,
    "comment": "The function 'getPositions' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "chain.cpp",
    "line": 92,
    "function": null,
    "comment": "The function 'getVelocities' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "robot.cpp",
    "line": 235,
    "function": null,
    "comment": "The function 'isHalted' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "robot.cpp",
    "line": 270,
    "function": null,
    "comment": "The function 'propagateActuatorEffortToJointEffort' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "robot.cpp",
    "line": 212,
    "function": null,
    "comment": "The function 'propagateActuatorPositionToJointPosition' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "robot.cpp",
    "line": 226,
    "function": null,
    "comment": "The function 'propagateJointEffortToActuatorEffort' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "robot.cpp",
    "line": 261,
    "function": null,
    "comment": "The function 'propagateJointPositionToActuatorPosition' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "chain.cpp",
    "line": 150,
    "function": null,
    "comment": "The function 'setEfforts' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "chain.cpp",
    "line": 120,
    "function": null,
    "comment": "The function 'toKDL' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "robot.cpp",
    "line": 255,
    "function": null,
    "comment": "The function 'zeroCommands' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "pr2_belt_transmission.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "pr2_belt_transmission.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "pr2_belt_transmission.cpp",
    "line": 39,
    "function": "PLUGINLIB_EXPORT_CLASS",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 15",
    "file": "pr2_belt_transmission.cpp",
    "line": 39,
    "function": "PLUGINLIB_EXPORT_CLASS",
    "comment": "CC is greater than 15",
    "tags": ["metrics","ros","cyclomatic-complexity","kth"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "wrist_transmission.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "wrist_transmission.cpp",
    "line": 196,
    "function": "initXml",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 15",
    "file": "wrist_transmission.cpp",
    "line": 196,
    "function": "initXml",
    "comment": "CC is greater than 15",
    "tags": ["metrics","ros","cyclomatic-complexity","kth"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "wrist_transmission.cpp",
    "line": 68,
    "function": "initXml",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 15",
    "file": "wrist_transmission.cpp",
    "line": 68,
    "function": "initXml",
    "comment": "CC is greater than 15",
    "tags": ["metrics","ros","cyclomatic-complexity","kth"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "robot.cpp",
    "line": 51,
    "function": "initXml",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "joint.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "joint.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "tree.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "tree.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "simple_transmission.cpp",
    "line": 45,
    "function": "PLUGINLIB_EXPORT_CLASS",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 15",
    "file": "simple_transmission.cpp",
    "line": 45,
    "function": "PLUGINLIB_EXPORT_CLASS",
    "comment": "CC is greater than 15",
    "tags": ["metrics","ros","cyclomatic-complexity","kth"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "simple_transmission.cpp",
    "line": 127,
    "function": "initXml",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "joint_calibration_simulator.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "joint_calibration_simulator.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "joint_calibration_simulator.cpp",
    "line": 48,
    "function": "GetJointCalibrationInfo",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "joint_calibration_simulator.cpp",
    "line": 91,
    "function": "simulateJointCalibration",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "pr2_gripper_transmission.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "pr2_gripper_transmission.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "pr2_gripper_transmission.cpp",
    "line": 128,
    "function": "initXml",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 15",
    "file": "pr2_gripper_transmission.cpp",
    "line": 128,
    "function": "initXml",
    "comment": "CC is greater than 15",
    "tags": ["metrics","ros","cyclomatic-complexity","kth"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "test_wrist_transmission.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Maximum coupling between objects: 5",
    "file": "test_wrist_transmission.cpp",
    "line": null,
    "function": null,
    "comment": "CBO is greater than 5, BaseFixture, 7",
    "tags": ["metrics","nasa-satc","ros","coupling"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "test_chain.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "test_chain.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  }
]