[
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "parameters.hpp",
    "line": null,
    "function": null,
    "comment": "parameters.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "parameters.hpp",
    "line": 28,
    "function": null,
    "comment": "parameters.hpp:28:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "parameters.hpp",
    "line": 37,
    "function": null,
    "comment": "parameters.hpp:37:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "parameters.hpp",
    "line": 38,
    "function": null,
    "comment": "parameters.hpp:38:  public: should be indented +1 space inside class Parameters  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "parameters.hpp",
    "line": 51,
    "function": null,
    "comment": "parameters.hpp:51:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "parameters.hpp",
    "line": 54,
    "function": null,
    "comment": "parameters.hpp:54:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "parameters.hpp",
    "line": 55,
    "function": null,
    "comment": "parameters.hpp:55:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "parameters.hpp",
    "line": 56,
    "function": null,
    "comment": "parameters.hpp:56:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "parameters.hpp",
    "line": 57,
    "function": null,
    "comment": "parameters.hpp:57:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "parameters.hpp",
    "line": 58,
    "function": null,
    "comment": "parameters.hpp:58:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "parameters.hpp",
    "line": 59,
    "function": null,
    "comment": "parameters.hpp:59:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "parameters.hpp",
    "line": 60,
    "function": null,
    "comment": "parameters.hpp:60:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "parameters.hpp",
    "line": 75,
    "function": null,
    "comment": "parameters.hpp:75:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "parameters.hpp",
    "line": 80,
    "function": null,
    "comment": "parameters.hpp:80:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "parameters.hpp",
    "line": 83,
    "function": null,
    "comment": "parameters.hpp:83:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "command.hpp",
    "line": null,
    "function": null,
    "comment": "command.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "command.hpp",
    "line": 22,
    "function": null,
    "comment": "command.hpp:22:  Include 'modules/led_array.hpp' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "command.hpp",
    "line": 23,
    "function": null,
    "comment": "command.hpp:23:  Include 'modules.hpp' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "command.hpp",
    "line": 24,
    "function": null,
    "comment": "command.hpp:24:  Include 'macros.hpp' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "command.hpp",
    "line": 32,
    "function": null,
    "comment": "command.hpp:32:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "command.hpp",
    "line": 35,
    "function": null,
    "comment": "command.hpp:35:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "command.hpp",
    "line": 36,
    "function": null,
    "comment": "command.hpp:36:  public: should be indented +1 space inside class kobuki_PUBLIC  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "command.hpp",
    "line": 44,
    "function": null,
    "comment": "command.hpp:44:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "command.hpp",
    "line": 45,
    "function": null,
    "comment": "command.hpp:45:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "command.hpp",
    "line": 50,
    "function": null,
    "comment": "command.hpp:50:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "command.hpp",
    "line": 51,
    "function": null,
    "comment": "command.hpp:51:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "command.hpp",
    "line": 67,
    "function": null,
    "comment": "command.hpp:67:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "command.hpp",
    "line": 69,
    "function": null,
    "comment": "command.hpp:69:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "command.hpp",
    "line": 69,
    "function": null,
    "comment": "command.hpp:69:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "command.hpp",
    "line": 71,
    "function": null,
    "comment": "command.hpp:71:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "command.hpp",
    "line": 97,
    "function": null,
    "comment": "command.hpp:97:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "command.hpp",
    "line": 98,
    "function": null,
    "comment": "command.hpp:98:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "command.hpp",
    "line": 113,
    "function": null,
    "comment": "command.hpp:113:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "command.hpp",
    "line": 113,
    "function": null,
    "comment": "command.hpp:113:  Is this a non-const reference? If so, make const or use a pointer: Command::Data &current_data  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "command.hpp",
    "line": 114,
    "function": null,
    "comment": "command.hpp:114:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "command.hpp",
    "line": 114,
    "function": null,
    "comment": "command.hpp:114:  Is this a non-const reference? If so, make const or use a pointer: Command::Data &current_data  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "command.hpp",
    "line": 115,
    "function": null,
    "comment": "command.hpp:115:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "command.hpp",
    "line": 115,
    "function": null,
    "comment": "command.hpp:115:  Is this a non-const reference? If so, make const or use a pointer: Command::Data &current_data  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "command.hpp",
    "line": 116,
    "function": null,
    "comment": "command.hpp:116:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "command.hpp",
    "line": 116,
    "function": null,
    "comment": "command.hpp:116:  Is this a non-const reference? If so, make const or use a pointer: Command::Data &current_data  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "command.hpp",
    "line": 118,
    "function": null,
    "comment": "command.hpp:118:  Is this a non-const reference? If so, make const or use a pointer: DiffDrive& diff_drive  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "command.hpp",
    "line": 119,
    "function": null,
    "comment": "command.hpp:119:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "command.hpp",
    "line": 128,
    "function": null,
    "comment": "command.hpp:128:  Is this a non-const reference? If so, make const or use a pointer: Buffer &buffer  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "command.hpp",
    "line": 129,
    "function": null,
    "comment": "command.hpp:129:  Is this a non-const reference? If so, make const or use a pointer: ecl::PushAndPop<unsigned char> & byteStream  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "command.hpp",
    "line": 130,
    "function": null,
    "comment": "command.hpp:130:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "command.hpp",
    "line": 130,
    "function": null,
    "comment": "command.hpp:130:  Is this a non-const reference? If so, make const or use a pointer: ecl::PushAndPop<unsigned char> & byteStream  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "command.hpp",
    "line": 132,
    "function": null,
    "comment": "command.hpp:132:  private: should be indented +1 space inside class kobuki_PUBLIC  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "command.hpp",
    "line": 135,
    "function": null,
    "comment": "command.hpp:135:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","functions","code-blocks"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "command.hpp",
    "line": 138,
    "function": null,
    "comment": "command.hpp:138:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "event_manager.hpp",
    "line": null,
    "function": null,
    "comment": "event_manager.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "event_manager.hpp",
    "line": 22,
    "function": null,
    "comment": "event_manager.hpp:22:  Found C system header after C++ system header. Should be: event_manager.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "event_manager.hpp",
    "line": 25,
    "function": null,
    "comment": "event_manager.hpp:25:  Include 'macros.hpp' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "event_manager.hpp",
    "line": 113,
    "function": null,
    "comment": "event_manager.hpp:113:  public: should be indented +1 space inside class kobuki_PUBLIC  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "event_manager.hpp",
    "line": 126,
    "function": null,
    "comment": "event_manager.hpp:126:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "event_manager.hpp",
    "line": 130,
    "function": null,
    "comment": "event_manager.hpp:130:  private: should be indented +1 space inside class kobuki_PUBLIC  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "event_manager.hpp",
    "line": 145,
    "function": null,
    "comment": "event_manager.hpp:145:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "event_manager.hpp",
    "line": 125,
    "function": null,
    "comment": "event_manager.hpp:125:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "packets.hpp",
    "line": null,
    "function": null,
    "comment": "packets.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "packets.hpp",
    "line": 25,
    "function": null,
    "comment": "packets.hpp:25:  Include 'packets/dock_ir.hpp' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "packets.hpp",
    "line": 29,
    "function": null,
    "comment": "packets.hpp:29:  Include 'packets/three_axis_gyro.hpp' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "packets.hpp",
    "line": 30,
    "function": null,
    "comment": "packets.hpp:30:  Include 'packets/controller_info.hpp' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "modules.hpp",
    "line": null,
    "function": null,
    "comment": "modules.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "modules.hpp",
    "line": 23,
    "function": null,
    "comment": "modules.hpp:23:  Include 'modules/diff_drive.hpp' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "modules.hpp",
    "line": 25,
    "function": null,
    "comment": "modules.hpp:25:  Include 'modules/acceleration_limiter.hpp' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "kobuki.hpp",
    "line": null,
    "function": null,
    "comment": "kobuki.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "kobuki.hpp",
    "line": 21,
    "function": null,
    "comment": "kobuki.hpp:21:  Include 'iomanip' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "kobuki.hpp",
    "line": 22,
    "function": null,
    "comment": "kobuki.hpp:22:  Found C system header after C++ system header. Should be: kobuki.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "kobuki.hpp",
    "line": 23,
    "function": null,
    "comment": "kobuki.hpp:23:  Found C system header after C++ system header. Should be: kobuki.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "kobuki.hpp",
    "line": 24,
    "function": null,
    "comment": "kobuki.hpp:24:  Found C system header after C++ system header. Should be: kobuki.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "kobuki.hpp",
    "line": 25,
    "function": null,
    "comment": "kobuki.hpp:25:  Found C system header after C++ system header. Should be: kobuki.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "kobuki.hpp",
    "line": 26,
    "function": null,
    "comment": "kobuki.hpp:26:  Found C system header after C++ system header. Should be: kobuki.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "kobuki.hpp",
    "line": 28,
    "function": null,
    "comment": "kobuki.hpp:28:  Include 'parameters.hpp' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "kobuki.hpp",
    "line": 29,
    "function": null,
    "comment": "kobuki.hpp:29:  Include 'event_manager.hpp' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "kobuki.hpp",
    "line": 30,
    "function": null,
    "comment": "kobuki.hpp:30:  Include 'command.hpp' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "kobuki.hpp",
    "line": 33,
    "function": null,
    "comment": "kobuki.hpp:33:  Include 'packet_handler/packet_finder.hpp' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "kobuki.hpp",
    "line": 34,
    "function": null,
    "comment": "kobuki.hpp:34:  Include 'macros.hpp' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.hpp",
    "line": 44,
    "function": null,
    "comment": "kobuki.hpp:44:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.hpp",
    "line": 45,
    "function": null,
    "comment": "kobuki.hpp:45:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.hpp",
    "line": 46,
    "function": null,
    "comment": "kobuki.hpp:46:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.hpp",
    "line": 47,
    "function": null,
    "comment": "kobuki.hpp:47:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki.hpp",
    "line": 55,
    "function": null,
    "comment": "kobuki.hpp:55:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki.hpp",
    "line": 62,
    "function": null,
    "comment": "kobuki.hpp:62:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "kobuki.hpp",
    "line": 63,
    "function": null,
    "comment": "kobuki.hpp:63:  Use int16/int64/etc, rather than the C type short  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki.hpp",
    "line": 72,
    "function": null,
    "comment": "kobuki.hpp:72:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "kobuki.hpp",
    "line": 73,
    "function": null,
    "comment": "kobuki.hpp:73:  public: should be indented +1 space inside class PacketFinder  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki.hpp",
    "line": 87,
    "function": null,
    "comment": "kobuki.hpp:87:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "kobuki.hpp",
    "line": 88,
    "function": null,
    "comment": "kobuki.hpp:88:  public: should be indented +1 space inside class kobuki_PUBLIC  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "kobuki.hpp",
    "line": 95,
    "function": null,
    "comment": "kobuki.hpp:95:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "kobuki.hpp",
    "line": 95,
    "function": null,
    "comment": "kobuki.hpp:95:  Is this a non-const reference? If so, make const or use a pointer: Parameters &parameters  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.hpp",
    "line": 96,
    "function": null,
    "comment": "kobuki.hpp:96:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.hpp",
    "line": 97,
    "function": null,
    "comment": "kobuki.hpp:97:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.hpp",
    "line": 98,
    "function": null,
    "comment": "kobuki.hpp:98:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.hpp",
    "line": 101,
    "function": null,
    "comment": "kobuki.hpp:101:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "kobuki.hpp",
    "line": 107,
    "function": null,
    "comment": "kobuki.hpp:107:  Is this a non-const reference? If so, make const or use a pointer: ecl::PushAndPop<unsigned char> & byteStream  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.hpp",
    "line": 122,
    "function": null,
    "comment": "kobuki.hpp:122:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.hpp",
    "line": 123,
    "function": null,
    "comment": "kobuki.hpp:123:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.hpp",
    "line": 137,
    "function": null,
    "comment": "kobuki.hpp:137:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.hpp",
    "line": 142,
    "function": null,
    "comment": "kobuki.hpp:142:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "kobuki.hpp",
    "line": 142,
    "function": null,
    "comment": "kobuki.hpp:142:  Is this a non-const reference? If so, make const or use a pointer: double &wheel_left_angle  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "kobuki.hpp",
    "line": 142,
    "function": null,
    "comment": "kobuki.hpp:142:  Is this a non-const reference? If so, make const or use a pointer: double &wheel_left_angle_rate  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.hpp",
    "line": 143,
    "function": null,
    "comment": "kobuki.hpp:143:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "kobuki.hpp",
    "line": 143,
    "function": null,
    "comment": "kobuki.hpp:143:  Is this a non-const reference? If so, make const or use a pointer: double &wheel_right_angle  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "kobuki.hpp",
    "line": 143,
    "function": null,
    "comment": "kobuki.hpp:143:  Is this a non-const reference? If so, make const or use a pointer: double &wheel_right_angle_rate  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "kobuki.hpp",
    "line": 144,
    "function": null,
    "comment": "kobuki.hpp:144:  Is this a non-const reference? If so, make const or use a pointer: ecl::Pose2D<double> &pose_update  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "kobuki.hpp",
    "line": 145,
    "function": null,
    "comment": "kobuki.hpp:145:  Is this a non-const reference? If so, make const or use a pointer: ecl::linear_algebra::Vector3d &pose_update_rates  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.hpp",
    "line": 155,
    "function": null,
    "comment": "kobuki.hpp:155:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.hpp",
    "line": 161,
    "function": null,
    "comment": "kobuki.hpp:161:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "kobuki.hpp",
    "line": 169,
    "function": null,
    "comment": "kobuki.hpp:169:  private: should be indented +1 space inside class kobuki_PUBLIC  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "kobuki.hpp",
    "line": 174,
    "function": null,
    "comment": "kobuki.hpp:174:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "kobuki.hpp",
    "line": 207,
    "function": null,
    "comment": "kobuki.hpp:207:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "kobuki.hpp",
    "line": 208,
    "function": null,
    "comment": "kobuki.hpp:208:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "kobuki.hpp",
    "line": 209,
    "function": null,
    "comment": "kobuki.hpp:209:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "kobuki.hpp",
    "line": 211,
    "function": null,
    "comment": "kobuki.hpp:211:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "kobuki.hpp",
    "line": 216,
    "function": null,
    "comment": "kobuki.hpp:216:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.hpp",
    "line": 226,
    "function": null,
    "comment": "kobuki.hpp:226:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "kobuki.hpp",
    "line": 226,
    "function": null,
    "comment": "kobuki.hpp:226:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.hpp",
    "line": 227,
    "function": null,
    "comment": "kobuki.hpp:227:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.hpp",
    "line": 231,
    "function": null,
    "comment": "kobuki.hpp:231:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "kobuki.hpp",
    "line": 231,
    "function": null,
    "comment": "kobuki.hpp:231:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "kobuki.hpp",
    "line": 233,
    "function": null,
    "comment": "kobuki.hpp:233:  Use int16/int64/etc, rather than the C type short  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "kobuki.hpp",
    "line": 243,
    "function": null,
    "comment": "kobuki.hpp:243:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.hpp",
    "line": 244,
    "function": null,
    "comment": "kobuki.hpp:244:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.hpp",
    "line": 245,
    "function": null,
    "comment": "kobuki.hpp:245:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "kobuki.hpp",
    "line": 247,
    "function": null,
    "comment": "kobuki.hpp:247:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "kobuki.hpp",
    "line": 248,
    "function": null,
    "comment": "kobuki.hpp:248:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "kobuki.hpp",
    "line": 249,
    "function": null,
    "comment": "kobuki.hpp:249:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.hpp",
    "line": 260,
    "function": null,
    "comment": "kobuki.hpp:260:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "kobuki.hpp",
    "line": 260,
    "function": null,
    "comment": "kobuki.hpp:260:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.hpp",
    "line": 261,
    "function": null,
    "comment": "kobuki.hpp:261:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "kobuki.hpp",
    "line": 261,
    "function": null,
    "comment": "kobuki.hpp:261:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "kobuki.hpp",
    "line": 262,
    "function": null,
    "comment": "kobuki.hpp:262:  Use int16/int64/etc, rather than the C type short  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "kobuki.hpp",
    "line": 265,
    "function": null,
    "comment": "kobuki.hpp:265:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "kobuki.hpp",
    "line": 262,
    "function": null,
    "comment": "kobuki.hpp:262:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "version_info.hpp",
    "line": null,
    "function": null,
    "comment": "version_info.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "version_info.hpp",
    "line": 21,
    "function": null,
    "comment": "version_info.hpp:21:  Include 'sstream' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "version_info.hpp",
    "line": 22,
    "function": null,
    "comment": "version_info.hpp:22:  Found C system header after C++ system header. Should be: version_info.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "version_info.hpp",
    "line": 38,
    "function": null,
    "comment": "version_info.hpp:38:  public: should be indented +1 space inside class kobuki_PUBLIC  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "version_info.hpp",
    "line": 39,
    "function": null,
    "comment": "version_info.hpp:39:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "version_info.hpp",
    "line": 39,
    "function": null,
    "comment": "version_info.hpp:39:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "version_info.hpp",
    "line": 55,
    "function": null,
    "comment": "version_info.hpp:55:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "version_info.hpp",
    "line": 56,
    "function": null,
    "comment": "version_info.hpp:56:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "version_info.hpp",
    "line": 58,
    "function": null,
    "comment": "version_info.hpp:58:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "version_info.hpp",
    "line": 62,
    "function": null,
    "comment": "version_info.hpp:62:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "version_info.hpp",
    "line": 63,
    "function": null,
    "comment": "version_info.hpp:63:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "version_info.hpp",
    "line": 64,
    "function": null,
    "comment": "version_info.hpp:64:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "version_info.hpp",
    "line": 73,
    "function": null,
    "comment": "version_info.hpp:73:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "macros.hpp",
    "line": null,
    "function": null,
    "comment": "macros.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "macros.hpp",
    "line": 20,
    "function": null,
    "comment": "macros.hpp:20:  Include 'ecl/config/ecl.hpp' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "macros.hpp",
    "line": 29,
    "function": null,
    "comment": "macros.hpp:29:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "macros.hpp",
    "line": 30,
    "function": null,
    "comment": "macros.hpp:30:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "macros.hpp",
    "line": 33,
    "function": null,
    "comment": "macros.hpp:33:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "macros.hpp",
    "line": 38,
    "function": null,
    "comment": "macros.hpp:38:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "inertia.hpp",
    "line": null,
    "function": null,
    "comment": "inertia.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "inertia.hpp",
    "line": 28,
    "function": null,
    "comment": "inertia.hpp:28:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "inertia.hpp",
    "line": 35,
    "function": null,
    "comment": "inertia.hpp:35:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "inertia.hpp",
    "line": 36,
    "function": null,
    "comment": "inertia.hpp:36:  public: should be indented +1 space inside class Inertia  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Do not use meaningless empty statements.",
    "file": "inertia.hpp",
    "line": 37,
    "function": null,
    "comment": "inertia.hpp:37:  You don't need a ; after a }  [readability/braces] [4]",
    "tags": ["code-standards","google-cpp","empty-statement","ambiguous-code"]
  },
  {
    "rule": "Do not use meaningless empty statements.",
    "file": "inertia.hpp",
    "line": 44,
    "function": null,
    "comment": "inertia.hpp:44:  You don't need a ; after a }  [readability/braces] [4]",
    "tags": ["code-standards","google-cpp","empty-statement","ambiguous-code"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "inertia.hpp",
    "line": 46,
    "function": null,
    "comment": "inertia.hpp:46:  Is this a non-const reference? If so, make const or use a pointer: ecl::PushAndPop<unsigned char> & byteStream  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "inertia.hpp",
    "line": 47,
    "function": null,
    "comment": "inertia.hpp:47:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "inertia.hpp",
    "line": 58,
    "function": null,
    "comment": "inertia.hpp:58:  Is this a non-const reference? If so, make const or use a pointer: ecl::PushAndPop<unsigned char> & byteStream  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "inertia.hpp",
    "line": 59,
    "function": null,
    "comment": "inertia.hpp:59:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "inertia.hpp",
    "line": 61,
    "function": null,
    "comment": "inertia.hpp:61:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "inertia.hpp",
    "line": 62,
    "function": null,
    "comment": "inertia.hpp:62:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "inertia.hpp",
    "line": 62,
    "function": null,
    "comment": "inertia.hpp:62:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "inertia.hpp",
    "line": 69,
    "function": null,
    "comment": "inertia.hpp:69:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "inertia.hpp",
    "line": 70,
    "function": null,
    "comment": "inertia.hpp:70:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "inertia.hpp",
    "line": 78,
    "function": null,
    "comment": "inertia.hpp:78:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "inertia.hpp",
    "line": 83,
    "function": null,
    "comment": "inertia.hpp:83:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "inertia.hpp",
    "line": 88,
    "function": null,
    "comment": "inertia.hpp:88:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "inertia.hpp",
    "line": 92,
    "function": null,
    "comment": "inertia.hpp:92:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "controller_info.hpp",
    "line": null,
    "function": null,
    "comment": "controller_info.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "controller_info.hpp",
    "line": 28,
    "function": null,
    "comment": "controller_info.hpp:28:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "controller_info.hpp",
    "line": 35,
    "function": null,
    "comment": "controller_info.hpp:35:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "controller_info.hpp",
    "line": 36,
    "function": null,
    "comment": "controller_info.hpp:36:  public: should be indented +1 space inside class ControllerInfo  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Do not use meaningless empty statements.",
    "file": "controller_info.hpp",
    "line": 37,
    "function": null,
    "comment": "controller_info.hpp:37:  You don't need a ; after a }  [readability/braces] [4]",
    "tags": ["code-standards","google-cpp","empty-statement","ambiguous-code"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "controller_info.hpp",
    "line": 41,
    "function": null,
    "comment": "controller_info.hpp:41:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "controller_info.hpp",
    "line": 41,
    "function": null,
    "comment": "controller_info.hpp:41:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "controller_info.hpp",
    "line": 42,
    "function": null,
    "comment": "controller_info.hpp:42:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "controller_info.hpp",
    "line": 42,
    "function": null,
    "comment": "controller_info.hpp:42:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "controller_info.hpp",
    "line": 43,
    "function": null,
    "comment": "controller_info.hpp:43:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "controller_info.hpp",
    "line": 43,
    "function": null,
    "comment": "controller_info.hpp:43:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "controller_info.hpp",
    "line": 46,
    "function": null,
    "comment": "controller_info.hpp:46:  Is this a non-const reference? If so, make const or use a pointer: ecl::PushAndPop<unsigned char> & byteStream  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "controller_info.hpp",
    "line": 47,
    "function": null,
    "comment": "controller_info.hpp:47:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "controller_info.hpp",
    "line": 57,
    "function": null,
    "comment": "controller_info.hpp:57:  Is this a non-const reference? If so, make const or use a pointer: ecl::PushAndPop<unsigned char> & byteStream  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "controller_info.hpp",
    "line": 58,
    "function": null,
    "comment": "controller_info.hpp:58:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "controller_info.hpp",
    "line": 60,
    "function": null,
    "comment": "controller_info.hpp:60:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "controller_info.hpp",
    "line": 61,
    "function": null,
    "comment": "controller_info.hpp:61:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "controller_info.hpp",
    "line": 61,
    "function": null,
    "comment": "controller_info.hpp:61:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "controller_info.hpp",
    "line": 68,
    "function": null,
    "comment": "controller_info.hpp:68:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "controller_info.hpp",
    "line": 69,
    "function": null,
    "comment": "controller_info.hpp:69:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "controller_info.hpp",
    "line": 76,
    "function": null,
    "comment": "controller_info.hpp:76:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "controller_info.hpp",
    "line": 81,
    "function": null,
    "comment": "controller_info.hpp:81:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "controller_info.hpp",
    "line": 86,
    "function": null,
    "comment": "controller_info.hpp:86:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "controller_info.hpp",
    "line": 90,
    "function": null,
    "comment": "controller_info.hpp:90:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "dock_ir.hpp",
    "line": null,
    "function": null,
    "comment": "dock_ir.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "dock_ir.hpp",
    "line": 28,
    "function": null,
    "comment": "dock_ir.hpp:28:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "dock_ir.hpp",
    "line": 35,
    "function": null,
    "comment": "dock_ir.hpp:35:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "dock_ir.hpp",
    "line": 36,
    "function": null,
    "comment": "dock_ir.hpp:36:  public: should be indented +1 space inside class DockIR  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Do not use meaningless empty statements.",
    "file": "dock_ir.hpp",
    "line": 37,
    "function": null,
    "comment": "dock_ir.hpp:37:  You don't need a ; after a }  [readability/braces] [4]",
    "tags": ["code-standards","google-cpp","empty-statement","ambiguous-code"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "dock_ir.hpp",
    "line": 43,
    "function": null,
    "comment": "dock_ir.hpp:43:  Is this a non-const reference? If so, make const or use a pointer: ecl::PushAndPop<unsigned char> & byteStream  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "dock_ir.hpp",
    "line": 44,
    "function": null,
    "comment": "dock_ir.hpp:44:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "dock_ir.hpp",
    "line": 53,
    "function": null,
    "comment": "dock_ir.hpp:53:  Is this a non-const reference? If so, make const or use a pointer: ecl::PushAndPop<unsigned char> & byteStream  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "dock_ir.hpp",
    "line": 54,
    "function": null,
    "comment": "dock_ir.hpp:54:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "dock_ir.hpp",
    "line": 56,
    "function": null,
    "comment": "dock_ir.hpp:56:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "dock_ir.hpp",
    "line": 57,
    "function": null,
    "comment": "dock_ir.hpp:57:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "dock_ir.hpp",
    "line": 57,
    "function": null,
    "comment": "dock_ir.hpp:57:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "dock_ir.hpp",
    "line": 64,
    "function": null,
    "comment": "dock_ir.hpp:64:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "dock_ir.hpp",
    "line": 65,
    "function": null,
    "comment": "dock_ir.hpp:65:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "dock_ir.hpp",
    "line": 71,
    "function": null,
    "comment": "dock_ir.hpp:71:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "dock_ir.hpp",
    "line": 76,
    "function": null,
    "comment": "dock_ir.hpp:76:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "dock_ir.hpp",
    "line": 81,
    "function": null,
    "comment": "dock_ir.hpp:81:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "dock_ir.hpp",
    "line": 82,
    "function": null,
    "comment": "dock_ir.hpp:82:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "dock_ir.hpp",
    "line": 82,
    "function": null,
    "comment": "dock_ir.hpp:82:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "dock_ir.hpp",
    "line": 86,
    "function": null,
    "comment": "dock_ir.hpp:86:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "dock_ir.hpp",
    "line": 40,
    "function": null,
    "comment": "dock_ir.hpp:40:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "cliff.hpp",
    "line": null,
    "function": null,
    "comment": "cliff.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "cliff.hpp",
    "line": 29,
    "function": null,
    "comment": "cliff.hpp:29:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "cliff.hpp",
    "line": 36,
    "function": null,
    "comment": "cliff.hpp:36:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "cliff.hpp",
    "line": 37,
    "function": null,
    "comment": "cliff.hpp:37:  public: should be indented +1 space inside class Cliff  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Do not use meaningless empty statements.",
    "file": "cliff.hpp",
    "line": 38,
    "function": null,
    "comment": "cliff.hpp:38:  You don't need a ; after a }  [readability/braces] [4]",
    "tags": ["code-standards","google-cpp","empty-statement","ambiguous-code"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "cliff.hpp",
    "line": 45,
    "function": null,
    "comment": "cliff.hpp:45:  Is this a non-const reference? If so, make const or use a pointer: ecl::PushAndPop<unsigned char> & byteStream  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "cliff.hpp",
    "line": 46,
    "function": null,
    "comment": "cliff.hpp:46:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "cliff.hpp",
    "line": 55,
    "function": null,
    "comment": "cliff.hpp:55:  Is this a non-const reference? If so, make const or use a pointer: ecl::PushAndPop<unsigned char> & byteStream  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "cliff.hpp",
    "line": 56,
    "function": null,
    "comment": "cliff.hpp:56:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "cliff.hpp",
    "line": 58,
    "function": null,
    "comment": "cliff.hpp:58:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "cliff.hpp",
    "line": 59,
    "function": null,
    "comment": "cliff.hpp:59:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "cliff.hpp",
    "line": 59,
    "function": null,
    "comment": "cliff.hpp:59:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "cliff.hpp",
    "line": 66,
    "function": null,
    "comment": "cliff.hpp:66:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "cliff.hpp",
    "line": 67,
    "function": null,
    "comment": "cliff.hpp:67:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "cliff.hpp",
    "line": 73,
    "function": null,
    "comment": "cliff.hpp:73:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "cliff.hpp",
    "line": 78,
    "function": null,
    "comment": "cliff.hpp:78:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "cliff.hpp",
    "line": 83,
    "function": null,
    "comment": "cliff.hpp:83:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "cliff.hpp",
    "line": 84,
    "function": null,
    "comment": "cliff.hpp:84:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "cliff.hpp",
    "line": 84,
    "function": null,
    "comment": "cliff.hpp:84:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "cliff.hpp",
    "line": 88,
    "function": null,
    "comment": "cliff.hpp:88:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "gp_input.hpp",
    "line": null,
    "function": null,
    "comment": "gp_input.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "gp_input.hpp",
    "line": 29,
    "function": null,
    "comment": "gp_input.hpp:29:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "gp_input.hpp",
    "line": 36,
    "function": null,
    "comment": "gp_input.hpp:36:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "gp_input.hpp",
    "line": 37,
    "function": null,
    "comment": "gp_input.hpp:37:  public: should be indented +1 space inside class GpInput  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Do not use meaningless empty statements.",
    "file": "gp_input.hpp",
    "line": 38,
    "function": null,
    "comment": "gp_input.hpp:38:  You don't need a ; after a }  [readability/braces] [4]",
    "tags": ["code-standards","google-cpp","empty-statement","ambiguous-code"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "gp_input.hpp",
    "line": 50,
    "function": null,
    "comment": "gp_input.hpp:50:  Is this a non-const reference? If so, make const or use a pointer: ecl::PushAndPop<unsigned char> & byteStream  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "gp_input.hpp",
    "line": 51,
    "function": null,
    "comment": "gp_input.hpp:51:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "gp_input.hpp",
    "line": 56,
    "function": null,
    "comment": "gp_input.hpp:56:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "gp_input.hpp",
    "line": 60,
    "function": null,
    "comment": "gp_input.hpp:60:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "gp_input.hpp",
    "line": 61,
    "function": null,
    "comment": "gp_input.hpp:61:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "gp_input.hpp",
    "line": 61,
    "function": null,
    "comment": "gp_input.hpp:61:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "gp_input.hpp",
    "line": 66,
    "function": null,
    "comment": "gp_input.hpp:66:  Is this a non-const reference? If so, make const or use a pointer: ecl::PushAndPop<unsigned char> & byteStream  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "gp_input.hpp",
    "line": 67,
    "function": null,
    "comment": "gp_input.hpp:67:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "gp_input.hpp",
    "line": 69,
    "function": null,
    "comment": "gp_input.hpp:69:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "gp_input.hpp",
    "line": 70,
    "function": null,
    "comment": "gp_input.hpp:70:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "gp_input.hpp",
    "line": 70,
    "function": null,
    "comment": "gp_input.hpp:70:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "gp_input.hpp",
    "line": 77,
    "function": null,
    "comment": "gp_input.hpp:77:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "gp_input.hpp",
    "line": 78,
    "function": null,
    "comment": "gp_input.hpp:78:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "gp_input.hpp",
    "line": 82,
    "function": null,
    "comment": "gp_input.hpp:82:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "gp_input.hpp",
    "line": 88,
    "function": null,
    "comment": "gp_input.hpp:88:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "gp_input.hpp",
    "line": 96,
    "function": null,
    "comment": "gp_input.hpp:96:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "gp_input.hpp",
    "line": 101,
    "function": null,
    "comment": "gp_input.hpp:101:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "gp_input.hpp",
    "line": 106,
    "function": null,
    "comment": "gp_input.hpp:106:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "gp_input.hpp",
    "line": 110,
    "function": null,
    "comment": "gp_input.hpp:110:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "three_axis_gyro.hpp",
    "line": null,
    "function": null,
    "comment": "three_axis_gyro.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "three_axis_gyro.hpp",
    "line": 27,
    "function": null,
    "comment": "three_axis_gyro.hpp:27:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "three_axis_gyro.hpp",
    "line": 27,
    "function": null,
    "comment": "three_axis_gyro.hpp:27:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "three_axis_gyro.hpp",
    "line": 34,
    "function": null,
    "comment": "three_axis_gyro.hpp:34:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "three_axis_gyro.hpp",
    "line": 41,
    "function": null,
    "comment": "three_axis_gyro.hpp:41:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "three_axis_gyro.hpp",
    "line": 42,
    "function": null,
    "comment": "three_axis_gyro.hpp:42:  public: should be indented +1 space inside class ThreeAxisGyro  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Do not use meaningless empty statements.",
    "file": "three_axis_gyro.hpp",
    "line": 43,
    "function": null,
    "comment": "three_axis_gyro.hpp:43:  You don't need a ; after a }  [readability/braces] [4]",
    "tags": ["code-standards","google-cpp","empty-statement","ambiguous-code"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "three_axis_gyro.hpp",
    "line": 47,
    "function": null,
    "comment": "three_axis_gyro.hpp:47:  Use int16/int64/etc, rather than the C type short  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "Do not use meaningless empty statements.",
    "file": "three_axis_gyro.hpp",
    "line": 50,
    "function": null,
    "comment": "three_axis_gyro.hpp:50:  You don't need a ; after a }  [readability/braces] [4]",
    "tags": ["code-standards","google-cpp","empty-statement","ambiguous-code"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "three_axis_gyro.hpp",
    "line": 52,
    "function": null,
    "comment": "three_axis_gyro.hpp:52:  Is this a non-const reference? If so, make const or use a pointer: ecl::PushAndPop<unsigned char> & byteStream  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "three_axis_gyro.hpp",
    "line": 53,
    "function": null,
    "comment": "three_axis_gyro.hpp:53:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "three_axis_gyro.hpp",
    "line": 59,
    "function": null,
    "comment": "three_axis_gyro.hpp:59:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "three_axis_gyro.hpp",
    "line": 64,
    "function": null,
    "comment": "three_axis_gyro.hpp:64:  Is this a non-const reference? If so, make const or use a pointer: ecl::PushAndPop<unsigned char> & byteStream  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "three_axis_gyro.hpp",
    "line": 65,
    "function": null,
    "comment": "three_axis_gyro.hpp:65:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "three_axis_gyro.hpp",
    "line": 67,
    "function": null,
    "comment": "three_axis_gyro.hpp:67:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "three_axis_gyro.hpp",
    "line": 68,
    "function": null,
    "comment": "three_axis_gyro.hpp:68:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "three_axis_gyro.hpp",
    "line": 68,
    "function": null,
    "comment": "three_axis_gyro.hpp:68:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "three_axis_gyro.hpp",
    "line": 75,
    "function": null,
    "comment": "three_axis_gyro.hpp:75:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "three_axis_gyro.hpp",
    "line": 76,
    "function": null,
    "comment": "three_axis_gyro.hpp:76:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "three_axis_gyro.hpp",
    "line": 80,
    "function": null,
    "comment": "three_axis_gyro.hpp:80:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "three_axis_gyro.hpp",
    "line": 82,
    "function": null,
    "comment": "three_axis_gyro.hpp:82:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "three_axis_gyro.hpp",
    "line": 85,
    "function": null,
    "comment": "three_axis_gyro.hpp:85:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "three_axis_gyro.hpp",
    "line": 90,
    "function": null,
    "comment": "three_axis_gyro.hpp:90:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "three_axis_gyro.hpp",
    "line": 95,
    "function": null,
    "comment": "three_axis_gyro.hpp:95:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "three_axis_gyro.hpp",
    "line": 99,
    "function": null,
    "comment": "three_axis_gyro.hpp:99:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "current.hpp",
    "line": null,
    "function": null,
    "comment": "current.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "current.hpp",
    "line": 29,
    "function": null,
    "comment": "current.hpp:29:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "current.hpp",
    "line": 40,
    "function": null,
    "comment": "current.hpp:40:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "current.hpp",
    "line": 41,
    "function": null,
    "comment": "current.hpp:41:  public: should be indented +1 space inside class Current  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Do not use meaningless empty statements.",
    "file": "current.hpp",
    "line": 42,
    "function": null,
    "comment": "current.hpp:42:  You don't need a ; after a }  [readability/braces] [4]",
    "tags": ["code-standards","google-cpp","empty-statement","ambiguous-code"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "current.hpp",
    "line": 48,
    "function": null,
    "comment": "current.hpp:48:  Is this a non-const reference? If so, make const or use a pointer: ecl::PushAndPop<unsigned char> & byteStream  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "current.hpp",
    "line": 49,
    "function": null,
    "comment": "current.hpp:49:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "current.hpp",
    "line": 57,
    "function": null,
    "comment": "current.hpp:57:  Is this a non-const reference? If so, make const or use a pointer: ecl::PushAndPop<unsigned char> & byteStream  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "current.hpp",
    "line": 58,
    "function": null,
    "comment": "current.hpp:58:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "current.hpp",
    "line": 60,
    "function": null,
    "comment": "current.hpp:60:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "current.hpp",
    "line": 61,
    "function": null,
    "comment": "current.hpp:61:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "current.hpp",
    "line": 61,
    "function": null,
    "comment": "current.hpp:61:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "current.hpp",
    "line": 68,
    "function": null,
    "comment": "current.hpp:68:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "current.hpp",
    "line": 69,
    "function": null,
    "comment": "current.hpp:69:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "current.hpp",
    "line": 78,
    "function": null,
    "comment": "current.hpp:78:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "current.hpp",
    "line": 83,
    "function": null,
    "comment": "current.hpp:83:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "current.hpp",
    "line": 84,
    "function": null,
    "comment": "current.hpp:84:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "current.hpp",
    "line": 84,
    "function": null,
    "comment": "current.hpp:84:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "current.hpp",
    "line": 88,
    "function": null,
    "comment": "current.hpp:88:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "eeprom.hpp",
    "line": null,
    "function": null,
    "comment": "eeprom.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "eeprom.hpp",
    "line": 24,
    "function": null,
    "comment": "eeprom.hpp:24:  Include '../packet_handler/payload_headers.hpp' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "eeprom.hpp",
    "line": 31,
    "function": null,
    "comment": "eeprom.hpp:31:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "eeprom.hpp",
    "line": 38,
    "function": null,
    "comment": "eeprom.hpp:38:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "eeprom.hpp",
    "line": 39,
    "function": null,
    "comment": "eeprom.hpp:39:  public: should be indented +1 space inside class Eeprom  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Do not use meaningless empty statements.",
    "file": "eeprom.hpp",
    "line": 40,
    "function": null,
    "comment": "eeprom.hpp:40:  You don't need a ; after a }  [readability/braces] [4]",
    "tags": ["code-standards","google-cpp","empty-statement","ambiguous-code"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "eeprom.hpp",
    "line": 47,
    "function": null,
    "comment": "eeprom.hpp:47:  Is this a non-const reference? If so, make const or use a pointer: ecl::PushAndPop<unsigned char> & byteStream  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "eeprom.hpp",
    "line": 48,
    "function": null,
    "comment": "eeprom.hpp:48:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "eeprom.hpp",
    "line": 53,
    "function": null,
    "comment": "eeprom.hpp:53:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "eeprom.hpp",
    "line": 59,
    "function": null,
    "comment": "eeprom.hpp:59:  Is this a non-const reference? If so, make const or use a pointer: ecl::PushAndPop<unsigned char> & byteStream  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "eeprom.hpp",
    "line": 60,
    "function": null,
    "comment": "eeprom.hpp:60:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "eeprom.hpp",
    "line": 62,
    "function": null,
    "comment": "eeprom.hpp:62:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "eeprom.hpp",
    "line": 63,
    "function": null,
    "comment": "eeprom.hpp:63:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "eeprom.hpp",
    "line": 63,
    "function": null,
    "comment": "eeprom.hpp:63:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "eeprom.hpp",
    "line": 70,
    "function": null,
    "comment": "eeprom.hpp:70:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "eeprom.hpp",
    "line": 71,
    "function": null,
    "comment": "eeprom.hpp:71:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "eeprom.hpp",
    "line": 75,
    "function": null,
    "comment": "eeprom.hpp:75:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "eeprom.hpp",
    "line": 79,
    "function": null,
    "comment": "eeprom.hpp:79:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "eeprom.hpp",
    "line": 84,
    "function": null,
    "comment": "eeprom.hpp:84:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "eeprom.hpp",
    "line": 89,
    "function": null,
    "comment": "eeprom.hpp:89:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "eeprom.hpp",
    "line": 93,
    "function": null,
    "comment": "eeprom.hpp:93:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "hardware.hpp",
    "line": null,
    "function": null,
    "comment": "hardware.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "hardware.hpp",
    "line": 28,
    "function": null,
    "comment": "hardware.hpp:28:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "hardware.hpp",
    "line": 35,
    "function": null,
    "comment": "hardware.hpp:35:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "hardware.hpp",
    "line": 36,
    "function": null,
    "comment": "hardware.hpp:36:  public: should be indented +1 space inside class Hardware  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Do not use meaningless empty statements.",
    "file": "hardware.hpp",
    "line": 37,
    "function": null,
    "comment": "hardware.hpp:37:  You don't need a ; after a }  [readability/braces] [4]",
    "tags": ["code-standards","google-cpp","empty-statement","ambiguous-code"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "hardware.hpp",
    "line": 43,
    "function": null,
    "comment": "hardware.hpp:43:  Is this a non-const reference? If so, make const or use a pointer: ecl::PushAndPop<unsigned char> & byteStream  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "hardware.hpp",
    "line": 44,
    "function": null,
    "comment": "hardware.hpp:44:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "hardware.hpp",
    "line": 52,
    "function": null,
    "comment": "hardware.hpp:52:  Is this a non-const reference? If so, make const or use a pointer: ecl::PushAndPop<unsigned char> & byteStream  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "hardware.hpp",
    "line": 53,
    "function": null,
    "comment": "hardware.hpp:53:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "hardware.hpp",
    "line": 55,
    "function": null,
    "comment": "hardware.hpp:55:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "hardware.hpp",
    "line": 56,
    "function": null,
    "comment": "hardware.hpp:56:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "hardware.hpp",
    "line": 56,
    "function": null,
    "comment": "hardware.hpp:56:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "hardware.hpp",
    "line": 63,
    "function": null,
    "comment": "hardware.hpp:63:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "hardware.hpp",
    "line": 64,
    "function": null,
    "comment": "hardware.hpp:64:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Do not use alternative tokens instead of operators (e.g. 'and', 'or').",
    "file": "hardware.hpp",
    "line": 64,
    "function": null,
    "comment": "hardware.hpp:64:  Use operator && instead of and  [readability/alt_tokens] [2]",
    "tags": ["code-standards","google-cpp","operators","tokens","alternative-tokens"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "hardware.hpp",
    "line": 66,
    "function": null,
    "comment": "hardware.hpp:66:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "To-do comments should look like '// TODO(my_username): Stuff.'.",
    "file": "hardware.hpp",
    "line": 66,
    "function": null,
    "comment": "hardware.hpp:66:  Missing username in TODO; it should look like '// TODO(my_username): Stuff.'  [readability/todo] [2]",
    "tags": ["comments","code-standards","formatting","google-cpp","todo-comment"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "hardware.hpp",
    "line": 67,
    "function": null,
    "comment": "hardware.hpp:67:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "hardware.hpp",
    "line": 69,
    "function": null,
    "comment": "hardware.hpp:69:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "hardware.hpp",
    "line": 74,
    "function": null,
    "comment": "hardware.hpp:74:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "hardware.hpp",
    "line": 74,
    "function": null,
    "comment": "hardware.hpp:74:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "hardware.hpp",
    "line": 76,
    "function": null,
    "comment": "hardware.hpp:76:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "hardware.hpp",
    "line": 77,
    "function": null,
    "comment": "hardware.hpp:77:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "hardware.hpp",
    "line": 81,
    "function": null,
    "comment": "hardware.hpp:81:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "hardware.hpp",
    "line": 86,
    "function": null,
    "comment": "hardware.hpp:86:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "hardware.hpp",
    "line": 91,
    "function": null,
    "comment": "hardware.hpp:91:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "hardware.hpp",
    "line": 95,
    "function": null,
    "comment": "hardware.hpp:95:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "core_sensors.hpp",
    "line": null,
    "function": null,
    "comment": "core_sensors.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "core_sensors.hpp",
    "line": 21,
    "function": null,
    "comment": "core_sensors.hpp:21:  Include '../macros.hpp' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "core_sensors.hpp",
    "line": 22,
    "function": null,
    "comment": "core_sensors.hpp:22:  Found C system header after other header. Should be: core_sensors.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "core_sensors.hpp",
    "line": 29,
    "function": null,
    "comment": "core_sensors.hpp:29:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "core_sensors.hpp",
    "line": 36,
    "function": null,
    "comment": "core_sensors.hpp:36:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "core_sensors.hpp",
    "line": 37,
    "function": null,
    "comment": "core_sensors.hpp:37:  public: should be indented +1 space inside class kobuki_PUBLIC  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Do not use meaningless empty statements.",
    "file": "core_sensors.hpp",
    "line": 38,
    "function": null,
    "comment": "core_sensors.hpp:38:  You don't need a ; after a }  [readability/braces] [4]",
    "tags": ["code-standards","google-cpp","empty-statement","ambiguous-code"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "core_sensors.hpp",
    "line": 87,
    "function": null,
    "comment": "core_sensors.hpp:87:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","functions","code-blocks"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "core_sensors.hpp",
    "line": 90,
    "function": null,
    "comment": "core_sensors.hpp:90:  Is this a non-const reference? If so, make const or use a pointer: ecl::PushAndPop<unsigned char> & byteStream  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "core_sensors.hpp",
    "line": 91,
    "function": null,
    "comment": "core_sensors.hpp:91:  Is this a non-const reference? If so, make const or use a pointer: ecl::PushAndPop<unsigned char> & byteStream  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "core_sensors.hpp",
    "line": 94,
    "function": null,
    "comment": "core_sensors.hpp:94:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "unique_device_id.hpp",
    "line": null,
    "function": null,
    "comment": "unique_device_id.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "unique_device_id.hpp",
    "line": 28,
    "function": null,
    "comment": "unique_device_id.hpp:28:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "unique_device_id.hpp",
    "line": 35,
    "function": null,
    "comment": "unique_device_id.hpp:35:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "unique_device_id.hpp",
    "line": 36,
    "function": null,
    "comment": "unique_device_id.hpp:36:  public: should be indented +1 space inside class UniqueDeviceID  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Do not use meaningless empty statements.",
    "file": "unique_device_id.hpp",
    "line": 37,
    "function": null,
    "comment": "unique_device_id.hpp:37:  You don't need a ; after a }  [readability/braces] [4]",
    "tags": ["code-standards","google-cpp","empty-statement","ambiguous-code"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "unique_device_id.hpp",
    "line": 46,
    "function": null,
    "comment": "unique_device_id.hpp:46:  Is this a non-const reference? If so, make const or use a pointer: ecl::PushAndPop<unsigned char> & byteStream  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "unique_device_id.hpp",
    "line": 47,
    "function": null,
    "comment": "unique_device_id.hpp:47:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "unique_device_id.hpp",
    "line": 56,
    "function": null,
    "comment": "unique_device_id.hpp:56:  Is this a non-const reference? If so, make const or use a pointer: ecl::PushAndPop<unsigned char> & byteStream  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "unique_device_id.hpp",
    "line": 57,
    "function": null,
    "comment": "unique_device_id.hpp:57:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "unique_device_id.hpp",
    "line": 59,
    "function": null,
    "comment": "unique_device_id.hpp:59:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "unique_device_id.hpp",
    "line": 60,
    "function": null,
    "comment": "unique_device_id.hpp:60:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "unique_device_id.hpp",
    "line": 60,
    "function": null,
    "comment": "unique_device_id.hpp:60:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "unique_device_id.hpp",
    "line": 67,
    "function": null,
    "comment": "unique_device_id.hpp:67:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "unique_device_id.hpp",
    "line": 68,
    "function": null,
    "comment": "unique_device_id.hpp:68:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "unique_device_id.hpp",
    "line": 74,
    "function": null,
    "comment": "unique_device_id.hpp:74:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "unique_device_id.hpp",
    "line": 79,
    "function": null,
    "comment": "unique_device_id.hpp:79:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "unique_device_id.hpp",
    "line": 84,
    "function": null,
    "comment": "unique_device_id.hpp:84:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "unique_device_id.hpp",
    "line": 88,
    "function": null,
    "comment": "unique_device_id.hpp:88:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "firmware.hpp",
    "line": null,
    "function": null,
    "comment": "firmware.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "firmware.hpp",
    "line": 36,
    "function": null,
    "comment": "firmware.hpp:36:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "firmware.hpp",
    "line": 43,
    "function": null,
    "comment": "firmware.hpp:43:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "firmware.hpp",
    "line": 44,
    "function": null,
    "comment": "firmware.hpp:44:  public: should be indented +1 space inside class Firmware  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Do not use meaningless empty statements.",
    "file": "firmware.hpp",
    "line": 45,
    "function": null,
    "comment": "firmware.hpp:45:  You don't need a ; after a }  [readability/braces] [4]",
    "tags": ["code-standards","google-cpp","empty-statement","ambiguous-code"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "firmware.hpp",
    "line": 51,
    "function": null,
    "comment": "firmware.hpp:51:  Is this a non-const reference? If so, make const or use a pointer: ecl::PushAndPop<unsigned char> & byteStream  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "firmware.hpp",
    "line": 52,
    "function": null,
    "comment": "firmware.hpp:52:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "firmware.hpp",
    "line": 60,
    "function": null,
    "comment": "firmware.hpp:60:  Is this a non-const reference? If so, make const or use a pointer: ecl::PushAndPop<unsigned char> & byteStream  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "firmware.hpp",
    "line": 61,
    "function": null,
    "comment": "firmware.hpp:61:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "firmware.hpp",
    "line": 63,
    "function": null,
    "comment": "firmware.hpp:63:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "firmware.hpp",
    "line": 64,
    "function": null,
    "comment": "firmware.hpp:64:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "firmware.hpp",
    "line": 64,
    "function": null,
    "comment": "firmware.hpp:64:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "firmware.hpp",
    "line": 71,
    "function": null,
    "comment": "firmware.hpp:71:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "firmware.hpp",
    "line": 72,
    "function": null,
    "comment": "firmware.hpp:72:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Do not use alternative tokens instead of operators (e.g. 'and', 'or').",
    "file": "firmware.hpp",
    "line": 72,
    "function": null,
    "comment": "firmware.hpp:72:  Use operator && instead of and  [readability/alt_tokens] [2]",
    "tags": ["code-standards","google-cpp","operators","tokens","alternative-tokens"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "firmware.hpp",
    "line": 74,
    "function": null,
    "comment": "firmware.hpp:74:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "To-do comments should look like '// TODO(my_username): Stuff.'.",
    "file": "firmware.hpp",
    "line": 74,
    "function": null,
    "comment": "firmware.hpp:74:  Missing username in TODO; it should look like '// TODO(my_username): Stuff.'  [readability/todo] [2]",
    "tags": ["comments","code-standards","formatting","google-cpp","todo-comment"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "firmware.hpp",
    "line": 75,
    "function": null,
    "comment": "firmware.hpp:75:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "firmware.hpp",
    "line": 77,
    "function": null,
    "comment": "firmware.hpp:77:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "firmware.hpp",
    "line": 82,
    "function": null,
    "comment": "firmware.hpp:82:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "firmware.hpp",
    "line": 84,
    "function": null,
    "comment": "firmware.hpp:84:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "firmware.hpp",
    "line": 86,
    "function": null,
    "comment": "firmware.hpp:86:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "firmware.hpp",
    "line": 88,
    "function": null,
    "comment": "firmware.hpp:88:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "firmware.hpp",
    "line": 89,
    "function": null,
    "comment": "firmware.hpp:89:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "firmware.hpp",
    "line": 93,
    "function": null,
    "comment": "firmware.hpp:93:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "firmware.hpp",
    "line": 98,
    "function": null,
    "comment": "firmware.hpp:98:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "firmware.hpp",
    "line": 103,
    "function": null,
    "comment": "firmware.hpp:103:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "firmware.hpp",
    "line": 107,
    "function": null,
    "comment": "firmware.hpp:107:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "firmware.hpp",
    "line": 109,
    "function": null,
    "comment": "firmware.hpp:109:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "firmware.hpp",
    "line": 115,
    "function": null,
    "comment": "firmware.hpp:115:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "firmware.hpp",
    "line": 117,
    "function": null,
    "comment": "firmware.hpp:117:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "firmware.hpp",
    "line": 129,
    "function": null,
    "comment": "firmware.hpp:129:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "firmware.hpp",
    "line": 130,
    "function": null,
    "comment": "firmware.hpp:130:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "firmware.hpp",
    "line": 131,
    "function": null,
    "comment": "firmware.hpp:131:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "firmware.hpp",
    "line": 137,
    "function": null,
    "comment": "firmware.hpp:137:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "firmware.hpp",
    "line": 138,
    "function": null,
    "comment": "firmware.hpp:138:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "firmware.hpp",
    "line": 139,
    "function": null,
    "comment": "firmware.hpp:139:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "firmware.hpp",
    "line": 145,
    "function": null,
    "comment": "firmware.hpp:145:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "firmware.hpp",
    "line": 119,
    "function": null,
    "comment": "firmware.hpp:119:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "digital_output.hpp",
    "line": null,
    "function": null,
    "comment": "digital_output.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "digital_output.hpp",
    "line": 21,
    "function": null,
    "comment": "digital_output.hpp:21:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "digital_output.hpp",
    "line": 41,
    "function": null,
    "comment": "digital_output.hpp:41:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "sound.hpp",
    "line": null,
    "function": null,
    "comment": "sound.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "sound.hpp",
    "line": 31,
    "function": null,
    "comment": "sound.hpp:31:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "sound.hpp",
    "line": 41,
    "function": null,
    "comment": "sound.hpp:41:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "diff_drive.hpp",
    "line": null,
    "function": null,
    "comment": "diff_drive.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "diff_drive.hpp",
    "line": 21,
    "function": null,
    "comment": "diff_drive.hpp:21:  Include 'climits' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "diff_drive.hpp",
    "line": 22,
    "function": null,
    "comment": "diff_drive.hpp:22:  Found C system header after C++ system header. Should be: diff_drive.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "diff_drive.hpp",
    "line": 23,
    "function": null,
    "comment": "diff_drive.hpp:23:  Found C system header after C++ system header. Should be: diff_drive.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "diff_drive.hpp",
    "line": 24,
    "function": null,
    "comment": "diff_drive.hpp:24:  Found C system header after C++ system header. Should be: diff_drive.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "diff_drive.hpp",
    "line": 38,
    "function": null,
    "comment": "diff_drive.hpp:38:  public: should be indented +1 space inside class kobuki_PUBLIC  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "diff_drive.hpp",
    "line": 40,
    "function": null,
    "comment": "diff_drive.hpp:40:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "diff_drive.hpp",
    "line": 44,
    "function": null,
    "comment": "diff_drive.hpp:44:  Is this a non-const reference? If so, make const or use a pointer: ecl::Pose2D<double> &pose_update  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "diff_drive.hpp",
    "line": 45,
    "function": null,
    "comment": "diff_drive.hpp:45:  Is this a non-const reference? If so, make const or use a pointer: ecl::linear_algebra::Vector3d &pose_update_rates  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "diff_drive.hpp",
    "line": 47,
    "function": null,
    "comment": "diff_drive.hpp:47:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "diff_drive.hpp",
    "line": 47,
    "function": null,
    "comment": "diff_drive.hpp:47:  Is this a non-const reference? If so, make const or use a pointer: double &wheel_left_angle  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "diff_drive.hpp",
    "line": 47,
    "function": null,
    "comment": "diff_drive.hpp:47:  Is this a non-const reference? If so, make const or use a pointer: double &wheel_left_angle_rate  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "diff_drive.hpp",
    "line": 48,
    "function": null,
    "comment": "diff_drive.hpp:48:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "diff_drive.hpp",
    "line": 48,
    "function": null,
    "comment": "diff_drive.hpp:48:  Is this a non-const reference? If so, make const or use a pointer: double &wheel_right_angle  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "diff_drive.hpp",
    "line": 48,
    "function": null,
    "comment": "diff_drive.hpp:48:  Is this a non-const reference? If so, make const or use a pointer: double &wheel_right_angle_rate  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "diff_drive.hpp",
    "line": 51,
    "function": null,
    "comment": "diff_drive.hpp:51:  Use int16/int64/etc, rather than the C type short  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "diff_drive.hpp",
    "line": 52,
    "function": null,
    "comment": "diff_drive.hpp:52:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "diff_drive.hpp",
    "line": 53,
    "function": null,
    "comment": "diff_drive.hpp:53:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "diff_drive.hpp",
    "line": 53,
    "function": null,
    "comment": "diff_drive.hpp:53:  Use int16/int64/etc, rather than the C type short  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "diff_drive.hpp",
    "line": 58,
    "function": null,
    "comment": "diff_drive.hpp:58:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "diff_drive.hpp",
    "line": 58,
    "function": null,
    "comment": "diff_drive.hpp:58:  Use int16/int64/etc, rather than the C type short  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "diff_drive.hpp",
    "line": 59,
    "function": null,
    "comment": "diff_drive.hpp:59:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "diff_drive.hpp",
    "line": 66,
    "function": null,
    "comment": "diff_drive.hpp:66:  private: should be indented +1 space inside class kobuki_PUBLIC  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "diff_drive.hpp",
    "line": 67,
    "function": null,
    "comment": "diff_drive.hpp:67:  Use int16/int64/etc, rather than the C type short  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "diff_drive.hpp",
    "line": 71,
    "function": null,
    "comment": "diff_drive.hpp:71:  Use int16/int64/etc, rather than the C type short  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "diff_drive.hpp",
    "line": 74,
    "function": null,
    "comment": "diff_drive.hpp:74:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "diff_drive.hpp",
    "line": 75,
    "function": null,
    "comment": "diff_drive.hpp:75:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "diff_drive.hpp",
    "line": 76,
    "function": null,
    "comment": "diff_drive.hpp:76:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "diff_drive.hpp",
    "line": 78,
    "function": null,
    "comment": "diff_drive.hpp:78:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "diff_drive.hpp",
    "line": 78,
    "function": null,
    "comment": "diff_drive.hpp:78:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "diff_drive.hpp",
    "line": 79,
    "function": null,
    "comment": "diff_drive.hpp:79:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "diff_drive.hpp",
    "line": 87,
    "function": null,
    "comment": "diff_drive.hpp:87:  Use int16/int64/etc, rather than the C type short  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "diff_drive.hpp",
    "line": 90,
    "function": null,
    "comment": "diff_drive.hpp:90:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "led_array.hpp",
    "line": null,
    "function": null,
    "comment": "led_array.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "led_array.hpp",
    "line": 45,
    "function": null,
    "comment": "led_array.hpp:45:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "acceleration_limiter.hpp",
    "line": null,
    "function": null,
    "comment": "acceleration_limiter.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "acceleration_limiter.hpp",
    "line": 21,
    "function": null,
    "comment": "acceleration_limiter.hpp:21:  Include 'iomanip' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "acceleration_limiter.hpp",
    "line": 23,
    "function": null,
    "comment": "acceleration_limiter.hpp:23:  Include 'iostream' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "acceleration_limiter.hpp",
    "line": 24,
    "function": null,
    "comment": "acceleration_limiter.hpp:24:  Found C system header after C++ system header. Should be: acceleration_limiter.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "acceleration_limiter.hpp",
    "line": 25,
    "function": null,
    "comment": "acceleration_limiter.hpp:25:  Found C system header after C++ system header. Should be: acceleration_limiter.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "acceleration_limiter.hpp",
    "line": 51,
    "function": null,
    "comment": "acceleration_limiter.hpp:51:  public: should be indented +1 space inside class AccelerationLimiter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "acceleration_limiter.hpp",
    "line": 58,
    "function": null,
    "comment": "acceleration_limiter.hpp:58:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "acceleration_limiter.hpp",
    "line": 58,
    "function": null,
    "comment": "acceleration_limiter.hpp:58:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "acceleration_limiter.hpp",
    "line": 59,
    "function": null,
    "comment": "acceleration_limiter.hpp:59:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "acceleration_limiter.hpp",
    "line": 59,
    "function": null,
    "comment": "acceleration_limiter.hpp:59:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "acceleration_limiter.hpp",
    "line": 60,
    "function": null,
    "comment": "acceleration_limiter.hpp:60:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "acceleration_limiter.hpp",
    "line": 62,
    "function": null,
    "comment": "acceleration_limiter.hpp:62:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "acceleration_limiter.hpp",
    "line": 63,
    "function": null,
    "comment": "acceleration_limiter.hpp:63:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "acceleration_limiter.hpp",
    "line": 77,
    "function": null,
    "comment": "acceleration_limiter.hpp:77:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "acceleration_limiter.hpp",
    "line": 80,
    "function": null,
    "comment": "acceleration_limiter.hpp:80:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "acceleration_limiter.hpp",
    "line": 81,
    "function": null,
    "comment": "acceleration_limiter.hpp:81:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "acceleration_limiter.hpp",
    "line": 82,
    "function": null,
    "comment": "acceleration_limiter.hpp:82:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "acceleration_limiter.hpp",
    "line": 84,
    "function": null,
    "comment": "acceleration_limiter.hpp:84:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "acceleration_limiter.hpp",
    "line": 86,
    "function": null,
    "comment": "acceleration_limiter.hpp:86:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "acceleration_limiter.hpp",
    "line": 87,
    "function": null,
    "comment": "acceleration_limiter.hpp:87:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "acceleration_limiter.hpp",
    "line": 87,
    "function": null,
    "comment": "acceleration_limiter.hpp:87:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "acceleration_limiter.hpp",
    "line": 87,
    "function": null,
    "comment": "acceleration_limiter.hpp:87:  Using C-style cast.  Use static_cast<double>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "acceleration_limiter.hpp",
    "line": 88,
    "function": null,
    "comment": "acceleration_limiter.hpp:88:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "acceleration_limiter.hpp",
    "line": 88,
    "function": null,
    "comment": "acceleration_limiter.hpp:88:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "acceleration_limiter.hpp",
    "line": 88,
    "function": null,
    "comment": "acceleration_limiter.hpp:88:  Using C-style cast.  Use static_cast<double>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "acceleration_limiter.hpp",
    "line": 90,
    "function": null,
    "comment": "acceleration_limiter.hpp:90:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "acceleration_limiter.hpp",
    "line": 91,
    "function": null,
    "comment": "acceleration_limiter.hpp:91:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "acceleration_limiter.hpp",
    "line": 92,
    "function": null,
    "comment": "acceleration_limiter.hpp:92:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "acceleration_limiter.hpp",
    "line": 93,
    "function": null,
    "comment": "acceleration_limiter.hpp:93:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "acceleration_limiter.hpp",
    "line": 93,
    "function": null,
    "comment": "acceleration_limiter.hpp:93:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "acceleration_limiter.hpp",
    "line": 94,
    "function": null,
    "comment": "acceleration_limiter.hpp:94:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "acceleration_limiter.hpp",
    "line": 95,
    "function": null,
    "comment": "acceleration_limiter.hpp:95:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "acceleration_limiter.hpp",
    "line": 95,
    "function": null,
    "comment": "acceleration_limiter.hpp:95:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "acceleration_limiter.hpp",
    "line": 97,
    "function": null,
    "comment": "acceleration_limiter.hpp:97:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "acceleration_limiter.hpp",
    "line": 99,
    "function": null,
    "comment": "acceleration_limiter.hpp:99:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "acceleration_limiter.hpp",
    "line": 105,
    "function": null,
    "comment": "acceleration_limiter.hpp:105:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "acceleration_limiter.hpp",
    "line": 107,
    "function": null,
    "comment": "acceleration_limiter.hpp:107:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "acceleration_limiter.hpp",
    "line": 115,
    "function": null,
    "comment": "acceleration_limiter.hpp:115:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "acceleration_limiter.hpp",
    "line": 115,
    "function": null,
    "comment": "acceleration_limiter.hpp:115:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "acceleration_limiter.hpp",
    "line": 116,
    "function": null,
    "comment": "acceleration_limiter.hpp:116:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "acceleration_limiter.hpp",
    "line": 125,
    "function": null,
    "comment": "acceleration_limiter.hpp:125:  private: should be indented +1 space inside class AccelerationLimiter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "acceleration_limiter.hpp",
    "line": 127,
    "function": null,
    "comment": "acceleration_limiter.hpp:127:  Use int16/int64/etc, rather than the C type short  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "acceleration_limiter.hpp",
    "line": 128,
    "function": null,
    "comment": "acceleration_limiter.hpp:128:  Use int16/int64/etc, rather than the C type short  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "acceleration_limiter.hpp",
    "line": 132,
    "function": null,
    "comment": "acceleration_limiter.hpp:132:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "acceleration_limiter.hpp",
    "line": 133,
    "function": null,
    "comment": "acceleration_limiter.hpp:133:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "acceleration_limiter.hpp",
    "line": 134,
    "function": null,
    "comment": "acceleration_limiter.hpp:134:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "acceleration_limiter.hpp",
    "line": 135,
    "function": null,
    "comment": "acceleration_limiter.hpp:135:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "acceleration_limiter.hpp",
    "line": 138,
    "function": null,
    "comment": "acceleration_limiter.hpp:138:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "battery.hpp",
    "line": null,
    "function": null,
    "comment": "battery.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "battery.hpp",
    "line": 22,
    "function": null,
    "comment": "battery.hpp:22:  Include '../macros.hpp' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "battery.hpp",
    "line": 41,
    "function": null,
    "comment": "battery.hpp:41:  public: should be indented +1 space inside class kobuki_PUBLIC  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "battery.hpp",
    "line": 60,
    "function": null,
    "comment": "battery.hpp:60:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "battery.hpp",
    "line": 72,
    "function": null,
    "comment": "battery.hpp:72:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "payload_headers.hpp",
    "line": null,
    "function": null,
    "comment": "payload_headers.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "payload_headers.hpp",
    "line": 30,
    "function": null,
    "comment": "payload_headers.hpp:30:  public: should be indented +1 space inside class Header  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "payload_headers.hpp",
    "line": 42,
    "function": null,
    "comment": "payload_headers.hpp:42:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "payload_base.hpp",
    "line": null,
    "function": null,
    "comment": "payload_base.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "payload_base.hpp",
    "line": 28,
    "function": null,
    "comment": "payload_base.hpp:28:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "payload_base.hpp",
    "line": 39,
    "function": null,
    "comment": "payload_base.hpp:39:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "payload_base.hpp",
    "line": 40,
    "function": null,
    "comment": "payload_base.hpp:40:  public: should be indented +1 space inside class payloadBase  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "payload_base.hpp",
    "line": 41,
    "function": null,
    "comment": "payload_base.hpp:41:  Do not leave a blank line after 'public:'  [whitespace/blank_line] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","functions","code-blocks"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "payload_base.hpp",
    "line": 64,
    "function": null,
    "comment": "payload_base.hpp:64:  Constructors callable with one argument should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "Do not use meaningless empty statements.",
    "file": "payload_base.hpp",
    "line": 69,
    "function": null,
    "comment": "payload_base.hpp:69:  You don't need a ; after a }  [readability/braces] [4]",
    "tags": ["code-standards","google-cpp","empty-statement","ambiguous-code"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "payload_base.hpp",
    "line": 74,
    "function": null,
    "comment": "payload_base.hpp:74:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "payload_base.hpp",
    "line": 74,
    "function": null,
    "comment": "payload_base.hpp:74:  Is this a non-const reference? If so, make const or use a pointer: ecl::PushAndPop<unsigned char> & byteStream  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "payload_base.hpp",
    "line": 75,
    "function": null,
    "comment": "payload_base.hpp:75:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "payload_base.hpp",
    "line": 75,
    "function": null,
    "comment": "payload_base.hpp:75:  Is this a non-const reference? If so, make const or use a pointer: ecl::PushAndPop<unsigned char> & byteStream  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "payload_base.hpp",
    "line": 78,
    "function": null,
    "comment": "payload_base.hpp:78:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "payload_base.hpp",
    "line": 79,
    "function": null,
    "comment": "payload_base.hpp:79:  protected: should be indented +1 space inside class payloadBase  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "payload_base.hpp",
    "line": 82,
    "function": null,
    "comment": "payload_base.hpp:82:  Is this a non-const reference? If so, make const or use a pointer: T & V  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "payload_base.hpp",
    "line": 82,
    "function": null,
    "comment": "payload_base.hpp:82:  Is this a non-const reference? If so, make const or use a pointer: ecl::PushAndPop<unsigned char> & buffer  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "payload_base.hpp",
    "line": 83,
    "function": null,
    "comment": "payload_base.hpp:83:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "payload_base.hpp",
    "line": 90,
    "function": null,
    "comment": "payload_base.hpp:90:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "payload_base.hpp",
    "line": 96,
    "function": null,
    "comment": "payload_base.hpp:96:  Is this a non-const reference? If so, make const or use a pointer: ecl::PushAndPop<unsigned char> & buffer  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "payload_base.hpp",
    "line": 97,
    "function": null,
    "comment": "payload_base.hpp:97:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "payload_base.hpp",
    "line": 100,
    "function": null,
    "comment": "payload_base.hpp:100:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "payload_base.hpp",
    "line": 113,
    "function": null,
    "comment": "payload_base.hpp:113:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "payload_base.hpp",
    "line": 113,
    "function": null,
    "comment": "payload_base.hpp:113:  Is this a non-const reference? If so, make const or use a pointer: float & V  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "payload_base.hpp",
    "line": 113,
    "function": null,
    "comment": "payload_base.hpp:113:  Is this a non-const reference? If so, make const or use a pointer: ecl::PushAndPop<unsigned char> & buffer  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "payload_base.hpp",
    "line": 114,
    "function": null,
    "comment": "payload_base.hpp:114:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "payload_base.hpp",
    "line": 122,
    "function": null,
    "comment": "payload_base.hpp:122:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "payload_base.hpp",
    "line": 130,
    "function": null,
    "comment": "payload_base.hpp:130:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "payload_base.hpp",
    "line": 130,
    "function": null,
    "comment": "payload_base.hpp:130:  Is this a non-const reference? If so, make const or use a pointer: ecl::PushAndPop<unsigned char> & buffer  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "payload_base.hpp",
    "line": 131,
    "function": null,
    "comment": "payload_base.hpp:131:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "payload_base.hpp",
    "line": 137,
    "function": null,
    "comment": "payload_base.hpp:137:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "payload_base.hpp",
    "line": 142,
    "function": null,
    "comment": "payload_base.hpp:142:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "payload_base.hpp",
    "line": 144,
    "function": null,
    "comment": "payload_base.hpp:144:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "payload_base.hpp",
    "line": 150,
    "function": null,
    "comment": "payload_base.hpp:150:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "payload_base.hpp",
    "line": 166,
    "function": null,
    "comment": "payload_base.hpp:166:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "payload_base.hpp",
    "line": 183,
    "function": null,
    "comment": "payload_base.hpp:183:  Namespace should be terminated with '// namespace packet_handler'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "Don't use a semicolon to denote an empty statement. Use {} instead.",
    "file": "payload_base.hpp",
    "line": 184,
    "function": null,
    "comment": "payload_base.hpp:184:  Line contains only semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","google-cpp","semicolon","empty-statement","empty-block"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "packet_finder.hpp",
    "line": null,
    "function": null,
    "comment": "packet_finder.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "packet_finder.hpp",
    "line": 26,
    "function": null,
    "comment": "packet_finder.hpp:26:  Found C system header after C++ system header. Should be: packet_finder.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "packet_finder.hpp",
    "line": 27,
    "function": null,
    "comment": "packet_finder.hpp:27:  Found C system header after C++ system header. Should be: packet_finder.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "packet_finder.hpp",
    "line": 35,
    "function": null,
    "comment": "packet_finder.hpp:35:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "packet_finder.hpp",
    "line": 73,
    "function": null,
    "comment": "packet_finder.hpp:73:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "packet_finder.hpp",
    "line": 74,
    "function": null,
    "comment": "packet_finder.hpp:74:  public: should be indented +1 space inside class kobuki_PUBLIC  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "packet_finder.hpp",
    "line": 78,
    "function": null,
    "comment": "packet_finder.hpp:78:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "packet_finder.hpp",
    "line": 86,
    "function": null,
    "comment": "packet_finder.hpp:86:  protected: should be indented +1 space inside class kobuki_PUBLIC  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "packet_finder.hpp",
    "line": 87,
    "function": null,
    "comment": "packet_finder.hpp:87:  Do not leave a blank line after 'protected:'  [whitespace/blank_line] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","functions","code-blocks"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "packet_finder.hpp",
    "line": 104,
    "function": null,
    "comment": "packet_finder.hpp:104:  public: should be indented +1 space inside class kobuki_PUBLIC  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Do not use meaningless empty statements.",
    "file": "packet_finder.hpp",
    "line": 107,
    "function": null,
    "comment": "packet_finder.hpp:107:  You don't need a ; after a }  [readability/braces] [4]",
    "tags": ["code-standards","google-cpp","empty-statement","ambiguous-code"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "packet_finder.hpp",
    "line": 110,
    "function": null,
    "comment": "packet_finder.hpp:110:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "packet_finder.hpp",
    "line": 111,
    "function": null,
    "comment": "packet_finder.hpp:111:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "packet_finder.hpp",
    "line": 114,
    "function": null,
    "comment": "packet_finder.hpp:114:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "packet_finder.hpp",
    "line": 117,
    "function": null,
    "comment": "packet_finder.hpp:117:  Is this a non-const reference? If so, make const or use a pointer: BufferType & bufferRef  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "packet_finder.hpp",
    "line": 118,
    "function": null,
    "comment": "packet_finder.hpp:118:  Is this a non-const reference? If so, make const or use a pointer: BufferType & bufferRef  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "packet_finder.hpp",
    "line": 120,
    "function": null,
    "comment": "packet_finder.hpp:120:  protected: should be indented +1 space inside class kobuki_PUBLIC  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "packet_finder.hpp",
    "line": 122,
    "function": null,
    "comment": "packet_finder.hpp:122:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "packet_finder.hpp",
    "line": 123,
    "function": null,
    "comment": "packet_finder.hpp:123:  Is this a non-const reference? If so, make const or use a pointer: bool & foundPacket  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "packet_finder.hpp",
    "line": 124,
    "function": null,
    "comment": "packet_finder.hpp:124:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "packet_finder.hpp",
    "line": 124,
    "function": null,
    "comment": "packet_finder.hpp:124:  Is this a non-const reference? If so, make const or use a pointer: bool & foundPacket  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "packet_finder.hpp",
    "line": 127,
    "function": null,
    "comment": "packet_finder.hpp:127:  Namespace should be terminated with '// namespace kobuki'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "Don't use a semicolon to denote an empty statement. Use {} instead.",
    "file": "packet_finder.hpp",
    "line": 128,
    "function": null,
    "comment": "packet_finder.hpp:128:  Line contains only semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","google-cpp","semicolon","empty-statement","empty-block"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "packet_finder.hpp",
    "line": 109,
    "function": null,
    "comment": "packet_finder.hpp:109:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "version_info.cpp",
    "line": null,
    "function": null,
    "comment": "version_info.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "version_info.cpp",
    "line": 13,
    "function": null,
    "comment": "version_info.cpp:13:  Found C system header after C++ system header. Should be: version_info.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "version_info.cpp",
    "line": 14,
    "function": null,
    "comment": "version_info.cpp:14:  Found C system header after C++ system header. Should be: version_info.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "version_info.cpp",
    "line": 15,
    "function": null,
    "comment": "version_info.cpp:15:  Found C system header after C++ system header. Should be: version_info.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "version_info.cpp",
    "line": 23,
    "function": null,
    "comment": "version_info.cpp:23:  public: should be indented +1 space inside class KobukiManager  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "version_info.cpp",
    "line": 24,
    "function": null,
    "comment": "version_info.cpp:24:  Single-parameter constructors should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "version_info.cpp",
    "line": 27,
    "function": null,
    "comment": "version_info.cpp:27:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "version_info.cpp",
    "line": 29,
    "function": null,
    "comment": "version_info.cpp:29:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "version_info.cpp",
    "line": 29,
    "function": null,
    "comment": "version_info.cpp:29:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "version_info.cpp",
    "line": 30,
    "function": null,
    "comment": "version_info.cpp:30:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "version_info.cpp",
    "line": 43,
    "function": null,
    "comment": "version_info.cpp:43:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "version_info.cpp",
    "line": 45,
    "function": null,
    "comment": "version_info.cpp:45:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "version_info.cpp",
    "line": 55,
    "function": null,
    "comment": "version_info.cpp:55:  private: should be indented +1 space inside class KobukiManager  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "version_info.cpp",
    "line": 67,
    "function": null,
    "comment": "version_info.cpp:67:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "version_info.cpp",
    "line": 69,
    "function": null,
    "comment": "version_info.cpp:69:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "version_info.cpp",
    "line": 72,
    "function": null,
    "comment": "version_info.cpp:72:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Don't use a semicolon to denote an empty statement. Use {} instead.",
    "file": "version_info.cpp",
    "line": 77,
    "function": null,
    "comment": "version_info.cpp:77:  Empty loop bodies should use {} or continue  [whitespace/empty_loop_body] [5]",
    "tags": ["code-standards","formatting","google-cpp","semicolon","empty-statement","empty-block"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "version_info.cpp",
    "line": 78,
    "function": null,
    "comment": "version_info.cpp:78:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "version_info.cpp",
    "line": 79,
    "function": null,
    "comment": "version_info.cpp:79:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "version_info.cpp",
    "line": 80,
    "function": null,
    "comment": "version_info.cpp:80:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "simple_keyop.cpp",
    "line": 42,
    "function": null,
    "comment": "simple_keyop.cpp:42:  Include 'csignal' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "simple_keyop.cpp",
    "line": 43,
    "function": null,
    "comment": "simple_keyop.cpp:43:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "simple_keyop.cpp",
    "line": 43,
    "function": null,
    "comment": "simple_keyop.cpp:43:  Found C system header after C++ system header. Should be: simple_keyop.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "simple_keyop.cpp",
    "line": 44,
    "function": null,
    "comment": "simple_keyop.cpp:44:  Found C system header after C++ system header. Should be: simple_keyop.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "simple_keyop.cpp",
    "line": 45,
    "function": null,
    "comment": "simple_keyop.cpp:45:  Found C system header after C++ system header. Should be: simple_keyop.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "simple_keyop.cpp",
    "line": 46,
    "function": null,
    "comment": "simple_keyop.cpp:46:  Found C system header after C++ system header. Should be: simple_keyop.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "simple_keyop.cpp",
    "line": 47,
    "function": null,
    "comment": "simple_keyop.cpp:47:  Found C system header after C++ system header. Should be: simple_keyop.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "simple_keyop.cpp",
    "line": 48,
    "function": null,
    "comment": "simple_keyop.cpp:48:  Found C system header after C++ system header. Should be: simple_keyop.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "simple_keyop.cpp",
    "line": 49,
    "function": null,
    "comment": "simple_keyop.cpp:49:  Found C system header after C++ system header. Should be: simple_keyop.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "simple_keyop.cpp",
    "line": 61,
    "function": null,
    "comment": "simple_keyop.cpp:61:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "simple_keyop.cpp",
    "line": 62,
    "function": null,
    "comment": "simple_keyop.cpp:62:  public: should be indented +1 space inside class KobukiManager  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "simple_keyop.cpp",
    "line": 85,
    "function": null,
    "comment": "simple_keyop.cpp:85:  private: should be indented +1 space inside class KobukiManager  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "simple_keyop.cpp",
    "line": 132,
    "function": null,
    "comment": "simple_keyop.cpp:132:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "simple_keyop.cpp",
    "line": 133,
    "function": null,
    "comment": "simple_keyop.cpp:133:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "simple_keyop.cpp",
    "line": 134,
    "function": null,
    "comment": "simple_keyop.cpp:134:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "simple_keyop.cpp",
    "line": 134,
    "function": null,
    "comment": "simple_keyop.cpp:134:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "simple_keyop.cpp",
    "line": 138,
    "function": null,
    "comment": "simple_keyop.cpp:138:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "simple_keyop.cpp",
    "line": 139,
    "function": null,
    "comment": "simple_keyop.cpp:139:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "simple_keyop.cpp",
    "line": 139,
    "function": null,
    "comment": "simple_keyop.cpp:139:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "simple_keyop.cpp",
    "line": 139,
    "function": null,
    "comment": "simple_keyop.cpp:139:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "simple_keyop.cpp",
    "line": 148,
    "function": null,
    "comment": "simple_keyop.cpp:148:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "simple_keyop.cpp",
    "line": 152,
    "function": null,
    "comment": "simple_keyop.cpp:152:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "simple_keyop.cpp",
    "line": 153,
    "function": null,
    "comment": "simple_keyop.cpp:153:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "simple_keyop.cpp",
    "line": 154,
    "function": null,
    "comment": "simple_keyop.cpp:154:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "simple_keyop.cpp",
    "line": 155,
    "function": null,
    "comment": "simple_keyop.cpp:155:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "simple_keyop.cpp",
    "line": 192,
    "function": null,
    "comment": "simple_keyop.cpp:192:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "simple_keyop.cpp",
    "line": 201,
    "function": null,
    "comment": "simple_keyop.cpp:201:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "simple_keyop.cpp",
    "line": 218,
    "function": null,
    "comment": "simple_keyop.cpp:218:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "simple_keyop.cpp",
    "line": 236,
    "function": null,
    "comment": "simple_keyop.cpp:236:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "simple_keyop.cpp",
    "line": 238,
    "function": null,
    "comment": "simple_keyop.cpp:238:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "simple_keyop.cpp",
    "line": 252,
    "function": null,
    "comment": "simple_keyop.cpp:252:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "simple_keyop.cpp",
    "line": 261,
    "function": null,
    "comment": "simple_keyop.cpp:261:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "simple_keyop.cpp",
    "line": 262,
    "function": null,
    "comment": "simple_keyop.cpp:262:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "simple_keyop.cpp",
    "line": 262,
    "function": null,
    "comment": "simple_keyop.cpp:262:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "simple_keyop.cpp",
    "line": 267,
    "function": null,
    "comment": "simple_keyop.cpp:267:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "simple_keyop.cpp",
    "line": 267,
    "function": null,
    "comment": "simple_keyop.cpp:267:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "simple_keyop.cpp",
    "line": 272,
    "function": null,
    "comment": "simple_keyop.cpp:272:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "simple_keyop.cpp",
    "line": 272,
    "function": null,
    "comment": "simple_keyop.cpp:272:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "simple_keyop.cpp",
    "line": 277,
    "function": null,
    "comment": "simple_keyop.cpp:277:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "simple_keyop.cpp",
    "line": 277,
    "function": null,
    "comment": "simple_keyop.cpp:277:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "simple_keyop.cpp",
    "line": 282,
    "function": null,
    "comment": "simple_keyop.cpp:282:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "simple_keyop.cpp",
    "line": 282,
    "function": null,
    "comment": "simple_keyop.cpp:282:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "simple_keyop.cpp",
    "line": 307,
    "function": null,
    "comment": "simple_keyop.cpp:307:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "simple_keyop.cpp",
    "line": 309,
    "function": null,
    "comment": "simple_keyop.cpp:309:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "simple_keyop.cpp",
    "line": 312,
    "function": null,
    "comment": "simple_keyop.cpp:312:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "simple_keyop.cpp",
    "line": 319,
    "function": null,
    "comment": "simple_keyop.cpp:319:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "simple_keyop.cpp",
    "line": 321,
    "function": null,
    "comment": "simple_keyop.cpp:321:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "simple_keyop.cpp",
    "line": 324,
    "function": null,
    "comment": "simple_keyop.cpp:324:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "simple_keyop.cpp",
    "line": 331,
    "function": null,
    "comment": "simple_keyop.cpp:331:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "simple_keyop.cpp",
    "line": 333,
    "function": null,
    "comment": "simple_keyop.cpp:333:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "simple_keyop.cpp",
    "line": 336,
    "function": null,
    "comment": "simple_keyop.cpp:336:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "simple_keyop.cpp",
    "line": 343,
    "function": null,
    "comment": "simple_keyop.cpp:343:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "simple_keyop.cpp",
    "line": 345,
    "function": null,
    "comment": "simple_keyop.cpp:345:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "simple_keyop.cpp",
    "line": 348,
    "function": null,
    "comment": "simple_keyop.cpp:348:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "simple_keyop.cpp",
    "line": 352,
    "function": null,
    "comment": "simple_keyop.cpp:352:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "simple_keyop.cpp",
    "line": 365,
    "function": null,
    "comment": "simple_keyop.cpp:365:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "simple_keyop.cpp",
    "line": 366,
    "function": null,
    "comment": "simple_keyop.cpp:366:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "simple_keyop.cpp",
    "line": 367,
    "function": null,
    "comment": "simple_keyop.cpp:367:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "simple_keyop.cpp",
    "line": 367,
    "function": null,
    "comment": "simple_keyop.cpp:367:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "simple_keyop.cpp",
    "line": 390,
    "function": null,
    "comment": "simple_keyop.cpp:390:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "simple_keyop.cpp",
    "line": 393,
    "function": null,
    "comment": "simple_keyop.cpp:393:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "simple_keyop.cpp",
    "line": 400,
    "function": null,
    "comment": "simple_keyop.cpp:400:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "simple_keyop.cpp",
    "line": 403,
    "function": null,
    "comment": "simple_keyop.cpp:403:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "core_sensors.cpp",
    "line": null,
    "function": null,
    "comment": "core_sensors.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "core_sensors.cpp",
    "line": 28,
    "function": null,
    "comment": "core_sensors.cpp:28:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "core_sensors.cpp",
    "line": 31,
    "function": null,
    "comment": "core_sensors.cpp:31:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "core_sensors.cpp",
    "line": 31,
    "function": null,
    "comment": "core_sensors.cpp:31:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "core_sensors.cpp",
    "line": 31,
    "function": null,
    "comment": "core_sensors.cpp:31:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "core_sensors.cpp",
    "line": 32,
    "function": null,
    "comment": "core_sensors.cpp:32:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "core_sensors.cpp",
    "line": 32,
    "function": null,
    "comment": "core_sensors.cpp:32:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "core_sensors.cpp",
    "line": 33,
    "function": null,
    "comment": "core_sensors.cpp:33:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "core_sensors.cpp",
    "line": 33,
    "function": null,
    "comment": "core_sensors.cpp:33:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "core_sensors.cpp",
    "line": 33,
    "function": null,
    "comment": "core_sensors.cpp:33:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "core_sensors.cpp",
    "line": 34,
    "function": null,
    "comment": "core_sensors.cpp:34:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "core_sensors.cpp",
    "line": 34,
    "function": null,
    "comment": "core_sensors.cpp:34:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "core_sensors.cpp",
    "line": 35,
    "function": null,
    "comment": "core_sensors.cpp:35:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "core_sensors.cpp",
    "line": 35,
    "function": null,
    "comment": "core_sensors.cpp:35:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "core_sensors.cpp",
    "line": 35,
    "function": null,
    "comment": "core_sensors.cpp:35:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "core_sensors.cpp",
    "line": 36,
    "function": null,
    "comment": "core_sensors.cpp:36:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "core_sensors.cpp",
    "line": 36,
    "function": null,
    "comment": "core_sensors.cpp:36:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "core_sensors.cpp",
    "line": 36,
    "function": null,
    "comment": "core_sensors.cpp:36:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "core_sensors.cpp",
    "line": 37,
    "function": null,
    "comment": "core_sensors.cpp:37:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "core_sensors.cpp",
    "line": 37,
    "function": null,
    "comment": "core_sensors.cpp:37:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "core_sensors.cpp",
    "line": 37,
    "function": null,
    "comment": "core_sensors.cpp:37:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "core_sensors.cpp",
    "line": 38,
    "function": null,
    "comment": "core_sensors.cpp:38:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "core_sensors.cpp",
    "line": 38,
    "function": null,
    "comment": "core_sensors.cpp:38:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "core_sensors.cpp",
    "line": 38,
    "function": null,
    "comment": "core_sensors.cpp:38:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "core_sensors.cpp",
    "line": 39,
    "function": null,
    "comment": "core_sensors.cpp:39:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "core_sensors.cpp",
    "line": 39,
    "function": null,
    "comment": "core_sensors.cpp:39:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "core_sensors.cpp",
    "line": 40,
    "function": null,
    "comment": "core_sensors.cpp:40:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "core_sensors.cpp",
    "line": 40,
    "function": null,
    "comment": "core_sensors.cpp:40:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "core_sensors.cpp",
    "line": 41,
    "function": null,
    "comment": "core_sensors.cpp:41:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "core_sensors.cpp",
    "line": 41,
    "function": null,
    "comment": "core_sensors.cpp:41:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "core_sensors.cpp",
    "line": 42,
    "function": null,
    "comment": "core_sensors.cpp:42:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "core_sensors.cpp",
    "line": 42,
    "function": null,
    "comment": "core_sensors.cpp:42:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "core_sensors.cpp",
    "line": 42,
    "function": null,
    "comment": "core_sensors.cpp:42:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "core_sensors.cpp",
    "line": 47,
    "function": null,
    "comment": "core_sensors.cpp:47:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "core_sensors.cpp",
    "line": 49,
    "function": null,
    "comment": "core_sensors.cpp:49:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "core_sensors.cpp",
    "line": 50,
    "function": null,
    "comment": "core_sensors.cpp:50:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "core_sensors.cpp",
    "line": 50,
    "function": null,
    "comment": "core_sensors.cpp:50:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "core_sensors.cpp",
    "line": 57,
    "function": null,
    "comment": "core_sensors.cpp:57:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "core_sensors.cpp",
    "line": 58,
    "function": null,
    "comment": "core_sensors.cpp:58:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "core_sensors.cpp",
    "line": 78,
    "function": null,
    "comment": "core_sensors.cpp:78:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "packet_finder.cpp",
    "line": null,
    "function": null,
    "comment": "packet_finder.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "packet_finder.cpp",
    "line": 29,
    "function": null,
    "comment": "packet_finder.cpp:29:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "packet_finder.cpp",
    "line": 38,
    "function": null,
    "comment": "packet_finder.cpp:38:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "packet_finder.cpp",
    "line": 39,
    "function": null,
    "comment": "packet_finder.cpp:39:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "packet_finder.cpp",
    "line": 40,
    "function": null,
    "comment": "packet_finder.cpp:40:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "packet_finder.cpp",
    "line": 50,
    "function": null,
    "comment": "packet_finder.cpp:50:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "packet_finder.cpp",
    "line": 56,
    "function": null,
    "comment": "packet_finder.cpp:56:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "packet_finder.cpp",
    "line": 63,
    "function": null,
    "comment": "packet_finder.cpp:63:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "packet_finder.cpp",
    "line": 69,
    "function": null,
    "comment": "packet_finder.cpp:69:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "packet_finder.cpp",
    "line": 74,
    "function": null,
    "comment": "packet_finder.cpp:74:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "packet_finder.cpp",
    "line": 79,
    "function": null,
    "comment": "packet_finder.cpp:79:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "packet_finder.cpp",
    "line": 83,
    "function": null,
    "comment": "packet_finder.cpp:83:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "packet_finder.cpp",
    "line": 104,
    "function": null,
    "comment": "packet_finder.cpp:104:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "packet_finder.cpp",
    "line": 111,
    "function": null,
    "comment": "packet_finder.cpp:111:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "packet_finder.cpp",
    "line": 116,
    "function": null,
    "comment": "packet_finder.cpp:116:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "packet_finder.cpp",
    "line": 118,
    "function": null,
    "comment": "packet_finder.cpp:118:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "packet_finder.cpp",
    "line": 118,
    "function": null,
    "comment": "packet_finder.cpp:118:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "packet_finder.cpp",
    "line": 118,
    "function": null,
    "comment": "packet_finder.cpp:118:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "packet_finder.cpp",
    "line": 119,
    "function": null,
    "comment": "packet_finder.cpp:119:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "packet_finder.cpp",
    "line": 131,
    "function": null,
    "comment": "packet_finder.cpp:131:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "packet_finder.cpp",
    "line": 132,
    "function": null,
    "comment": "packet_finder.cpp:132:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "packet_finder.cpp",
    "line": 133,
    "function": null,
    "comment": "packet_finder.cpp:133:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "packet_finder.cpp",
    "line": 134,
    "function": null,
    "comment": "packet_finder.cpp:134:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "packet_finder.cpp",
    "line": 145,
    "function": null,
    "comment": "packet_finder.cpp:145:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "packet_finder.cpp",
    "line": 148,
    "function": null,
    "comment": "packet_finder.cpp:148:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "packet_finder.cpp",
    "line": 150,
    "function": null,
    "comment": "packet_finder.cpp:150:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "packet_finder.cpp",
    "line": 151,
    "function": null,
    "comment": "packet_finder.cpp:151:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "packet_finder.cpp",
    "line": 153,
    "function": null,
    "comment": "packet_finder.cpp:153:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "packet_finder.cpp",
    "line": 154,
    "function": null,
    "comment": "packet_finder.cpp:154:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "packet_finder.cpp",
    "line": 156,
    "function": null,
    "comment": "packet_finder.cpp:156:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "packet_finder.cpp",
    "line": 160,
    "function": null,
    "comment": "packet_finder.cpp:160:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "packet_finder.cpp",
    "line": 161,
    "function": null,
    "comment": "packet_finder.cpp:161:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "packet_finder.cpp",
    "line": 163,
    "function": null,
    "comment": "packet_finder.cpp:163:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "packet_finder.cpp",
    "line": 171,
    "function": null,
    "comment": "packet_finder.cpp:171:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "packet_finder.cpp",
    "line": 178,
    "function": null,
    "comment": "packet_finder.cpp:178:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "packet_finder.cpp",
    "line": 185,
    "function": null,
    "comment": "packet_finder.cpp:185:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "packet_finder.cpp",
    "line": 195,
    "function": null,
    "comment": "packet_finder.cpp:195:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "packet_finder.cpp",
    "line": 195,
    "function": null,
    "comment": "packet_finder.cpp:195:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "packet_finder.cpp",
    "line": 195,
    "function": null,
    "comment": "packet_finder.cpp:195:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "packet_finder.cpp",
    "line": 205,
    "function": null,
    "comment": "packet_finder.cpp:205:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "packet_finder.cpp",
    "line": 213,
    "function": null,
    "comment": "packet_finder.cpp:213:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "packet_finder.cpp",
    "line": 215,
    "function": null,
    "comment": "packet_finder.cpp:215:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "packet_finder.cpp",
    "line": 225,
    "function": null,
    "comment": "packet_finder.cpp:225:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "packet_finder.cpp",
    "line": 226,
    "function": null,
    "comment": "packet_finder.cpp:226:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "packet_finder.cpp",
    "line": 235,
    "function": null,
    "comment": "packet_finder.cpp:235:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "packet_finder.cpp",
    "line": 243,
    "function": null,
    "comment": "packet_finder.cpp:243:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "packet_finder.cpp",
    "line": 246,
    "function": null,
    "comment": "packet_finder.cpp:246:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "packet_finder.cpp",
    "line": 247,
    "function": null,
    "comment": "packet_finder.cpp:247:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "packet_finder.cpp",
    "line": 249,
    "function": null,
    "comment": "packet_finder.cpp:249:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "packet_finder.cpp",
    "line": 250,
    "function": null,
    "comment": "packet_finder.cpp:250:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "packet_finder.cpp",
    "line": 270,
    "function": null,
    "comment": "packet_finder.cpp:270:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "packet_finder.cpp",
    "line": 278,
    "function": null,
    "comment": "packet_finder.cpp:278:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "packet_finder.cpp",
    "line": 279,
    "function": null,
    "comment": "packet_finder.cpp:279:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "packet_finder.cpp",
    "line": 286,
    "function": null,
    "comment": "packet_finder.cpp:286:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "packet_finder.cpp",
    "line": 289,
    "function": null,
    "comment": "packet_finder.cpp:289:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "packet_finder.cpp",
    "line": 290,
    "function": null,
    "comment": "packet_finder.cpp:290:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "packet_finder.cpp",
    "line": 293,
    "function": null,
    "comment": "packet_finder.cpp:293:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "packet_finder.cpp",
    "line": 295,
    "function": null,
    "comment": "packet_finder.cpp:295:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "packet_finder.cpp",
    "line": 301,
    "function": null,
    "comment": "packet_finder.cpp:301:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "packet_finder.cpp",
    "line": 313,
    "function": null,
    "comment": "packet_finder.cpp:313:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "packet_finder.cpp",
    "line": 314,
    "function": null,
    "comment": "packet_finder.cpp:314:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "packet_finder.cpp",
    "line": 317,
    "function": null,
    "comment": "packet_finder.cpp:317:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "packet_finder.cpp",
    "line": 326,
    "function": null,
    "comment": "packet_finder.cpp:326:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "packet_finder.cpp",
    "line": 328,
    "function": null,
    "comment": "packet_finder.cpp:328:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "packet_finder.cpp",
    "line": 328,
    "function": null,
    "comment": "packet_finder.cpp:328:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "packet_finder.cpp",
    "line": 328,
    "function": null,
    "comment": "packet_finder.cpp:328:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "packet_finder.cpp",
    "line": 329,
    "function": null,
    "comment": "packet_finder.cpp:329:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "packet_finder.cpp",
    "line": 329,
    "function": null,
    "comment": "packet_finder.cpp:329:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Whitespace inside parenthesis should be consistent, and should consist of either zero or one space.",
    "file": "packet_finder.cpp",
    "line": 341,
    "function": null,
    "comment": "packet_finder.cpp:341:  Mismatching spaces inside () in for  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "packet_finder.cpp",
    "line": 342,
    "function": null,
    "comment": "packet_finder.cpp:342:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "packet_finder.cpp",
    "line": 350,
    "function": null,
    "comment": "packet_finder.cpp:350:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "packet_finder.cpp",
    "line": 351,
    "function": null,
    "comment": "packet_finder.cpp:351:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "packet_finder.cpp",
    "line": 354,
    "function": null,
    "comment": "packet_finder.cpp:354:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "packet_finder.cpp",
    "line": 355,
    "function": null,
    "comment": "packet_finder.cpp:355:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Whitespace inside parenthesis should be consistent, and should consist of either zero or one space.",
    "file": "packet_finder.cpp",
    "line": 358,
    "function": null,
    "comment": "packet_finder.cpp:358:  Mismatching spaces inside () in for  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "packet_finder.cpp",
    "line": 365,
    "function": null,
    "comment": "packet_finder.cpp:365:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "packet_finder.cpp",
    "line": 366,
    "function": null,
    "comment": "packet_finder.cpp:366:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "packet_finder.cpp",
    "line": 367,
    "function": null,
    "comment": "packet_finder.cpp:367:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "packet_finder.cpp",
    "line": 369,
    "function": null,
    "comment": "packet_finder.cpp:369:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "packet_finder.cpp",
    "line": 380,
    "function": null,
    "comment": "packet_finder.cpp:380:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "packet_finder.cpp",
    "line": 54,
    "function": null,
    "comment": "packet_finder.cpp:54:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "event_manager.cpp",
    "line": null,
    "function": null,
    "comment": "event_manager.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "event_manager.cpp",
    "line": 28,
    "function": null,
    "comment": "event_manager.cpp:28:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "event_manager.cpp",
    "line": 28,
    "function": null,
    "comment": "event_manager.cpp:28:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "event_manager.cpp",
    "line": 43,
    "function": null,
    "comment": "event_manager.cpp:43:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "event_manager.cpp",
    "line": 45,
    "function": null,
    "comment": "event_manager.cpp:45:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "event_manager.cpp",
    "line": 56,
    "function": null,
    "comment": "event_manager.cpp:56:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "event_manager.cpp",
    "line": 66,
    "function": null,
    "comment": "event_manager.cpp:66:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "event_manager.cpp",
    "line": 76,
    "function": null,
    "comment": "event_manager.cpp:76:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "event_manager.cpp",
    "line": 92,
    "function": null,
    "comment": "event_manager.cpp:92:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "event_manager.cpp",
    "line": 96,
    "function": null,
    "comment": "event_manager.cpp:96:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "event_manager.cpp",
    "line": 106,
    "function": null,
    "comment": "event_manager.cpp:106:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "event_manager.cpp",
    "line": 116,
    "function": null,
    "comment": "event_manager.cpp:116:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "event_manager.cpp",
    "line": 132,
    "function": null,
    "comment": "event_manager.cpp:132:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "event_manager.cpp",
    "line": 147,
    "function": null,
    "comment": "event_manager.cpp:147:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "event_manager.cpp",
    "line": 175,
    "function": null,
    "comment": "event_manager.cpp:175:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "event_manager.cpp",
    "line": 179,
    "function": null,
    "comment": "event_manager.cpp:179:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "event_manager.cpp",
    "line": 189,
    "function": null,
    "comment": "event_manager.cpp:189:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "event_manager.cpp",
    "line": 205,
    "function": null,
    "comment": "event_manager.cpp:205:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "event_manager.cpp",
    "line": 210,
    "function": null,
    "comment": "event_manager.cpp:210:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "event_manager.cpp",
    "line": 213,
    "function": null,
    "comment": "event_manager.cpp:213:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "event_manager.cpp",
    "line": 232,
    "function": null,
    "comment": "event_manager.cpp:232:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "event_manager.cpp",
    "line": 237,
    "function": null,
    "comment": "event_manager.cpp:237:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "event_manager.cpp",
    "line": 240,
    "function": null,
    "comment": "event_manager.cpp:240:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "event_manager.cpp",
    "line": 262,
    "function": null,
    "comment": "event_manager.cpp:262:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "event_manager.cpp",
    "line": 264,
    "function": null,
    "comment": "event_manager.cpp:264:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "event_manager.cpp",
    "line": 284,
    "function": null,
    "comment": "event_manager.cpp:284:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "event_manager.cpp",
    "line": 288,
    "function": null,
    "comment": "event_manager.cpp:288:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "event_manager.cpp",
    "line": 298,
    "function": null,
    "comment": "event_manager.cpp:298:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "event_manager.cpp",
    "line": 35,
    "function": null,
    "comment": "event_manager.cpp:35:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "event_manager.cpp",
    "line": 43,
    "function": null,
    "comment": "event_manager.cpp:43:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "diff_drive.cpp",
    "line": null,
    "function": null,
    "comment": "diff_drive.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "diff_drive.cpp",
    "line": 33,
    "function": null,
    "comment": "diff_drive.cpp:33:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "diff_drive.cpp",
    "line": 34,
    "function": null,
    "comment": "diff_drive.cpp:34:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "diff_drive.cpp",
    "line": 34,
    "function": null,
    "comment": "diff_drive.cpp:34:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "diff_drive.cpp",
    "line": 35,
    "function": null,
    "comment": "diff_drive.cpp:35:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "diff_drive.cpp",
    "line": 36,
    "function": null,
    "comment": "diff_drive.cpp:36:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "diff_drive.cpp",
    "line": 62,
    "function": null,
    "comment": "diff_drive.cpp:62:  Use int16/int64/etc, rather than the C type short  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "diff_drive.cpp",
    "line": 63,
    "function": null,
    "comment": "diff_drive.cpp:63:  Use int16/int64/etc, rather than the C type short  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "diff_drive.cpp",
    "line": 64,
    "function": null,
    "comment": "diff_drive.cpp:64:  Use int16/int64/etc, rather than the C type short  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "diff_drive.cpp",
    "line": 68,
    "function": null,
    "comment": "diff_drive.cpp:68:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "diff_drive.cpp",
    "line": 72,
    "function": null,
    "comment": "diff_drive.cpp:72:  Using C-style cast.  Use static_cast<double>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "diff_drive.cpp",
    "line": 72,
    "function": null,
    "comment": "diff_drive.cpp:72:  Use int16/int64/etc, rather than the C type short  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "diff_drive.cpp",
    "line": 78,
    "function": null,
    "comment": "diff_drive.cpp:78:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "diff_drive.cpp",
    "line": 82,
    "function": null,
    "comment": "diff_drive.cpp:82:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "diff_drive.cpp",
    "line": 82,
    "function": null,
    "comment": "diff_drive.cpp:82:  Using C-style cast.  Use static_cast<double>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "diff_drive.cpp",
    "line": 82,
    "function": null,
    "comment": "diff_drive.cpp:82:  Use int16/int64/etc, rather than the C type short  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "diff_drive.cpp",
    "line": 86,
    "function": null,
    "comment": "diff_drive.cpp:86:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "To-do comments should look like '// TODO(my_username): Stuff.'.",
    "file": "diff_drive.cpp",
    "line": 86,
    "function": null,
    "comment": "diff_drive.cpp:86:  Missing username in TODO; it should look like '// TODO(my_username): Stuff.'  [readability/todo] [2]",
    "tags": ["comments","code-standards","formatting","google-cpp","todo-comment"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "diff_drive.cpp",
    "line": 87,
    "function": null,
    "comment": "diff_drive.cpp:87:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "diff_drive.cpp",
    "line": 90,
    "function": null,
    "comment": "diff_drive.cpp:90:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "diff_drive.cpp",
    "line": 91,
    "function": null,
    "comment": "diff_drive.cpp:91:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "diff_drive.cpp",
    "line": 91,
    "function": null,
    "comment": "diff_drive.cpp:91:  Using C-style cast.  Use static_cast<double>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "diff_drive.cpp",
    "line": 91,
    "function": null,
    "comment": "diff_drive.cpp:91:  Use int16/int64/etc, rather than the C type short  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "diff_drive.cpp",
    "line": 114,
    "function": null,
    "comment": "diff_drive.cpp:114:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "diff_drive.cpp",
    "line": 115,
    "function": null,
    "comment": "diff_drive.cpp:115:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "diff_drive.cpp",
    "line": 140,
    "function": null,
    "comment": "diff_drive.cpp:140:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "diff_drive.cpp",
    "line": 149,
    "function": null,
    "comment": "diff_drive.cpp:149:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "diff_drive.cpp",
    "line": 157,
    "function": null,
    "comment": "diff_drive.cpp:157:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "diff_drive.cpp",
    "line": 166,
    "function": null,
    "comment": "diff_drive.cpp:166:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "diff_drive.cpp",
    "line": 166,
    "function": null,
    "comment": "diff_drive.cpp:166:  Use int16/int64/etc, rather than the C type short  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "diff_drive.cpp",
    "line": 169,
    "function": null,
    "comment": "diff_drive.cpp:169:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "diff_drive.cpp",
    "line": 174,
    "function": null,
    "comment": "diff_drive.cpp:174:  Use int16/int64/etc, rather than the C type short  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "diff_drive.cpp",
    "line": 176,
    "function": null,
    "comment": "diff_drive.cpp:176:  Use int16/int64/etc, rather than the C type short  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "diff_drive.cpp",
    "line": 178,
    "function": null,
    "comment": "diff_drive.cpp:178:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "diff_drive.cpp",
    "line": 187,
    "function": null,
    "comment": "diff_drive.cpp:187:  Use int16/int64/etc, rather than the C type short  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "diff_drive.cpp",
    "line": 190,
    "function": null,
    "comment": "diff_drive.cpp:190:  Use int16/int64/etc, rather than the C type short  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "diff_drive.cpp",
    "line": 193,
    "function": null,
    "comment": "diff_drive.cpp:193:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "diff_drive.cpp",
    "line": 183,
    "function": null,
    "comment": "diff_drive.cpp:183:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "kobuki.cpp",
    "line": null,
    "function": null,
    "comment": "kobuki.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "kobuki.cpp",
    "line": 14,
    "function": null,
    "comment": "kobuki.cpp:14:  Found C system header after C++ system header. Should be: kobuki.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "kobuki.cpp",
    "line": 15,
    "function": null,
    "comment": "kobuki.cpp:15:  Found C system header after C++ system header. Should be: kobuki.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "kobuki.cpp",
    "line": 16,
    "function": null,
    "comment": "kobuki.cpp:16:  Found C system header after C++ system header. Should be: kobuki.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "kobuki.cpp",
    "line": 17,
    "function": null,
    "comment": "kobuki.cpp:17:  Found C system header after C++ system header. Should be: kobuki.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "kobuki.cpp",
    "line": 18,
    "function": null,
    "comment": "kobuki.cpp:18:  Found C system header after C++ system header. Should be: kobuki.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not include the same file twice.",
    "file": "kobuki.cpp",
    "line": 19,
    "function": null,
    "comment": "kobuki.cpp:19:  'ecl/geometry/angle.hpp' already included at kobuki.cpp:15  [build/include] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "kobuki.cpp",
    "line": 20,
    "function": null,
    "comment": "kobuki.cpp:20:  Found C system header after C++ system header. Should be: kobuki.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki.cpp",
    "line": 29,
    "function": null,
    "comment": "kobuki.cpp:29:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki.cpp",
    "line": 36,
    "function": null,
    "comment": "kobuki.cpp:36:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki.cpp",
    "line": 40,
    "function": null,
    "comment": "kobuki.cpp:40:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki.cpp",
    "line": 59,
    "function": null,
    "comment": "kobuki.cpp:59:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki.cpp",
    "line": 66,
    "function": null,
    "comment": "kobuki.cpp:66:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "kobuki.cpp",
    "line": 68,
    "function": null,
    "comment": "kobuki.cpp:68:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "kobuki.cpp",
    "line": 73,
    "function": null,
    "comment": "kobuki.cpp:73:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki.cpp",
    "line": 74,
    "function": null,
    "comment": "kobuki.cpp:74:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "kobuki.cpp",
    "line": 75,
    "function": null,
    "comment": "kobuki.cpp:75:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","functions","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki.cpp",
    "line": 77,
    "function": null,
    "comment": "kobuki.cpp:77:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 78,
    "function": null,
    "comment": "kobuki.cpp:78:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 86,
    "function": null,
    "comment": "kobuki.cpp:86:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 88,
    "function": null,
    "comment": "kobuki.cpp:88:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 89,
    "function": null,
    "comment": "kobuki.cpp:89:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 90,
    "function": null,
    "comment": "kobuki.cpp:90:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 91,
    "function": null,
    "comment": "kobuki.cpp:91:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "kobuki.cpp",
    "line": 91,
    "function": null,
    "comment": "kobuki.cpp:91:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 100,
    "function": null,
    "comment": "kobuki.cpp:100:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "kobuki.cpp",
    "line": 102,
    "function": null,
    "comment": "kobuki.cpp:102:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki.cpp",
    "line": 105,
    "function": null,
    "comment": "kobuki.cpp:105:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 107,
    "function": null,
    "comment": "kobuki.cpp:107:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "kobuki.cpp",
    "line": 107,
    "function": null,
    "comment": "kobuki.cpp:107:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "kobuki.cpp",
    "line": 136,
    "function": null,
    "comment": "kobuki.cpp:136:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki.cpp",
    "line": 177,
    "function": null,
    "comment": "kobuki.cpp:177:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki.cpp",
    "line": 187,
    "function": null,
    "comment": "kobuki.cpp:187:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 193,
    "function": null,
    "comment": "kobuki.cpp:193:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 194,
    "function": null,
    "comment": "kobuki.cpp:194:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "kobuki.cpp",
    "line": 197,
    "function": null,
    "comment": "kobuki.cpp:197:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki.cpp",
    "line": 203,
    "function": null,
    "comment": "kobuki.cpp:203:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 206,
    "function": null,
    "comment": "kobuki.cpp:206:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 208,
    "function": null,
    "comment": "kobuki.cpp:208:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 210,
    "function": null,
    "comment": "kobuki.cpp:210:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "kobuki.cpp",
    "line": 213,
    "function": null,
    "comment": "kobuki.cpp:213:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "kobuki.cpp",
    "line": 223,
    "function": null,
    "comment": "kobuki.cpp:223:  Using C-style cast.  Use reinterpret_cast<char*>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki.cpp",
    "line": 225,
    "function": null,
    "comment": "kobuki.cpp:225:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki.cpp",
    "line": 227,
    "function": null,
    "comment": "kobuki.cpp:227:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "kobuki.cpp",
    "line": 236,
    "function": null,
    "comment": "kobuki.cpp:236:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki.cpp",
    "line": 237,
    "function": null,
    "comment": "kobuki.cpp:237:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 240,
    "function": null,
    "comment": "kobuki.cpp:240:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "kobuki.cpp",
    "line": 241,
    "function": null,
    "comment": "kobuki.cpp:241:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 246,
    "function": null,
    "comment": "kobuki.cpp:246:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "kobuki.cpp",
    "line": 246,
    "function": null,
    "comment": "kobuki.cpp:246:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki.cpp",
    "line": 247,
    "function": null,
    "comment": "kobuki.cpp:247:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 249,
    "function": null,
    "comment": "kobuki.cpp:249:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "kobuki.cpp",
    "line": 249,
    "function": null,
    "comment": "kobuki.cpp:249:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 252,
    "function": null,
    "comment": "kobuki.cpp:252:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "kobuki.cpp",
    "line": 252,
    "function": null,
    "comment": "kobuki.cpp:252:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki.cpp",
    "line": 256,
    "function": null,
    "comment": "kobuki.cpp:256:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "kobuki.cpp",
    "line": 257,
    "function": null,
    "comment": "kobuki.cpp:257:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "kobuki.cpp",
    "line": 258,
    "function": null,
    "comment": "kobuki.cpp:258:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "kobuki.cpp",
    "line": 259,
    "function": null,
    "comment": "kobuki.cpp:259:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "kobuki.cpp",
    "line": 260,
    "function": null,
    "comment": "kobuki.cpp:260:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "kobuki.cpp",
    "line": 261,
    "function": null,
    "comment": "kobuki.cpp:261:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki.cpp",
    "line": 263,
    "function": null,
    "comment": "kobuki.cpp:263:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 266,
    "function": null,
    "comment": "kobuki.cpp:266:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "kobuki.cpp",
    "line": 266,
    "function": null,
    "comment": "kobuki.cpp:266:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "kobuki.cpp",
    "line": 266,
    "function": null,
    "comment": "kobuki.cpp:266:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 270,
    "function": null,
    "comment": "kobuki.cpp:270:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "kobuki.cpp",
    "line": 270,
    "function": null,
    "comment": "kobuki.cpp:270:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "kobuki.cpp",
    "line": 270,
    "function": null,
    "comment": "kobuki.cpp:270:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 273,
    "function": null,
    "comment": "kobuki.cpp:273:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "kobuki.cpp",
    "line": 273,
    "function": null,
    "comment": "kobuki.cpp:273:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "kobuki.cpp",
    "line": 273,
    "function": null,
    "comment": "kobuki.cpp:273:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 275,
    "function": null,
    "comment": "kobuki.cpp:275:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 277,
    "function": null,
    "comment": "kobuki.cpp:277:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 280,
    "function": null,
    "comment": "kobuki.cpp:280:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "kobuki.cpp",
    "line": 280,
    "function": null,
    "comment": "kobuki.cpp:280:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "kobuki.cpp",
    "line": 280,
    "function": null,
    "comment": "kobuki.cpp:280:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 283,
    "function": null,
    "comment": "kobuki.cpp:283:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "kobuki.cpp",
    "line": 283,
    "function": null,
    "comment": "kobuki.cpp:283:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "kobuki.cpp",
    "line": 283,
    "function": null,
    "comment": "kobuki.cpp:283:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 286,
    "function": null,
    "comment": "kobuki.cpp:286:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "kobuki.cpp",
    "line": 286,
    "function": null,
    "comment": "kobuki.cpp:286:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "kobuki.cpp",
    "line": 286,
    "function": null,
    "comment": "kobuki.cpp:286:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 290,
    "function": null,
    "comment": "kobuki.cpp:290:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "kobuki.cpp",
    "line": 290,
    "function": null,
    "comment": "kobuki.cpp:290:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "kobuki.cpp",
    "line": 290,
    "function": null,
    "comment": "kobuki.cpp:290:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 294,
    "function": null,
    "comment": "kobuki.cpp:294:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "kobuki.cpp",
    "line": 294,
    "function": null,
    "comment": "kobuki.cpp:294:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "kobuki.cpp",
    "line": 294,
    "function": null,
    "comment": "kobuki.cpp:294:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 295,
    "function": null,
    "comment": "kobuki.cpp:295:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "kobuki.cpp",
    "line": 295,
    "function": null,
    "comment": "kobuki.cpp:295:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 298,
    "function": null,
    "comment": "kobuki.cpp:298:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "kobuki.cpp",
    "line": 298,
    "function": null,
    "comment": "kobuki.cpp:298:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "kobuki.cpp",
    "line": 298,
    "function": null,
    "comment": "kobuki.cpp:298:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki.cpp",
    "line": 300,
    "function": null,
    "comment": "kobuki.cpp:300:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 301,
    "function": null,
    "comment": "kobuki.cpp:301:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 304,
    "function": null,
    "comment": "kobuki.cpp:304:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 305,
    "function": null,
    "comment": "kobuki.cpp:305:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 306,
    "function": null,
    "comment": "kobuki.cpp:306:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 307,
    "function": null,
    "comment": "kobuki.cpp:307:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "kobuki.cpp",
    "line": 310,
    "function": null,
    "comment": "kobuki.cpp:310:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "kobuki.cpp",
    "line": 310,
    "function": null,
    "comment": "kobuki.cpp:310:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 311,
    "function": null,
    "comment": "kobuki.cpp:311:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "kobuki.cpp",
    "line": 314,
    "function": null,
    "comment": "kobuki.cpp:314:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki.cpp",
    "line": 315,
    "function": null,
    "comment": "kobuki.cpp:315:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 319,
    "function": null,
    "comment": "kobuki.cpp:319:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 320,
    "function": null,
    "comment": "kobuki.cpp:320:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 321,
    "function": null,
    "comment": "kobuki.cpp:321:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 322,
    "function": null,
    "comment": "kobuki.cpp:322:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 323,
    "function": null,
    "comment": "kobuki.cpp:323:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "kobuki.cpp",
    "line": 325,
    "function": null,
    "comment": "kobuki.cpp:325:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "kobuki.cpp",
    "line": 325,
    "function": null,
    "comment": "kobuki.cpp:325:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 326,
    "function": null,
    "comment": "kobuki.cpp:326:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki.cpp",
    "line": 331,
    "function": null,
    "comment": "kobuki.cpp:331:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 333,
    "function": null,
    "comment": "kobuki.cpp:333:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 338,
    "function": null,
    "comment": "kobuki.cpp:338:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "kobuki.cpp",
    "line": 338,
    "function": null,
    "comment": "kobuki.cpp:338:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "kobuki.cpp",
    "line": 338,
    "function": null,
    "comment": "kobuki.cpp:338:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 339,
    "function": null,
    "comment": "kobuki.cpp:339:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "kobuki.cpp",
    "line": 339,
    "function": null,
    "comment": "kobuki.cpp:339:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 340,
    "function": null,
    "comment": "kobuki.cpp:340:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "kobuki.cpp",
    "line": 340,
    "function": null,
    "comment": "kobuki.cpp:340:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 341,
    "function": null,
    "comment": "kobuki.cpp:341:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 342,
    "function": null,
    "comment": "kobuki.cpp:342:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 346,
    "function": null,
    "comment": "kobuki.cpp:346:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "kobuki.cpp",
    "line": 346,
    "function": null,
    "comment": "kobuki.cpp:346:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "kobuki.cpp",
    "line": 346,
    "function": null,
    "comment": "kobuki.cpp:346:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "kobuki.cpp",
    "line": 350,
    "function": null,
    "comment": "kobuki.cpp:350:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "kobuki.cpp",
    "line": 355,
    "function": null,
    "comment": "kobuki.cpp:355:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "kobuki.cpp",
    "line": 362,
    "function": null,
    "comment": "kobuki.cpp:362:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 363,
    "function": null,
    "comment": "kobuki.cpp:363:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "kobuki.cpp",
    "line": 363,
    "function": null,
    "comment": "kobuki.cpp:363:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 364,
    "function": null,
    "comment": "kobuki.cpp:364:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "kobuki.cpp",
    "line": 364,
    "function": null,
    "comment": "kobuki.cpp:364:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "kobuki.cpp",
    "line": 366,
    "function": null,
    "comment": "kobuki.cpp:366:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki.cpp",
    "line": 367,
    "function": null,
    "comment": "kobuki.cpp:367:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki.cpp",
    "line": 370,
    "function": null,
    "comment": "kobuki.cpp:370:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 372,
    "function": null,
    "comment": "kobuki.cpp:372:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki.cpp",
    "line": 380,
    "function": null,
    "comment": "kobuki.cpp:380:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 381,
    "function": null,
    "comment": "kobuki.cpp:381:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Whitespace inside parenthesis should be consistent, and should consist of either zero or one space.",
    "file": "kobuki.cpp",
    "line": 381,
    "function": null,
    "comment": "kobuki.cpp:381:  Mismatching spaces inside () in if  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Whitespace inside parenthesis should be consistent, and should consist of either zero or one space.",
    "file": "kobuki.cpp",
    "line": 402,
    "function": null,
    "comment": "kobuki.cpp:402:  Mismatching spaces inside () in for  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 408,
    "function": null,
    "comment": "kobuki.cpp:408:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 409,
    "function": null,
    "comment": "kobuki.cpp:409:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki.cpp",
    "line": 419,
    "function": null,
    "comment": "kobuki.cpp:419:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki.cpp",
    "line": 427,
    "function": null,
    "comment": "kobuki.cpp:427:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 429,
    "function": null,
    "comment": "kobuki.cpp:429:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki.cpp",
    "line": 437,
    "function": null,
    "comment": "kobuki.cpp:437:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 440,
    "function": null,
    "comment": "kobuki.cpp:440:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 441,
    "function": null,
    "comment": "kobuki.cpp:441:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 444,
    "function": null,
    "comment": "kobuki.cpp:444:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki.cpp",
    "line": 446,
    "function": null,
    "comment": "kobuki.cpp:446:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 447,
    "function": null,
    "comment": "kobuki.cpp:447:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 461,
    "function": null,
    "comment": "kobuki.cpp:461:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki.cpp",
    "line": 462,
    "function": null,
    "comment": "kobuki.cpp:462:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 463,
    "function": null,
    "comment": "kobuki.cpp:463:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki.cpp",
    "line": 472,
    "function": null,
    "comment": "kobuki.cpp:472:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "kobuki.cpp",
    "line": 484,
    "function": null,
    "comment": "kobuki.cpp:484:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki.cpp",
    "line": 490,
    "function": null,
    "comment": "kobuki.cpp:490:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 494,
    "function": null,
    "comment": "kobuki.cpp:494:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 495,
    "function": null,
    "comment": "kobuki.cpp:495:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki.cpp",
    "line": 496,
    "function": null,
    "comment": "kobuki.cpp:496:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 497,
    "function": null,
    "comment": "kobuki.cpp:497:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 498,
    "function": null,
    "comment": "kobuki.cpp:498:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 499,
    "function": null,
    "comment": "kobuki.cpp:499:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 500,
    "function": null,
    "comment": "kobuki.cpp:500:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki.cpp",
    "line": 510,
    "function": null,
    "comment": "kobuki.cpp:510:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 511,
    "function": null,
    "comment": "kobuki.cpp:511:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 512,
    "function": null,
    "comment": "kobuki.cpp:512:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 513,
    "function": null,
    "comment": "kobuki.cpp:513:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 514,
    "function": null,
    "comment": "kobuki.cpp:514:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 523,
    "function": null,
    "comment": "kobuki.cpp:523:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki.cpp",
    "line": 524,
    "function": null,
    "comment": "kobuki.cpp:524:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki.cpp",
    "line": 529,
    "function": null,
    "comment": "kobuki.cpp:529:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "kobuki.cpp",
    "line": 531,
    "function": null,
    "comment": "kobuki.cpp:531:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 532,
    "function": null,
    "comment": "kobuki.cpp:532:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "kobuki.cpp",
    "line": 532,
    "function": null,
    "comment": "kobuki.cpp:532:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "kobuki.cpp",
    "line": 534,
    "function": null,
    "comment": "kobuki.cpp:534:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "kobuki.cpp",
    "line": 537,
    "function": null,
    "comment": "kobuki.cpp:537:  Use int16/int64/etc, rather than the C type short  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 538,
    "function": null,
    "comment": "kobuki.cpp:538:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "kobuki.cpp",
    "line": 538,
    "function": null,
    "comment": "kobuki.cpp:538:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 539,
    "function": null,
    "comment": "kobuki.cpp:539:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "kobuki.cpp",
    "line": 541,
    "function": null,
    "comment": "kobuki.cpp:541:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "kobuki.cpp",
    "line": 542,
    "function": null,
    "comment": "kobuki.cpp:542:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 543,
    "function": null,
    "comment": "kobuki.cpp:543:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "kobuki.cpp",
    "line": 543,
    "function": null,
    "comment": "kobuki.cpp:543:  Use int16/int64/etc, rather than the C type short  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 544,
    "function": null,
    "comment": "kobuki.cpp:544:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "kobuki.cpp",
    "line": 544,
    "function": null,
    "comment": "kobuki.cpp:544:  Use int16/int64/etc, rather than the C type short  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki.cpp",
    "line": 559,
    "function": null,
    "comment": "kobuki.cpp:559:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "kobuki.cpp",
    "line": 560,
    "function": null,
    "comment": "kobuki.cpp:560:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "kobuki.cpp",
    "line": 561,
    "function": null,
    "comment": "kobuki.cpp:561:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "kobuki.cpp",
    "line": 563,
    "function": null,
    "comment": "kobuki.cpp:563:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "kobuki.cpp",
    "line": 564,
    "function": null,
    "comment": "kobuki.cpp:564:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "kobuki.cpp",
    "line": 565,
    "function": null,
    "comment": "kobuki.cpp:565:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "kobuki.cpp",
    "line": 565,
    "function": null,
    "comment": "kobuki.cpp:565:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki.cpp",
    "line": 572,
    "function": null,
    "comment": "kobuki.cpp:572:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "kobuki.cpp",
    "line": 581,
    "function": null,
    "comment": "kobuki.cpp:581:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki.cpp",
    "line": 589,
    "function": null,
    "comment": "kobuki.cpp:589:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "kobuki.cpp",
    "line": 595,
    "function": null,
    "comment": "kobuki.cpp:595:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "kobuki.cpp",
    "line": 611,
    "function": null,
    "comment": "kobuki.cpp:611:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","functions","code-blocks"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "kobuki.cpp",
    "line": 636,
    "function": null,
    "comment": "kobuki.cpp:636:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "kobuki.cpp",
    "line": 615,
    "function": null,
    "comment": "kobuki.cpp:615:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "kobuki.cpp",
    "line": 537,
    "function": null,
    "comment": "kobuki.cpp:537:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "command.cpp",
    "line": null,
    "function": null,
    "comment": "command.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "command.cpp",
    "line": 53,
    "function": null,
    "comment": "command.cpp:53:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "command.cpp",
    "line": 54,
    "function": null,
    "comment": "command.cpp:54:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "command.cpp",
    "line": 58,
    "function": null,
    "comment": "command.cpp:58:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "command.cpp",
    "line": 59,
    "function": null,
    "comment": "command.cpp:59:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "command.cpp",
    "line": 60,
    "function": null,
    "comment": "command.cpp:60:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "command.cpp",
    "line": 60,
    "function": null,
    "comment": "command.cpp:60:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "command.cpp",
    "line": 62,
    "function": null,
    "comment": "command.cpp:62:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "command.cpp",
    "line": 63,
    "function": null,
    "comment": "command.cpp:63:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "command.cpp",
    "line": 65,
    "function": null,
    "comment": "command.cpp:65:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "command.cpp",
    "line": 65,
    "function": null,
    "comment": "command.cpp:65:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "command.cpp",
    "line": 84,
    "function": null,
    "comment": "command.cpp:84:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "command.cpp",
    "line": 85,
    "function": null,
    "comment": "command.cpp:85:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "command.cpp",
    "line": 91,
    "function": null,
    "comment": "command.cpp:91:  Extra space after (  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "command.cpp",
    "line": 91,
    "function": null,
    "comment": "command.cpp:91:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "command.cpp",
    "line": 94,
    "function": null,
    "comment": "command.cpp:94:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "command.cpp",
    "line": 94,
    "function": null,
    "comment": "command.cpp:94:  Extra space after (  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "command.cpp",
    "line": 94,
    "function": null,
    "comment": "command.cpp:94:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "command.cpp",
    "line": 115,
    "function": null,
    "comment": "command.cpp:115:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "command.cpp",
    "line": 116,
    "function": null,
    "comment": "command.cpp:116:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "command.cpp",
    "line": 122,
    "function": null,
    "comment": "command.cpp:122:  Extra space after (  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "command.cpp",
    "line": 125,
    "function": null,
    "comment": "command.cpp:125:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "command.cpp",
    "line": 125,
    "function": null,
    "comment": "command.cpp:125:  Extra space after (  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "command.cpp",
    "line": 135,
    "function": null,
    "comment": "command.cpp:135:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "command.cpp",
    "line": 136,
    "function": null,
    "comment": "command.cpp:136:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "command.cpp",
    "line": 137,
    "function": null,
    "comment": "command.cpp:137:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "command.cpp",
    "line": 138,
    "function": null,
    "comment": "command.cpp:138:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "command.cpp",
    "line": 147,
    "function": null,
    "comment": "command.cpp:147:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "command.cpp",
    "line": 158,
    "function": null,
    "comment": "command.cpp:158:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "command.cpp",
    "line": 160,
    "function": null,
    "comment": "command.cpp:160:  Use int16/int64/etc, rather than the C type short  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "command.cpp",
    "line": 168,
    "function": null,
    "comment": "command.cpp:168:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "command.cpp",
    "line": 176,
    "function": null,
    "comment": "command.cpp:176:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "command.cpp",
    "line": 177,
    "function": null,
    "comment": "command.cpp:177:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "command.cpp",
    "line": 178,
    "function": null,
    "comment": "command.cpp:178:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "command.cpp",
    "line": 189,
    "function": null,
    "comment": "command.cpp:189:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "command.cpp",
    "line": 207,
    "function": null,
    "comment": "command.cpp:207:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "command.cpp",
    "line": 207,
    "function": null,
    "comment": "command.cpp:207:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "command.cpp",
    "line": 211,
    "function": null,
    "comment": "command.cpp:211:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "command.cpp",
    "line": 212,
    "function": null,
    "comment": "command.cpp:212:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "command.cpp",
    "line": 216,
    "function": null,
    "comment": "command.cpp:216:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "command.cpp",
    "line": 219,
    "function": null,
    "comment": "command.cpp:219:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "command.cpp",
    "line": 225,
    "function": null,
    "comment": "command.cpp:225:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "command.cpp",
    "line": 231,
    "function": null,
    "comment": "command.cpp:231:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "command.cpp",
    "line": 236,
    "function": null,
    "comment": "command.cpp:236:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "command.cpp",
    "line": 241,
    "function": null,
    "comment": "command.cpp:241:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "command.cpp",
    "line": 246,
    "function": null,
    "comment": "command.cpp:246:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "command.cpp",
    "line": 252,
    "function": null,
    "comment": "command.cpp:252:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "command.cpp",
    "line": 258,
    "function": null,
    "comment": "command.cpp:258:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "command.cpp",
    "line": 266,
    "function": null,
    "comment": "command.cpp:266:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "command.cpp",
    "line": 278,
    "function": null,
    "comment": "command.cpp:278:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "command.cpp",
    "line": 160,
    "function": null,
    "comment": "command.cpp:160:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "battery.cpp",
    "line": null,
    "function": null,
    "comment": "battery.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "battery.cpp",
    "line": 39,
    "function": null,
    "comment": "battery.cpp:39:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "battery.cpp",
    "line": 41,
    "function": null,
    "comment": "battery.cpp:41:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Whitespace inside parenthesis should be consistent, and should consist of either zero or one space.",
    "file": "battery.cpp",
    "line": 43,
    "function": null,
    "comment": "battery.cpp:43:  Mismatching spaces inside () in if  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "battery.cpp",
    "line": 74,
    "function": null,
    "comment": "battery.cpp:74:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "battery.cpp",
    "line": 71,
    "function": null,
    "comment": "battery.cpp:71:  Add #include <algorithm> for min  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "initialisation.cpp",
    "line": null,
    "function": null,
    "comment": "initialisation.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "initialisation.cpp",
    "line": 11,
    "function": null,
    "comment": "initialisation.cpp:11:  Found C system header after C++ system header. Should be: initialisation.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "initialisation.cpp",
    "line": 12,
    "function": null,
    "comment": "initialisation.cpp:12:  Found C system header after C++ system header. Should be: initialisation.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "initialisation.cpp",
    "line": 15,
    "function": null,
    "comment": "initialisation.cpp:15:  public: should be indented +1 space inside class KobukiManager  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "initialisation.cpp",
    "line": 21,
    "function": null,
    "comment": "initialisation.cpp:21:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "initialisation.cpp",
    "line": 23,
    "function": null,
    "comment": "initialisation.cpp:23:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "initialisation.cpp",
    "line": 26,
    "function": null,
    "comment": "initialisation.cpp:26:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "initialisation.cpp",
    "line": 27,
    "function": null,
    "comment": "initialisation.cpp:27:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "initialisation.cpp",
    "line": 32,
    "function": null,
    "comment": "initialisation.cpp:32:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "initialisation.cpp",
    "line": 39,
    "function": null,
    "comment": "initialisation.cpp:39:  private: should be indented +1 space inside class KobukiManager  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The line before an access modifier (public, private, protected) should be blank, unless it is the beginning of the class.",
    "file": "initialisation.cpp",
    "line": 39,
    "function": null,
    "comment": "initialisation.cpp:39:  'private:' should be preceded by a blank line  [whitespace/blank_line] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","access-modifiers"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "sigslots.cpp",
    "line": null,
    "function": null,
    "comment": "sigslots.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "sigslots.cpp",
    "line": 11,
    "function": null,
    "comment": "sigslots.cpp:11:  Include 'ecl/sigslots.hpp' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "sigslots.cpp",
    "line": 13,
    "function": null,
    "comment": "sigslots.cpp:13:  Found C system header after C++ system header. Should be: sigslots.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "sigslots.cpp",
    "line": 20,
    "function": null,
    "comment": "sigslots.cpp:20:  public: should be indented +1 space inside class KobukiManager  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "sigslots.cpp",
    "line": 22,
    "function": null,
    "comment": "sigslots.cpp:22:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "sigslots.cpp",
    "line": 22,
    "function": null,
    "comment": "sigslots.cpp:22:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "sigslots.cpp",
    "line": 23,
    "function": null,
    "comment": "sigslots.cpp:23:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "sigslots.cpp",
    "line": 25,
    "function": null,
    "comment": "sigslots.cpp:25:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "sigslots.cpp",
    "line": 25,
    "function": null,
    "comment": "sigslots.cpp:25:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "sigslots.cpp",
    "line": 26,
    "function": null,
    "comment": "sigslots.cpp:26:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "sigslots.cpp",
    "line": 48,
    "function": null,
    "comment": "sigslots.cpp:48:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "sigslots.cpp",
    "line": 51,
    "function": null,
    "comment": "sigslots.cpp:51:  private: should be indented +1 space inside class KobukiManager  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "velocity_commands.cpp",
    "line": null,
    "function": null,
    "comment": "velocity_commands.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "velocity_commands.cpp",
    "line": 15,
    "function": null,
    "comment": "velocity_commands.cpp:15:  Include 'cstdio' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "velocity_commands.cpp",
    "line": 16,
    "function": null,
    "comment": "velocity_commands.cpp:16:  Include 'cmath' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "velocity_commands.cpp",
    "line": 24,
    "function": null,
    "comment": "velocity_commands.cpp:24:  Extra space after (  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "velocity_commands.cpp",
    "line": 24,
    "function": null,
    "comment": "velocity_commands.cpp:24:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Whitespace inside parenthesis should be consistent, and should consist of either zero or one space.",
    "file": "velocity_commands.cpp",
    "line": 26,
    "function": null,
    "comment": "velocity_commands.cpp:26:  Mismatching spaces inside () in if  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "velocity_commands.cpp",
    "line": 26,
    "function": null,
    "comment": "velocity_commands.cpp:26:  Extra space after (  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "velocity_commands.cpp",
    "line": 26,
    "function": null,
    "comment": "velocity_commands.cpp:26:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "velocity_commands.cpp",
    "line": 29,
    "function": null,
    "comment": "velocity_commands.cpp:29:  Use int16/int64/etc, rather than the C type short  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "velocity_commands.cpp",
    "line": 32,
    "function": null,
    "comment": "velocity_commands.cpp:32:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "velocity_commands.cpp",
    "line": 32,
    "function": null,
    "comment": "velocity_commands.cpp:32:  Use int16/int64/etc, rather than the C type short  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "velocity_commands.cpp",
    "line": 34,
    "function": null,
    "comment": "velocity_commands.cpp:34:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "velocity_commands.cpp",
    "line": 34,
    "function": null,
    "comment": "velocity_commands.cpp:34:  Use int16/int64/etc, rather than the C type short  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "velocity_commands.cpp",
    "line": 39,
    "function": null,
    "comment": "velocity_commands.cpp:39:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "velocity_commands.cpp",
    "line": 40,
    "function": null,
    "comment": "velocity_commands.cpp:40:  public: should be indented +1 space inside class Rb2Vw  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "velocity_commands.cpp",
    "line": 42,
    "function": null,
    "comment": "velocity_commands.cpp:42:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "velocity_commands.cpp",
    "line": 42,
    "function": null,
    "comment": "velocity_commands.cpp:42:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "velocity_commands.cpp",
    "line": 42,
    "function": null,
    "comment": "velocity_commands.cpp:42:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "velocity_commands.cpp",
    "line": 42,
    "function": null,
    "comment": "velocity_commands.cpp:42:  Constructors callable with one argument should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "velocity_commands.cpp",
    "line": 44,
    "function": null,
    "comment": "velocity_commands.cpp:44:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "velocity_commands.cpp",
    "line": 44,
    "function": null,
    "comment": "velocity_commands.cpp:44:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "velocity_commands.cpp",
    "line": 45,
    "function": null,
    "comment": "velocity_commands.cpp:45:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "velocity_commands.cpp",
    "line": 46,
    "function": null,
    "comment": "velocity_commands.cpp:46:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "velocity_commands.cpp",
    "line": 47,
    "function": null,
    "comment": "velocity_commands.cpp:47:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "velocity_commands.cpp",
    "line": 52,
    "function": null,
    "comment": "velocity_commands.cpp:52:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "velocity_commands.cpp",
    "line": 52,
    "function": null,
    "comment": "velocity_commands.cpp:52:  Extra space after (  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "velocity_commands.cpp",
    "line": 52,
    "function": null,
    "comment": "velocity_commands.cpp:52:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "velocity_commands.cpp",
    "line": 55,
    "function": null,
    "comment": "velocity_commands.cpp:55:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "velocity_commands.cpp",
    "line": 55,
    "function": null,
    "comment": "velocity_commands.cpp:55:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "velocity_commands.cpp",
    "line": 55,
    "function": null,
    "comment": "velocity_commands.cpp:55:  Is this a non-const reference? If so, make const or use a pointer: int & desiredSpeed  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "velocity_commands.cpp",
    "line": 55,
    "function": null,
    "comment": "velocity_commands.cpp:55:  Is this a non-const reference? If so, make const or use a pointer: int & desiredRadius  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "velocity_commands.cpp",
    "line": 56,
    "function": null,
    "comment": "velocity_commands.cpp:56:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "velocity_commands.cpp",
    "line": 57,
    "function": null,
    "comment": "velocity_commands.cpp:57:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "velocity_commands.cpp",
    "line": 58,
    "function": null,
    "comment": "velocity_commands.cpp:58:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "velocity_commands.cpp",
    "line": 62,
    "function": null,
    "comment": "velocity_commands.cpp:62:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "velocity_commands.cpp",
    "line": 62,
    "function": null,
    "comment": "velocity_commands.cpp:62:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "velocity_commands.cpp",
    "line": 62,
    "function": null,
    "comment": "velocity_commands.cpp:62:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "velocity_commands.cpp",
    "line": 63,
    "function": null,
    "comment": "velocity_commands.cpp:63:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "velocity_commands.cpp",
    "line": 65,
    "function": null,
    "comment": "velocity_commands.cpp:65:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "velocity_commands.cpp",
    "line": 68,
    "function": null,
    "comment": "velocity_commands.cpp:68:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "velocity_commands.cpp",
    "line": 69,
    "function": null,
    "comment": "velocity_commands.cpp:69:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "velocity_commands.cpp",
    "line": 70,
    "function": null,
    "comment": "velocity_commands.cpp:70:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "velocity_commands.cpp",
    "line": 71,
    "function": null,
    "comment": "velocity_commands.cpp:71:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "velocity_commands.cpp",
    "line": 71,
    "function": null,
    "comment": "velocity_commands.cpp:71:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "velocity_commands.cpp",
    "line": 72,
    "function": null,
    "comment": "velocity_commands.cpp:72:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "velocity_commands.cpp",
    "line": 75,
    "function": null,
    "comment": "velocity_commands.cpp:75:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "velocity_commands.cpp",
    "line": 76,
    "function": null,
    "comment": "velocity_commands.cpp:76:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "velocity_commands.cpp",
    "line": 78,
    "function": null,
    "comment": "velocity_commands.cpp:78:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "velocity_commands.cpp",
    "line": 83,
    "function": null,
    "comment": "velocity_commands.cpp:83:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "velocity_commands.cpp",
    "line": 83,
    "function": null,
    "comment": "velocity_commands.cpp:83:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "velocity_commands.cpp",
    "line": 83,
    "function": null,
    "comment": "velocity_commands.cpp:83:  Is this a non-const reference? If so, make const or use a pointer: double & leftWheelVel  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "velocity_commands.cpp",
    "line": 83,
    "function": null,
    "comment": "velocity_commands.cpp:83:  Is this a non-const reference? If so, make const or use a pointer: double & rightWheelVel  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "velocity_commands.cpp",
    "line": 84,
    "function": null,
    "comment": "velocity_commands.cpp:84:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "velocity_commands.cpp",
    "line": 85,
    "function": null,
    "comment": "velocity_commands.cpp:85:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "velocity_commands.cpp",
    "line": 85,
    "function": null,
    "comment": "velocity_commands.cpp:85:  Extra space after (  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "velocity_commands.cpp",
    "line": 85,
    "function": null,
    "comment": "velocity_commands.cpp:85:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "velocity_commands.cpp",
    "line": 86,
    "function": null,
    "comment": "velocity_commands.cpp:86:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "velocity_commands.cpp",
    "line": 86,
    "function": null,
    "comment": "velocity_commands.cpp:86:  Extra space after (  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "velocity_commands.cpp",
    "line": 86,
    "function": null,
    "comment": "velocity_commands.cpp:86:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "velocity_commands.cpp",
    "line": 89,
    "function": null,
    "comment": "velocity_commands.cpp:89:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "velocity_commands.cpp",
    "line": 89,
    "function": null,
    "comment": "velocity_commands.cpp:89:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "velocity_commands.cpp",
    "line": 89,
    "function": null,
    "comment": "velocity_commands.cpp:89:  Is this a non-const reference? If so, make const or use a pointer: int & leftWheelVelocity  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "velocity_commands.cpp",
    "line": 89,
    "function": null,
    "comment": "velocity_commands.cpp:89:  Is this a non-const reference? If so, make const or use a pointer: int & rightWheelVelocity  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "velocity_commands.cpp",
    "line": 90,
    "function": null,
    "comment": "velocity_commands.cpp:90:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "velocity_commands.cpp",
    "line": 93,
    "function": null,
    "comment": "velocity_commands.cpp:93:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "velocity_commands.cpp",
    "line": 94,
    "function": null,
    "comment": "velocity_commands.cpp:94:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "velocity_commands.cpp",
    "line": 100,
    "function": null,
    "comment": "velocity_commands.cpp:100:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "velocity_commands.cpp",
    "line": 101,
    "function": null,
    "comment": "velocity_commands.cpp:101:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "velocity_commands.cpp",
    "line": 105,
    "function": null,
    "comment": "velocity_commands.cpp:105:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "velocity_commands.cpp",
    "line": 105,
    "function": null,
    "comment": "velocity_commands.cpp:105:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "velocity_commands.cpp",
    "line": 106,
    "function": null,
    "comment": "velocity_commands.cpp:106:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "velocity_commands.cpp",
    "line": 110,
    "function": null,
    "comment": "velocity_commands.cpp:110:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "velocity_commands.cpp",
    "line": 111,
    "function": null,
    "comment": "velocity_commands.cpp:111:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "velocity_commands.cpp",
    "line": 112,
    "function": null,
    "comment": "velocity_commands.cpp:112:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "velocity_commands.cpp",
    "line": 112,
    "function": null,
    "comment": "velocity_commands.cpp:112:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "velocity_commands.cpp",
    "line": 113,
    "function": null,
    "comment": "velocity_commands.cpp:113:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "velocity_commands.cpp",
    "line": 114,
    "function": null,
    "comment": "velocity_commands.cpp:114:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "velocity_commands.cpp",
    "line": 119,
    "function": null,
    "comment": "velocity_commands.cpp:119:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "velocity_commands.cpp",
    "line": 119,
    "function": null,
    "comment": "velocity_commands.cpp:119:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "velocity_commands.cpp",
    "line": 120,
    "function": null,
    "comment": "velocity_commands.cpp:120:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "velocity_commands.cpp",
    "line": 120,
    "function": null,
    "comment": "velocity_commands.cpp:120:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "velocity_commands.cpp",
    "line": 122,
    "function": null,
    "comment": "velocity_commands.cpp:122:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "velocity_commands.cpp",
    "line": 123,
    "function": null,
    "comment": "velocity_commands.cpp:123:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "velocity_commands.cpp",
    "line": 127,
    "function": null,
    "comment": "velocity_commands.cpp:127:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "velocity_commands.cpp",
    "line": 128,
    "function": null,
    "comment": "velocity_commands.cpp:128:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "velocity_commands.cpp",
    "line": 148,
    "function": null,
    "comment": "velocity_commands.cpp:148:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "velocity_commands.cpp",
    "line": 155,
    "function": null,
    "comment": "velocity_commands.cpp:155:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "velocity_commands.cpp",
    "line": 162,
    "function": null,
    "comment": "velocity_commands.cpp:162:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "velocity_commands.cpp",
    "line": 163,
    "function": null,
    "comment": "velocity_commands.cpp:163:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "velocity_commands.cpp",
    "line": 167,
    "function": null,
    "comment": "velocity_commands.cpp:167:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "velocity_commands.cpp",
    "line": 167,
    "function": null,
    "comment": "velocity_commands.cpp:167:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "velocity_commands.cpp",
    "line": 168,
    "function": null,
    "comment": "velocity_commands.cpp:168:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "velocity_commands.cpp",
    "line": 168,
    "function": null,
    "comment": "velocity_commands.cpp:168:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "velocity_commands.cpp",
    "line": 173,
    "function": null,
    "comment": "velocity_commands.cpp:173:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "velocity_commands.cpp",
    "line": 173,
    "function": null,
    "comment": "velocity_commands.cpp:173:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "velocity_commands.cpp",
    "line": 173,
    "function": null,
    "comment": "velocity_commands.cpp:173:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "velocity_commands.cpp",
    "line": 174,
    "function": null,
    "comment": "velocity_commands.cpp:174:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "velocity_commands.cpp",
    "line": 174,
    "function": null,
    "comment": "velocity_commands.cpp:174:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "velocity_commands.cpp",
    "line": 175,
    "function": null,
    "comment": "velocity_commands.cpp:175:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "velocity_commands.cpp",
    "line": 175,
    "function": null,
    "comment": "velocity_commands.cpp:175:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "velocity_commands.cpp",
    "line": 175,
    "function": null,
    "comment": "velocity_commands.cpp:175:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "velocity_commands.cpp",
    "line": 176,
    "function": null,
    "comment": "velocity_commands.cpp:176:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "velocity_commands.cpp",
    "line": 176,
    "function": null,
    "comment": "velocity_commands.cpp:176:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "velocity_commands.cpp",
    "line": 178,
    "function": null,
    "comment": "velocity_commands.cpp:178:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "velocity_commands.cpp",
    "line": 178,
    "function": null,
    "comment": "velocity_commands.cpp:178:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "velocity_commands.cpp",
    "line": 178,
    "function": null,
    "comment": "velocity_commands.cpp:178:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "velocity_commands.cpp",
    "line": 179,
    "function": null,
    "comment": "velocity_commands.cpp:179:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "velocity_commands.cpp",
    "line": 179,
    "function": null,
    "comment": "velocity_commands.cpp:179:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "velocity_commands.cpp",
    "line": 182,
    "function": null,
    "comment": "velocity_commands.cpp:182:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "velocity_commands.cpp",
    "line": 182,
    "function": null,
    "comment": "velocity_commands.cpp:182:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space after a semicolon, if it does not end the line.",
    "file": "velocity_commands.cpp",
    "line": 182,
    "function": null,
    "comment": "velocity_commands.cpp:182:  Missing space after ;  [whitespace/semicolon] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "velocity_commands.cpp",
    "line": 183,
    "function": null,
    "comment": "velocity_commands.cpp:183:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "velocity_commands.cpp",
    "line": 184,
    "function": null,
    "comment": "velocity_commands.cpp:184:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "velocity_commands.cpp",
    "line": 184,
    "function": null,
    "comment": "velocity_commands.cpp:184:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space after a semicolon, if it does not end the line.",
    "file": "velocity_commands.cpp",
    "line": 184,
    "function": null,
    "comment": "velocity_commands.cpp:184:  Missing space after ;  [whitespace/semicolon] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "velocity_commands.cpp",
    "line": 185,
    "function": null,
    "comment": "velocity_commands.cpp:185:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "velocity_commands.cpp",
    "line": 186,
    "function": null,
    "comment": "velocity_commands.cpp:186:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "velocity_commands.cpp",
    "line": 187,
    "function": null,
    "comment": "velocity_commands.cpp:187:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "velocity_commands.cpp",
    "line": 187,
    "function": null,
    "comment": "velocity_commands.cpp:187:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "velocity_commands.cpp",
    "line": 187,
    "function": null,
    "comment": "velocity_commands.cpp:187:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "velocity_commands.cpp",
    "line": 188,
    "function": null,
    "comment": "velocity_commands.cpp:188:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "velocity_commands.cpp",
    "line": 188,
    "function": null,
    "comment": "velocity_commands.cpp:188:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "velocity_commands.cpp",
    "line": 188,
    "function": null,
    "comment": "velocity_commands.cpp:188:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "velocity_commands.cpp",
    "line": 193,
    "function": null,
    "comment": "velocity_commands.cpp:193:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "velocity_commands.cpp",
    "line": 194,
    "function": null,
    "comment": "velocity_commands.cpp:194:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "velocity_commands.cpp",
    "line": 195,
    "function": null,
    "comment": "velocity_commands.cpp:195:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "velocity_commands.cpp",
    "line": 197,
    "function": null,
    "comment": "velocity_commands.cpp:197:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "velocity_commands.cpp",
    "line": 197,
    "function": null,
    "comment": "velocity_commands.cpp:197:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "velocity_commands.cpp",
    "line": 202,
    "function": null,
    "comment": "velocity_commands.cpp:202:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "velocity_commands.cpp",
    "line": 202,
    "function": null,
    "comment": "velocity_commands.cpp:202:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space after a semicolon, if it does not end the line.",
    "file": "velocity_commands.cpp",
    "line": 202,
    "function": null,
    "comment": "velocity_commands.cpp:202:  Missing space after ;  [whitespace/semicolon] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "velocity_commands.cpp",
    "line": 203,
    "function": null,
    "comment": "velocity_commands.cpp:203:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "velocity_commands.cpp",
    "line": 204,
    "function": null,
    "comment": "velocity_commands.cpp:204:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "velocity_commands.cpp",
    "line": 204,
    "function": null,
    "comment": "velocity_commands.cpp:204:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space after a semicolon, if it does not end the line.",
    "file": "velocity_commands.cpp",
    "line": 204,
    "function": null,
    "comment": "velocity_commands.cpp:204:  Missing space after ;  [whitespace/semicolon] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "velocity_commands.cpp",
    "line": 205,
    "function": null,
    "comment": "velocity_commands.cpp:205:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "velocity_commands.cpp",
    "line": 206,
    "function": null,
    "comment": "velocity_commands.cpp:206:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "velocity_commands.cpp",
    "line": 206,
    "function": null,
    "comment": "velocity_commands.cpp:206:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "velocity_commands.cpp",
    "line": 206,
    "function": null,
    "comment": "velocity_commands.cpp:206:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "velocity_commands.cpp",
    "line": 207,
    "function": null,
    "comment": "velocity_commands.cpp:207:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "velocity_commands.cpp",
    "line": 207,
    "function": null,
    "comment": "velocity_commands.cpp:207:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "velocity_commands.cpp",
    "line": 207,
    "function": null,
    "comment": "velocity_commands.cpp:207:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "velocity_commands.cpp",
    "line": 208,
    "function": null,
    "comment": "velocity_commands.cpp:208:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "velocity_commands.cpp",
    "line": 208,
    "function": null,
    "comment": "velocity_commands.cpp:208:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "velocity_commands.cpp",
    "line": 208,
    "function": null,
    "comment": "velocity_commands.cpp:208:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "velocity_commands.cpp",
    "line": 214,
    "function": null,
    "comment": "velocity_commands.cpp:214:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "velocity_commands.cpp",
    "line": 215,
    "function": null,
    "comment": "velocity_commands.cpp:215:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "velocity_commands.cpp",
    "line": 216,
    "function": null,
    "comment": "velocity_commands.cpp:216:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "velocity_commands.cpp",
    "line": 218,
    "function": null,
    "comment": "velocity_commands.cpp:218:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "velocity_commands.cpp",
    "line": 218,
    "function": null,
    "comment": "velocity_commands.cpp:218:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "velocity_commands.cpp",
    "line": 232,
    "function": null,
    "comment": "velocity_commands.cpp:232:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "velocity_commands.cpp",
    "line": 242,
    "function": null,
    "comment": "velocity_commands.cpp:242:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "velocity_commands.cpp",
    "line": 249,
    "function": null,
    "comment": "velocity_commands.cpp:249:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "velocity_commands.cpp",
    "line": 34,
    "function": null,
    "comment": "velocity_commands.cpp:34:  Add #include <algorithm> for max  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "simple_loop.cpp",
    "line": null,
    "function": null,
    "comment": "simple_loop.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "simple_loop.cpp",
    "line": 14,
    "function": null,
    "comment": "simple_loop.cpp:14:  Found C system header after C++ system header. Should be: simple_loop.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "simple_loop.cpp",
    "line": 15,
    "function": null,
    "comment": "simple_loop.cpp:15:  Found C system header after C++ system header. Should be: simple_loop.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "simple_loop.cpp",
    "line": 16,
    "function": null,
    "comment": "simple_loop.cpp:16:  Found C system header after C++ system header. Should be: simple_loop.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "simple_loop.cpp",
    "line": 17,
    "function": null,
    "comment": "simple_loop.cpp:17:  Found C system header after C++ system header. Should be: simple_loop.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "simple_loop.cpp",
    "line": 25,
    "function": null,
    "comment": "simple_loop.cpp:25:  public: should be indented +1 space inside class KobukiManager  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "simple_loop.cpp",
    "line": 29,
    "function": null,
    "comment": "simple_loop.cpp:29:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "simple_loop.cpp",
    "line": 40,
    "function": null,
    "comment": "simple_loop.cpp:40:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "simple_loop.cpp",
    "line": 40,
    "function": null,
    "comment": "simple_loop.cpp:40:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "simple_loop.cpp",
    "line": 40,
    "function": null,
    "comment": "simple_loop.cpp:40:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "simple_loop.cpp",
    "line": 51,
    "function": null,
    "comment": "simple_loop.cpp:51:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "simple_loop.cpp",
    "line": 52,
    "function": null,
    "comment": "simple_loop.cpp:52:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "simple_loop.cpp",
    "line": 53,
    "function": null,
    "comment": "simple_loop.cpp:53:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "simple_loop.cpp",
    "line": 53,
    "function": null,
    "comment": "simple_loop.cpp:53:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "simple_loop.cpp",
    "line": 59,
    "function": null,
    "comment": "simple_loop.cpp:59:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "simple_loop.cpp",
    "line": 59,
    "function": null,
    "comment": "simple_loop.cpp:59:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "simple_loop.cpp",
    "line": 60,
    "function": null,
    "comment": "simple_loop.cpp:60:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "simple_loop.cpp",
    "line": 60,
    "function": null,
    "comment": "simple_loop.cpp:60:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "simple_loop.cpp",
    "line": 61,
    "function": null,
    "comment": "simple_loop.cpp:61:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "simple_loop.cpp",
    "line": 61,
    "function": null,
    "comment": "simple_loop.cpp:61:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "simple_loop.cpp",
    "line": 68,
    "function": null,
    "comment": "simple_loop.cpp:68:  private: should be indented +1 space inside class KobukiManager  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "simple_loop.cpp",
    "line": 89,
    "function": null,
    "comment": "simple_loop.cpp:89:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "simple_loop.cpp",
    "line": 98,
    "function": null,
    "comment": "simple_loop.cpp:98:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "simple_loop.cpp",
    "line": 101,
    "function": null,
    "comment": "simple_loop.cpp:101:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "parameters.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "parameters.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "parameters.hpp",
    "line": null,
    "function": null,
    "comment": "bool: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "parameters.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "parameters.hpp",
    "line": null,
    "function": null,
    "comment": "string: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "parameters.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "command.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "command.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "command.hpp",
    "line": null,
    "function": null,
    "comment": "int16_t: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "command.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "command.hpp",
    "line": null,
    "function": null,
    "comment": "uint16_t: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "command.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "event_manager.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "kobuki.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "kobuki.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "version_info.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "version_info.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "inertia.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "inertia.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "inertia.hpp",
    "line": null,
    "function": null,
    "comment": "int16_t: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "inertia.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "inertia.hpp",
    "line": null,
    "function": null,
    "comment": "PushAndPop: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "inertia.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "inertia.hpp",
    "line": null,
    "function": null,
    "comment": "payloadBase: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "inertia.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "controller_info.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "controller_info.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "controller_info.hpp",
    "line": null,
    "function": null,
    "comment": "PushAndPop: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "controller_info.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "controller_info.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "controller_info.hpp",
    "line": null,
    "function": null,
    "comment": "payloadBase: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "controller_info.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "dock_ir.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "dock_ir.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "dock_ir.hpp",
    "line": null,
    "function": null,
    "comment": "PushAndPop: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "dock_ir.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "dock_ir.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "dock_ir.hpp",
    "line": null,
    "function": null,
    "comment": "vector: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "dock_ir.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "dock_ir.hpp",
    "line": null,
    "function": null,
    "comment": "payloadBase: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "dock_ir.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "cliff.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "cliff.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "cliff.hpp",
    "line": null,
    "function": null,
    "comment": "PushAndPop: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "cliff.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "cliff.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "cliff.hpp",
    "line": null,
    "function": null,
    "comment": "vector: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "cliff.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "cliff.hpp",
    "line": null,
    "function": null,
    "comment": "payloadBase: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "cliff.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "gp_input.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "gp_input.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "gp_input.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "gp_input.hpp",
    "line": null,
    "function": null,
    "comment": "PushAndPop: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "gp_input.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "gp_input.hpp",
    "line": null,
    "function": null,
    "comment": "uint16_t: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "gp_input.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "gp_input.hpp",
    "line": null,
    "function": null,
    "comment": "vector: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "gp_input.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "gp_input.hpp",
    "line": null,
    "function": null,
    "comment": "payloadBase: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "gp_input.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "three_axis_gyro.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "three_axis_gyro.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "three_axis_gyro.hpp",
    "line": null,
    "function": null,
    "comment": "short: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "three_axis_gyro.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "three_axis_gyro.hpp",
    "line": null,
    "function": null,
    "comment": "PushAndPop: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "three_axis_gyro.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "three_axis_gyro.hpp",
    "line": null,
    "function": null,
    "comment": "payloadBase: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "three_axis_gyro.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "current.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "current.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "current.hpp",
    "line": null,
    "function": null,
    "comment": "PushAndPop: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "current.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "current.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "current.hpp",
    "line": null,
    "function": null,
    "comment": "vector: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "current.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "current.hpp",
    "line": null,
    "function": null,
    "comment": "payloadBase: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "current.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "eeprom.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "eeprom.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "eeprom.hpp",
    "line": null,
    "function": null,
    "comment": "PushAndPop: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "eeprom.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "eeprom.hpp",
    "line": null,
    "function": null,
    "comment": "uint8_t: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "eeprom.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "eeprom.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "eeprom.hpp",
    "line": null,
    "function": null,
    "comment": "vector: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "eeprom.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "eeprom.hpp",
    "line": null,
    "function": null,
    "comment": "payloadBase: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "eeprom.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "hardware.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "hardware.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "hardware.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "hardware.hpp",
    "line": null,
    "function": null,
    "comment": "uint32_t: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "hardware.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "hardware.hpp",
    "line": null,
    "function": null,
    "comment": "PushAndPop: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "hardware.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "hardware.hpp",
    "line": null,
    "function": null,
    "comment": "payloadBase: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "hardware.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "core_sensors.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "core_sensors.hpp",
    "line": null,
    "function": null,
    "comment": "uint16_t: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "core_sensors.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "core_sensors.hpp",
    "line": null,
    "function": null,
    "comment": "uint8_t: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "core_sensors.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "unique_device_id.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "unique_device_id.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "unique_device_id.hpp",
    "line": null,
    "function": null,
    "comment": "uint32_t: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "unique_device_id.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "unique_device_id.hpp",
    "line": null,
    "function": null,
    "comment": "PushAndPop: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "unique_device_id.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "unique_device_id.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "unique_device_id.hpp",
    "line": null,
    "function": null,
    "comment": "payloadBase: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "unique_device_id.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "firmware.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "firmware.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "firmware.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "firmware.hpp",
    "line": 60,
    "function": "deserialise",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","cyclomatic-complexity"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "firmware.hpp",
    "line": null,
    "function": null,
    "comment": "uint32_t: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "firmware.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "firmware.hpp",
    "line": null,
    "function": null,
    "comment": "PushAndPop: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "firmware.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "firmware.hpp",
    "line": null,
    "function": null,
    "comment": "payloadBase: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "firmware.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "digital_output.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "digital_output.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "digital_output.hpp",
    "line": null,
    "function": null,
    "comment": "bool: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "digital_output.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "sound.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "sound.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "diff_drive.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "diff_drive.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "diff_drive.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "led_array.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "led_array.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "acceleration_limiter.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "acceleration_limiter.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "acceleration_limiter.hpp",
    "line": null,
    "function": null,
    "comment": "short: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "acceleration_limiter.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "acceleration_limiter.hpp",
    "line": null,
    "function": null,
    "comment": "bool: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "acceleration_limiter.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "acceleration_limiter.hpp",
    "line": null,
    "function": null,
    "comment": "TimeStamp: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "acceleration_limiter.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "acceleration_limiter.hpp",
    "line": null,
    "function": null,
    "comment": "vector: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "acceleration_limiter.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "battery.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "payload_headers.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "payload_headers.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "payload_headers.hpp",
    "line": null,
    "function": null,
    "comment": "Header: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "payload_headers.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "payload_base.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "payload_base.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "payload_base.hpp",
    "line": null,
    "function": null,
    "comment": "PushAndPop: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "payload_base.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "payload_base.hpp",
    "line": null,
    "function": null,
    "comment": "bool: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "payload_base.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "version_info.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "version_info.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "version_info.cpp",
    "line": null,
    "function": null,
    "comment": "KobukiManager: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "version_info.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "simple_keyop.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "simple_keyop.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Maximum coupling between objects: 5",
    "file": "simple_keyop.cpp",
    "line": null,
    "function": null,
    "comment": "CBO is greater than 5, KobukiManager, 7",
    "tags": ["metrics","nasa-satc","ros","coupling"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "simple_keyop.cpp",
    "line": null,
    "function": null,
    "comment": "termios: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "simple_keyop.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "simple_keyop.cpp",
    "line": null,
    "function": null,
    "comment": "Slot: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "simple_keyop.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "simple_keyop.cpp",
    "line": null,
    "function": null,
    "comment": "Thread: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "simple_keyop.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "simple_keyop.cpp",
    "line": null,
    "function": null,
    "comment": "Pose2D: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "simple_keyop.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "simple_keyop.cpp",
    "line": null,
    "function": null,
    "comment": "bool: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "simple_keyop.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "simple_keyop.cpp",
    "line": null,
    "function": null,
    "comment": "string: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "simple_keyop.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "simple_keyop.cpp",
    "line": null,
    "function": null,
    "comment": "Kobuki: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "simple_keyop.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "core_sensors.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "core_sensors.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "core_sensors.cpp",
    "line": null,
    "function": null,
    "comment": "PushAndPop: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "core_sensors.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "core_sensors.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "packet_finder.cpp",
    "line": null,
    "function": null,
    "comment": "BufferType: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "packet_finder.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "packet_finder.cpp",
    "line": null,
    "function": null,
    "comment": "bool: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "packet_finder.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "packet_finder.cpp",
    "line": null,
    "function": null,
    "comment": "string: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "packet_finder.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "packet_finder.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "packet_finder.cpp",
    "line": 131,
    "function": "update",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 15",
    "file": "packet_finder.cpp",
    "line": 131,
    "function": "update",
    "comment": "CC is greater than 15",
    "tags": ["metrics","ros","cyclomatic-complexity","kth"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "packet_finder.cpp",
    "line": 313,
    "function": "waitForPayloadAndEtx",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "packet_finder.cpp",
    "line": 225,
    "function": "waitForPayloadSize",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","cyclomatic-complexity"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "event_manager.cpp",
    "line": null,
    "function": null,
    "comment": "Data: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "event_manager.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "event_manager.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "event_manager.cpp",
    "line": 43,
    "function": "update",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 15",
    "file": "event_manager.cpp",
    "line": 43,
    "function": "update",
    "comment": "CC is greater than 15",
    "tags": ["metrics","ros","cyclomatic-complexity","kth"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "event_manager.cpp",
    "line": null,
    "function": null,
    "comment": "bool: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "event_manager.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "event_manager.cpp",
    "line": null,
    "function": null,
    "comment": "string: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "event_manager.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "event_manager.cpp",
    "line": null,
    "function": null,
    "comment": "uint16_t: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "event_manager.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "event_manager.cpp",
    "line": null,
    "function": null,
    "comment": "vector: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "event_manager.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "diff_drive.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "diff_drive.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "diff_drive.cpp",
    "line": null,
    "function": null,
    "comment": "Vector3d: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "diff_drive.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "diff_drive.cpp",
    "line": null,
    "function": null,
    "comment": "short: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "diff_drive.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "diff_drive.cpp",
    "line": null,
    "function": null,
    "comment": "Pose2D: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "diff_drive.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "diff_drive.cpp",
    "line": null,
    "function": null,
    "comment": "uint16_t: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "diff_drive.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "kobuki.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "kobuki.cpp",
    "line": null,
    "function": null,
    "comment": "Parameters: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "kobuki.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "kobuki.cpp",
    "line": null,
    "function": null,
    "comment": "Command: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "kobuki.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "kobuki.cpp",
    "line": null,
    "function": null,
    "comment": "Vector3d: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "kobuki.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "kobuki.cpp",
    "line": null,
    "function": null,
    "comment": "Pose2D: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "kobuki.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "kobuki.cpp",
    "line": null,
    "function": null,
    "comment": "PushAndPop: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "kobuki.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Maximum coupling between objects: 5",
    "file": "kobuki.cpp",
    "line": null,
    "function": null,
    "comment": "CBO is greater than 5, Kobuki, 6",
    "tags": ["metrics","nasa-satc","ros","coupling"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "kobuki.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "kobuki.cpp",
    "line": 176,
    "function": "spin",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 15",
    "file": "kobuki.cpp",
    "line": 176,
    "function": "spin",
    "comment": "CC is greater than 15",
    "tags": ["metrics","ros","cyclomatic-complexity","kth"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "kobuki.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "kobuki.cpp",
    "line": null,
    "function": null,
    "comment": "DigitalOutput: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "kobuki.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "command.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "command.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "command.cpp",
    "line": null,
    "function": null,
    "comment": "Data: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "command.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "command.cpp",
    "line": null,
    "function": null,
    "comment": "DiffDrive: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "command.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Maximum coupling between objects: 5",
    "file": "command.cpp",
    "line": null,
    "function": null,
    "comment": "CBO is greater than 5, Command, 6",
    "tags": ["metrics","nasa-satc","ros","coupling"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "command.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "command.cpp",
    "line": 210,
    "function": "serialise",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","cyclomatic-complexity"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "command.cpp",
    "line": null,
    "function": null,
    "comment": "int16_t: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "command.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "command.cpp",
    "line": null,
    "function": null,
    "comment": "PushAndPop: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "command.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "command.cpp",
    "line": null,
    "function": null,
    "comment": "Buffer: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "command.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "command.cpp",
    "line": null,
    "function": null,
    "comment": "DigitalOutput: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "command.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "battery.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "battery.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "battery.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "battery.cpp",
    "line": null,
    "function": null,
    "comment": "uint8_t: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "battery.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "initialisation.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "initialisation.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "initialisation.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "initialisation.cpp",
    "line": null,
    "function": null,
    "comment": "Kobuki: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "initialisation.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "sigslots.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "sigslots.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "sigslots.cpp",
    "line": null,
    "function": null,
    "comment": "KobukiManager: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "sigslots.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "velocity_commands.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "velocity_commands.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "simple_loop.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "simple_loop.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "simple_loop.cpp",
    "line": null,
    "function": null,
    "comment": "KobukiManager: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "simple_loop.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  }
]