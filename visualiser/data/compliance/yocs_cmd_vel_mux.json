[
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "cmd_vel_subscribers.hpp",
    "line": null,
    "function": null,
    "comment": "cmd_vel_subscribers.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "cmd_vel_subscribers.hpp",
    "line": 21,
    "function": null,
    "comment": "cmd_vel_subscribers.hpp:21:  Include 'geometry_msgs/Twist.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "cmd_vel_subscribers.hpp",
    "line": 29,
    "function": null,
    "comment": "cmd_vel_subscribers.hpp:29:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "cmd_vel_subscribers.hpp",
    "line": 55,
    "function": null,
    "comment": "cmd_vel_subscribers.hpp:55:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "cmd_vel_subscribers.hpp",
    "line": 56,
    "function": null,
    "comment": "cmd_vel_subscribers.hpp:56:  public: should be indented +1 space inside class CmdVelSubscribers  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "cmd_vel_subscribers.hpp",
    "line": 57,
    "function": null,
    "comment": "cmd_vel_subscribers.hpp:57:  Do not leave a blank line after 'public:'  [whitespace/blank_line] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","functions","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "cmd_vel_subscribers.hpp",
    "line": 62,
    "function": null,
    "comment": "cmd_vel_subscribers.hpp:62:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "cmd_vel_subscribers.hpp",
    "line": 63,
    "function": null,
    "comment": "cmd_vel_subscribers.hpp:63:  public: should be indented +1 space inside class CmdVelSubs  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "cmd_vel_subscribers.hpp",
    "line": 64,
    "function": null,
    "comment": "cmd_vel_subscribers.hpp:64:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "cmd_vel_subscribers.hpp",
    "line": 70,
    "function": null,
    "comment": "cmd_vel_subscribers.hpp:70:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not use meaningless empty statements.",
    "file": "cmd_vel_subscribers.hpp",
    "line": 74,
    "function": null,
    "comment": "cmd_vel_subscribers.hpp:74:  You don't need a ; after a }  [readability/braces] [4]",
    "tags": ["code-standards","google-cpp","empty-statement","ambiguous-code"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "cmd_vel_subscribers.hpp",
    "line": 74,
    "function": null,
    "comment": "cmd_vel_subscribers.hpp:74:  Single-parameter constructors should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "cmd_vel_subscribers.hpp",
    "line": 82,
    "function": null,
    "comment": "cmd_vel_subscribers.hpp:82:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "Do not use meaningless empty statements.",
    "file": "cmd_vel_subscribers.hpp",
    "line": 82,
    "function": null,
    "comment": "cmd_vel_subscribers.hpp:82:  You don't need a ; after a }  [readability/braces] [4]",
    "tags": ["code-standards","google-cpp","empty-statement","ambiguous-code"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "cmd_vel_subscribers.hpp",
    "line": 83,
    "function": null,
    "comment": "cmd_vel_subscribers.hpp:83:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "Do not use meaningless empty statements.",
    "file": "cmd_vel_subscribers.hpp",
    "line": 83,
    "function": null,
    "comment": "cmd_vel_subscribers.hpp:83:  You don't need a ; after a }  [readability/braces] [4]",
    "tags": ["code-standards","google-cpp","empty-statement","ambiguous-code"]
  },
  {
    "rule": "You shouldn't have spaces before your brackets, except maybe after 'delete []' or 'return []() {};'",
    "file": "cmd_vel_subscribers.hpp",
    "line": 83,
    "function": null,
    "comment": "cmd_vel_subscribers.hpp:83:  Extra space before [  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","brackets"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "cmd_vel_subscribers.hpp",
    "line": 97,
    "function": null,
    "comment": "cmd_vel_subscribers.hpp:97:  private: should be indented +1 space inside class CmdVelSubscribers  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "cmd_vel_subscribers.hpp",
    "line": 101,
    "function": null,
    "comment": "cmd_vel_subscribers.hpp:101:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "cmd_vel_subscribers.hpp",
    "line": 71,
    "function": null,
    "comment": "cmd_vel_subscribers.hpp:71:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "cmd_vel_subscribers.hpp",
    "line": 98,
    "function": null,
    "comment": "cmd_vel_subscribers.hpp:98:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "cmd_vel_mux_nodelet.hpp",
    "line": null,
    "function": null,
    "comment": "cmd_vel_mux_nodelet.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "cmd_vel_mux_nodelet.hpp",
    "line": 21,
    "function": null,
    "comment": "cmd_vel_mux_nodelet.hpp:21:  Include 'nodelet/nodelet.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "cmd_vel_mux_nodelet.hpp",
    "line": 22,
    "function": null,
    "comment": "cmd_vel_mux_nodelet.hpp:22:  Include 'dynamic_reconfigure/server.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "cmd_vel_mux_nodelet.hpp",
    "line": 25,
    "function": null,
    "comment": "cmd_vel_mux_nodelet.hpp:25:  Include 'yocs_cmd_vel_mux/cmd_vel_subscribers.hpp' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "cmd_vel_mux_nodelet.hpp",
    "line": 38,
    "function": null,
    "comment": "cmd_vel_mux_nodelet.hpp:38:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "cmd_vel_mux_nodelet.hpp",
    "line": 39,
    "function": null,
    "comment": "cmd_vel_mux_nodelet.hpp:39:  public: should be indented +1 space inside class CmdVelMuxNodelet  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "cmd_vel_mux_nodelet.hpp",
    "line": 43,
    "function": null,
    "comment": "cmd_vel_mux_nodelet.hpp:43:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "cmd_vel_mux_nodelet.hpp",
    "line": 48,
    "function": null,
    "comment": "cmd_vel_mux_nodelet.hpp:48:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "cmd_vel_mux_nodelet.hpp",
    "line": 53,
    "function": null,
    "comment": "cmd_vel_mux_nodelet.hpp:53:  private: should be indented +1 space inside class CmdVelMuxNodelet  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "cmd_vel_mux_nodelet.hpp",
    "line": 59,
    "function": null,
    "comment": "cmd_vel_mux_nodelet.hpp:59:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "cmd_vel_mux_nodelet.hpp",
    "line": 64,
    "function": null,
    "comment": "cmd_vel_mux_nodelet.hpp:64:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "cmd_vel_mux_nodelet.hpp",
    "line": 65,
    "function": null,
    "comment": "cmd_vel_mux_nodelet.hpp:65:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "cmd_vel_mux_nodelet.hpp",
    "line": 66,
    "function": null,
    "comment": "cmd_vel_mux_nodelet.hpp:66:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "cmd_vel_mux_nodelet.hpp",
    "line": 66,
    "function": null,
    "comment": "cmd_vel_mux_nodelet.hpp:66:  Is this a non-const reference? If so, make const or use a pointer: yocs_cmd_vel_mux::reloadConfig &config  [runtime/references] [2]",
    "tags": ["code-standards","google-cpp","parameters","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "cmd_vel_mux_nodelet.hpp",
    "line": 71,
    "function": null,
    "comment": "cmd_vel_mux_nodelet.hpp:71:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "cmd_vel_mux_nodelet.hpp",
    "line": 73,
    "function": null,
    "comment": "cmd_vel_mux_nodelet.hpp:73:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "cmd_vel_mux_nodelet.hpp",
    "line": 74,
    "function": null,
    "comment": "cmd_vel_mux_nodelet.hpp:74:  private: should be indented +1 space inside class CmdVelFunctor  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "cmd_vel_mux_nodelet.hpp",
    "line": 78,
    "function": null,
    "comment": "cmd_vel_mux_nodelet.hpp:78:  public: should be indented +1 space inside class CmdVelFunctor  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "cmd_vel_mux_nodelet.hpp",
    "line": 81,
    "function": null,
    "comment": "cmd_vel_mux_nodelet.hpp:81:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "cmd_vel_mux_nodelet.hpp",
    "line": 85,
    "function": null,
    "comment": "cmd_vel_mux_nodelet.hpp:85:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "cmd_vel_mux_nodelet.hpp",
    "line": 90,
    "function": null,
    "comment": "cmd_vel_mux_nodelet.hpp:90:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "cmd_vel_mux_nodelet.hpp",
    "line": 92,
    "function": null,
    "comment": "cmd_vel_mux_nodelet.hpp:92:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "cmd_vel_mux_nodelet.hpp",
    "line": 93,
    "function": null,
    "comment": "cmd_vel_mux_nodelet.hpp:93:  private: should be indented +1 space inside class TimerFunctor  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "cmd_vel_mux_nodelet.hpp",
    "line": 97,
    "function": null,
    "comment": "cmd_vel_mux_nodelet.hpp:97:  public: should be indented +1 space inside class TimerFunctor  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "cmd_vel_mux_nodelet.hpp",
    "line": 100,
    "function": null,
    "comment": "cmd_vel_mux_nodelet.hpp:100:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "cmd_vel_mux_nodelet.hpp",
    "line": 104,
    "function": null,
    "comment": "cmd_vel_mux_nodelet.hpp:104:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "cmd_vel_mux_nodelet.hpp",
    "line": 110,
    "function": null,
    "comment": "cmd_vel_mux_nodelet.hpp:110:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "exceptions.hpp",
    "line": null,
    "function": null,
    "comment": "exceptions.hpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "exceptions.hpp",
    "line": 33,
    "function": null,
    "comment": "exceptions.hpp:33:  public: should be indented +1 space inside class FileNotFoundException  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "exceptions.hpp",
    "line": 34,
    "function": null,
    "comment": "exceptions.hpp:34:  Single-parameter constructors should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "exceptions.hpp",
    "line": 40,
    "function": null,
    "comment": "exceptions.hpp:40:  public: should be indented +1 space inside class EmptyCfgException  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "exceptions.hpp",
    "line": 47,
    "function": null,
    "comment": "exceptions.hpp:47:  public: should be indented +1 space inside class YamlException  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "exceptions.hpp",
    "line": 48,
    "function": null,
    "comment": "exceptions.hpp:48:  Single-parameter constructors should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "exceptions.hpp",
    "line": 53,
    "function": null,
    "comment": "exceptions.hpp:53:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "exceptions.hpp",
    "line": 48,
    "function": null,
    "comment": "exceptions.hpp:48:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "cmd_vel_subscribers.cpp",
    "line": null,
    "function": null,
    "comment": "cmd_vel_subscribers.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "cmd_vel_subscribers.cpp",
    "line": 29,
    "function": null,
    "comment": "cmd_vel_subscribers.cpp:29:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "cmd_vel_subscribers.cpp",
    "line": 44,
    "function": null,
    "comment": "cmd_vel_subscribers.cpp:44:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","functions","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "cmd_vel_subscribers.cpp",
    "line": 47,
    "function": null,
    "comment": "cmd_vel_subscribers.cpp:47:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "cmd_vel_subscribers.cpp",
    "line": 53,
    "function": null,
    "comment": "cmd_vel_subscribers.cpp:53:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "cmd_vel_subscribers.cpp",
    "line": 64,
    "function": null,
    "comment": "cmd_vel_subscribers.cpp:64:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "cmd_vel_subscribers.cpp",
    "line": 68,
    "function": null,
    "comment": "cmd_vel_subscribers.cpp:68:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "cmd_vel_subscribers.cpp",
    "line": 74,
    "function": null,
    "comment": "cmd_vel_subscribers.cpp:74:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "cmd_vel_mux_nodelet.cpp",
    "line": null,
    "function": null,
    "comment": "cmd_vel_mux_nodelet.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "cmd_vel_mux_nodelet.cpp",
    "line": 14,
    "function": null,
    "comment": "cmd_vel_mux_nodelet.cpp:14:  Found C system header after C++ system header. Should be: cmd_vel_mux_nodelet.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "cmd_vel_mux_nodelet.cpp",
    "line": 15,
    "function": null,
    "comment": "cmd_vel_mux_nodelet.cpp:15:  Found C system header after C++ system header. Should be: cmd_vel_mux_nodelet.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "cmd_vel_mux_nodelet.cpp",
    "line": 30,
    "function": null,
    "comment": "cmd_vel_mux_nodelet.cpp:30:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "cmd_vel_mux_nodelet.cpp",
    "line": 31,
    "function": null,
    "comment": "cmd_vel_mux_nodelet.cpp:31:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "cmd_vel_mux_nodelet.cpp",
    "line": 36,
    "function": null,
    "comment": "cmd_vel_mux_nodelet.cpp:36:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "cmd_vel_mux_nodelet.cpp",
    "line": 43,
    "function": null,
    "comment": "cmd_vel_mux_nodelet.cpp:43:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "cmd_vel_mux_nodelet.cpp",
    "line": 45,
    "function": null,
    "comment": "cmd_vel_mux_nodelet.cpp:45:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "cmd_vel_mux_nodelet.cpp",
    "line": 58,
    "function": null,
    "comment": "cmd_vel_mux_nodelet.cpp:58:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "cmd_vel_mux_nodelet.cpp",
    "line": 59,
    "function": null,
    "comment": "cmd_vel_mux_nodelet.cpp:59:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "cmd_vel_mux_nodelet.cpp",
    "line": 61,
    "function": null,
    "comment": "cmd_vel_mux_nodelet.cpp:61:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "cmd_vel_mux_nodelet.cpp",
    "line": 75,
    "function": null,
    "comment": "cmd_vel_mux_nodelet.cpp:75:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "cmd_vel_mux_nodelet.cpp",
    "line": 81,
    "function": null,
    "comment": "cmd_vel_mux_nodelet.cpp:81:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "cmd_vel_mux_nodelet.cpp",
    "line": 82,
    "function": null,
    "comment": "cmd_vel_mux_nodelet.cpp:82:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "cmd_vel_mux_nodelet.cpp",
    "line": 85,
    "function": null,
    "comment": "cmd_vel_mux_nodelet.cpp:85:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "cmd_vel_mux_nodelet.cpp",
    "line": 85,
    "function": null,
    "comment": "cmd_vel_mux_nodelet.cpp:85:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "cmd_vel_mux_nodelet.cpp",
    "line": 92,
    "function": null,
    "comment": "cmd_vel_mux_nodelet.cpp:92:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "cmd_vel_mux_nodelet.cpp",
    "line": 96,
    "function": null,
    "comment": "cmd_vel_mux_nodelet.cpp:96:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "cmd_vel_mux_nodelet.cpp",
    "line": 97,
    "function": null,
    "comment": "cmd_vel_mux_nodelet.cpp:97:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "cmd_vel_mux_nodelet.cpp",
    "line": 101,
    "function": null,
    "comment": "cmd_vel_mux_nodelet.cpp:101:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "cmd_vel_mux_nodelet.cpp",
    "line": 102,
    "function": null,
    "comment": "cmd_vel_mux_nodelet.cpp:102:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "cmd_vel_mux_nodelet.cpp",
    "line": 106,
    "function": null,
    "comment": "cmd_vel_mux_nodelet.cpp:106:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "cmd_vel_mux_nodelet.cpp",
    "line": 107,
    "function": null,
    "comment": "cmd_vel_mux_nodelet.cpp:107:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "cmd_vel_mux_nodelet.cpp",
    "line": 116,
    "function": null,
    "comment": "cmd_vel_mux_nodelet.cpp:116:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "cmd_vel_mux_nodelet.cpp",
    "line": 117,
    "function": null,
    "comment": "cmd_vel_mux_nodelet.cpp:117:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "cmd_vel_mux_nodelet.cpp",
    "line": 152,
    "function": null,
    "comment": "cmd_vel_mux_nodelet.cpp:152:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "cmd_vel_mux_nodelet.cpp",
    "line": 155,
    "function": null,
    "comment": "cmd_vel_mux_nodelet.cpp:155:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "cmd_vel_mux_nodelet.cpp",
    "line": 160,
    "function": null,
    "comment": "cmd_vel_mux_nodelet.cpp:160:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "cmd_vel_mux_nodelet.cpp",
    "line": 162,
    "function": null,
    "comment": "cmd_vel_mux_nodelet.cpp:162:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "cmd_vel_mux_nodelet.cpp",
    "line": 166,
    "function": null,
    "comment": "cmd_vel_mux_nodelet.cpp:166:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "cmd_vel_mux_nodelet.cpp",
    "line": 168,
    "function": null,
    "comment": "cmd_vel_mux_nodelet.cpp:168:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "cmd_vel_mux_nodelet.cpp",
    "line": 177,
    "function": null,
    "comment": "cmd_vel_mux_nodelet.cpp:177:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "cmd_vel_mux_nodelet.cpp",
    "line": 155,
    "function": null,
    "comment": "cmd_vel_mux_nodelet.cpp:155:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "cmd_vel_subscribers.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "cmd_vel_subscribers.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "cmd_vel_subscribers.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "cmd_vel_subscribers.hpp",
    "line": null,
    "function": null,
    "comment": "Node: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "cmd_vel_subscribers.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "cmd_vel_subscribers.hpp",
    "line": null,
    "function": null,
    "comment": "Subscriber: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "cmd_vel_subscribers.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "cmd_vel_subscribers.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "cmd_vel_subscribers.hpp",
    "line": null,
    "function": null,
    "comment": "bool: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "cmd_vel_subscribers.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "cmd_vel_subscribers.hpp",
    "line": null,
    "function": null,
    "comment": "string: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "cmd_vel_subscribers.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "cmd_vel_subscribers.hpp",
    "line": null,
    "function": null,
    "comment": "Timer: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "cmd_vel_subscribers.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "cmd_vel_subscribers.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "cmd_vel_subscribers.hpp",
    "line": null,
    "function": null,
    "comment": "vector: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "cmd_vel_subscribers.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "cmd_vel_mux_nodelet.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "cmd_vel_mux_nodelet.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "cmd_vel_mux_nodelet.hpp",
    "line": null,
    "function": null,
    "comment": "CallbackType: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "cmd_vel_mux_nodelet.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Maximum coupling between objects: 5",
    "file": "cmd_vel_mux_nodelet.hpp",
    "line": null,
    "function": null,
    "comment": "CBO is greater than 5, CmdVelMuxNodelet, 11",
    "tags": ["metrics","nasa-satc","ros","coupling"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "cmd_vel_mux_nodelet.hpp",
    "line": null,
    "function": null,
    "comment": "uint32_t: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "cmd_vel_mux_nodelet.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "cmd_vel_mux_nodelet.hpp",
    "line": null,
    "function": null,
    "comment": "Nodelet: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "cmd_vel_mux_nodelet.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "cmd_vel_mux_nodelet.hpp",
    "line": null,
    "function": null,
    "comment": "reloadConfig: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "cmd_vel_mux_nodelet.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "cmd_vel_mux_nodelet.hpp",
    "line": null,
    "function": null,
    "comment": "Publisher: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "cmd_vel_mux_nodelet.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "cmd_vel_mux_nodelet.hpp",
    "line": null,
    "function": null,
    "comment": "Server: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "cmd_vel_mux_nodelet.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "cmd_vel_mux_nodelet.hpp",
    "line": null,
    "function": null,
    "comment": "CmdVelSubscribers: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "cmd_vel_mux_nodelet.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "cmd_vel_mux_nodelet.hpp",
    "line": null,
    "function": null,
    "comment": "ConstPtr: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "cmd_vel_mux_nodelet.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "cmd_vel_mux_nodelet.hpp",
    "line": null,
    "function": null,
    "comment": "TimerEvent: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "cmd_vel_mux_nodelet.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "exceptions.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "exceptions.hpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "exceptions.hpp",
    "line": null,
    "function": null,
    "comment": "runtime_error: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "exceptions.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "exceptions.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "exceptions.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "exceptions.hpp",
    "line": null,
    "function": null,
    "comment": "string: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "exceptions.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "exceptions.hpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "cmd_vel_subscribers.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "cmd_vel_subscribers.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "cmd_vel_subscribers.cpp",
    "line": null,
    "function": null,
    "comment": "Node: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "cmd_vel_subscribers.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "cmd_vel_subscribers.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "cmd_vel_mux_nodelet.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "cmd_vel_mux_nodelet.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "cmd_vel_mux_nodelet.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "cmd_vel_mux_nodelet.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "cmd_vel_mux_nodelet.cpp",
    "line": null,
    "function": null,
    "comment": "uint32_t: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "cmd_vel_mux_nodelet.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "cmd_vel_mux_nodelet.cpp",
    "line": null,
    "function": null,
    "comment": "reloadConfig: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "cmd_vel_mux_nodelet.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "cmd_vel_mux_nodelet.cpp",
    "line": null,
    "function": null,
    "comment": "ConstPtr: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "cmd_vel_mux_nodelet.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  },
  {
    "rule": "Minimum weighted methods per class: 1",
    "file": "cmd_vel_mux_nodelet.cpp",
    "line": null,
    "function": null,
    "comment": "TimerEvent: WMC < 1 (0)",
    "tags": ["metrics","uai","ros","weighted-methods"]
  },
  {
    "rule": "Minimum available methods per class: 1",
    "file": "cmd_vel_mux_nodelet.cpp",
    "line": null,
    "function": null,
    "comment": "MAC is less than 1",
    "tags": ["metrics","nasa-satc","ros","available-methods"]
  }
]