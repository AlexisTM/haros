[
  {
    "rule": "The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_.",
    "file": "ethercat_com.h",
    "line": 35,
    "function": null,
    "comment": "ethercat_com.h:35:  #ifndef header guard has wrong style, please use: _HOME_ANDRE_ROS_HAROS_ANALYSER_ETHERCAT_COM_H_  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the guard's end should be '#endif  // <PROJECT>_<PATH>_<FILE>_H_' or '#endif  /* <PROJECT>_<PATH>_<FILE>_H_ */'.",
    "file": "ethercat_com.h",
    "line": 96,
    "function": null,
    "comment": "ethercat_com.h:96:  #endif line should be '#endif  // _HOME_ANDRE_ROS_HAROS_ANALYSER_ETHERCAT_COM_H_'  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_com.h",
    "line": 44,
    "function": null,
    "comment": "ethercat_com.h:44:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_com.h",
    "line": 45,
    "function": null,
    "comment": "ethercat_com.h:45:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "ethercat_com.h",
    "line": 46,
    "function": null,
    "comment": "ethercat_com.h:46:  protected: should be indented +1 space inside class EthercatCom  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_com.h",
    "line": 48,
    "function": null,
    "comment": "ethercat_com.h:48:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "ethercat_com.h",
    "line": 49,
    "function": null,
    "comment": "ethercat_com.h:49:  public: should be indented +1 space inside class EthercatCom  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "ethercat_com.h",
    "line": 50,
    "function": null,
    "comment": "ethercat_com.h:50:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "ethercat_com.h",
    "line": 51,
    "function": null,
    "comment": "ethercat_com.h:51:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_com.h",
    "line": 57,
    "function": null,
    "comment": "ethercat_com.h:57:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_com.h",
    "line": 58,
    "function": null,
    "comment": "ethercat_com.h:58:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "ethercat_com.h",
    "line": 59,
    "function": null,
    "comment": "ethercat_com.h:59:  public: should be indented +1 space inside class EthercatDirectCom  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "ethercat_com.h",
    "line": 60,
    "function": null,
    "comment": "ethercat_com.h:60:  Single-parameter constructors should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_com.h",
    "line": 62,
    "function": null,
    "comment": "ethercat_com.h:62:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_com.h",
    "line": 63,
    "function": null,
    "comment": "ethercat_com.h:63:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "ethercat_com.h",
    "line": 66,
    "function": null,
    "comment": "ethercat_com.h:66:  protected: should be indented +1 space inside class EthercatDirectCom  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_com.h",
    "line": 70,
    "function": null,
    "comment": "ethercat_com.h:70:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_com.h",
    "line": 71,
    "function": null,
    "comment": "ethercat_com.h:71:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "ethercat_com.h",
    "line": 72,
    "function": null,
    "comment": "ethercat_com.h:72:  public: should be indented +1 space inside class EthercatOobCom  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "ethercat_com.h",
    "line": 73,
    "function": null,
    "comment": "ethercat_com.h:73:  Single-parameter constructors should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_com.h",
    "line": 75,
    "function": null,
    "comment": "ethercat_com.h:75:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_com.h",
    "line": 78,
    "function": null,
    "comment": "ethercat_com.h:78:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "ethercat_com.h",
    "line": 80,
    "function": null,
    "comment": "ethercat_com.h:80:  protected: should be indented +1 space inside class EthercatOobCom  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_com.h",
    "line": 84,
    "function": null,
    "comment": "ethercat_com.h:84:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "ethercat_com.h",
    "line": 89,
    "function": null,
    "comment": "ethercat_com.h:89:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "ethercat_com.h",
    "line": 89,
    "function": null,
    "comment": "ethercat_com.h:89:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_.",
    "file": "ethernet_interface_info.h",
    "line": 35,
    "function": null,
    "comment": "ethernet_interface_info.h:35:  #ifndef header guard has wrong style, please use: _HOME_ANDRE_ROS_HAROS_ANALYSER_ETHERNET_INTERFACE_INFO_H_  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the guard's end should be '#endif  // <PROJECT>_<PATH>_<FILE>_H_' or '#endif  /* <PROJECT>_<PATH>_<FILE>_H_ */'.",
    "file": "ethernet_interface_info.h",
    "line": 108,
    "function": null,
    "comment": "ethernet_interface_info.h:108:  #endif line should be '#endif  // _HOME_ANDRE_ROS_HAROS_ANALYSER_ETHERNET_INTERFACE_INFO_H_'  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "ethernet_interface_info.h",
    "line": 39,
    "function": null,
    "comment": "ethernet_interface_info.h:39:  Found C system header after C++ system header. Should be: ethernet_interface_info.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not include the C standard headers. Use the C++ headers instead.",
    "file": "ethernet_interface_info.h",
    "line": 39,
    "function": null,
    "comment": "ethernet_interface_info.h:39:  Include 'cstdint' instead of 'stdint.h'.  [build/include] [5]",
    "tags": ["hicpp","code-standards","headers","include","preprocessor","deprecation","c"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "ethernet_interface_info.h",
    "line": 41,
    "function": null,
    "comment": "ethernet_interface_info.h:41:  Found C system header after C++ system header. Should be: ethernet_interface_info.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethernet_interface_info.h",
    "line": 44,
    "function": null,
    "comment": "ethernet_interface_info.h:44:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethernet_interface_info.h",
    "line": 55,
    "function": null,
    "comment": "ethernet_interface_info.h:55:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethernet_interface_info.h",
    "line": 62,
    "function": null,
    "comment": "ethernet_interface_info.h:62:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "ethernet_interface_info.h",
    "line": 63,
    "function": null,
    "comment": "ethernet_interface_info.h:63:  public: should be indented +1 space inside class EthernetInterfaceInfo  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethernet_interface_info.h",
    "line": 66,
    "function": null,
    "comment": "ethernet_interface_info.h:66:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "ethernet_interface_info.h",
    "line": 73,
    "function": null,
    "comment": "ethernet_interface_info.h:73:  Is this a non-const reference? If so, make const or use a pointer: diagnostic_updater::DiagnosticStatusWrapper &d  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "ethernet_interface_info.h",
    "line": 75,
    "function": null,
    "comment": "ethernet_interface_info.h:75:  protected: should be indented +1 space inside class EthernetInterfaceInfo  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "ethernet_interface_info.h",
    "line": 77,
    "function": null,
    "comment": "ethernet_interface_info.h:77:  Is this a non-const reference? If so, make const or use a pointer: EthtoolStats &stats  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "ethernet_interface_info.h",
    "line": 80,
    "function": null,
    "comment": "ethernet_interface_info.h:80:  Is this a non-const reference? If so, make const or use a pointer: InterfaceState &state  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethernet_interface_info.h",
    "line": 92,
    "function": null,
    "comment": "ethernet_interface_info.h:92:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "ethernet_interface_info.h",
    "line": 108,
    "function": null,
    "comment": "ethernet_interface_info.h:108:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "ethernet_interface_info.h",
    "line": 108,
    "function": null,
    "comment": "ethernet_interface_info.h:108:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "All headers must be protected against multiple inclusion by",
    "file": "wg_mailbox.h",
    "line": null,
    "function": null,
    "comment": "wg_mailbox.h:0:  No #ifndef header guard found.  [build/header_guard] [5]",
    "tags": ["ros","code-standards","google-cpp","ros-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "wg_mailbox.h",
    "line": 38,
    "function": null,
    "comment": "wg_mailbox.h:38:  Found C system header after other header. Should be: wg_mailbox.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_mailbox.h",
    "line": 41,
    "function": null,
    "comment": "wg_mailbox.h:41:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.h",
    "line": 44,
    "function": null,
    "comment": "wg_mailbox.h:44:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_mailbox.h",
    "line": 45,
    "function": null,
    "comment": "wg_mailbox.h:45:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_mailbox.h",
    "line": 56,
    "function": null,
    "comment": "wg_mailbox.h:56:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "wg_mailbox.h",
    "line": 57,
    "function": null,
    "comment": "wg_mailbox.h:57:  public: should be indented +1 space inside class WGMailbox  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_mailbox.h",
    "line": 61,
    "function": null,
    "comment": "wg_mailbox.h:61:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_mailbox.h",
    "line": 62,
    "function": null,
    "comment": "wg_mailbox.h:62:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_mailbox.h",
    "line": 63,
    "function": null,
    "comment": "wg_mailbox.h:63:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "wg_mailbox.h",
    "line": 63,
    "function": null,
    "comment": "wg_mailbox.h:63:  Is this a non-const reference? If so, make const or use a pointer: diagnostic_updater::DiagnosticStatusWrapper &d  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "wg_mailbox.h",
    "line": 73,
    "function": null,
    "comment": "wg_mailbox.h:73:  protected: should be indented +1 space inside class WGMailbox  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_mailbox.h",
    "line": 82,
    "function": null,
    "comment": "wg_mailbox.h:82:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.h",
    "line": 83,
    "function": null,
    "comment": "wg_mailbox.h:83:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_mailbox.h",
    "line": 83,
    "function": null,
    "comment": "wg_mailbox.h:83:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_mailbox.h",
    "line": 90,
    "function": null,
    "comment": "wg_mailbox.h:90:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.h",
    "line": 93,
    "function": null,
    "comment": "wg_mailbox.h:93:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg_mailbox.h",
    "line": 98,
    "function": null,
    "comment": "wg_mailbox.h:98:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "wg_mailbox.h",
    "line": 98,
    "function": null,
    "comment": "wg_mailbox.h:98:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_.",
    "file": "wg021.h",
    "line": 35,
    "function": null,
    "comment": "wg021.h:35:  #ifndef header guard has wrong style, please use: _HOME_ANDRE_ROS_HAROS_ANALYSER_WG021_H_  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the symbol name should be <PACKAGE>_<PATH>_<FILE>_H.",
    "file": "wg021.h",
    "line": 35,
    "function": null,
    "comment": "wg021.h:35:  #ifndef header guard has wrong style, please use: WG021_H  [build/header_guard] [5]",
    "tags": ["ros","code-standards","ros-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the guard's end should be '#endif  // <PROJECT>_<PATH>_<FILE>_H_' or '#endif  /* <PROJECT>_<PATH>_<FILE>_H_ */'.",
    "file": "wg021.h",
    "line": 126,
    "function": null,
    "comment": "wg021.h:126:  #endif line should be '#endif  // _HOME_ANDRE_ROS_HAROS_ANALYSER_WG021_H_'  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg021.h",
    "line": 42,
    "function": null,
    "comment": "wg021.h:42:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "wg021.h",
    "line": 67,
    "function": null,
    "comment": "wg021.h:67:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "wg021.h",
    "line": 68,
    "function": null,
    "comment": "wg021.h:68:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "wg021.h",
    "line": 68,
    "function": null,
    "comment": "wg021.h:68:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg021.h",
    "line": 71,
    "function": null,
    "comment": "wg021.h:71:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "wg021.h",
    "line": 83,
    "function": null,
    "comment": "wg021.h:83:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "wg021.h",
    "line": 83,
    "function": null,
    "comment": "wg021.h:83:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg021.h",
    "line": 86,
    "function": null,
    "comment": "wg021.h:86:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "wg021.h",
    "line": 87,
    "function": null,
    "comment": "wg021.h:87:  public: should be indented +1 space inside class WG021  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg021.h",
    "line": 88,
    "function": null,
    "comment": "wg021.h:88:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "wg021.h",
    "line": 89,
    "function": null,
    "comment": "wg021.h:89:  Is this a non-const reference? If so, make const or use a pointer: int &start_address  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg021.h",
    "line": 90,
    "function": null,
    "comment": "wg021.h:90:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "wg021.h",
    "line": 90,
    "function": null,
    "comment": "wg021.h:90:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg021.h",
    "line": 93,
    "function": null,
    "comment": "wg021.h:93:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "wg021.h",
    "line": 93,
    "function": null,
    "comment": "wg021.h:93:  Is this a non-const reference? If so, make const or use a pointer: diagnostic_updater::DiagnosticStatusWrapper &d  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg021.h",
    "line": 95,
    "function": null,
    "comment": "wg021.h:95:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg021.h",
    "line": 99,
    "function": null,
    "comment": "wg021.h:99:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "wg021.h",
    "line": 116,
    "function": null,
    "comment": "wg021.h:116:  private: should be indented +1 space inside class WG021  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_.",
    "file": "ethercat_hardware.h",
    "line": 35,
    "function": null,
    "comment": "ethercat_hardware.h:35:  #ifndef header guard has wrong style, please use: _HOME_ANDRE_ROS_HAROS_ANALYSER_ETHERCAT_HARDWARE_H_  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the guard's end should be '#endif  // <PROJECT>_<PATH>_<FILE>_H_' or '#endif  /* <PROJECT>_<PATH>_<FILE>_H_ */'.",
    "file": "ethercat_hardware.h",
    "line": 300,
    "function": null,
    "comment": "ethercat_hardware.h:300:  #endif line should be '#endif  // _HOME_ANDRE_ROS_HAROS_ANALYSER_ETHERCAT_HARDWARE_H_'  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "ethercat_hardware.h",
    "line": 45,
    "function": null,
    "comment": "ethercat_hardware.h:45:  Include 'ethercat_hardware/ethercat_com.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "ethercat_hardware.h",
    "line": 48,
    "function": null,
    "comment": "ethercat_hardware.h:48:  Found C system header after other header. Should be: ethercat_hardware.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "ethercat_hardware.h",
    "line": 50,
    "function": null,
    "comment": "ethercat_hardware.h:50:  Found C system header after other header. Should be: ethercat_hardware.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "ethercat_hardware.h",
    "line": 51,
    "function": null,
    "comment": "ethercat_hardware.h:51:  Found C system header after other header. Should be: ethercat_hardware.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "ethercat_hardware.h",
    "line": 52,
    "function": null,
    "comment": "ethercat_hardware.h:52:  Found C system header after other header. Should be: ethercat_hardware.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "ethercat_hardware.h",
    "line": 53,
    "function": null,
    "comment": "ethercat_hardware.h:53:  Found C system header after other header. Should be: ethercat_hardware.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "ethercat_hardware.h",
    "line": 55,
    "function": null,
    "comment": "ethercat_hardware.h:55:  Found C system header after other header. Should be: ethercat_hardware.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "ethercat_hardware.h",
    "line": 56,
    "function": null,
    "comment": "ethercat_hardware.h:56:  Found C system header after other header. Should be: ethercat_hardware.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "ethercat_hardware.h",
    "line": 57,
    "function": null,
    "comment": "ethercat_hardware.h:57:  Found C system header after other header. Should be: ethercat_hardware.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "ethercat_hardware.h",
    "line": 59,
    "function": null,
    "comment": "ethercat_hardware.h:59:  Found C system header after other header. Should be: ethercat_hardware.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "ethercat_hardware.h",
    "line": 61,
    "function": null,
    "comment": "ethercat_hardware.h:61:  Found C system header after other header. Should be: ethercat_hardware.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "ethercat_hardware.h",
    "line": 63,
    "function": null,
    "comment": "ethercat_hardware.h:63:  Found C system header after other header. Should be: ethercat_hardware.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "ethercat_hardware.h",
    "line": 65,
    "function": null,
    "comment": "ethercat_hardware.h:65:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.h",
    "line": 66,
    "function": null,
    "comment": "ethercat_hardware.h:66:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.h",
    "line": 67,
    "function": null,
    "comment": "ethercat_hardware.h:67:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.h",
    "line": 68,
    "function": null,
    "comment": "ethercat_hardware.h:68:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.h",
    "line": 71,
    "function": null,
    "comment": "ethercat_hardware.h:71:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "ethercat_hardware.h",
    "line": 71,
    "function": null,
    "comment": "ethercat_hardware.h:71:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.h",
    "line": 72,
    "function": null,
    "comment": "ethercat_hardware.h:72:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.h",
    "line": 73,
    "function": null,
    "comment": "ethercat_hardware.h:73:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "ethercat_hardware.h",
    "line": 73,
    "function": null,
    "comment": "ethercat_hardware.h:73:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.h",
    "line": 74,
    "function": null,
    "comment": "ethercat_hardware.h:74:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.h",
    "line": 82,
    "function": null,
    "comment": "ethercat_hardware.h:82:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "ethercat_hardware.h",
    "line": 82,
    "function": null,
    "comment": "ethercat_hardware.h:82:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.h",
    "line": 83,
    "function": null,
    "comment": "ethercat_hardware.h:83:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "ethercat_hardware.h",
    "line": 83,
    "function": null,
    "comment": "ethercat_hardware.h:83:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.h",
    "line": 84,
    "function": null,
    "comment": "ethercat_hardware.h:84:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.h",
    "line": 85,
    "function": null,
    "comment": "ethercat_hardware.h:85:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.h",
    "line": 88,
    "function": null,
    "comment": "ethercat_hardware.h:88:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "ethercat_hardware.h",
    "line": 88,
    "function": null,
    "comment": "ethercat_hardware.h:88:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.h",
    "line": 89,
    "function": null,
    "comment": "ethercat_hardware.h:89:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "ethercat_hardware.h",
    "line": 89,
    "function": null,
    "comment": "ethercat_hardware.h:89:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.h",
    "line": 109,
    "function": null,
    "comment": "ethercat_hardware.h:109:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "ethercat_hardware.h",
    "line": 110,
    "function": null,
    "comment": "ethercat_hardware.h:110:  public: should be indented +1 space inside class EthercatHardwareDiagnosticsPublisher  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "ethercat_hardware.h",
    "line": 111,
    "function": null,
    "comment": "ethercat_hardware.h:111:  Do not leave a blank line after 'public:'  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "ethercat_hardware.h",
    "line": 112,
    "function": null,
    "comment": "ethercat_hardware.h:112:  Is this a non-const reference? If so, make const or use a pointer: ros::NodeHandle &node  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "ethercat_hardware.h",
    "line": 112,
    "function": null,
    "comment": "ethercat_hardware.h:112:  Single-parameter constructors should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.h",
    "line": 120,
    "function": null,
    "comment": "ethercat_hardware.h:120:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.h",
    "line": 132,
    "function": null,
    "comment": "ethercat_hardware.h:132:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.h",
    "line": 133,
    "function": null,
    "comment": "ethercat_hardware.h:133:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.h",
    "line": 138,
    "function": null,
    "comment": "ethercat_hardware.h:138:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "ethercat_hardware.h",
    "line": 139,
    "function": null,
    "comment": "ethercat_hardware.h:139:  private: should be indented +1 space inside class EthercatHardwareDiagnosticsPublisher  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "ethercat_hardware.h",
    "line": 140,
    "function": null,
    "comment": "ethercat_hardware.h:140:  Do not leave a blank line after 'private:'  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.h",
    "line": 162,
    "function": null,
    "comment": "ethercat_hardware.h:162:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "ethercat_hardware.h",
    "line": 162,
    "function": null,
    "comment": "ethercat_hardware.h:162:  Is this a non-const reference? If so, make const or use a pointer: diagnostic_updater::DiagnosticStatusWrapper &status  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.h",
    "line": 163,
    "function": null,
    "comment": "ethercat_hardware.h:163:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.h",
    "line": 169,
    "function": null,
    "comment": "ethercat_hardware.h:169:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "ethercat_hardware.h",
    "line": 169,
    "function": null,
    "comment": "ethercat_hardware.h:169:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.h",
    "line": 176,
    "function": null,
    "comment": "ethercat_hardware.h:176:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "ethercat_hardware.h",
    "line": 176,
    "function": null,
    "comment": "ethercat_hardware.h:176:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.h",
    "line": 183,
    "function": null,
    "comment": "ethercat_hardware.h:183:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.h",
    "line": 185,
    "function": null,
    "comment": "ethercat_hardware.h:185:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.h",
    "line": 185,
    "function": null,
    "comment": "ethercat_hardware.h:185:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.h",
    "line": 190,
    "function": null,
    "comment": "ethercat_hardware.h:190:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.h",
    "line": 190,
    "function": null,
    "comment": "ethercat_hardware.h:190:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.h",
    "line": 191,
    "function": null,
    "comment": "ethercat_hardware.h:191:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.h",
    "line": 192,
    "function": null,
    "comment": "ethercat_hardware.h:192:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.h",
    "line": 193,
    "function": null,
    "comment": "ethercat_hardware.h:193:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "ethercat_hardware.h",
    "line": 193,
    "function": null,
    "comment": "ethercat_hardware.h:193:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.h",
    "line": 204,
    "function": null,
    "comment": "ethercat_hardware.h:204:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "ethercat_hardware.h",
    "line": 205,
    "function": null,
    "comment": "ethercat_hardware.h:205:  public: should be indented +1 space inside class EthercatHardware  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "ethercat_hardware.h",
    "line": 209,
    "function": null,
    "comment": "ethercat_hardware.h:209:  Single-parameter constructors should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.h",
    "line": 235,
    "function": null,
    "comment": "ethercat_hardware.h:235:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "ethercat_hardware.h",
    "line": 235,
    "function": null,
    "comment": "ethercat_hardware.h:235:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "ethercat_hardware.h",
    "line": 235,
    "function": null,
    "comment": "ethercat_hardware.h:235:  Is this a non-const reference? If so, make const or use a pointer: std::ostream &os  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.h",
    "line": 251,
    "function": null,
    "comment": "ethercat_hardware.h:251:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "ethercat_hardware.h",
    "line": 255,
    "function": null,
    "comment": "ethercat_hardware.h:255:  private: should be indented +1 space inside class EthercatHardware  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.h",
    "line": 259,
    "function": null,
    "comment": "ethercat_hardware.h:259:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.h",
    "line": 283,
    "function": null,
    "comment": "ethercat_hardware.h:283:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.h",
    "line": 284,
    "function": null,
    "comment": "ethercat_hardware.h:284:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "ethercat_hardware.h",
    "line": 284,
    "function": null,
    "comment": "ethercat_hardware.h:284:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.h",
    "line": 286,
    "function": null,
    "comment": "ethercat_hardware.h:286:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.h",
    "line": 287,
    "function": null,
    "comment": "ethercat_hardware.h:287:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "ethercat_hardware.h",
    "line": 287,
    "function": null,
    "comment": "ethercat_hardware.h:287:  Is this a non-const reference? If so, make const or use a pointer: double &max  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.h",
    "line": 295,
    "function": null,
    "comment": "ethercat_hardware.h:295:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "ethercat_hardware.h",
    "line": 266,
    "function": null,
    "comment": "ethercat_hardware.h:266:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "ethercat_hardware.h",
    "line": 272,
    "function": null,
    "comment": "ethercat_hardware.h:272:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_.",
    "file": "ethercat_device.h",
    "line": 35,
    "function": null,
    "comment": "ethercat_device.h:35:  #ifndef header guard has wrong style, please use: _HOME_ANDRE_ROS_HAROS_ANALYSER_ETHERCAT_DEVICE_H_  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the guard's end should be '#endif  // <PROJECT>_<PATH>_<FILE>_H_' or '#endif  /* <PROJECT>_<PATH>_<FILE>_H_ */'.",
    "file": "ethercat_device.h",
    "line": 236,
    "function": null,
    "comment": "ethercat_device.h:236:  #endif line should be '#endif  // _HOME_ANDRE_ROS_HAROS_ANALYSER_ETHERCAT_DEVICE_H_'  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "ethercat_device.h",
    "line": 41,
    "function": null,
    "comment": "ethercat_device.h:41:  Found C system header after C++ system header. Should be: ethercat_device.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "ethercat_device.h",
    "line": 42,
    "function": null,
    "comment": "ethercat_device.h:42:  Found C system header after C++ system header. Should be: ethercat_device.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "ethercat_device.h",
    "line": 44,
    "function": null,
    "comment": "ethercat_device.h:44:  Found C system header after C++ system header. Should be: ethercat_device.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "ethercat_device.h",
    "line": 46,
    "function": null,
    "comment": "ethercat_device.h:46:  Found C system header after C++ system header. Should be: ethercat_device.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "ethercat_device.h",
    "line": 48,
    "function": null,
    "comment": "ethercat_device.h:48:  Found C system header after C++ system header. Should be: ethercat_device.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "ethercat_device.h",
    "line": 50,
    "function": null,
    "comment": "ethercat_device.h:50:  Found C system header after C++ system header. Should be: ethercat_device.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "ethercat_device.h",
    "line": 52,
    "function": null,
    "comment": "ethercat_device.h:52:  Found C system header after C++ system header. Should be: ethercat_device.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "ethercat_device.h",
    "line": 54,
    "function": null,
    "comment": "ethercat_device.h:54:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_device.h",
    "line": 57,
    "function": null,
    "comment": "ethercat_device.h:57:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "ethercat_device.h",
    "line": 58,
    "function": null,
    "comment": "ethercat_device.h:58:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "ethercat_device.h",
    "line": 61,
    "function": null,
    "comment": "ethercat_device.h:61:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "ethercat_device.h",
    "line": 67,
    "function": null,
    "comment": "ethercat_device.h:67:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "ethercat_device.h",
    "line": 71,
    "function": null,
    "comment": "ethercat_device.h:71:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_device.h",
    "line": 74,
    "function": null,
    "comment": "ethercat_device.h:74:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "ethercat_device.h",
    "line": 79,
    "function": null,
    "comment": "ethercat_device.h:79:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "ethercat_device.h",
    "line": 80,
    "function": null,
    "comment": "ethercat_device.h:80:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_device.h",
    "line": 83,
    "function": null,
    "comment": "ethercat_device.h:83:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_device.h",
    "line": 90,
    "function": null,
    "comment": "ethercat_device.h:90:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_device.h",
    "line": 92,
    "function": null,
    "comment": "ethercat_device.h:92:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_device.h",
    "line": 96,
    "function": null,
    "comment": "ethercat_device.h:96:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "ethercat_device.h",
    "line": 97,
    "function": null,
    "comment": "ethercat_device.h:97:  public: should be indented +1 space inside struct EthercatDeviceDiagnostics  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.h",
    "line": 100,
    "function": null,
    "comment": "ethercat_device.h:100:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.h",
    "line": 102,
    "function": null,
    "comment": "ethercat_device.h:102:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_device.h",
    "line": 103,
    "function": null,
    "comment": "ethercat_device.h:103:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.h",
    "line": 106,
    "function": null,
    "comment": "ethercat_device.h:106:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_device.h",
    "line": 107,
    "function": null,
    "comment": "ethercat_device.h:107:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_device.h",
    "line": 110,
    "function": null,
    "comment": "ethercat_device.h:110:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.h",
    "line": 110,
    "function": null,
    "comment": "ethercat_device.h:110:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_device.h",
    "line": 111,
    "function": null,
    "comment": "ethercat_device.h:111:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.h",
    "line": 114,
    "function": null,
    "comment": "ethercat_device.h:114:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "ethercat_device.h",
    "line": 114,
    "function": null,
    "comment": "ethercat_device.h:114:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "ethercat_device.h",
    "line": 114,
    "function": null,
    "comment": "ethercat_device.h:114:  Is this a non-const reference? If so, make const or use a pointer: diagnostic_updater::DiagnosticStatusWrapper &d  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "ethercat_device.h",
    "line": 116,
    "function": null,
    "comment": "ethercat_device.h:116:  protected: should be indented +1 space inside struct EthercatDeviceDiagnostics  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.h",
    "line": 118,
    "function": null,
    "comment": "ethercat_device.h:118:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_device.h",
    "line": 134,
    "function": null,
    "comment": "ethercat_device.h:134:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "ethercat_device.h",
    "line": 135,
    "function": null,
    "comment": "ethercat_device.h:135:  public: should be indented +1 space inside class EthercatDevice  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "ethercat_device.h",
    "line": 137,
    "function": null,
    "comment": "ethercat_device.h:137:  Is this a non-const reference? If so, make const or use a pointer: int &start_address  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "ethercat_device.h",
    "line": 140,
    "function": null,
    "comment": "ethercat_device.h:140:  Is this a non-const reference? If so, make const or use a pointer: ros::NodeHandle &nh  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.h",
    "line": 145,
    "function": null,
    "comment": "ethercat_device.h:145:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "ethercat_device.h",
    "line": 145,
    "function": null,
    "comment": "ethercat_device.h:145:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_device.h",
    "line": 146,
    "function": null,
    "comment": "ethercat_device.h:146:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.h",
    "line": 153,
    "function": null,
    "comment": "ethercat_device.h:153:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.h",
    "line": 161,
    "function": null,
    "comment": "ethercat_device.h:161:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "ethercat_device.h",
    "line": 161,
    "function": null,
    "comment": "ethercat_device.h:161:  Is this a non-const reference? If so, make const or use a pointer: vector<diagnostic_msgs::DiagnosticStatus> &vec  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.h",
    "line": 169,
    "function": null,
    "comment": "ethercat_device.h:169:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "ethercat_device.h",
    "line": 169,
    "function": null,
    "comment": "ethercat_device.h:169:  Is this a non-const reference? If so, make const or use a pointer: diagnostic_updater::DiagnosticStatusWrapper &d  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.h",
    "line": 176,
    "function": null,
    "comment": "ethercat_device.h:176:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "ethercat_device.h",
    "line": 176,
    "function": null,
    "comment": "ethercat_device.h:176:  Is this a non-const reference? If so, make const or use a pointer: diagnostic_updater::DiagnosticStatusWrapper &d  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.h",
    "line": 187,
    "function": null,
    "comment": "ethercat_device.h:187:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "ethercat_device.h",
    "line": 189,
    "function": null,
    "comment": "ethercat_device.h:189:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.h",
    "line": 194,
    "function": null,
    "comment": "ethercat_device.h:194:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.h",
    "line": 195,
    "function": null,
    "comment": "ethercat_device.h:195:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "ethercat_device.h",
    "line": 195,
    "function": null,
    "comment": "ethercat_device.h:195:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_device.h",
    "line": 198,
    "function": null,
    "comment": "ethercat_device.h:198:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.h",
    "line": 202,
    "function": null,
    "comment": "ethercat_device.h:202:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.h",
    "line": 203,
    "function": null,
    "comment": "ethercat_device.h:203:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "ethercat_device.h",
    "line": 203,
    "function": null,
    "comment": "ethercat_device.h:203:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_device.h",
    "line": 205,
    "function": null,
    "comment": "ethercat_device.h:205:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.h",
    "line": 210,
    "function": null,
    "comment": "ethercat_device.h:210:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.h",
    "line": 211,
    "function": null,
    "comment": "ethercat_device.h:211:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "ethercat_device.h",
    "line": 211,
    "function": null,
    "comment": "ethercat_device.h:211:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_device.h",
    "line": 220,
    "function": null,
    "comment": "ethercat_device.h:220:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.h",
    "line": 221,
    "function": null,
    "comment": "ethercat_device.h:221:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.h",
    "line": 222,
    "function": null,
    "comment": "ethercat_device.h:222:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_device.h",
    "line": 223,
    "function": null,
    "comment": "ethercat_device.h:223:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.h",
    "line": 223,
    "function": null,
    "comment": "ethercat_device.h:223:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.h",
    "line": 225,
    "function": null,
    "comment": "ethercat_device.h:225:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.h",
    "line": 226,
    "function": null,
    "comment": "ethercat_device.h:226:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_device.h",
    "line": 228,
    "function": null,
    "comment": "ethercat_device.h:228:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.h",
    "line": 232,
    "function": null,
    "comment": "ethercat_device.h:232:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "ethercat_device.h",
    "line": 187,
    "function": null,
    "comment": "ethercat_device.h:187:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_.",
    "file": "wg06.h",
    "line": 35,
    "function": null,
    "comment": "wg06.h:35:  #ifndef header guard has wrong style, please use: _HOME_ANDRE_ROS_HAROS_ANALYSER_WG06_H_  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the symbol name should be <PACKAGE>_<PATH>_<FILE>_H.",
    "file": "wg06.h",
    "line": 35,
    "function": null,
    "comment": "wg06.h:35:  #ifndef header guard has wrong style, please use: WG06_H  [build/header_guard] [5]",
    "tags": ["ros","code-standards","ros-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the guard's end should be '#endif  // <PROJECT>_<PATH>_<FILE>_H_' or '#endif  /* <PROJECT>_<PATH>_<FILE>_H_ */'.",
    "file": "wg06.h",
    "line": 254,
    "function": null,
    "comment": "wg06.h:254:  #endif line should be '#endif  // _HOME_ANDRE_ROS_HAROS_ANALYSER_WG06_H_'  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "wg06.h",
    "line": 43,
    "function": null,
    "comment": "wg06.h:43:  Include 'pr2_msgs/AccelerometerState.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "wg06.h",
    "line": 44,
    "function": null,
    "comment": "wg06.h:44:  Include 'ethercat_hardware/RawFTData.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.h",
    "line": 48,
    "function": null,
    "comment": "wg06.h:48:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "wg06.h",
    "line": 72,
    "function": null,
    "comment": "wg06.h:72:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "wg06.h",
    "line": 73,
    "function": null,
    "comment": "wg06.h:73:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "wg06.h",
    "line": 73,
    "function": null,
    "comment": "wg06.h:73:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.h",
    "line": 77,
    "function": null,
    "comment": "wg06.h:77:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "wg06.h",
    "line": 82,
    "function": null,
    "comment": "wg06.h:82:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "wg06.h",
    "line": 83,
    "function": null,
    "comment": "wg06.h:83:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "wg06.h",
    "line": 83,
    "function": null,
    "comment": "wg06.h:83:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.h",
    "line": 87,
    "function": null,
    "comment": "wg06.h:87:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "wg06.h",
    "line": 88,
    "function": null,
    "comment": "wg06.h:88:  public: should be indented +1 space inside class FTParamsInternal  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.h",
    "line": 91,
    "function": null,
    "comment": "wg06.h:91:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.h",
    "line": 92,
    "function": null,
    "comment": "wg06.h:92:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.h",
    "line": 99,
    "function": null,
    "comment": "wg06.h:99:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.h",
    "line": 103,
    "function": null,
    "comment": "wg06.h:103:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.h",
    "line": 111,
    "function": null,
    "comment": "wg06.h:111:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "wg06.h",
    "line": 138,
    "function": null,
    "comment": "wg06.h:138:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "wg06.h",
    "line": 139,
    "function": null,
    "comment": "wg06.h:139:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "wg06.h",
    "line": 139,
    "function": null,
    "comment": "wg06.h:139:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.h",
    "line": 143,
    "function": null,
    "comment": "wg06.h:143:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "wg06.h",
    "line": 149,
    "function": null,
    "comment": "wg06.h:149:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "wg06.h",
    "line": 150,
    "function": null,
    "comment": "wg06.h:150:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.h",
    "line": 154,
    "function": null,
    "comment": "wg06.h:154:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "wg06.h",
    "line": 158,
    "function": null,
    "comment": "wg06.h:158:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "wg06.h",
    "line": 159,
    "function": null,
    "comment": "wg06.h:159:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.h",
    "line": 164,
    "function": null,
    "comment": "wg06.h:164:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "wg06.h",
    "line": 165,
    "function": null,
    "comment": "wg06.h:165:  public: should be indented +1 space inside class WG06  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.h",
    "line": 168,
    "function": null,
    "comment": "wg06.h:168:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "wg06.h",
    "line": 168,
    "function": null,
    "comment": "wg06.h:168:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "wg06.h",
    "line": 169,
    "function": null,
    "comment": "wg06.h:169:  Is this a non-const reference? If so, make const or use a pointer: int &start_address  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.h",
    "line": 173,
    "function": null,
    "comment": "wg06.h:173:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "wg06.h",
    "line": 173,
    "function": null,
    "comment": "wg06.h:173:  Is this a non-const reference? If so, make const or use a pointer: vector<diagnostic_msgs::DiagnosticStatus> &vec  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.h",
    "line": 175,
    "function": null,
    "comment": "wg06.h:175:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "wg06.h",
    "line": 178,
    "function": null,
    "comment": "wg06.h:178:  private: should be indented +1 space inside class WG06  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "wg06.h",
    "line": 179,
    "function": null,
    "comment": "wg06.h:179:  Do not leave a blank line after 'private:'  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.h",
    "line": 192,
    "function": null,
    "comment": "wg06.h:192:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.h",
    "line": 193,
    "function": null,
    "comment": "wg06.h:193:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.h",
    "line": 195,
    "function": null,
    "comment": "wg06.h:195:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "wg06.h",
    "line": 195,
    "function": null,
    "comment": "wg06.h:195:  Is this a non-const reference? If so, make const or use a pointer: diagnostic_updater::DiagnosticStatusWrapper &d  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.h",
    "line": 196,
    "function": null,
    "comment": "wg06.h:196:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "wg06.h",
    "line": 196,
    "function": null,
    "comment": "wg06.h:196:  Is this a non-const reference? If so, make const or use a pointer: diagnostic_updater::DiagnosticStatusWrapper &d  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.h",
    "line": 197,
    "function": null,
    "comment": "wg06.h:197:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "wg06.h",
    "line": 197,
    "function": null,
    "comment": "wg06.h:197:  Is this a non-const reference? If so, make const or use a pointer: diagnostic_updater::DiagnosticStatusWrapper &d  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.h",
    "line": 198,
    "function": null,
    "comment": "wg06.h:198:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "wg06.h",
    "line": 198,
    "function": null,
    "comment": "wg06.h:198:  Is this a non-const reference? If so, make const or use a pointer: diagnostic_updater::DiagnosticStatusWrapper &d  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.h",
    "line": 203,
    "function": null,
    "comment": "wg06.h:203:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg06.h",
    "line": 203,
    "function": null,
    "comment": "wg06.h:203:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg06.h",
    "line": 204,
    "function": null,
    "comment": "wg06.h:204:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg06.h",
    "line": 205,
    "function": null,
    "comment": "wg06.h:205:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.h",
    "line": 207,
    "function": null,
    "comment": "wg06.h:207:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg06.h",
    "line": 207,
    "function": null,
    "comment": "wg06.h:207:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.h",
    "line": 208,
    "function": null,
    "comment": "wg06.h:208:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg06.h",
    "line": 209,
    "function": null,
    "comment": "wg06.h:209:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.h",
    "line": 210,
    "function": null,
    "comment": "wg06.h:210:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.h",
    "line": 212,
    "function": null,
    "comment": "wg06.h:212:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.h",
    "line": 214,
    "function": null,
    "comment": "wg06.h:214:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.h",
    "line": 215,
    "function": null,
    "comment": "wg06.h:215:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.h",
    "line": 217,
    "function": null,
    "comment": "wg06.h:217:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "wg06.h",
    "line": 217,
    "function": null,
    "comment": "wg06.h:217:  Is this a non-const reference? If so, make const or use a pointer: geometry_msgs::Wrench &wrench  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.h",
    "line": 218,
    "function": null,
    "comment": "wg06.h:218:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.h",
    "line": 220,
    "function": null,
    "comment": "wg06.h:220:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg06.h",
    "line": 220,
    "function": null,
    "comment": "wg06.h:220:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.h",
    "line": 221,
    "function": null,
    "comment": "wg06.h:221:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.h",
    "line": 222,
    "function": null,
    "comment": "wg06.h:222:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg06.h",
    "line": 222,
    "function": null,
    "comment": "wg06.h:222:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.h",
    "line": 223,
    "function": null,
    "comment": "wg06.h:223:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg06.h",
    "line": 225,
    "function": null,
    "comment": "wg06.h:225:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg06.h",
    "line": 226,
    "function": null,
    "comment": "wg06.h:226:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.h",
    "line": 228,
    "function": null,
    "comment": "wg06.h:228:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.h",
    "line": 229,
    "function": null,
    "comment": "wg06.h:229:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg06.h",
    "line": 229,
    "function": null,
    "comment": "wg06.h:229:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.h",
    "line": 230,
    "function": null,
    "comment": "wg06.h:230:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.h",
    "line": 231,
    "function": null,
    "comment": "wg06.h:231:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.h",
    "line": 232,
    "function": null,
    "comment": "wg06.h:232:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.h",
    "line": 236,
    "function": null,
    "comment": "wg06.h:236:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.h",
    "line": 237,
    "function": null,
    "comment": "wg06.h:237:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.h",
    "line": 238,
    "function": null,
    "comment": "wg06.h:238:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "wg06.h",
    "line": 239,
    "function": null,
    "comment": "wg06.h:239:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "wg06.h",
    "line": 173,
    "function": null,
    "comment": "wg06.h:173:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_.",
    "file": "motor_heating_model.h",
    "line": 35,
    "function": null,
    "comment": "motor_heating_model.h:35:  #ifndef header guard has wrong style, please use: _HOME_ANDRE_ROS_HAROS_ANALYSER_MOTOR_HEATING_MODEL_H_  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the symbol name should be <PACKAGE>_<PATH>_<FILE>_H.",
    "file": "motor_heating_model.h",
    "line": 35,
    "function": null,
    "comment": "motor_heating_model.h:35:  #ifndef header guard has wrong style, please use: MOTOR_HEATING_MODEL_H  [build/header_guard] [5]",
    "tags": ["ros","code-standards","ros-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the guard's end should be '#endif  // <PROJECT>_<PATH>_<FILE>_H_' or '#endif  /* <PROJECT>_<PATH>_<FILE>_H_ */'.",
    "file": "motor_heating_model.h",
    "line": 304,
    "function": null,
    "comment": "motor_heating_model.h:304:  #endif line should be '#endif  // _HOME_ANDRE_ROS_HAROS_ANALYSER_MOTOR_HEATING_MODEL_H_'  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "motor_heating_model.h",
    "line": 40,
    "function": null,
    "comment": "motor_heating_model.h:40:  Include 'ethercat_hardware/ActuatorInfo.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "motor_heating_model.h",
    "line": 43,
    "function": null,
    "comment": "motor_heating_model.h:43:  Include 'diagnostic_updater/DiagnosticStatusWrapper.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "motor_heating_model.h",
    "line": 45,
    "function": null,
    "comment": "motor_heating_model.h:45:  Found C system header after other header. Should be: motor_heating_model.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "motor_heating_model.h",
    "line": 46,
    "function": null,
    "comment": "motor_heating_model.h:46:  Found C system header after other header. Should be: motor_heating_model.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "motor_heating_model.h",
    "line": 47,
    "function": null,
    "comment": "motor_heating_model.h:47:  Found C system header after other header. Should be: motor_heating_model.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "motor_heating_model.h",
    "line": 49,
    "function": null,
    "comment": "motor_heating_model.h:49:  Found C++ system header after other header. Should be: motor_heating_model.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "motor_heating_model.h",
    "line": 50,
    "function": null,
    "comment": "motor_heating_model.h:50:  Found C++ system header after other header. Should be: motor_heating_model.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.h",
    "line": 53,
    "function": null,
    "comment": "motor_heating_model.h:53:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.h",
    "line": 62,
    "function": null,
    "comment": "motor_heating_model.h:62:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "motor_heating_model.h",
    "line": 73,
    "function": null,
    "comment": "motor_heating_model.h:73:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "motor_heating_model.h",
    "line": 73,
    "function": null,
    "comment": "motor_heating_model.h:73:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.h",
    "line": 87,
    "function": null,
    "comment": "motor_heating_model.h:87:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.h",
    "line": 90,
    "function": null,
    "comment": "motor_heating_model.h:90:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.h",
    "line": 92,
    "function": null,
    "comment": "motor_heating_model.h:92:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.h",
    "line": 94,
    "function": null,
    "comment": "motor_heating_model.h:94:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.h",
    "line": 95,
    "function": null,
    "comment": "motor_heating_model.h:95:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.h",
    "line": 96,
    "function": null,
    "comment": "motor_heating_model.h:96:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "motor_heating_model.h",
    "line": 96,
    "function": null,
    "comment": "motor_heating_model.h:96:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "motor_heating_model.h",
    "line": 100,
    "function": null,
    "comment": "motor_heating_model.h:100:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "motor_heating_model.h",
    "line": 100,
    "function": null,
    "comment": "motor_heating_model.h:100:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.h",
    "line": 106,
    "function": null,
    "comment": "motor_heating_model.h:106:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "motor_heating_model.h",
    "line": 107,
    "function": null,
    "comment": "motor_heating_model.h:107:  public: should be indented +1 space inside class MotorHeatingModelCommon  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "motor_heating_model.h",
    "line": 110,
    "function": null,
    "comment": "motor_heating_model.h:110:  Single-parameter constructors should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.h",
    "line": 111,
    "function": null,
    "comment": "motor_heating_model.h:111:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.h",
    "line": 118,
    "function": null,
    "comment": "motor_heating_model.h:118:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.h",
    "line": 123,
    "function": null,
    "comment": "motor_heating_model.h:123:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.h",
    "line": 125,
    "function": null,
    "comment": "motor_heating_model.h:125:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.h",
    "line": 127,
    "function": null,
    "comment": "motor_heating_model.h:127:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.h",
    "line": 128,
    "function": null,
    "comment": "motor_heating_model.h:128:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.h",
    "line": 129,
    "function": null,
    "comment": "motor_heating_model.h:129:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.h",
    "line": 130,
    "function": null,
    "comment": "motor_heating_model.h:130:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.h",
    "line": 132,
    "function": null,
    "comment": "motor_heating_model.h:132:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.h",
    "line": 134,
    "function": null,
    "comment": "motor_heating_model.h:134:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "motor_heating_model.h",
    "line": 137,
    "function": null,
    "comment": "motor_heating_model.h:137:  protected: should be indented +1 space inside class MotorHeatingModelCommon  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.h",
    "line": 145,
    "function": null,
    "comment": "motor_heating_model.h:145:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "motor_heating_model.h",
    "line": 147,
    "function": null,
    "comment": "motor_heating_model.h:147:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.h",
    "line": 154,
    "function": null,
    "comment": "motor_heating_model.h:154:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "motor_heating_model.h",
    "line": 155,
    "function": null,
    "comment": "motor_heating_model.h:155:  public: should be indented +1 space inside class MotorHeatingModel  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "motor_heating_model.h",
    "line": 156,
    "function": null,
    "comment": "motor_heating_model.h:156:  Do not leave a blank line after 'public:'  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "motor_heating_model.h",
    "line": 161,
    "function": null,
    "comment": "motor_heating_model.h:161:  Closing ) should be moved to the previous line  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.h",
    "line": 175,
    "function": null,
    "comment": "motor_heating_model.h:175:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.h",
    "line": 176,
    "function": null,
    "comment": "motor_heating_model.h:176:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.h",
    "line": 179,
    "function": null,
    "comment": "motor_heating_model.h:179:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.h",
    "line": 182,
    "function": null,
    "comment": "motor_heating_model.h:182:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.h",
    "line": 217,
    "function": null,
    "comment": "motor_heating_model.h:217:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.h",
    "line": 218,
    "function": null,
    "comment": "motor_heating_model.h:218:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.h",
    "line": 219,
    "function": null,
    "comment": "motor_heating_model.h:219:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.h",
    "line": 225,
    "function": null,
    "comment": "motor_heating_model.h:225:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.h",
    "line": 226,
    "function": null,
    "comment": "motor_heating_model.h:226:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.h",
    "line": 227,
    "function": null,
    "comment": "motor_heating_model.h:227:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "motor_heating_model.h",
    "line": 242,
    "function": null,
    "comment": "motor_heating_model.h:242:  Is this a non-const reference? If so, make const or use a pointer: diagnostic_updater::DiagnosticStatusWrapper &d  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "motor_heating_model.h",
    "line": 247,
    "function": null,
    "comment": "motor_heating_model.h:247:  protected: should be indented +1 space inside class MotorHeatingModel  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.h",
    "line": 248,
    "function": null,
    "comment": "motor_heating_model.h:248:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.h",
    "line": 250,
    "function": null,
    "comment": "motor_heating_model.h:250:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.h",
    "line": 251,
    "function": null,
    "comment": "motor_heating_model.h:251:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.h",
    "line": 256,
    "function": null,
    "comment": "motor_heating_model.h:256:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.h",
    "line": 259,
    "function": null,
    "comment": "motor_heating_model.h:259:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.h",
    "line": 270,
    "function": null,
    "comment": "motor_heating_model.h:270:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.h",
    "line": 278,
    "function": null,
    "comment": "motor_heating_model.h:278:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.h",
    "line": 278,
    "function": null,
    "comment": "motor_heating_model.h:278:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.h",
    "line": 281,
    "function": null,
    "comment": "motor_heating_model.h:281:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "motor_heating_model.h",
    "line": 291,
    "function": null,
    "comment": "motor_heating_model.h:291:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.h",
    "line": 293,
    "function": null,
    "comment": "motor_heating_model.h:293:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.h",
    "line": 296,
    "function": null,
    "comment": "motor_heating_model.h:296:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.h",
    "line": 297,
    "function": null,
    "comment": "motor_heating_model.h:297:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "motor_heating_model.h",
    "line": 302,
    "function": null,
    "comment": "motor_heating_model.h:302:  Namespace should be terminated with '// namespace ethercat_hardware'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "motor_heating_model.h",
    "line": 302,
    "function": null,
    "comment": "motor_heating_model.h:302:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "motor_heating_model.h",
    "line": 302,
    "function": null,
    "comment": "motor_heating_model.h:302:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "motor_heating_model.h",
    "line": 304,
    "function": null,
    "comment": "motor_heating_model.h:304:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "motor_heating_model.h",
    "line": 304,
    "function": null,
    "comment": "motor_heating_model.h:304:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_.",
    "file": "wg05.h",
    "line": 35,
    "function": null,
    "comment": "wg05.h:35:  #ifndef header guard has wrong style, please use: _HOME_ANDRE_ROS_HAROS_ANALYSER_WG05_H_  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the symbol name should be <PACKAGE>_<PATH>_<FILE>_H.",
    "file": "wg05.h",
    "line": 35,
    "function": null,
    "comment": "wg05.h:35:  #ifndef header guard has wrong style, please use: WG05_H  [build/header_guard] [5]",
    "tags": ["ros","code-standards","ros-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the guard's end should be '#endif  // <PROJECT>_<PATH>_<FILE>_H_' or '#endif  /* <PROJECT>_<PATH>_<FILE>_H_ */'.",
    "file": "wg05.h",
    "line": 57,
    "function": null,
    "comment": "wg05.h:57:  #endif line should be '#endif  // _HOME_ANDRE_ROS_HAROS_ANALYSER_WG05_H_'  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg05.h",
    "line": 44,
    "function": null,
    "comment": "wg05.h:44:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "wg05.h",
    "line": 45,
    "function": null,
    "comment": "wg05.h:45:  public: should be indented +1 space inside class WG05  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "wg05.h",
    "line": 46,
    "function": null,
    "comment": "wg05.h:46:  Is this a non-const reference? If so, make const or use a pointer: int &start_address  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg05.h",
    "line": 47,
    "function": null,
    "comment": "wg05.h:47:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg05.h",
    "line": 47,
    "function": null,
    "comment": "wg05.h:47:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "wg05.h",
    "line": 47,
    "function": null,
    "comment": "wg05.h:47:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg05.h",
    "line": 48,
    "function": null,
    "comment": "wg05.h:48:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg05.h",
    "line": 51,
    "function": null,
    "comment": "wg05.h:51:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_.",
    "file": "wg014.h",
    "line": 35,
    "function": null,
    "comment": "wg014.h:35:  #ifndef header guard has wrong style, please use: _HOME_ANDRE_ROS_HAROS_ANALYSER_WG014_H_  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the guard's end should be '#endif  // <PROJECT>_<PATH>_<FILE>_H_' or '#endif  /* <PROJECT>_<PATH>_<FILE>_H_ */'.",
    "file": "wg014.h",
    "line": 57,
    "function": null,
    "comment": "wg014.h:57:  #endif line should be '#endif  // _HOME_ANDRE_ROS_HAROS_ANALYSER_WG014_H_'  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg014.h",
    "line": 41,
    "function": null,
    "comment": "wg014.h:41:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "wg014.h",
    "line": 42,
    "function": null,
    "comment": "wg014.h:42:  public: should be indented +1 space inside class WG014  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "wg014.h",
    "line": 43,
    "function": null,
    "comment": "wg014.h:43:  Is this a non-const reference? If so, make const or use a pointer: int &start_address  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg014.h",
    "line": 46,
    "function": null,
    "comment": "wg014.h:46:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "wg014.h",
    "line": 46,
    "function": null,
    "comment": "wg014.h:46:  Is this a non-const reference? If so, make const or use a pointer: diagnostic_updater::DiagnosticStatusWrapper &d  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "wg014.h",
    "line": 50,
    "function": null,
    "comment": "wg014.h:50:  protected: should be indented +1 space inside class WG014  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_.",
    "file": "wg0x.h",
    "line": 35,
    "function": null,
    "comment": "wg0x.h:35:  #ifndef header guard has wrong style, please use: _HOME_ANDRE_ROS_HAROS_ANALYSER_WG0X_H_  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the symbol name should be <PACKAGE>_<PATH>_<FILE>_H.",
    "file": "wg0x.h",
    "line": 35,
    "function": null,
    "comment": "wg0x.h:35:  #ifndef header guard has wrong style, please use: WG0X_H  [build/header_guard] [5]",
    "tags": ["ros","code-standards","ros-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the guard's end should be '#endif  // <PROJECT>_<PATH>_<FILE>_H_' or '#endif  /* <PROJECT>_<PATH>_<FILE>_H_ */'.",
    "file": "wg0x.h",
    "line": 422,
    "function": null,
    "comment": "wg0x.h:422:  #endif line should be '#endif  // _HOME_ANDRE_ROS_HAROS_ANALYSER_WG0X_H_'  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "wg0x.h",
    "line": 40,
    "function": null,
    "comment": "wg0x.h:40:  Include 'ethercat_hardware/motor_heating_model.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "wg0x.h",
    "line": 42,
    "function": null,
    "comment": "wg0x.h:42:  Include 'ethercat_hardware/wg_mailbox.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "wg0x.h",
    "line": 43,
    "function": null,
    "comment": "wg0x.h:43:  Include 'ethercat_hardware/wg_eeprom.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "wg0x.h",
    "line": 45,
    "function": null,
    "comment": "wg0x.h:45:  Found C system header after other header. Should be: wg0x.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "wg0x.h",
    "line": 47,
    "function": null,
    "comment": "wg0x.h:47:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.h",
    "line": 51,
    "function": null,
    "comment": "wg0x.h:51:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "wg0x.h",
    "line": 56,
    "function": null,
    "comment": "wg0x.h:56:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "wg0x.h",
    "line": 56,
    "function": null,
    "comment": "wg0x.h:56:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.h",
    "line": 60,
    "function": null,
    "comment": "wg0x.h:60:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "wg0x.h",
    "line": 68,
    "function": null,
    "comment": "wg0x.h:68:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "wg0x.h",
    "line": 68,
    "function": null,
    "comment": "wg0x.h:68:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.h",
    "line": 71,
    "function": null,
    "comment": "wg0x.h:71:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg0x.h",
    "line": 75,
    "function": null,
    "comment": "wg0x.h:75:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "wg0x.h",
    "line": 78,
    "function": null,
    "comment": "wg0x.h:78:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "wg0x.h",
    "line": 78,
    "function": null,
    "comment": "wg0x.h:78:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "wg0x.h",
    "line": 94,
    "function": null,
    "comment": "wg0x.h:94:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "wg0x.h",
    "line": 94,
    "function": null,
    "comment": "wg0x.h:94:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.h",
    "line": 97,
    "function": null,
    "comment": "wg0x.h:97:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.h",
    "line": 100,
    "function": null,
    "comment": "wg0x.h:100:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.h",
    "line": 103,
    "function": null,
    "comment": "wg0x.h:103:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "wg0x.h",
    "line": 108,
    "function": null,
    "comment": "wg0x.h:108:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "wg0x.h",
    "line": 108,
    "function": null,
    "comment": "wg0x.h:108:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "wg0x.h",
    "line": 109,
    "function": null,
    "comment": "wg0x.h:109:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "wg0x.h",
    "line": 109,
    "function": null,
    "comment": "wg0x.h:109:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "wg0x.h",
    "line": 124,
    "function": null,
    "comment": "wg0x.h:124:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "wg0x.h",
    "line": 124,
    "function": null,
    "comment": "wg0x.h:124:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.h",
    "line": 127,
    "function": null,
    "comment": "wg0x.h:127:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "wg0x.h",
    "line": 134,
    "function": null,
    "comment": "wg0x.h:134:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "wg0x.h",
    "line": 134,
    "function": null,
    "comment": "wg0x.h:134:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.h",
    "line": 137,
    "function": null,
    "comment": "wg0x.h:137:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg0x.h",
    "line": 148,
    "function": null,
    "comment": "wg0x.h:148:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg0x.h",
    "line": 150,
    "function": null,
    "comment": "wg0x.h:150:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.h",
    "line": 151,
    "function": null,
    "comment": "wg0x.h:151:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.h",
    "line": 152,
    "function": null,
    "comment": "wg0x.h:152:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.h",
    "line": 154,
    "function": null,
    "comment": "wg0x.h:154:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.h",
    "line": 161,
    "function": null,
    "comment": "wg0x.h:161:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "wg0x.h",
    "line": 183,
    "function": null,
    "comment": "wg0x.h:183:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "wg0x.h",
    "line": 184,
    "function": null,
    "comment": "wg0x.h:184:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "wg0x.h",
    "line": 184,
    "function": null,
    "comment": "wg0x.h:184:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.h",
    "line": 188,
    "function": null,
    "comment": "wg0x.h:188:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "wg0x.h",
    "line": 195,
    "function": null,
    "comment": "wg0x.h:195:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "wg0x.h",
    "line": 195,
    "function": null,
    "comment": "wg0x.h:195:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.h",
    "line": 197,
    "function": null,
    "comment": "wg0x.h:197:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.h",
    "line": 198,
    "function": null,
    "comment": "wg0x.h:198:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.h",
    "line": 207,
    "function": null,
    "comment": "wg0x.h:207:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.h",
    "line": 208,
    "function": null,
    "comment": "wg0x.h:208:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.h",
    "line": 210,
    "function": null,
    "comment": "wg0x.h:210:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.h",
    "line": 217,
    "function": null,
    "comment": "wg0x.h:217:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.h",
    "line": 235,
    "function": null,
    "comment": "wg0x.h:235:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "wg0x.h",
    "line": 236,
    "function": null,
    "comment": "wg0x.h:236:  public: should be indented +1 space inside class WG0X  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "wg0x.h",
    "line": 237,
    "function": null,
    "comment": "wg0x.h:237:  Is this a non-const reference? If so, make const or use a pointer: int &start_address  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.h",
    "line": 241,
    "function": null,
    "comment": "wg0x.h:241:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "wg0x.h",
    "line": 241,
    "function": null,
    "comment": "wg0x.h:241:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.h",
    "line": 247,
    "function": null,
    "comment": "wg0x.h:247:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.h",
    "line": 249,
    "function": null,
    "comment": "wg0x.h:249:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "wg0x.h",
    "line": 249,
    "function": null,
    "comment": "wg0x.h:249:  Is this a non-const reference? If so, make const or use a pointer: WG0XActuatorInfo &actuator_info  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.h",
    "line": 250,
    "function": null,
    "comment": "wg0x.h:250:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "wg0x.h",
    "line": 250,
    "function": null,
    "comment": "wg0x.h:250:  Is this a non-const reference? If so, make const or use a pointer: MotorHeatingModelParametersEepromConfig &config  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.h",
    "line": 252,
    "function": null,
    "comment": "wg0x.h:252:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "wg0x.h",
    "line": 252,
    "function": null,
    "comment": "wg0x.h:252:  Is this a non-const reference? If so, make const or use a pointer: diagnostic_updater::DiagnosticStatusWrapper &d  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "wg0x.h",
    "line": 257,
    "function": null,
    "comment": "wg0x.h:257:  protected: should be indented +1 space inside class WG0X  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.h",
    "line": 260,
    "function": null,
    "comment": "wg0x.h:260:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.h",
    "line": 265,
    "function": null,
    "comment": "wg0x.h:265:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.h",
    "line": 267,
    "function": null,
    "comment": "wg0x.h:267:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.h",
    "line": 268,
    "function": null,
    "comment": "wg0x.h:268:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "wg0x.h",
    "line": 268,
    "function": null,
    "comment": "wg0x.h:268:  Is this a non-const reference? If so, make const or use a pointer: ethercat_hardware::ActuatorInfo &out  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.h",
    "line": 274,
    "function": null,
    "comment": "wg0x.h:274:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.h",
    "line": 284,
    "function": null,
    "comment": "wg0x.h:284:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.h",
    "line": 285,
    "function": null,
    "comment": "wg0x.h:285:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "wg0x.h",
    "line": 306,
    "function": null,
    "comment": "wg0x.h:306:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.h",
    "line": 315,
    "function": null,
    "comment": "wg0x.h:315:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.h",
    "line": 316,
    "function": null,
    "comment": "wg0x.h:316:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.h",
    "line": 317,
    "function": null,
    "comment": "wg0x.h:317:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.h",
    "line": 322,
    "function": null,
    "comment": "wg0x.h:322:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.h",
    "line": 322,
    "function": null,
    "comment": "wg0x.h:322:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.h",
    "line": 323,
    "function": null,
    "comment": "wg0x.h:323:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "wg0x.h",
    "line": 323,
    "function": null,
    "comment": "wg0x.h:323:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.h",
    "line": 324,
    "function": null,
    "comment": "wg0x.h:324:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "wg0x.h",
    "line": 325,
    "function": null,
    "comment": "wg0x.h:325:  Is this a non-const reference? If so, make const or use a pointer: double &zero_offset  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.h",
    "line": 330,
    "function": null,
    "comment": "wg0x.h:330:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.h",
    "line": 331,
    "function": null,
    "comment": "wg0x.h:331:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.h",
    "line": 331,
    "function": null,
    "comment": "wg0x.h:331:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.h",
    "line": 333,
    "function": null,
    "comment": "wg0x.h:333:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "wg0x.h",
    "line": 333,
    "function": null,
    "comment": "wg0x.h:333:  Is this a non-const reference? If so, make const or use a pointer: diagnostic_updater::DiagnosticStatusWrapper &d  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.h",
    "line": 334,
    "function": null,
    "comment": "wg0x.h:334:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "wg0x.h",
    "line": 334,
    "function": null,
    "comment": "wg0x.h:334:  Is this a non-const reference? If so, make const or use a pointer: diagnostic_updater::DiagnosticStatusWrapper &d  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.h",
    "line": 336,
    "function": null,
    "comment": "wg0x.h:336:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.h",
    "line": 338,
    "function": null,
    "comment": "wg0x.h:338:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.h",
    "line": 345,
    "function": null,
    "comment": "wg0x.h:345:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.h",
    "line": 346,
    "function": null,
    "comment": "wg0x.h:346:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.h",
    "line": 348,
    "function": null,
    "comment": "wg0x.h:348:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "wg0x.h",
    "line": 349,
    "function": null,
    "comment": "wg0x.h:349:  protected: should be indented +1 space inside class WG0X  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.h",
    "line": 363,
    "function": null,
    "comment": "wg0x.h:363:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.h",
    "line": 371,
    "function": null,
    "comment": "wg0x.h:371:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.h",
    "line": 385,
    "function": null,
    "comment": "wg0x.h:385:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.h",
    "line": 386,
    "function": null,
    "comment": "wg0x.h:386:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.h",
    "line": 389,
    "function": null,
    "comment": "wg0x.h:389:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.h",
    "line": 391,
    "function": null,
    "comment": "wg0x.h:391:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.h",
    "line": 392,
    "function": null,
    "comment": "wg0x.h:392:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "wg0x.h",
    "line": 409,
    "function": null,
    "comment": "wg0x.h:409:  public: should be indented +1 space inside class WG0X  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.h",
    "line": 415,
    "function": null,
    "comment": "wg0x.h:415:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.h",
    "line": 415,
    "function": null,
    "comment": "wg0x.h:415:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.h",
    "line": 416,
    "function": null,
    "comment": "wg0x.h:416:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg0x.h",
    "line": 422,
    "function": null,
    "comment": "wg0x.h:422:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "wg0x.h",
    "line": 337,
    "function": null,
    "comment": "wg0x.h:337:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_.",
    "file": "wg_soft_processor.h",
    "line": 35,
    "function": null,
    "comment": "wg_soft_processor.h:35:  #ifndef header guard has wrong style, please use: _HOME_ANDRE_ROS_HAROS_ANALYSER_WG_SOFT_PROCESSOR_H_  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the symbol name should be <PACKAGE>_<PATH>_<FILE>_H.",
    "file": "wg_soft_processor.h",
    "line": 35,
    "function": null,
    "comment": "wg_soft_processor.h:35:  #ifndef header guard has wrong style, please use: WG_SOFT_PROCESSOR_H  [build/header_guard] [5]",
    "tags": ["ros","code-standards","ros-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the guard's end should be '#endif  // <PROJECT>_<PATH>_<FILE>_H_' or '#endif  /* <PROJECT>_<PATH>_<FILE>_H_ */'.",
    "file": "wg_soft_processor.h",
    "line": 114,
    "function": null,
    "comment": "wg_soft_processor.h:114:  #endif line should be '#endif  // _HOME_ANDRE_ROS_HAROS_ANALYSER_WG_SOFT_PROCESSOR_H_'  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "wg_soft_processor.h",
    "line": 41,
    "function": null,
    "comment": "wg_soft_processor.h:41:  Include 'ethercat_hardware/SoftProcessorFirmwareWrite.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "wg_soft_processor.h",
    "line": 42,
    "function": null,
    "comment": "wg_soft_processor.h:42:  Include 'ethercat_hardware/SoftProcessorFirmwareRead.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "wg_soft_processor.h",
    "line": 45,
    "function": null,
    "comment": "wg_soft_processor.h:45:  Found C++ system header after other header. Should be: wg_soft_processor.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "wg_soft_processor.h",
    "line": 46,
    "function": null,
    "comment": "wg_soft_processor.h:46:  Found C++ system header after other header. Should be: wg_soft_processor.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "wg_soft_processor.h",
    "line": 47,
    "function": null,
    "comment": "wg_soft_processor.h:47:  Found C++ system header after other header. Should be: wg_soft_processor.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_soft_processor.h",
    "line": 50,
    "function": null,
    "comment": "wg_soft_processor.h:50:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_soft_processor.h",
    "line": 58,
    "function": null,
    "comment": "wg_soft_processor.h:58:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "wg_soft_processor.h",
    "line": 59,
    "function": null,
    "comment": "wg_soft_processor.h:59:  public: should be indented +1 space inside class WGSoftProcessor  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_soft_processor.h",
    "line": 63,
    "function": null,
    "comment": "wg_soft_processor.h:63:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_soft_processor.h",
    "line": 64,
    "function": null,
    "comment": "wg_soft_processor.h:64:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "wg_soft_processor.h",
    "line": 66,
    "function": null,
    "comment": "wg_soft_processor.h:66:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_soft_processor.h",
    "line": 67,
    "function": null,
    "comment": "wg_soft_processor.h:67:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_soft_processor.h",
    "line": 68,
    "function": null,
    "comment": "wg_soft_processor.h:68:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "wg_soft_processor.h",
    "line": 69,
    "function": null,
    "comment": "wg_soft_processor.h:69:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_soft_processor.h",
    "line": 72,
    "function": null,
    "comment": "wg_soft_processor.h:72:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_soft_processor.h",
    "line": 79,
    "function": null,
    "comment": "wg_soft_processor.h:79:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_soft_processor.h",
    "line": 79,
    "function": null,
    "comment": "wg_soft_processor.h:79:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_soft_processor.h",
    "line": 80,
    "function": null,
    "comment": "wg_soft_processor.h:80:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "wg_soft_processor.h",
    "line": 82,
    "function": null,
    "comment": "wg_soft_processor.h:82:  protected: should be indented +1 space inside class WGSoftProcessor  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "wg_soft_processor.h",
    "line": 83,
    "function": null,
    "comment": "wg_soft_processor.h:83:  Do not leave a blank line after 'protected:'  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_soft_processor.h",
    "line": 88,
    "function": null,
    "comment": "wg_soft_processor.h:88:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_soft_processor.h",
    "line": 88,
    "function": null,
    "comment": "wg_soft_processor.h:88:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "wg_soft_processor.h",
    "line": 88,
    "function": null,
    "comment": "wg_soft_processor.h:88:  Is this a non-const reference? If so, make const or use a pointer: ethercat_hardware::SoftProcessorFirmwareWrite::Request &request  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_soft_processor.h",
    "line": 89,
    "function": null,
    "comment": "wg_soft_processor.h:89:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "wg_soft_processor.h",
    "line": 89,
    "function": null,
    "comment": "wg_soft_processor.h:89:  Is this a non-const reference? If so, make const or use a pointer: ethercat_hardware::SoftProcessorFirmwareWrite::Response &response  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_soft_processor.h",
    "line": 90,
    "function": null,
    "comment": "wg_soft_processor.h:90:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_soft_processor.h",
    "line": 90,
    "function": null,
    "comment": "wg_soft_processor.h:90:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "wg_soft_processor.h",
    "line": 90,
    "function": null,
    "comment": "wg_soft_processor.h:90:  Is this a non-const reference? If so, make const or use a pointer: ethercat_hardware::SoftProcessorFirmwareRead::Request &request  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_soft_processor.h",
    "line": 91,
    "function": null,
    "comment": "wg_soft_processor.h:91:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "wg_soft_processor.h",
    "line": 91,
    "function": null,
    "comment": "wg_soft_processor.h:91:  Is this a non-const reference? If so, make const or use a pointer: ethercat_hardware::SoftProcessorFirmwareRead::Response &response  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_soft_processor.h",
    "line": 92,
    "function": null,
    "comment": "wg_soft_processor.h:92:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "wg_soft_processor.h",
    "line": 92,
    "function": null,
    "comment": "wg_soft_processor.h:92:  Is this a non-const reference? If so, make const or use a pointer: ethercat_hardware::SoftProcessorReset::Request &request  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "wg_soft_processor.h",
    "line": 93,
    "function": null,
    "comment": "wg_soft_processor.h:93:  Is this a non-const reference? If so, make const or use a pointer: ethercat_hardware::SoftProcessorReset::Response &response  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_soft_processor.h",
    "line": 95,
    "function": null,
    "comment": "wg_soft_processor.h:95:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg_soft_processor.h",
    "line": 95,
    "function": null,
    "comment": "wg_soft_processor.h:95:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_soft_processor.h",
    "line": 96,
    "function": null,
    "comment": "wg_soft_processor.h:96:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg_soft_processor.h",
    "line": 96,
    "function": null,
    "comment": "wg_soft_processor.h:96:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "wg_soft_processor.h",
    "line": 100,
    "function": null,
    "comment": "wg_soft_processor.h:100:  Is this a non-const reference? If so, make const or use a pointer: std::ostream &err_msg  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "wg_soft_processor.h",
    "line": 103,
    "function": null,
    "comment": "wg_soft_processor.h:103:  Is this a non-const reference? If so, make const or use a pointer: std::ostream &err_msg  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_soft_processor.h",
    "line": 105,
    "function": null,
    "comment": "wg_soft_processor.h:105:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_soft_processor.h",
    "line": 106,
    "function": null,
    "comment": "wg_soft_processor.h:106:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "wg_soft_processor.h",
    "line": 106,
    "function": null,
    "comment": "wg_soft_processor.h:106:  Is this a non-const reference? If so, make const or use a pointer: std::ostream &err_out  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_soft_processor.h",
    "line": 107,
    "function": null,
    "comment": "wg_soft_processor.h:107:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg_soft_processor.h",
    "line": 114,
    "function": null,
    "comment": "wg_soft_processor.h:114:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "wg_soft_processor.h",
    "line": 114,
    "function": null,
    "comment": "wg_soft_processor.h:114:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_.",
    "file": "ek1122.h",
    "line": 35,
    "function": null,
    "comment": "ek1122.h:35:  #ifndef header guard has wrong style, please use: _HOME_ANDRE_ROS_HAROS_ANALYSER_EK1122_H_  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the guard's end should be '#endif  // <PROJECT>_<PATH>_<FILE>_H_' or '#endif  /* <PROJECT>_<PATH>_<FILE>_H_ */'.",
    "file": "ek1122.h",
    "line": 52,
    "function": null,
    "comment": "ek1122.h:52:  #endif line should be '#endif  // _HOME_ANDRE_ROS_HAROS_ANALYSER_EK1122_H_'  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ek1122.h",
    "line": 41,
    "function": null,
    "comment": "ek1122.h:41:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "ek1122.h",
    "line": 42,
    "function": null,
    "comment": "ek1122.h:42:  public: should be indented +1 space inside class EK1122  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "ek1122.h",
    "line": 43,
    "function": null,
    "comment": "ek1122.h:43:  Is this a non-const reference? If so, make const or use a pointer: int &start_address  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ek1122.h",
    "line": 46,
    "function": null,
    "comment": "ek1122.h:46:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "ek1122.h",
    "line": 46,
    "function": null,
    "comment": "ek1122.h:46:  Is this a non-const reference? If so, make const or use a pointer: diagnostic_updater::DiagnosticStatusWrapper &d  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "ek1122.h",
    "line": 49,
    "function": null,
    "comment": "ek1122.h:49:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "motor_model.h",
    "line": null,
    "function": null,
    "comment": "motor_model.h:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_.",
    "file": "motor_model.h",
    "line": 3,
    "function": null,
    "comment": "motor_model.h:3:  #ifndef header guard has wrong style, please use: _HOME_ANDRE_ROS_HAROS_ANALYSER_MOTOR_MODEL_H_  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the symbol name should be <PACKAGE>_<PATH>_<FILE>_H.",
    "file": "motor_model.h",
    "line": 3,
    "function": null,
    "comment": "motor_model.h:3:  #ifndef header guard has wrong style, please use: MOTOR_MODEL_H  [build/header_guard] [5]",
    "tags": ["ros","code-standards","ros-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the guard's end should be '#endif  // <PROJECT>_<PATH>_<FILE>_H_' or '#endif  /* <PROJECT>_<PATH>_<FILE>_H_ */'.",
    "file": "motor_model.h",
    "line": 94,
    "function": null,
    "comment": "motor_model.h:94:  #endif line should be '#endif  // _HOME_ANDRE_ROS_HAROS_ANALYSER_MOTOR_MODEL_H_'  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "motor_model.h",
    "line": 9,
    "function": null,
    "comment": "motor_model.h:9:  Found C system header after C++ system header. Should be: motor_model.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "motor_model.h",
    "line": 10,
    "function": null,
    "comment": "motor_model.h:10:  Found C system header after C++ system header. Should be: motor_model.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "motor_model.h",
    "line": 11,
    "function": null,
    "comment": "motor_model.h:11:  Found C system header after C++ system header. Should be: motor_model.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "motor_model.h",
    "line": 12,
    "function": null,
    "comment": "motor_model.h:12:  Found C system header after C++ system header. Should be: motor_model.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "motor_model.h",
    "line": 13,
    "function": null,
    "comment": "motor_model.h:13:  Found C system header after C++ system header. Should be: motor_model.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "motor_model.h",
    "line": 15,
    "function": null,
    "comment": "motor_model.h:15:  Found C system header after C++ system header. Should be: motor_model.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "motor_model.h",
    "line": 17,
    "function": null,
    "comment": "motor_model.h:17:  Found C system header after C++ system header. Should be: motor_model.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "motor_model.h",
    "line": 18,
    "function": null,
    "comment": "motor_model.h:18:  Found C system header after C++ system header. Should be: motor_model.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_model.h",
    "line": 21,
    "function": null,
    "comment": "motor_model.h:21:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "motor_model.h",
    "line": 22,
    "function": null,
    "comment": "motor_model.h:22:  public: should be indented +1 space inside class MotorModel  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "motor_model.h",
    "line": 23,
    "function": null,
    "comment": "motor_model.h:23:  Single-parameter constructors should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_model.h",
    "line": 24,
    "function": null,
    "comment": "motor_model.h:24:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "motor_model.h",
    "line": 28,
    "function": null,
    "comment": "motor_model.h:28:  Is this a non-const reference? If so, make const or use a pointer: diagnostic_updater::DiagnosticStatusWrapper &d  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "motor_model.h",
    "line": 32,
    "function": null,
    "comment": "motor_model.h:32:  protected: should be indented +1 space inside class MotorModel  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "motor_model.h",
    "line": 46,
    "function": null,
    "comment": "motor_model.h:46:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "motor_model.h",
    "line": 47,
    "function": null,
    "comment": "motor_model.h:47:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_model.h",
    "line": 52,
    "function": null,
    "comment": "motor_model.h:52:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "motor_model.h",
    "line": 53,
    "function": null,
    "comment": "motor_model.h:53:  public: should be indented +1 space inside class SimpleFilter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "motor_model.h",
    "line": 58,
    "function": null,
    "comment": "motor_model.h:58:  protected: should be indented +1 space inside class SimpleFilter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_model.h",
    "line": 61,
    "function": null,
    "comment": "motor_model.h:61:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_model.h",
    "line": 64,
    "function": null,
    "comment": "motor_model.h:64:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "motor_model.h",
    "line": 65,
    "function": null,
    "comment": "motor_model.h:65:  public: should be indented +1 space inside class Filter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "motor_model.h",
    "line": 66,
    "function": null,
    "comment": "motor_model.h:66:  Single-parameter constructors should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "motor_model.h",
    "line": 70,
    "function": null,
    "comment": "motor_model.h:70:  protected: should be indented +1 space inside class Filter  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_model.h",
    "line": 73,
    "function": null,
    "comment": "motor_model.h:73:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "motor_model.h",
    "line": 73,
    "function": null,
    "comment": "motor_model.h:73:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_model.h",
    "line": 75,
    "function": null,
    "comment": "motor_model.h:75:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_model.h",
    "line": 76,
    "function": null,
    "comment": "motor_model.h:76:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_model.h",
    "line": 77,
    "function": null,
    "comment": "motor_model.h:77:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_model.h",
    "line": 87,
    "function": null,
    "comment": "motor_model.h:87:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_model.h",
    "line": 88,
    "function": null,
    "comment": "motor_model.h:88:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "motor_model.h",
    "line": 91,
    "function": null,
    "comment": "motor_model.h:91:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "All headers must be protected against multiple inclusion by",
    "file": "wg_eeprom.h",
    "line": null,
    "function": null,
    "comment": "wg_eeprom.h:0:  No #ifndef header guard found.  [build/header_guard] [5]",
    "tags": ["ros","code-standards","google-cpp","ros-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "wg_eeprom.h",
    "line": 39,
    "function": null,
    "comment": "wg_eeprom.h:39:  Found C system header after other header. Should be: wg_eeprom.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not include the C standard headers. Use the C++ headers instead.",
    "file": "wg_eeprom.h",
    "line": 39,
    "function": null,
    "comment": "wg_eeprom.h:39:  Include 'cstdint' instead of 'stdint.h'.  [build/include] [5]",
    "tags": ["hicpp","code-standards","headers","include","preprocessor","deprecation","c"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "wg_eeprom.h",
    "line": 40,
    "function": null,
    "comment": "wg_eeprom.h:40:  Found C system header after other header. Should be: wg_eeprom.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_eeprom.h",
    "line": 43,
    "function": null,
    "comment": "wg_eeprom.h:43:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_eeprom.h",
    "line": 49,
    "function": null,
    "comment": "wg_eeprom.h:49:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "wg_eeprom.h",
    "line": 50,
    "function": null,
    "comment": "wg_eeprom.h:50:  public: should be indented +1 space inside class WGEeprom  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_eeprom.h",
    "line": 52,
    "function": null,
    "comment": "wg_eeprom.h:52:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_eeprom.h",
    "line": 53,
    "function": null,
    "comment": "wg_eeprom.h:53:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_eeprom.h",
    "line": 53,
    "function": null,
    "comment": "wg_eeprom.h:53:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "wg_eeprom.h",
    "line": 55,
    "function": null,
    "comment": "wg_eeprom.h:55:  protected: should be indented +1 space inside class WGEeprom  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_eeprom.h",
    "line": 60,
    "function": null,
    "comment": "wg_eeprom.h:60:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "wg_eeprom.h",
    "line": 60,
    "function": null,
    "comment": "wg_eeprom.h:60:  Is this a non-const reference? If so, make const or use a pointer: WG0XSpiEepromCmd &cmd  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_eeprom.h",
    "line": 61,
    "function": null,
    "comment": "wg_eeprom.h:61:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_eeprom.h",
    "line": 65,
    "function": null,
    "comment": "wg_eeprom.h:65:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "wg_eeprom.h",
    "line": 65,
    "function": null,
    "comment": "wg_eeprom.h:65:  Is this a non-const reference? If so, make const or use a pointer: EepromStatusReg &reg  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg_eeprom.h",
    "line": 73,
    "function": null,
    "comment": "wg_eeprom.h:73:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "wg_eeprom.h",
    "line": 73,
    "function": null,
    "comment": "wg_eeprom.h:73:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "All headers must be protected against multiple inclusion by",
    "file": "wg_util.h",
    "line": null,
    "function": null,
    "comment": "wg_util.h:0:  No #ifndef header guard found.  [build/header_guard] [5]",
    "tags": ["ros","code-standards","google-cpp","ros-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "Do not include the C standard headers. Use the C++ headers instead.",
    "file": "wg_util.h",
    "line": 37,
    "function": null,
    "comment": "wg_util.h:37:  Include 'cstdint' instead of 'stdint.h'.  [build/include] [5]",
    "tags": ["hicpp","code-standards","headers","include","preprocessor","deprecation","c"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_util.h",
    "line": 42,
    "function": null,
    "comment": "wg_util.h:42:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg_util.h",
    "line": 45,
    "function": null,
    "comment": "wg_util.h:45:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg_util.h",
    "line": 46,
    "function": null,
    "comment": "wg_util.h:46:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg_util.h",
    "line": 48,
    "function": null,
    "comment": "wg_util.h:48:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_util.h",
    "line": 55,
    "function": null,
    "comment": "wg_util.h:55:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "wg_util.h",
    "line": 55,
    "function": null,
    "comment": "wg_util.h:55:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "wg_util.h",
    "line": 55,
    "function": null,
    "comment": "wg_util.h:55:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "wg_util.h",
    "line": 56,
    "function": null,
    "comment": "wg_util.h:56:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "wg_util.h",
    "line": 56,
    "function": null,
    "comment": "wg_util.h:56:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "wg_util.h",
    "line": 57,
    "function": null,
    "comment": "wg_util.h:57:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "wg_util.h",
    "line": 58,
    "function": null,
    "comment": "wg_util.h:58:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "wg_util.h",
    "line": 59,
    "function": null,
    "comment": "wg_util.h:59:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "wg_util.h",
    "line": 60,
    "function": null,
    "comment": "wg_util.h:60:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "wg_util.h",
    "line": 60,
    "function": null,
    "comment": "wg_util.h:60:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg_util.h",
    "line": 63,
    "function": null,
    "comment": "wg_util.h:63:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg_util.h",
    "line": 64,
    "function": null,
    "comment": "wg_util.h:64:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg_util.h",
    "line": 66,
    "function": null,
    "comment": "wg_util.h:66:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_util.h",
    "line": 73,
    "function": null,
    "comment": "wg_util.h:73:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "wg_util.h",
    "line": 73,
    "function": null,
    "comment": "wg_util.h:73:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "wg_util.h",
    "line": 73,
    "function": null,
    "comment": "wg_util.h:73:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "wg_util.h",
    "line": 74,
    "function": null,
    "comment": "wg_util.h:74:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "wg_util.h",
    "line": 74,
    "function": null,
    "comment": "wg_util.h:74:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "wg_util.h",
    "line": 75,
    "function": null,
    "comment": "wg_util.h:75:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "wg_util.h",
    "line": 76,
    "function": null,
    "comment": "wg_util.h:76:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "wg_util.h",
    "line": 77,
    "function": null,
    "comment": "wg_util.h:77:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "wg_util.h",
    "line": 78,
    "function": null,
    "comment": "wg_util.h:78:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "wg_util.h",
    "line": 78,
    "function": null,
    "comment": "wg_util.h:78:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg_util.h",
    "line": 81,
    "function": null,
    "comment": "wg_util.h:81:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg_util.h",
    "line": 82,
    "function": null,
    "comment": "wg_util.h:82:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg_util.h",
    "line": 84,
    "function": null,
    "comment": "wg_util.h:84:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_util.h",
    "line": 90,
    "function": null,
    "comment": "wg_util.h:90:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "wg_util.h",
    "line": 90,
    "function": null,
    "comment": "wg_util.h:90:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "wg_util.h",
    "line": 90,
    "function": null,
    "comment": "wg_util.h:90:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "wg_util.h",
    "line": 91,
    "function": null,
    "comment": "wg_util.h:91:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "wg_util.h",
    "line": 91,
    "function": null,
    "comment": "wg_util.h:91:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "wg_util.h",
    "line": 92,
    "function": null,
    "comment": "wg_util.h:92:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_util.h",
    "line": 94,
    "function": null,
    "comment": "wg_util.h:94:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "wg_util.h",
    "line": 94,
    "function": null,
    "comment": "wg_util.h:94:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_util.h",
    "line": 95,
    "function": null,
    "comment": "wg_util.h:95:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "wg_util.h",
    "line": 96,
    "function": null,
    "comment": "wg_util.h:96:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "wg_util.h",
    "line": 96,
    "function": null,
    "comment": "wg_util.h:96:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg_util.h",
    "line": 99,
    "function": null,
    "comment": "wg_util.h:99:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg_util.h",
    "line": 100,
    "function": null,
    "comment": "wg_util.h:100:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg_util.h",
    "line": 102,
    "function": null,
    "comment": "wg_util.h:102:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "wg_util.h",
    "line": 106,
    "function": null,
    "comment": "wg_util.h:106:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "wg_util.h",
    "line": 106,
    "function": null,
    "comment": "wg_util.h:106:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_util.h",
    "line": 107,
    "function": null,
    "comment": "wg_util.h:107:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "wg_util.h",
    "line": 107,
    "function": null,
    "comment": "wg_util.h:107:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "wg_util.h",
    "line": 107,
    "function": null,
    "comment": "wg_util.h:107:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "wg_util.h",
    "line": 108,
    "function": null,
    "comment": "wg_util.h:108:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "wg_util.h",
    "line": 109,
    "function": null,
    "comment": "wg_util.h:109:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "wg_util.h",
    "line": 110,
    "function": null,
    "comment": "wg_util.h:110:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "wg_util.h",
    "line": 111,
    "function": null,
    "comment": "wg_util.h:111:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "wg_util.h",
    "line": 111,
    "function": null,
    "comment": "wg_util.h:111:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg_util.h",
    "line": 115,
    "function": null,
    "comment": "wg_util.h:115:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg_util.h",
    "line": 116,
    "function": null,
    "comment": "wg_util.h:116:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg_util.h",
    "line": 118,
    "function": null,
    "comment": "wg_util.h:118:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "wg_util.h",
    "line": 125,
    "function": null,
    "comment": "wg_util.h:125:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "wg_util.h",
    "line": 125,
    "function": null,
    "comment": "wg_util.h:125:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "wg_util.h",
    "line": 126,
    "function": null,
    "comment": "wg_util.h:126:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "wg_util.h",
    "line": 126,
    "function": null,
    "comment": "wg_util.h:126:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_util.h",
    "line": 127,
    "function": null,
    "comment": "wg_util.h:127:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "wg_util.h",
    "line": 129,
    "function": null,
    "comment": "wg_util.h:129:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_util.h",
    "line": 132,
    "function": null,
    "comment": "wg_util.h:132:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_util.h",
    "line": 133,
    "function": null,
    "comment": "wg_util.h:133:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "wg_util.h",
    "line": 134,
    "function": null,
    "comment": "wg_util.h:134:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "wg_util.h",
    "line": 135,
    "function": null,
    "comment": "wg_util.h:135:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "wg_util.h",
    "line": 135,
    "function": null,
    "comment": "wg_util.h:135:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_util.h",
    "line": 138,
    "function": null,
    "comment": "wg_util.h:138:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg_util.h",
    "line": 143,
    "function": null,
    "comment": "wg_util.h:143:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "wg014.cpp",
    "line": 38,
    "function": null,
    "comment": "wg014.cpp:38:  Found C system header after C++ system header. Should be: wg014.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg014.cpp",
    "line": 43,
    "function": null,
    "comment": "wg014.cpp:43:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg014.cpp",
    "line": 55,
    "function": null,
    "comment": "wg014.cpp:55:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg014.cpp",
    "line": 61,
    "function": null,
    "comment": "wg014.cpp:61:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg014.cpp",
    "line": 62,
    "function": null,
    "comment": "wg014.cpp:62:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg014.cpp",
    "line": 66,
    "function": null,
    "comment": "wg014.cpp:66:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg014.cpp",
    "line": 67,
    "function": null,
    "comment": "wg014.cpp:67:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg014.cpp",
    "line": 69,
    "function": null,
    "comment": "wg014.cpp:69:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg014.cpp",
    "line": 73,
    "function": null,
    "comment": "wg014.cpp:73:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg014.cpp",
    "line": 78,
    "function": null,
    "comment": "wg014.cpp:78:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg014.cpp",
    "line": 79,
    "function": null,
    "comment": "wg014.cpp:79:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "wg014.cpp",
    "line": 79,
    "function": null,
    "comment": "wg014.cpp:79:  Missing spaces around ==  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg014.cpp",
    "line": 80,
    "function": null,
    "comment": "wg014.cpp:80:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg014.cpp",
    "line": 80,
    "function": null,
    "comment": "wg014.cpp:80:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "wg014.cpp",
    "line": 80,
    "function": null,
    "comment": "wg014.cpp:80:  Missing spaces around ==  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg014.cpp",
    "line": 81,
    "function": null,
    "comment": "wg014.cpp:81:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg014.cpp",
    "line": 85,
    "function": null,
    "comment": "wg014.cpp:85:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "ethernet_interface_info.cpp",
    "line": null,
    "function": null,
    "comment": "ethernet_interface_info.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "ethernet_interface_info.cpp",
    "line": 6,
    "function": null,
    "comment": "ethernet_interface_info.cpp:6:  Include 'errno.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not include the C standard headers. Use the C++ headers instead.",
    "file": "ethernet_interface_info.cpp",
    "line": 6,
    "function": null,
    "comment": "ethernet_interface_info.cpp:6:  Include 'cerrno' instead of 'errno.h'.  [build/include] [5]",
    "tags": ["hicpp","code-standards","headers","include","preprocessor","deprecation","c"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethernet_interface_info.cpp",
    "line": 13,
    "function": null,
    "comment": "ethernet_interface_info.cpp:13:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "ethernet_interface_info.cpp",
    "line": 14,
    "function": null,
    "comment": "ethernet_interface_info.cpp:14:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethernet_interface_info.cpp",
    "line": 17,
    "function": null,
    "comment": "ethernet_interface_info.cpp:17:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethernet_interface_info.cpp",
    "line": 18,
    "function": null,
    "comment": "ethernet_interface_info.cpp:18:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethernet_interface_info.cpp",
    "line": 34,
    "function": null,
    "comment": "ethernet_interface_info.cpp:34:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethernet_interface_info.cpp",
    "line": 35,
    "function": null,
    "comment": "ethernet_interface_info.cpp:35:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "ethernet_interface_info.cpp",
    "line": 35,
    "function": null,
    "comment": "ethernet_interface_info.cpp:35:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "ethernet_interface_info.cpp",
    "line": 35,
    "function": null,
    "comment": "ethernet_interface_info.cpp:35:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethernet_interface_info.cpp",
    "line": 39,
    "function": null,
    "comment": "ethernet_interface_info.cpp:39:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethernet_interface_info.cpp",
    "line": 47,
    "function": null,
    "comment": "ethernet_interface_info.cpp:47:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethernet_interface_info.cpp",
    "line": 52,
    "function": null,
    "comment": "ethernet_interface_info.cpp:52:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethernet_interface_info.cpp",
    "line": 53,
    "function": null,
    "comment": "ethernet_interface_info.cpp:53:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethernet_interface_info.cpp",
    "line": 70,
    "function": null,
    "comment": "ethernet_interface_info.cpp:70:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethernet_interface_info.cpp",
    "line": 71,
    "function": null,
    "comment": "ethernet_interface_info.cpp:71:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethernet_interface_info.cpp",
    "line": 72,
    "function": null,
    "comment": "ethernet_interface_info.cpp:72:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethernet_interface_info.cpp",
    "line": 77,
    "function": null,
    "comment": "ethernet_interface_info.cpp:77:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethernet_interface_info.cpp",
    "line": 85,
    "function": null,
    "comment": "ethernet_interface_info.cpp:85:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "ethernet_interface_info.cpp",
    "line": 85,
    "function": null,
    "comment": "ethernet_interface_info.cpp:85:  Using C-style cast.  Use reinterpret_cast<ethtool_gstrings*>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethernet_interface_info.cpp",
    "line": 86,
    "function": null,
    "comment": "ethernet_interface_info.cpp:86:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethernet_interface_info.cpp",
    "line": 92,
    "function": null,
    "comment": "ethernet_interface_info.cpp:92:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethernet_interface_info.cpp",
    "line": 93,
    "function": null,
    "comment": "ethernet_interface_info.cpp:93:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethernet_interface_info.cpp",
    "line": 94,
    "function": null,
    "comment": "ethernet_interface_info.cpp:94:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "ethernet_interface_info.cpp",
    "line": 99,
    "function": null,
    "comment": "ethernet_interface_info.cpp:99:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethernet_interface_info.cpp",
    "line": 100,
    "function": null,
    "comment": "ethernet_interface_info.cpp:100:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethernet_interface_info.cpp",
    "line": 101,
    "function": null,
    "comment": "ethernet_interface_info.cpp:101:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethernet_interface_info.cpp",
    "line": 102,
    "function": null,
    "comment": "ethernet_interface_info.cpp:102:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethernet_interface_info.cpp",
    "line": 104,
    "function": null,
    "comment": "ethernet_interface_info.cpp:104:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethernet_interface_info.cpp",
    "line": 110,
    "function": null,
    "comment": "ethernet_interface_info.cpp:110:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "ethernet_interface_info.cpp",
    "line": 113,
    "function": null,
    "comment": "ethernet_interface_info.cpp:113:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethernet_interface_info.cpp",
    "line": 114,
    "function": null,
    "comment": "ethernet_interface_info.cpp:114:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "ethernet_interface_info.cpp",
    "line": 117,
    "function": null,
    "comment": "ethernet_interface_info.cpp:117:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethernet_interface_info.cpp",
    "line": 118,
    "function": null,
    "comment": "ethernet_interface_info.cpp:118:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "ethernet_interface_info.cpp",
    "line": 121,
    "function": null,
    "comment": "ethernet_interface_info.cpp:121:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethernet_interface_info.cpp",
    "line": 122,
    "function": null,
    "comment": "ethernet_interface_info.cpp:122:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethernet_interface_info.cpp",
    "line": 128,
    "function": null,
    "comment": "ethernet_interface_info.cpp:128:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethernet_interface_info.cpp",
    "line": 130,
    "function": null,
    "comment": "ethernet_interface_info.cpp:130:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethernet_interface_info.cpp",
    "line": 134,
    "function": null,
    "comment": "ethernet_interface_info.cpp:134:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethernet_interface_info.cpp",
    "line": 144,
    "function": null,
    "comment": "ethernet_interface_info.cpp:144:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "ethernet_interface_info.cpp",
    "line": 149,
    "function": null,
    "comment": "ethernet_interface_info.cpp:149:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethernet_interface_info.cpp",
    "line": 150,
    "function": null,
    "comment": "ethernet_interface_info.cpp:150:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "ethernet_interface_info.cpp",
    "line": 154,
    "function": null,
    "comment": "ethernet_interface_info.cpp:154:  Using deprecated casting style.  Use static_cast<bool>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "ethernet_interface_info.cpp",
    "line": 155,
    "function": null,
    "comment": "ethernet_interface_info.cpp:155:  Using deprecated casting style.  Use static_cast<bool>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethernet_interface_info.cpp",
    "line": 161,
    "function": null,
    "comment": "ethernet_interface_info.cpp:161:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethernet_interface_info.cpp",
    "line": 168,
    "function": null,
    "comment": "ethernet_interface_info.cpp:168:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethernet_interface_info.cpp",
    "line": 173,
    "function": null,
    "comment": "ethernet_interface_info.cpp:173:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethernet_interface_info.cpp",
    "line": 174,
    "function": null,
    "comment": "ethernet_interface_info.cpp:174:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethernet_interface_info.cpp",
    "line": 175,
    "function": null,
    "comment": "ethernet_interface_info.cpp:175:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethernet_interface_info.cpp",
    "line": 178,
    "function": null,
    "comment": "ethernet_interface_info.cpp:178:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethernet_interface_info.cpp",
    "line": 180,
    "function": null,
    "comment": "ethernet_interface_info.cpp:180:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethernet_interface_info.cpp",
    "line": 184,
    "function": null,
    "comment": "ethernet_interface_info.cpp:184:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethernet_interface_info.cpp",
    "line": 188,
    "function": null,
    "comment": "ethernet_interface_info.cpp:188:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethernet_interface_info.cpp",
    "line": 192,
    "function": null,
    "comment": "ethernet_interface_info.cpp:192:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethernet_interface_info.cpp",
    "line": 199,
    "function": null,
    "comment": "ethernet_interface_info.cpp:199:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethernet_interface_info.cpp",
    "line": 200,
    "function": null,
    "comment": "ethernet_interface_info.cpp:200:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "To-do comments should look like '// TODO(my_username): Stuff.'.",
    "file": "ethernet_interface_info.cpp",
    "line": 203,
    "function": null,
    "comment": "ethernet_interface_info.cpp:203:  Missing username in TODO; it should look like '// TODO(my_username): Stuff.'  [readability/todo] [2]",
    "tags": ["comments","code-standards","formatting","google-cpp","todo-comment"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethernet_interface_info.cpp",
    "line": 206,
    "function": null,
    "comment": "ethernet_interface_info.cpp:206:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethernet_interface_info.cpp",
    "line": 206,
    "function": null,
    "comment": "ethernet_interface_info.cpp:206:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethernet_interface_info.cpp",
    "line": 208,
    "function": null,
    "comment": "ethernet_interface_info.cpp:208:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethernet_interface_info.cpp",
    "line": 213,
    "function": null,
    "comment": "ethernet_interface_info.cpp:213:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "ethernet_interface_info.cpp",
    "line": 216,
    "function": null,
    "comment": "ethernet_interface_info.cpp:216:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethernet_interface_info.cpp",
    "line": 217,
    "function": null,
    "comment": "ethernet_interface_info.cpp:217:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethernet_interface_info.cpp",
    "line": 221,
    "function": null,
    "comment": "ethernet_interface_info.cpp:221:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethernet_interface_info.cpp",
    "line": 224,
    "function": null,
    "comment": "ethernet_interface_info.cpp:224:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "ethernet_interface_info.cpp",
    "line": 224,
    "function": null,
    "comment": "ethernet_interface_info.cpp:224:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethernet_interface_info.cpp",
    "line": 225,
    "function": null,
    "comment": "ethernet_interface_info.cpp:225:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "ethernet_interface_info.cpp",
    "line": 232,
    "function": null,
    "comment": "ethernet_interface_info.cpp:232:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "ethernet_interface_info.cpp",
    "line": 232,
    "function": null,
    "comment": "ethernet_interface_info.cpp:232:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "ethernet_interface_info.cpp",
    "line": 234,
    "function": null,
    "comment": "ethernet_interface_info.cpp:234:  Missing spaces around >=  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "ethernet_interface_info.cpp",
    "line": 237,
    "function": null,
    "comment": "ethernet_interface_info.cpp:237:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "ethernet_interface_info.cpp",
    "line": 239,
    "function": null,
    "comment": "ethernet_interface_info.cpp:239:  Missing spaces around >=  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "ethernet_interface_info.cpp",
    "line": 242,
    "function": null,
    "comment": "ethernet_interface_info.cpp:242:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "ethernet_interface_info.cpp",
    "line": 244,
    "function": null,
    "comment": "ethernet_interface_info.cpp:244:  Missing spaces around >=  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "ethernet_interface_info.cpp",
    "line": 247,
    "function": null,
    "comment": "ethernet_interface_info.cpp:247:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "ethernet_interface_info.cpp",
    "line": 249,
    "function": null,
    "comment": "ethernet_interface_info.cpp:249:  Missing spaces around >=  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "ethernet_interface_info.cpp",
    "line": 252,
    "function": null,
    "comment": "ethernet_interface_info.cpp:252:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "ethernet_interface_info.cpp",
    "line": 253,
    "function": null,
    "comment": "ethernet_interface_info.cpp:253:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "ethernet_interface_info.cpp",
    "line": 46,
    "function": null,
    "comment": "ethernet_interface_info.cpp:46:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "motorconf.cpp",
    "line": 36,
    "function": null,
    "comment": "motorconf.cpp:36:  Found C system header after C++ system header. Should be: motorconf.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not include the C standard headers. Use the C++ headers instead.",
    "file": "motorconf.cpp",
    "line": 36,
    "function": null,
    "comment": "motorconf.cpp:36:  Include 'cstdio' instead of 'stdio.h'.  [build/include] [5]",
    "tags": ["hicpp","code-standards","headers","include","preprocessor","deprecation","c"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "motorconf.cpp",
    "line": 37,
    "function": null,
    "comment": "motorconf.cpp:37:  Found C system header after C++ system header. Should be: motorconf.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "motorconf.cpp",
    "line": 38,
    "function": null,
    "comment": "motorconf.cpp:38:  Found C system header after C++ system header. Should be: motorconf.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "motorconf.cpp",
    "line": 40,
    "function": null,
    "comment": "motorconf.cpp:40:  Found C system header after C++ system header. Should be: motorconf.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "motorconf.cpp",
    "line": 42,
    "function": null,
    "comment": "motorconf.cpp:42:  Found C system header after C++ system header. Should be: motorconf.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "motorconf.cpp",
    "line": 43,
    "function": null,
    "comment": "motorconf.cpp:43:  Found C system header after C++ system header. Should be: motorconf.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "motorconf.cpp",
    "line": 44,
    "function": null,
    "comment": "motorconf.cpp:44:  Found C system header after C++ system header. Should be: motorconf.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "motorconf.cpp",
    "line": 45,
    "function": null,
    "comment": "motorconf.cpp:45:  Found C system header after C++ system header. Should be: motorconf.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "motorconf.cpp",
    "line": 46,
    "function": null,
    "comment": "motorconf.cpp:46:  Found C system header after C++ system header. Should be: motorconf.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "motorconf.cpp",
    "line": 49,
    "function": null,
    "comment": "motorconf.cpp:49:  Found C system header after other header. Should be: motorconf.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "motorconf.cpp",
    "line": 50,
    "function": null,
    "comment": "motorconf.cpp:50:  Found C system header after other header. Should be: motorconf.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "motorconf.cpp",
    "line": 51,
    "function": null,
    "comment": "motorconf.cpp:51:  Found C system header after other header. Should be: motorconf.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "motorconf.cpp",
    "line": 52,
    "function": null,
    "comment": "motorconf.cpp:52:  Found C system header after other header. Should be: motorconf.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "motorconf.cpp",
    "line": 53,
    "function": null,
    "comment": "motorconf.cpp:53:  Found C system header after other header. Should be: motorconf.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "motorconf.cpp",
    "line": 55,
    "function": null,
    "comment": "motorconf.cpp:55:  Found C system header after other header. Should be: motorconf.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "motorconf.cpp",
    "line": 56,
    "function": null,
    "comment": "motorconf.cpp:56:  Found C system header after other header. Should be: motorconf.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "motorconf.cpp",
    "line": 58,
    "function": null,
    "comment": "motorconf.cpp:58:  Found C system header after other header. Should be: motorconf.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "motorconf.cpp",
    "line": 59,
    "function": null,
    "comment": "motorconf.cpp:59:  Found C system header after other header. Should be: motorconf.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "motorconf.cpp",
    "line": 60,
    "function": null,
    "comment": "motorconf.cpp:60:  Found C system header after other header. Should be: motorconf.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "motorconf.cpp",
    "line": 62,
    "function": null,
    "comment": "motorconf.cpp:62:  Found C system header after other header. Should be: motorconf.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "motorconf.cpp",
    "line": 64,
    "function": null,
    "comment": "motorconf.cpp:64:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "motorconf.cpp",
    "line": 68,
    "function": null,
    "comment": "motorconf.cpp:68:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motorconf.cpp",
    "line": 76,
    "function": null,
    "comment": "motorconf.cpp:76:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 77,
    "function": null,
    "comment": "motorconf.cpp:77:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motorconf.cpp",
    "line": 78,
    "function": null,
    "comment": "motorconf.cpp:78:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 89,
    "function": null,
    "comment": "motorconf.cpp:89:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "motorconf.cpp",
    "line": 92,
    "function": null,
    "comment": "motorconf.cpp:92:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "motorconf.cpp",
    "line": 94,
    "function": null,
    "comment": "motorconf.cpp:94:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motorconf.cpp",
    "line": 97,
    "function": null,
    "comment": "motorconf.cpp:97:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "motorconf.cpp",
    "line": 100,
    "function": null,
    "comment": "motorconf.cpp:100:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motorconf.cpp",
    "line": 102,
    "function": null,
    "comment": "motorconf.cpp:102:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "motorconf.cpp",
    "line": 102,
    "function": null,
    "comment": "motorconf.cpp:102:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "motorconf.cpp",
    "line": 109,
    "function": null,
    "comment": "motorconf.cpp:109:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motorconf.cpp",
    "line": 110,
    "function": null,
    "comment": "motorconf.cpp:110:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "motorconf.cpp",
    "line": 110,
    "function": null,
    "comment": "motorconf.cpp:110:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "motorconf.cpp",
    "line": 113,
    "function": null,
    "comment": "motorconf.cpp:113:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motorconf.cpp",
    "line": 114,
    "function": null,
    "comment": "motorconf.cpp:114:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "motorconf.cpp",
    "line": 114,
    "function": null,
    "comment": "motorconf.cpp:114:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 122,
    "function": null,
    "comment": "motorconf.cpp:122:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 131,
    "function": null,
    "comment": "motorconf.cpp:131:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 138,
    "function": null,
    "comment": "motorconf.cpp:138:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 146,
    "function": null,
    "comment": "motorconf.cpp:146:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 154,
    "function": null,
    "comment": "motorconf.cpp:154:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 158,
    "function": null,
    "comment": "motorconf.cpp:158:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 164,
    "function": null,
    "comment": "motorconf.cpp:164:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "motorconf.cpp",
    "line": 169,
    "function": null,
    "comment": "motorconf.cpp:169:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 170,
    "function": null,
    "comment": "motorconf.cpp:170:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "motorconf.cpp",
    "line": 175,
    "function": null,
    "comment": "motorconf.cpp:175:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 176,
    "function": null,
    "comment": "motorconf.cpp:176:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "motorconf.cpp",
    "line": 181,
    "function": null,
    "comment": "motorconf.cpp:181:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 182,
    "function": null,
    "comment": "motorconf.cpp:182:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "motorconf.cpp",
    "line": 187,
    "function": null,
    "comment": "motorconf.cpp:187:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 188,
    "function": null,
    "comment": "motorconf.cpp:188:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 194,
    "function": null,
    "comment": "motorconf.cpp:194:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 197,
    "function": null,
    "comment": "motorconf.cpp:197:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motorconf.cpp",
    "line": 198,
    "function": null,
    "comment": "motorconf.cpp:198:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motorconf.cpp",
    "line": 201,
    "function": null,
    "comment": "motorconf.cpp:201:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 203,
    "function": null,
    "comment": "motorconf.cpp:203:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 211,
    "function": null,
    "comment": "motorconf.cpp:211:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "motorconf.cpp",
    "line": 212,
    "function": null,
    "comment": "motorconf.cpp:212:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "motorconf.cpp",
    "line": 214,
    "function": null,
    "comment": "motorconf.cpp:214:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "motorconf.cpp",
    "line": 214,
    "function": null,
    "comment": "motorconf.cpp:214:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "motorconf.cpp",
    "line": 216,
    "function": null,
    "comment": "motorconf.cpp:216:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "motorconf.cpp",
    "line": 216,
    "function": null,
    "comment": "motorconf.cpp:216:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 224,
    "function": null,
    "comment": "motorconf.cpp:224:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motorconf.cpp",
    "line": 226,
    "function": null,
    "comment": "motorconf.cpp:226:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "motorconf.cpp",
    "line": 226,
    "function": null,
    "comment": "motorconf.cpp:226:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 227,
    "function": null,
    "comment": "motorconf.cpp:227:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motorconf.cpp",
    "line": 228,
    "function": null,
    "comment": "motorconf.cpp:228:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motorconf.cpp",
    "line": 231,
    "function": null,
    "comment": "motorconf.cpp:231:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 233,
    "function": null,
    "comment": "motorconf.cpp:233:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motorconf.cpp",
    "line": 237,
    "function": null,
    "comment": "motorconf.cpp:237:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motorconf.cpp",
    "line": 239,
    "function": null,
    "comment": "motorconf.cpp:239:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "motorconf.cpp",
    "line": 239,
    "function": null,
    "comment": "motorconf.cpp:239:  Missing spaces around ==  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 240,
    "function": null,
    "comment": "motorconf.cpp:240:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motorconf.cpp",
    "line": 243,
    "function": null,
    "comment": "motorconf.cpp:243:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motorconf.cpp",
    "line": 249,
    "function": null,
    "comment": "motorconf.cpp:249:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motorconf.cpp",
    "line": 250,
    "function": null,
    "comment": "motorconf.cpp:250:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motorconf.cpp",
    "line": 251,
    "function": null,
    "comment": "motorconf.cpp:251:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 252,
    "function": null,
    "comment": "motorconf.cpp:252:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 255,
    "function": null,
    "comment": "motorconf.cpp:255:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 261,
    "function": null,
    "comment": "motorconf.cpp:261:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motorconf.cpp",
    "line": 262,
    "function": null,
    "comment": "motorconf.cpp:262:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 269,
    "function": null,
    "comment": "motorconf.cpp:269:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motorconf.cpp",
    "line": 275,
    "function": null,
    "comment": "motorconf.cpp:275:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "motorconf.cpp",
    "line": 276,
    "function": null,
    "comment": "motorconf.cpp:276:  Using deprecated casting style.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 280,
    "function": null,
    "comment": "motorconf.cpp:280:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motorconf.cpp",
    "line": 285,
    "function": null,
    "comment": "motorconf.cpp:285:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 289,
    "function": null,
    "comment": "motorconf.cpp:289:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 302,
    "function": null,
    "comment": "motorconf.cpp:302:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 307,
    "function": null,
    "comment": "motorconf.cpp:307:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motorconf.cpp",
    "line": 308,
    "function": null,
    "comment": "motorconf.cpp:308:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motorconf.cpp",
    "line": 311,
    "function": null,
    "comment": "motorconf.cpp:311:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 313,
    "function": null,
    "comment": "motorconf.cpp:313:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motorconf.cpp",
    "line": 314,
    "function": null,
    "comment": "motorconf.cpp:314:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 319,
    "function": null,
    "comment": "motorconf.cpp:319:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 325,
    "function": null,
    "comment": "motorconf.cpp:325:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motorconf.cpp",
    "line": 329,
    "function": null,
    "comment": "motorconf.cpp:329:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 336,
    "function": null,
    "comment": "motorconf.cpp:336:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motorconf.cpp",
    "line": 342,
    "function": null,
    "comment": "motorconf.cpp:342:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motorconf.cpp",
    "line": 344,
    "function": null,
    "comment": "motorconf.cpp:344:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 345,
    "function": null,
    "comment": "motorconf.cpp:345:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motorconf.cpp",
    "line": 346,
    "function": null,
    "comment": "motorconf.cpp:346:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motorconf.cpp",
    "line": 346,
    "function": null,
    "comment": "motorconf.cpp:346:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motorconf.cpp",
    "line": 347,
    "function": null,
    "comment": "motorconf.cpp:347:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motorconf.cpp",
    "line": 350,
    "function": null,
    "comment": "motorconf.cpp:350:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motorconf.cpp",
    "line": 351,
    "function": null,
    "comment": "motorconf.cpp:351:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motorconf.cpp",
    "line": 353,
    "function": null,
    "comment": "motorconf.cpp:353:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 355,
    "function": null,
    "comment": "motorconf.cpp:355:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motorconf.cpp",
    "line": 360,
    "function": null,
    "comment": "motorconf.cpp:360:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 369,
    "function": null,
    "comment": "motorconf.cpp:369:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "motorconf.cpp",
    "line": 370,
    "function": null,
    "comment": "motorconf.cpp:370:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 371,
    "function": null,
    "comment": "motorconf.cpp:371:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 379,
    "function": null,
    "comment": "motorconf.cpp:379:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "motorconf.cpp",
    "line": 391,
    "function": null,
    "comment": "motorconf.cpp:391:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 394,
    "function": null,
    "comment": "motorconf.cpp:394:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motorconf.cpp",
    "line": 397,
    "function": null,
    "comment": "motorconf.cpp:397:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motorconf.cpp",
    "line": 399,
    "function": null,
    "comment": "motorconf.cpp:399:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motorconf.cpp",
    "line": 401,
    "function": null,
    "comment": "motorconf.cpp:401:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motorconf.cpp",
    "line": 402,
    "function": null,
    "comment": "motorconf.cpp:402:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 405,
    "function": null,
    "comment": "motorconf.cpp:405:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motorconf.cpp",
    "line": 409,
    "function": null,
    "comment": "motorconf.cpp:409:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 412,
    "function": null,
    "comment": "motorconf.cpp:412:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motorconf.cpp",
    "line": 415,
    "function": null,
    "comment": "motorconf.cpp:415:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 419,
    "function": null,
    "comment": "motorconf.cpp:419:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "motorconf.cpp",
    "line": 423,
    "function": null,
    "comment": "motorconf.cpp:423:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 424,
    "function": null,
    "comment": "motorconf.cpp:424:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motorconf.cpp",
    "line": 430,
    "function": null,
    "comment": "motorconf.cpp:430:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "motorconf.cpp",
    "line": 430,
    "function": null,
    "comment": "motorconf.cpp:430:  Is this a non-const reference? If so, make const or use a pointer: double& value  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 431,
    "function": null,
    "comment": "motorconf.cpp:431:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 434,
    "function": null,
    "comment": "motorconf.cpp:434:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motorconf.cpp",
    "line": 435,
    "function": null,
    "comment": "motorconf.cpp:435:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motorconf.cpp",
    "line": 438,
    "function": null,
    "comment": "motorconf.cpp:438:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "motorconf.cpp",
    "line": 439,
    "function": null,
    "comment": "motorconf.cpp:439:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 442,
    "function": null,
    "comment": "motorconf.cpp:442:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motorconf.cpp",
    "line": 443,
    "function": null,
    "comment": "motorconf.cpp:443:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motorconf.cpp",
    "line": 443,
    "function": null,
    "comment": "motorconf.cpp:443:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motorconf.cpp",
    "line": 451,
    "function": null,
    "comment": "motorconf.cpp:451:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "motorconf.cpp",
    "line": 451,
    "function": null,
    "comment": "motorconf.cpp:451:  Is this a non-const reference? If so, make const or use a pointer: int& value  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 452,
    "function": null,
    "comment": "motorconf.cpp:452:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 455,
    "function": null,
    "comment": "motorconf.cpp:455:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motorconf.cpp",
    "line": 456,
    "function": null,
    "comment": "motorconf.cpp:456:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motorconf.cpp",
    "line": 459,
    "function": null,
    "comment": "motorconf.cpp:459:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "motorconf.cpp",
    "line": 460,
    "function": null,
    "comment": "motorconf.cpp:460:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 463,
    "function": null,
    "comment": "motorconf.cpp:463:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motorconf.cpp",
    "line": 464,
    "function": null,
    "comment": "motorconf.cpp:464:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motorconf.cpp",
    "line": 464,
    "function": null,
    "comment": "motorconf.cpp:464:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motorconf.cpp",
    "line": 472,
    "function": null,
    "comment": "motorconf.cpp:472:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 473,
    "function": null,
    "comment": "motorconf.cpp:473:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 476,
    "function": null,
    "comment": "motorconf.cpp:476:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 481,
    "function": null,
    "comment": "motorconf.cpp:481:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motorconf.cpp",
    "line": 482,
    "function": null,
    "comment": "motorconf.cpp:482:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 493,
    "function": null,
    "comment": "motorconf.cpp:493:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 500,
    "function": null,
    "comment": "motorconf.cpp:500:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 503,
    "function": null,
    "comment": "motorconf.cpp:503:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 512,
    "function": null,
    "comment": "motorconf.cpp:512:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 520,
    "function": null,
    "comment": "motorconf.cpp:520:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 528,
    "function": null,
    "comment": "motorconf.cpp:528:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motorconf.cpp",
    "line": 529,
    "function": null,
    "comment": "motorconf.cpp:529:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "motorconf.cpp",
    "line": 530,
    "function": null,
    "comment": "motorconf.cpp:530:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "motorconf.cpp",
    "line": 531,
    "function": null,
    "comment": "motorconf.cpp:531:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "motorconf.cpp",
    "line": 533,
    "function": null,
    "comment": "motorconf.cpp:533:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 534,
    "function": null,
    "comment": "motorconf.cpp:534:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "motorconf.cpp",
    "line": 535,
    "function": null,
    "comment": "motorconf.cpp:535:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "motorconf.cpp",
    "line": 537,
    "function": null,
    "comment": "motorconf.cpp:537:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 538,
    "function": null,
    "comment": "motorconf.cpp:538:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "motorconf.cpp",
    "line": 539,
    "function": null,
    "comment": "motorconf.cpp:539:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motorconf.cpp",
    "line": 541,
    "function": null,
    "comment": "motorconf.cpp:541:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "motorconf.cpp",
    "line": 541,
    "function": null,
    "comment": "motorconf.cpp:541:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 542,
    "function": null,
    "comment": "motorconf.cpp:542:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motorconf.cpp",
    "line": 543,
    "function": null,
    "comment": "motorconf.cpp:543:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid string printing C functions (sprintf, strcpy, strcat). Use snprintf instead.",
    "file": "motorconf.cpp",
    "line": 555,
    "function": null,
    "comment": "motorconf.cpp:555:  Almost always, snprintf is better than strcpy  [runtime/printf] [4]",
    "tags": ["code-standards","google-cpp","strings","deprecation","library"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "motorconf.cpp",
    "line": 560,
    "function": null,
    "comment": "motorconf.cpp:560:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 565,
    "function": null,
    "comment": "motorconf.cpp:565:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 569,
    "function": null,
    "comment": "motorconf.cpp:569:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 576,
    "function": null,
    "comment": "motorconf.cpp:576:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 583,
    "function": null,
    "comment": "motorconf.cpp:583:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motorconf.cpp",
    "line": 588,
    "function": null,
    "comment": "motorconf.cpp:588:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motorconf.cpp",
    "line": 589,
    "function": null,
    "comment": "motorconf.cpp:589:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motorconf.cpp",
    "line": 599,
    "function": null,
    "comment": "motorconf.cpp:599:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "motorconf.cpp",
    "line": 604,
    "function": null,
    "comment": "motorconf.cpp:604:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motorconf.cpp",
    "line": 605,
    "function": null,
    "comment": "motorconf.cpp:605:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motorconf.cpp",
    "line": 607,
    "function": null,
    "comment": "motorconf.cpp:607:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motorconf.cpp",
    "line": 609,
    "function": null,
    "comment": "motorconf.cpp:609:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motorconf.cpp",
    "line": 611,
    "function": null,
    "comment": "motorconf.cpp:611:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motorconf.cpp",
    "line": 613,
    "function": null,
    "comment": "motorconf.cpp:613:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motorconf.cpp",
    "line": 615,
    "function": null,
    "comment": "motorconf.cpp:615:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motorconf.cpp",
    "line": 616,
    "function": null,
    "comment": "motorconf.cpp:616:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motorconf.cpp",
    "line": 617,
    "function": null,
    "comment": "motorconf.cpp:617:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motorconf.cpp",
    "line": 618,
    "function": null,
    "comment": "motorconf.cpp:618:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 621,
    "function": null,
    "comment": "motorconf.cpp:621:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 626,
    "function": null,
    "comment": "motorconf.cpp:626:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "motorconf.cpp",
    "line": 627,
    "function": null,
    "comment": "motorconf.cpp:627:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 640,
    "function": null,
    "comment": "motorconf.cpp:640:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "motorconf.cpp",
    "line": 641,
    "function": null,
    "comment": "motorconf.cpp:641:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motorconf.cpp",
    "line": 644,
    "function": null,
    "comment": "motorconf.cpp:644:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motorconf.cpp",
    "line": 647,
    "function": null,
    "comment": "motorconf.cpp:647:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 656,
    "function": null,
    "comment": "motorconf.cpp:656:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motorconf.cpp",
    "line": 670,
    "function": null,
    "comment": "motorconf.cpp:670:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 673,
    "function": null,
    "comment": "motorconf.cpp:673:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 714,
    "function": null,
    "comment": "motorconf.cpp:714:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motorconf.cpp",
    "line": 718,
    "function": null,
    "comment": "motorconf.cpp:718:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 720,
    "function": null,
    "comment": "motorconf.cpp:720:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 728,
    "function": null,
    "comment": "motorconf.cpp:728:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 738,
    "function": null,
    "comment": "motorconf.cpp:738:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motorconf.cpp",
    "line": 739,
    "function": null,
    "comment": "motorconf.cpp:739:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 746,
    "function": null,
    "comment": "motorconf.cpp:746:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 753,
    "function": null,
    "comment": "motorconf.cpp:753:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 758,
    "function": null,
    "comment": "motorconf.cpp:758:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motorconf.cpp",
    "line": 764,
    "function": null,
    "comment": "motorconf.cpp:764:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motorconf.cpp",
    "line": 781,
    "function": null,
    "comment": "motorconf.cpp:781:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "motorconf.cpp",
    "line": 85,
    "function": null,
    "comment": "motorconf.cpp:85:  Add #include <utility> for pair<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "motorconf.cpp",
    "line": 759,
    "function": null,
    "comment": "motorconf.cpp:759:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "motorconf.cpp",
    "line": 66,
    "function": null,
    "comment": "motorconf.cpp:66:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "wg05.cpp",
    "line": 37,
    "function": null,
    "comment": "wg05.cpp:37:  Found C system header after C++ system header. Should be: wg05.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not include the C standard headers. Use the C++ headers instead.",
    "file": "wg05.cpp",
    "line": 37,
    "function": null,
    "comment": "wg05.cpp:37:  Include 'cmath' instead of 'math.h'.  [build/include] [5]",
    "tags": ["hicpp","code-standards","headers","include","preprocessor","deprecation","c"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "wg05.cpp",
    "line": 38,
    "function": null,
    "comment": "wg05.cpp:38:  Found C system header after C++ system header. Should be: wg05.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not include the C standard headers. Use the C++ headers instead.",
    "file": "wg05.cpp",
    "line": 38,
    "function": null,
    "comment": "wg05.cpp:38:  Include 'cstddef' instead of 'stddef.h'.  [build/include] [5]",
    "tags": ["hicpp","code-standards","headers","include","preprocessor","deprecation","c"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "wg05.cpp",
    "line": 40,
    "function": null,
    "comment": "wg05.cpp:40:  Found C system header after C++ system header. Should be: wg05.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "wg05.cpp",
    "line": 42,
    "function": null,
    "comment": "wg05.cpp:42:  Found C system header after C++ system header. Should be: wg05.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "wg05.cpp",
    "line": 43,
    "function": null,
    "comment": "wg05.cpp:43:  Found C system header after C++ system header. Should be: wg05.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "wg05.cpp",
    "line": 44,
    "function": null,
    "comment": "wg05.cpp:44:  Found C system header after C++ system header. Should be: wg05.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "wg05.cpp",
    "line": 45,
    "function": null,
    "comment": "wg05.cpp:45:  Found C system header after C++ system header. Should be: wg05.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "wg05.cpp",
    "line": 47,
    "function": null,
    "comment": "wg05.cpp:47:  Found C system header after C++ system header. Should be: wg05.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "wg05.cpp",
    "line": 48,
    "function": null,
    "comment": "wg05.cpp:48:  Found C system header after C++ system header. Should be: wg05.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg05.cpp",
    "line": 54,
    "function": null,
    "comment": "wg05.cpp:54:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg05.cpp",
    "line": 59,
    "function": null,
    "comment": "wg05.cpp:59:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg05.cpp",
    "line": 67,
    "function": null,
    "comment": "wg05.cpp:67:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "wg05.cpp",
    "line": 67,
    "function": null,
    "comment": "wg05.cpp:67:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg05.cpp",
    "line": 68,
    "function": null,
    "comment": "wg05.cpp:68:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg05.cpp",
    "line": 69,
    "function": null,
    "comment": "wg05.cpp:69:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg05.cpp",
    "line": 70,
    "function": null,
    "comment": "wg05.cpp:70:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg05.cpp",
    "line": 71,
    "function": null,
    "comment": "wg05.cpp:71:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg05.cpp",
    "line": 72,
    "function": null,
    "comment": "wg05.cpp:72:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg05.cpp",
    "line": 73,
    "function": null,
    "comment": "wg05.cpp:73:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg05.cpp",
    "line": 74,
    "function": null,
    "comment": "wg05.cpp:74:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg05.cpp",
    "line": 75,
    "function": null,
    "comment": "wg05.cpp:75:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg05.cpp",
    "line": 76,
    "function": null,
    "comment": "wg05.cpp:76:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg05.cpp",
    "line": 80,
    "function": null,
    "comment": "wg05.cpp:80:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "wg05.cpp",
    "line": 80,
    "function": null,
    "comment": "wg05.cpp:80:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg05.cpp",
    "line": 81,
    "function": null,
    "comment": "wg05.cpp:81:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg05.cpp",
    "line": 82,
    "function": null,
    "comment": "wg05.cpp:82:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg05.cpp",
    "line": 83,
    "function": null,
    "comment": "wg05.cpp:83:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg05.cpp",
    "line": 84,
    "function": null,
    "comment": "wg05.cpp:84:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg05.cpp",
    "line": 85,
    "function": null,
    "comment": "wg05.cpp:85:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg05.cpp",
    "line": 86,
    "function": null,
    "comment": "wg05.cpp:86:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg05.cpp",
    "line": 87,
    "function": null,
    "comment": "wg05.cpp:87:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg05.cpp",
    "line": 88,
    "function": null,
    "comment": "wg05.cpp:88:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg05.cpp",
    "line": 89,
    "function": null,
    "comment": "wg05.cpp:89:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg05.cpp",
    "line": 98,
    "function": null,
    "comment": "wg05.cpp:98:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg05.cpp",
    "line": 105,
    "function": null,
    "comment": "wg05.cpp:105:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg05.cpp",
    "line": 109,
    "function": null,
    "comment": "wg05.cpp:109:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg05.cpp",
    "line": 116,
    "function": null,
    "comment": "wg05.cpp:116:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg05.cpp",
    "line": 117,
    "function": null,
    "comment": "wg05.cpp:117:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg05.cpp",
    "line": 118,
    "function": null,
    "comment": "wg05.cpp:118:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg05.cpp",
    "line": 119,
    "function": null,
    "comment": "wg05.cpp:119:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg05.cpp",
    "line": 129,
    "function": null,
    "comment": "wg05.cpp:129:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg05.cpp",
    "line": 131,
    "function": null,
    "comment": "wg05.cpp:131:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg05.cpp",
    "line": 132,
    "function": null,
    "comment": "wg05.cpp:132:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg05.cpp",
    "line": 132,
    "function": null,
    "comment": "wg05.cpp:132:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "wg05.cpp",
    "line": 134,
    "function": null,
    "comment": "wg05.cpp:134:  Using deprecated casting style.  Use static_cast<double>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg05.cpp",
    "line": 136,
    "function": null,
    "comment": "wg05.cpp:136:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg05.cpp",
    "line": 136,
    "function": null,
    "comment": "wg05.cpp:136:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg05.cpp",
    "line": 137,
    "function": null,
    "comment": "wg05.cpp:137:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg05.cpp",
    "line": 139,
    "function": null,
    "comment": "wg05.cpp:139:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "wg05.cpp",
    "line": 143,
    "function": null,
    "comment": "wg05.cpp:143:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg05.cpp",
    "line": 144,
    "function": null,
    "comment": "wg05.cpp:144:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg05.cpp",
    "line": 149,
    "function": null,
    "comment": "wg05.cpp:149:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg05.cpp",
    "line": 154,
    "function": null,
    "comment": "wg05.cpp:154:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg05.cpp",
    "line": 159,
    "function": null,
    "comment": "wg05.cpp:159:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg05.cpp",
    "line": 166,
    "function": null,
    "comment": "wg05.cpp:166:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "motor_model.cpp",
    "line": null,
    "function": null,
    "comment": "motor_model.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "motor_model.cpp",
    "line": 3,
    "function": null,
    "comment": "motor_model.cpp:3:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "motor_model.cpp",
    "line": 4,
    "function": null,
    "comment": "motor_model.cpp:4:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_model.cpp",
    "line": 6,
    "function": null,
    "comment": "motor_model.cpp:6:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_model.cpp",
    "line": 7,
    "function": null,
    "comment": "motor_model.cpp:7:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_model.cpp",
    "line": 21,
    "function": null,
    "comment": "motor_model.cpp:21:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_model.cpp",
    "line": 28,
    "function": null,
    "comment": "motor_model.cpp:28:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_model.cpp",
    "line": 37,
    "function": null,
    "comment": "motor_model.cpp:37:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_model.cpp",
    "line": 38,
    "function": null,
    "comment": "motor_model.cpp:38:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_model.cpp",
    "line": 53,
    "function": null,
    "comment": "motor_model.cpp:53:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_model.cpp",
    "line": 53,
    "function": null,
    "comment": "motor_model.cpp:53:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_model.cpp",
    "line": 55,
    "function": null,
    "comment": "motor_model.cpp:55:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_model.cpp",
    "line": 59,
    "function": null,
    "comment": "motor_model.cpp:59:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_model.cpp",
    "line": 60,
    "function": null,
    "comment": "motor_model.cpp:60:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "motor_model.cpp",
    "line": 66,
    "function": null,
    "comment": "motor_model.cpp:66:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_model.cpp",
    "line": 67,
    "function": null,
    "comment": "motor_model.cpp:67:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "motor_model.cpp",
    "line": 68,
    "function": null,
    "comment": "motor_model.cpp:68:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "motor_model.cpp",
    "line": 68,
    "function": null,
    "comment": "motor_model.cpp:68:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_model.cpp",
    "line": 69,
    "function": null,
    "comment": "motor_model.cpp:69:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_model.cpp",
    "line": 77,
    "function": null,
    "comment": "motor_model.cpp:77:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_model.cpp",
    "line": 80,
    "function": null,
    "comment": "motor_model.cpp:80:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_model.cpp",
    "line": 88,
    "function": null,
    "comment": "motor_model.cpp:88:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_model.cpp",
    "line": 98,
    "function": null,
    "comment": "motor_model.cpp:98:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "motor_model.cpp",
    "line": 98,
    "function": null,
    "comment": "motor_model.cpp:98:  Missing spaces around ==  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_model.cpp",
    "line": 100,
    "function": null,
    "comment": "motor_model.cpp:100:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_model.cpp",
    "line": 102,
    "function": null,
    "comment": "motor_model.cpp:102:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_model.cpp",
    "line": 103,
    "function": null,
    "comment": "motor_model.cpp:103:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "motor_model.cpp",
    "line": 105,
    "function": null,
    "comment": "motor_model.cpp:105:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "To-do comments should look like '// TODO(my_username): Stuff.'.",
    "file": "motor_model.cpp",
    "line": 109,
    "function": null,
    "comment": "motor_model.cpp:109:  Missing username in TODO; it should look like '// TODO(my_username): Stuff.'  [readability/todo] [2]",
    "tags": ["comments","code-standards","formatting","google-cpp","todo-comment"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "motor_model.cpp",
    "line": 110,
    "function": null,
    "comment": "motor_model.cpp:110:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_model.cpp",
    "line": 126,
    "function": null,
    "comment": "motor_model.cpp:126:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_model.cpp",
    "line": 127,
    "function": null,
    "comment": "motor_model.cpp:127:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "motor_model.cpp",
    "line": 129,
    "function": null,
    "comment": "motor_model.cpp:129:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "motor_model.cpp",
    "line": 129,
    "function": null,
    "comment": "motor_model.cpp:129:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_model.cpp",
    "line": 133,
    "function": null,
    "comment": "motor_model.cpp:133:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_model.cpp",
    "line": 144,
    "function": null,
    "comment": "motor_model.cpp:144:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_model.cpp",
    "line": 145,
    "function": null,
    "comment": "motor_model.cpp:145:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_model.cpp",
    "line": 146,
    "function": null,
    "comment": "motor_model.cpp:146:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_model.cpp",
    "line": 147,
    "function": null,
    "comment": "motor_model.cpp:147:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_model.cpp",
    "line": 148,
    "function": null,
    "comment": "motor_model.cpp:148:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_model.cpp",
    "line": 149,
    "function": null,
    "comment": "motor_model.cpp:149:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_model.cpp",
    "line": 150,
    "function": null,
    "comment": "motor_model.cpp:150:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_model.cpp",
    "line": 151,
    "function": null,
    "comment": "motor_model.cpp:151:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_model.cpp",
    "line": 152,
    "function": null,
    "comment": "motor_model.cpp:152:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_model.cpp",
    "line": 158,
    "function": null,
    "comment": "motor_model.cpp:158:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_model.cpp",
    "line": 160,
    "function": null,
    "comment": "motor_model.cpp:160:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_model.cpp",
    "line": 161,
    "function": null,
    "comment": "motor_model.cpp:161:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_model.cpp",
    "line": 162,
    "function": null,
    "comment": "motor_model.cpp:162:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_model.cpp",
    "line": 163,
    "function": null,
    "comment": "motor_model.cpp:163:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_model.cpp",
    "line": 164,
    "function": null,
    "comment": "motor_model.cpp:164:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_model.cpp",
    "line": 165,
    "function": null,
    "comment": "motor_model.cpp:165:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_model.cpp",
    "line": 166,
    "function": null,
    "comment": "motor_model.cpp:166:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_model.cpp",
    "line": 167,
    "function": null,
    "comment": "motor_model.cpp:167:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_model.cpp",
    "line": 179,
    "function": null,
    "comment": "motor_model.cpp:179:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_model.cpp",
    "line": 180,
    "function": null,
    "comment": "motor_model.cpp:180:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "To-do comments should look like '// TODO(my_username): Stuff.'.",
    "file": "motor_model.cpp",
    "line": 182,
    "function": null,
    "comment": "motor_model.cpp:182:  Missing username in TODO; it should look like '// TODO(my_username): Stuff.'  [readability/todo] [2]",
    "tags": ["comments","code-standards","formatting","google-cpp","todo-comment"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_model.cpp",
    "line": 199,
    "function": null,
    "comment": "motor_model.cpp:199:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "motor_model.cpp",
    "line": 200,
    "function": null,
    "comment": "motor_model.cpp:200:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_model.cpp",
    "line": 203,
    "function": null,
    "comment": "motor_model.cpp:203:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_model.cpp",
    "line": 205,
    "function": null,
    "comment": "motor_model.cpp:205:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_model.cpp",
    "line": 206,
    "function": null,
    "comment": "motor_model.cpp:206:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_model.cpp",
    "line": 207,
    "function": null,
    "comment": "motor_model.cpp:207:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_model.cpp",
    "line": 209,
    "function": null,
    "comment": "motor_model.cpp:209:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_model.cpp",
    "line": 213,
    "function": null,
    "comment": "motor_model.cpp:213:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_model.cpp",
    "line": 214,
    "function": null,
    "comment": "motor_model.cpp:214:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "motor_model.cpp",
    "line": 214,
    "function": null,
    "comment": "motor_model.cpp:214:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_model.cpp",
    "line": 215,
    "function": null,
    "comment": "motor_model.cpp:215:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_model.cpp",
    "line": 223,
    "function": null,
    "comment": "motor_model.cpp:223:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_model.cpp",
    "line": 224,
    "function": null,
    "comment": "motor_model.cpp:224:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_model.cpp",
    "line": 225,
    "function": null,
    "comment": "motor_model.cpp:225:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_model.cpp",
    "line": 226,
    "function": null,
    "comment": "motor_model.cpp:226:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_model.cpp",
    "line": 229,
    "function": null,
    "comment": "motor_model.cpp:229:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "motor_model.cpp",
    "line": 233,
    "function": null,
    "comment": "motor_model.cpp:233:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_model.cpp",
    "line": 235,
    "function": null,
    "comment": "motor_model.cpp:235:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_model.cpp",
    "line": 236,
    "function": null,
    "comment": "motor_model.cpp:236:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_model.cpp",
    "line": 238,
    "function": null,
    "comment": "motor_model.cpp:238:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "motor_model.cpp",
    "line": 238,
    "function": null,
    "comment": "motor_model.cpp:238:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_model.cpp",
    "line": 239,
    "function": null,
    "comment": "motor_model.cpp:239:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_model.cpp",
    "line": 241,
    "function": null,
    "comment": "motor_model.cpp:241:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_model.cpp",
    "line": 242,
    "function": null,
    "comment": "motor_model.cpp:242:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "motor_model.cpp",
    "line": 242,
    "function": null,
    "comment": "motor_model.cpp:242:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_model.cpp",
    "line": 243,
    "function": null,
    "comment": "motor_model.cpp:243:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_model.cpp",
    "line": 244,
    "function": null,
    "comment": "motor_model.cpp:244:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_model.cpp",
    "line": 245,
    "function": null,
    "comment": "motor_model.cpp:245:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_model.cpp",
    "line": 248,
    "function": null,
    "comment": "motor_model.cpp:248:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "motor_model.cpp",
    "line": 249,
    "function": null,
    "comment": "motor_model.cpp:249:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_model.cpp",
    "line": 250,
    "function": null,
    "comment": "motor_model.cpp:250:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_model.cpp",
    "line": 252,
    "function": null,
    "comment": "motor_model.cpp:252:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_model.cpp",
    "line": 255,
    "function": null,
    "comment": "motor_model.cpp:255:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_model.cpp",
    "line": 256,
    "function": null,
    "comment": "motor_model.cpp:256:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_model.cpp",
    "line": 257,
    "function": null,
    "comment": "motor_model.cpp:257:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_model.cpp",
    "line": 259,
    "function": null,
    "comment": "motor_model.cpp:259:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_model.cpp",
    "line": 262,
    "function": null,
    "comment": "motor_model.cpp:262:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "motor_model.cpp",
    "line": 262,
    "function": null,
    "comment": "motor_model.cpp:262:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "motor_model.cpp",
    "line": 262,
    "function": null,
    "comment": "motor_model.cpp:262:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_model.cpp",
    "line": 263,
    "function": null,
    "comment": "motor_model.cpp:263:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_model.cpp",
    "line": 267,
    "function": null,
    "comment": "motor_model.cpp:267:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "motor_model.cpp",
    "line": 271,
    "function": null,
    "comment": "motor_model.cpp:271:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_model.cpp",
    "line": 272,
    "function": null,
    "comment": "motor_model.cpp:272:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_model.cpp",
    "line": 277,
    "function": null,
    "comment": "motor_model.cpp:277:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "motor_model.cpp",
    "line": 287,
    "function": null,
    "comment": "motor_model.cpp:287:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "motor_model.cpp",
    "line": 287,
    "function": null,
    "comment": "motor_model.cpp:287:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_model.cpp",
    "line": 300,
    "function": null,
    "comment": "motor_model.cpp:300:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_model.cpp",
    "line": 314,
    "function": null,
    "comment": "motor_model.cpp:314:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "motor_model.cpp",
    "line": 319,
    "function": null,
    "comment": "motor_model.cpp:319:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_model.cpp",
    "line": 322,
    "function": null,
    "comment": "motor_model.cpp:322:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_model.cpp",
    "line": 324,
    "function": null,
    "comment": "motor_model.cpp:324:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_model.cpp",
    "line": 325,
    "function": null,
    "comment": "motor_model.cpp:325:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_model.cpp",
    "line": 325,
    "function": null,
    "comment": "motor_model.cpp:325:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "motor_model.cpp",
    "line": 325,
    "function": null,
    "comment": "motor_model.cpp:325:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_model.cpp",
    "line": 331,
    "function": null,
    "comment": "motor_model.cpp:331:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_model.cpp",
    "line": 332,
    "function": null,
    "comment": "motor_model.cpp:332:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_model.cpp",
    "line": 335,
    "function": null,
    "comment": "motor_model.cpp:335:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_model.cpp",
    "line": 337,
    "function": null,
    "comment": "motor_model.cpp:337:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "motor_model.cpp",
    "line": 337,
    "function": null,
    "comment": "motor_model.cpp:337:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_model.cpp",
    "line": 338,
    "function": null,
    "comment": "motor_model.cpp:338:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_model.cpp",
    "line": 342,
    "function": null,
    "comment": "motor_model.cpp:342:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "motor_model.cpp",
    "line": 342,
    "function": null,
    "comment": "motor_model.cpp:342:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_model.cpp",
    "line": 343,
    "function": null,
    "comment": "motor_model.cpp:343:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "motor_model.cpp",
    "line": 344,
    "function": null,
    "comment": "motor_model.cpp:344:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_model.cpp",
    "line": 347,
    "function": null,
    "comment": "motor_model.cpp:347:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "motor_model.cpp",
    "line": 349,
    "function": null,
    "comment": "motor_model.cpp:349:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_model.cpp",
    "line": 350,
    "function": null,
    "comment": "motor_model.cpp:350:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_model.cpp",
    "line": 351,
    "function": null,
    "comment": "motor_model.cpp:351:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "motor_model.cpp",
    "line": 352,
    "function": null,
    "comment": "motor_model.cpp:352:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "motor_model.cpp",
    "line": 355,
    "function": null,
    "comment": "motor_model.cpp:355:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_model.cpp",
    "line": 356,
    "function": null,
    "comment": "motor_model.cpp:356:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "motor_model.cpp",
    "line": 357,
    "function": null,
    "comment": "motor_model.cpp:357:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "motor_model.cpp",
    "line": 360,
    "function": null,
    "comment": "motor_model.cpp:360:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_model.cpp",
    "line": 361,
    "function": null,
    "comment": "motor_model.cpp:361:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "motor_model.cpp",
    "line": 365,
    "function": null,
    "comment": "motor_model.cpp:365:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_model.cpp",
    "line": 366,
    "function": null,
    "comment": "motor_model.cpp:366:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_model.cpp",
    "line": 367,
    "function": null,
    "comment": "motor_model.cpp:367:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "motor_model.cpp",
    "line": 372,
    "function": null,
    "comment": "motor_model.cpp:372:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_model.cpp",
    "line": 373,
    "function": null,
    "comment": "motor_model.cpp:373:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "motor_model.cpp",
    "line": 374,
    "function": null,
    "comment": "motor_model.cpp:374:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_model.cpp",
    "line": 377,
    "function": null,
    "comment": "motor_model.cpp:377:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "motor_model.cpp",
    "line": 379,
    "function": null,
    "comment": "motor_model.cpp:379:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_model.cpp",
    "line": 380,
    "function": null,
    "comment": "motor_model.cpp:380:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_model.cpp",
    "line": 382,
    "function": null,
    "comment": "motor_model.cpp:382:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_model.cpp",
    "line": 382,
    "function": null,
    "comment": "motor_model.cpp:382:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "motor_model.cpp",
    "line": 384,
    "function": null,
    "comment": "motor_model.cpp:384:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_model.cpp",
    "line": 385,
    "function": null,
    "comment": "motor_model.cpp:385:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_model.cpp",
    "line": 387,
    "function": null,
    "comment": "motor_model.cpp:387:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_model.cpp",
    "line": 387,
    "function": null,
    "comment": "motor_model.cpp:387:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_model.cpp",
    "line": 390,
    "function": null,
    "comment": "motor_model.cpp:390:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_model.cpp",
    "line": 391,
    "function": null,
    "comment": "motor_model.cpp:391:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_model.cpp",
    "line": 392,
    "function": null,
    "comment": "motor_model.cpp:392:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_model.cpp",
    "line": 398,
    "function": null,
    "comment": "motor_model.cpp:398:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_model.cpp",
    "line": 407,
    "function": null,
    "comment": "motor_model.cpp:407:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_model.cpp",
    "line": 408,
    "function": null,
    "comment": "motor_model.cpp:408:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_model.cpp",
    "line": 409,
    "function": null,
    "comment": "motor_model.cpp:409:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_model.cpp",
    "line": 411,
    "function": null,
    "comment": "motor_model.cpp:411:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_model.cpp",
    "line": 419,
    "function": null,
    "comment": "motor_model.cpp:419:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_model.cpp",
    "line": 419,
    "function": null,
    "comment": "motor_model.cpp:419:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "motor_model.cpp",
    "line": 422,
    "function": null,
    "comment": "motor_model.cpp:422:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_model.cpp",
    "line": 430,
    "function": null,
    "comment": "motor_model.cpp:430:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_model.cpp",
    "line": 437,
    "function": null,
    "comment": "motor_model.cpp:437:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_model.cpp",
    "line": 442,
    "function": null,
    "comment": "motor_model.cpp:442:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_model.cpp",
    "line": 447,
    "function": null,
    "comment": "motor_model.cpp:447:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_model.cpp",
    "line": 447,
    "function": null,
    "comment": "motor_model.cpp:447:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "motor_model.cpp",
    "line": 328,
    "function": null,
    "comment": "motor_model.cpp:328:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "motor_model.cpp",
    "line": 217,
    "function": null,
    "comment": "motor_model.cpp:217:  Add #include <algorithm> for min  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "ek1122.cpp",
    "line": 38,
    "function": null,
    "comment": "ek1122.cpp:38:  Found C system header after C++ system header. Should be: ek1122.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ek1122.cpp",
    "line": 43,
    "function": null,
    "comment": "ek1122.cpp:43:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ek1122.cpp",
    "line": 50,
    "function": null,
    "comment": "ek1122.cpp:50:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ek1122.cpp",
    "line": 56,
    "function": null,
    "comment": "ek1122.cpp:56:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ek1122.cpp",
    "line": 57,
    "function": null,
    "comment": "ek1122.cpp:57:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ek1122.cpp",
    "line": 60,
    "function": null,
    "comment": "ek1122.cpp:60:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ek1122.cpp",
    "line": 61,
    "function": null,
    "comment": "ek1122.cpp:61:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ek1122.cpp",
    "line": 63,
    "function": null,
    "comment": "ek1122.cpp:63:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ek1122.cpp",
    "line": 67,
    "function": null,
    "comment": "ek1122.cpp:67:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ek1122.cpp",
    "line": 73,
    "function": null,
    "comment": "ek1122.cpp:73:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "ek1122.cpp",
    "line": 73,
    "function": null,
    "comment": "ek1122.cpp:73:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "wg_soft_processor.cpp",
    "line": null,
    "function": null,
    "comment": "wg_soft_processor.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "wg_soft_processor.cpp",
    "line": 4,
    "function": null,
    "comment": "wg_soft_processor.cpp:4:  Found C system header after C++ system header. Should be: wg_soft_processor.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "wg_soft_processor.cpp",
    "line": 5,
    "function": null,
    "comment": "wg_soft_processor.cpp:5:  Found C system header after C++ system header. Should be: wg_soft_processor.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_soft_processor.cpp",
    "line": 8,
    "function": null,
    "comment": "wg_soft_processor.cpp:8:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_soft_processor.cpp",
    "line": 11,
    "function": null,
    "comment": "wg_soft_processor.cpp:11:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "wg_soft_processor.cpp",
    "line": 12,
    "function": null,
    "comment": "wg_soft_processor.cpp:12:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "wg_soft_processor.cpp",
    "line": 12,
    "function": null,
    "comment": "wg_soft_processor.cpp:12:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_soft_processor.cpp",
    "line": 16,
    "function": null,
    "comment": "wg_soft_processor.cpp:16:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_soft_processor.cpp",
    "line": 19,
    "function": null,
    "comment": "wg_soft_processor.cpp:19:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_soft_processor.cpp",
    "line": 20,
    "function": null,
    "comment": "wg_soft_processor.cpp:20:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_soft_processor.cpp",
    "line": 21,
    "function": null,
    "comment": "wg_soft_processor.cpp:21:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_soft_processor.cpp",
    "line": 27,
    "function": null,
    "comment": "wg_soft_processor.cpp:27:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_soft_processor.cpp",
    "line": 30,
    "function": null,
    "comment": "wg_soft_processor.cpp:30:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_soft_processor.cpp",
    "line": 38,
    "function": null,
    "comment": "wg_soft_processor.cpp:38:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_soft_processor.cpp",
    "line": 38,
    "function": null,
    "comment": "wg_soft_processor.cpp:38:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_soft_processor.cpp",
    "line": 39,
    "function": null,
    "comment": "wg_soft_processor.cpp:39:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_soft_processor.cpp",
    "line": 41,
    "function": null,
    "comment": "wg_soft_processor.cpp:41:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_soft_processor.cpp",
    "line": 43,
    "function": null,
    "comment": "wg_soft_processor.cpp:43:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_soft_processor.cpp",
    "line": 44,
    "function": null,
    "comment": "wg_soft_processor.cpp:44:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_soft_processor.cpp",
    "line": 45,
    "function": null,
    "comment": "wg_soft_processor.cpp:45:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_soft_processor.cpp",
    "line": 50,
    "function": null,
    "comment": "wg_soft_processor.cpp:50:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_soft_processor.cpp",
    "line": 56,
    "function": null,
    "comment": "wg_soft_processor.cpp:56:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_soft_processor.cpp",
    "line": 56,
    "function": null,
    "comment": "wg_soft_processor.cpp:56:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_soft_processor.cpp",
    "line": 57,
    "function": null,
    "comment": "wg_soft_processor.cpp:57:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_soft_processor.cpp",
    "line": 58,
    "function": null,
    "comment": "wg_soft_processor.cpp:58:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_soft_processor.cpp",
    "line": 64,
    "function": null,
    "comment": "wg_soft_processor.cpp:64:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_soft_processor.cpp",
    "line": 66,
    "function": null,
    "comment": "wg_soft_processor.cpp:66:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_soft_processor.cpp",
    "line": 71,
    "function": null,
    "comment": "wg_soft_processor.cpp:71:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg_soft_processor.cpp",
    "line": 74,
    "function": null,
    "comment": "wg_soft_processor.cpp:74:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_soft_processor.cpp",
    "line": 75,
    "function": null,
    "comment": "wg_soft_processor.cpp:75:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_soft_processor.cpp",
    "line": 78,
    "function": null,
    "comment": "wg_soft_processor.cpp:78:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "wg_soft_processor.cpp",
    "line": 78,
    "function": null,
    "comment": "wg_soft_processor.cpp:78:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_soft_processor.cpp",
    "line": 79,
    "function": null,
    "comment": "wg_soft_processor.cpp:79:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_soft_processor.cpp",
    "line": 80,
    "function": null,
    "comment": "wg_soft_processor.cpp:80:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_soft_processor.cpp",
    "line": 81,
    "function": null,
    "comment": "wg_soft_processor.cpp:81:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_soft_processor.cpp",
    "line": 85,
    "function": null,
    "comment": "wg_soft_processor.cpp:85:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "wg_soft_processor.cpp",
    "line": 87,
    "function": null,
    "comment": "wg_soft_processor.cpp:87:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_soft_processor.cpp",
    "line": 88,
    "function": null,
    "comment": "wg_soft_processor.cpp:88:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_soft_processor.cpp",
    "line": 88,
    "function": null,
    "comment": "wg_soft_processor.cpp:88:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_soft_processor.cpp",
    "line": 90,
    "function": null,
    "comment": "wg_soft_processor.cpp:90:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_soft_processor.cpp",
    "line": 91,
    "function": null,
    "comment": "wg_soft_processor.cpp:91:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "wg_soft_processor.cpp",
    "line": 91,
    "function": null,
    "comment": "wg_soft_processor.cpp:91:  Missing spaces around <<  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_soft_processor.cpp",
    "line": 92,
    "function": null,
    "comment": "wg_soft_processor.cpp:92:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "wg_soft_processor.cpp",
    "line": 92,
    "function": null,
    "comment": "wg_soft_processor.cpp:92:  Missing spaces around <<  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_soft_processor.cpp",
    "line": 93,
    "function": null,
    "comment": "wg_soft_processor.cpp:93:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "wg_soft_processor.cpp",
    "line": 93,
    "function": null,
    "comment": "wg_soft_processor.cpp:93:  Missing spaces around <<  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "wg_soft_processor.cpp",
    "line": 93,
    "function": null,
    "comment": "wg_soft_processor.cpp:93:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "wg_soft_processor.cpp",
    "line": 94,
    "function": null,
    "comment": "wg_soft_processor.cpp:94:  Missing spaces around <<  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "wg_soft_processor.cpp",
    "line": 94,
    "function": null,
    "comment": "wg_soft_processor.cpp:94:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "wg_soft_processor.cpp",
    "line": 94,
    "function": null,
    "comment": "wg_soft_processor.cpp:94:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_soft_processor.cpp",
    "line": 95,
    "function": null,
    "comment": "wg_soft_processor.cpp:95:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_soft_processor.cpp",
    "line": 106,
    "function": null,
    "comment": "wg_soft_processor.cpp:106:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_soft_processor.cpp",
    "line": 106,
    "function": null,
    "comment": "wg_soft_processor.cpp:106:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_soft_processor.cpp",
    "line": 107,
    "function": null,
    "comment": "wg_soft_processor.cpp:107:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_soft_processor.cpp",
    "line": 108,
    "function": null,
    "comment": "wg_soft_processor.cpp:108:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_soft_processor.cpp",
    "line": 114,
    "function": null,
    "comment": "wg_soft_processor.cpp:114:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_soft_processor.cpp",
    "line": 116,
    "function": null,
    "comment": "wg_soft_processor.cpp:116:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_soft_processor.cpp",
    "line": 123,
    "function": null,
    "comment": "wg_soft_processor.cpp:123:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_soft_processor.cpp",
    "line": 124,
    "function": null,
    "comment": "wg_soft_processor.cpp:124:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_soft_processor.cpp",
    "line": 133,
    "function": null,
    "comment": "wg_soft_processor.cpp:133:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_soft_processor.cpp",
    "line": 134,
    "function": null,
    "comment": "wg_soft_processor.cpp:134:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_soft_processor.cpp",
    "line": 143,
    "function": null,
    "comment": "wg_soft_processor.cpp:143:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_soft_processor.cpp",
    "line": 143,
    "function": null,
    "comment": "wg_soft_processor.cpp:143:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_soft_processor.cpp",
    "line": 144,
    "function": null,
    "comment": "wg_soft_processor.cpp:144:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_soft_processor.cpp",
    "line": 145,
    "function": null,
    "comment": "wg_soft_processor.cpp:145:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_soft_processor.cpp",
    "line": 151,
    "function": null,
    "comment": "wg_soft_processor.cpp:151:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_soft_processor.cpp",
    "line": 153,
    "function": null,
    "comment": "wg_soft_processor.cpp:153:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_soft_processor.cpp",
    "line": 159,
    "function": null,
    "comment": "wg_soft_processor.cpp:159:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_soft_processor.cpp",
    "line": 160,
    "function": null,
    "comment": "wg_soft_processor.cpp:160:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_soft_processor.cpp",
    "line": 165,
    "function": null,
    "comment": "wg_soft_processor.cpp:165:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_soft_processor.cpp",
    "line": 166,
    "function": null,
    "comment": "wg_soft_processor.cpp:166:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_soft_processor.cpp",
    "line": 171,
    "function": null,
    "comment": "wg_soft_processor.cpp:171:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_soft_processor.cpp",
    "line": 177,
    "function": null,
    "comment": "wg_soft_processor.cpp:177:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_soft_processor.cpp",
    "line": 185,
    "function": null,
    "comment": "wg_soft_processor.cpp:185:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_soft_processor.cpp",
    "line": 187,
    "function": null,
    "comment": "wg_soft_processor.cpp:187:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg_soft_processor.cpp",
    "line": 194,
    "function": null,
    "comment": "wg_soft_processor.cpp:194:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "wg_soft_processor.cpp",
    "line": 39,
    "function": null,
    "comment": "wg_soft_processor.cpp:39:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "wg_eeprom.cpp",
    "line": 38,
    "function": null,
    "comment": "wg_eeprom.cpp:38:  Found C system header after other header. Should be: wg_eeprom.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_eeprom.cpp",
    "line": 41,
    "function": null,
    "comment": "wg_eeprom.cpp:41:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_eeprom.cpp",
    "line": 45,
    "function": null,
    "comment": "wg_eeprom.cpp:45:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_eeprom.cpp",
    "line": 48,
    "function": null,
    "comment": "wg_eeprom.cpp:48:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_eeprom.cpp",
    "line": 51,
    "function": null,
    "comment": "wg_eeprom.cpp:51:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "wg_eeprom.cpp",
    "line": 56,
    "function": null,
    "comment": "wg_eeprom.cpp:56:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "wg_eeprom.cpp",
    "line": 56,
    "function": null,
    "comment": "wg_eeprom.cpp:56:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_eeprom.cpp",
    "line": 60,
    "function": null,
    "comment": "wg_eeprom.cpp:60:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_eeprom.cpp",
    "line": 66,
    "function": null,
    "comment": "wg_eeprom.cpp:66:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_eeprom.cpp",
    "line": 72,
    "function": null,
    "comment": "wg_eeprom.cpp:72:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "wg_eeprom.cpp",
    "line": 84,
    "function": null,
    "comment": "wg_eeprom.cpp:84:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "wg_eeprom.cpp",
    "line": 84,
    "function": null,
    "comment": "wg_eeprom.cpp:84:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_eeprom.cpp",
    "line": 88,
    "function": null,
    "comment": "wg_eeprom.cpp:88:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_eeprom.cpp",
    "line": 89,
    "function": null,
    "comment": "wg_eeprom.cpp:89:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg_eeprom.cpp",
    "line": 90,
    "function": null,
    "comment": "wg_eeprom.cpp:90:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg_eeprom.cpp",
    "line": 92,
    "function": null,
    "comment": "wg_eeprom.cpp:92:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_eeprom.cpp",
    "line": 93,
    "function": null,
    "comment": "wg_eeprom.cpp:93:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "wg_eeprom.cpp",
    "line": 98,
    "function": null,
    "comment": "wg_eeprom.cpp:98:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "wg_eeprom.cpp",
    "line": 98,
    "function": null,
    "comment": "wg_eeprom.cpp:98:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "wg_eeprom.cpp",
    "line": 99,
    "function": null,
    "comment": "wg_eeprom.cpp:99:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "wg_eeprom.cpp",
    "line": 99,
    "function": null,
    "comment": "wg_eeprom.cpp:99:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "wg_eeprom.cpp",
    "line": 100,
    "function": null,
    "comment": "wg_eeprom.cpp:100:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "wg_eeprom.cpp",
    "line": 100,
    "function": null,
    "comment": "wg_eeprom.cpp:100:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_eeprom.cpp",
    "line": 106,
    "function": null,
    "comment": "wg_eeprom.cpp:106:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_eeprom.cpp",
    "line": 107,
    "function": null,
    "comment": "wg_eeprom.cpp:107:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "wg_eeprom.cpp",
    "line": 107,
    "function": null,
    "comment": "wg_eeprom.cpp:107:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "wg_eeprom.cpp",
    "line": 107,
    "function": null,
    "comment": "wg_eeprom.cpp:107:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_eeprom.cpp",
    "line": 120,
    "function": null,
    "comment": "wg_eeprom.cpp:120:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_eeprom.cpp",
    "line": 122,
    "function": null,
    "comment": "wg_eeprom.cpp:122:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "To-do comments should look like '// TODO(my_username): Stuff.'.",
    "file": "wg_eeprom.cpp",
    "line": 122,
    "function": null,
    "comment": "wg_eeprom.cpp:122:  Missing username in TODO; it should look like '// TODO(my_username): Stuff.'  [readability/todo] [2]",
    "tags": ["comments","code-standards","formatting","google-cpp","todo-comment"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "wg_eeprom.cpp",
    "line": 123,
    "function": null,
    "comment": "wg_eeprom.cpp:123:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg_eeprom.cpp",
    "line": 125,
    "function": null,
    "comment": "wg_eeprom.cpp:125:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "wg_eeprom.cpp",
    "line": 126,
    "function": null,
    "comment": "wg_eeprom.cpp:126:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_eeprom.cpp",
    "line": 129,
    "function": null,
    "comment": "wg_eeprom.cpp:129:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_eeprom.cpp",
    "line": 134,
    "function": null,
    "comment": "wg_eeprom.cpp:134:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_eeprom.cpp",
    "line": 135,
    "function": null,
    "comment": "wg_eeprom.cpp:135:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_eeprom.cpp",
    "line": 137,
    "function": null,
    "comment": "wg_eeprom.cpp:137:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_eeprom.cpp",
    "line": 138,
    "function": null,
    "comment": "wg_eeprom.cpp:138:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "wg_eeprom.cpp",
    "line": 140,
    "function": null,
    "comment": "wg_eeprom.cpp:140:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_eeprom.cpp",
    "line": 156,
    "function": null,
    "comment": "wg_eeprom.cpp:156:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_eeprom.cpp",
    "line": 157,
    "function": null,
    "comment": "wg_eeprom.cpp:157:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_eeprom.cpp",
    "line": 159,
    "function": null,
    "comment": "wg_eeprom.cpp:159:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_eeprom.cpp",
    "line": 164,
    "function": null,
    "comment": "wg_eeprom.cpp:164:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_eeprom.cpp",
    "line": 165,
    "function": null,
    "comment": "wg_eeprom.cpp:165:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_eeprom.cpp",
    "line": 170,
    "function": null,
    "comment": "wg_eeprom.cpp:170:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_eeprom.cpp",
    "line": 176,
    "function": null,
    "comment": "wg_eeprom.cpp:176:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_eeprom.cpp",
    "line": 178,
    "function": null,
    "comment": "wg_eeprom.cpp:178:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_eeprom.cpp",
    "line": 183,
    "function": null,
    "comment": "wg_eeprom.cpp:183:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_eeprom.cpp",
    "line": 184,
    "function": null,
    "comment": "wg_eeprom.cpp:184:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_eeprom.cpp",
    "line": 190,
    "function": null,
    "comment": "wg_eeprom.cpp:190:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_eeprom.cpp",
    "line": 191,
    "function": null,
    "comment": "wg_eeprom.cpp:191:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_eeprom.cpp",
    "line": 192,
    "function": null,
    "comment": "wg_eeprom.cpp:192:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "wg_eeprom.cpp",
    "line": 195,
    "function": null,
    "comment": "wg_eeprom.cpp:195:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "wg_eeprom.cpp",
    "line": 200,
    "function": null,
    "comment": "wg_eeprom.cpp:200:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_eeprom.cpp",
    "line": 221,
    "function": null,
    "comment": "wg_eeprom.cpp:221:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_eeprom.cpp",
    "line": 222,
    "function": null,
    "comment": "wg_eeprom.cpp:222:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_eeprom.cpp",
    "line": 226,
    "function": null,
    "comment": "wg_eeprom.cpp:226:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_eeprom.cpp",
    "line": 232,
    "function": null,
    "comment": "wg_eeprom.cpp:232:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_eeprom.cpp",
    "line": 237,
    "function": null,
    "comment": "wg_eeprom.cpp:237:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_eeprom.cpp",
    "line": 238,
    "function": null,
    "comment": "wg_eeprom.cpp:238:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_eeprom.cpp",
    "line": 238,
    "function": null,
    "comment": "wg_eeprom.cpp:238:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_eeprom.cpp",
    "line": 240,
    "function": null,
    "comment": "wg_eeprom.cpp:240:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "wg_eeprom.cpp",
    "line": 240,
    "function": null,
    "comment": "wg_eeprom.cpp:240:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_eeprom.cpp",
    "line": 241,
    "function": null,
    "comment": "wg_eeprom.cpp:241:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_eeprom.cpp",
    "line": 242,
    "function": null,
    "comment": "wg_eeprom.cpp:242:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_eeprom.cpp",
    "line": 247,
    "function": null,
    "comment": "wg_eeprom.cpp:247:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_eeprom.cpp",
    "line": 248,
    "function": null,
    "comment": "wg_eeprom.cpp:248:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "wg_eeprom.cpp",
    "line": 251,
    "function": null,
    "comment": "wg_eeprom.cpp:251:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_eeprom.cpp",
    "line": 253,
    "function": null,
    "comment": "wg_eeprom.cpp:253:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_eeprom.cpp",
    "line": 254,
    "function": null,
    "comment": "wg_eeprom.cpp:254:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_eeprom.cpp",
    "line": 263,
    "function": null,
    "comment": "wg_eeprom.cpp:263:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_eeprom.cpp",
    "line": 264,
    "function": null,
    "comment": "wg_eeprom.cpp:264:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_eeprom.cpp",
    "line": 287,
    "function": null,
    "comment": "wg_eeprom.cpp:287:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_eeprom.cpp",
    "line": 288,
    "function": null,
    "comment": "wg_eeprom.cpp:288:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_eeprom.cpp",
    "line": 292,
    "function": null,
    "comment": "wg_eeprom.cpp:292:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_eeprom.cpp",
    "line": 298,
    "function": null,
    "comment": "wg_eeprom.cpp:298:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_eeprom.cpp",
    "line": 305,
    "function": null,
    "comment": "wg_eeprom.cpp:305:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_eeprom.cpp",
    "line": 314,
    "function": null,
    "comment": "wg_eeprom.cpp:314:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_eeprom.cpp",
    "line": 317,
    "function": null,
    "comment": "wg_eeprom.cpp:317:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_eeprom.cpp",
    "line": 321,
    "function": null,
    "comment": "wg_eeprom.cpp:321:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_eeprom.cpp",
    "line": 322,
    "function": null,
    "comment": "wg_eeprom.cpp:322:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_eeprom.cpp",
    "line": 330,
    "function": null,
    "comment": "wg_eeprom.cpp:330:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_eeprom.cpp",
    "line": 331,
    "function": null,
    "comment": "wg_eeprom.cpp:331:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_eeprom.cpp",
    "line": 338,
    "function": null,
    "comment": "wg_eeprom.cpp:338:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_eeprom.cpp",
    "line": 358,
    "function": null,
    "comment": "wg_eeprom.cpp:358:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg_eeprom.cpp",
    "line": 362,
    "function": null,
    "comment": "wg_eeprom.cpp:362:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_eeprom.cpp",
    "line": 364,
    "function": null,
    "comment": "wg_eeprom.cpp:364:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_eeprom.cpp",
    "line": 368,
    "function": null,
    "comment": "wg_eeprom.cpp:368:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "wg_eeprom.cpp",
    "line": 372,
    "function": null,
    "comment": "wg_eeprom.cpp:372:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_eeprom.cpp",
    "line": 374,
    "function": null,
    "comment": "wg_eeprom.cpp:374:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_eeprom.cpp",
    "line": 375,
    "function": null,
    "comment": "wg_eeprom.cpp:375:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_eeprom.cpp",
    "line": 378,
    "function": null,
    "comment": "wg_eeprom.cpp:378:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_eeprom.cpp",
    "line": 381,
    "function": null,
    "comment": "wg_eeprom.cpp:381:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_eeprom.cpp",
    "line": 399,
    "function": null,
    "comment": "wg_eeprom.cpp:399:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_eeprom.cpp",
    "line": 400,
    "function": null,
    "comment": "wg_eeprom.cpp:400:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_eeprom.cpp",
    "line": 401,
    "function": null,
    "comment": "wg_eeprom.cpp:401:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_eeprom.cpp",
    "line": 402,
    "function": null,
    "comment": "wg_eeprom.cpp:402:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_eeprom.cpp",
    "line": 404,
    "function": null,
    "comment": "wg_eeprom.cpp:404:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_eeprom.cpp",
    "line": 406,
    "function": null,
    "comment": "wg_eeprom.cpp:406:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_eeprom.cpp",
    "line": 406,
    "function": null,
    "comment": "wg_eeprom.cpp:406:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_eeprom.cpp",
    "line": 407,
    "function": null,
    "comment": "wg_eeprom.cpp:407:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_eeprom.cpp",
    "line": 410,
    "function": null,
    "comment": "wg_eeprom.cpp:410:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_eeprom.cpp",
    "line": 411,
    "function": null,
    "comment": "wg_eeprom.cpp:411:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_eeprom.cpp",
    "line": 415,
    "function": null,
    "comment": "wg_eeprom.cpp:415:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_eeprom.cpp",
    "line": 419,
    "function": null,
    "comment": "wg_eeprom.cpp:419:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_eeprom.cpp",
    "line": 420,
    "function": null,
    "comment": "wg_eeprom.cpp:420:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_eeprom.cpp",
    "line": 425,
    "function": null,
    "comment": "wg_eeprom.cpp:425:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_eeprom.cpp",
    "line": 427,
    "function": null,
    "comment": "wg_eeprom.cpp:427:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_eeprom.cpp",
    "line": 428,
    "function": null,
    "comment": "wg_eeprom.cpp:428:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_eeprom.cpp",
    "line": 432,
    "function": null,
    "comment": "wg_eeprom.cpp:432:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_eeprom.cpp",
    "line": 454,
    "function": null,
    "comment": "wg_eeprom.cpp:454:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_eeprom.cpp",
    "line": 455,
    "function": null,
    "comment": "wg_eeprom.cpp:455:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_eeprom.cpp",
    "line": 457,
    "function": null,
    "comment": "wg_eeprom.cpp:457:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_eeprom.cpp",
    "line": 458,
    "function": null,
    "comment": "wg_eeprom.cpp:458:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_eeprom.cpp",
    "line": 462,
    "function": null,
    "comment": "wg_eeprom.cpp:462:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg_eeprom.cpp",
    "line": 467,
    "function": null,
    "comment": "wg_eeprom.cpp:467:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "wg_eeprom.cpp",
    "line": 467,
    "function": null,
    "comment": "wg_eeprom.cpp:467:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "wg021.cpp",
    "line": 37,
    "function": null,
    "comment": "wg021.cpp:37:  Found C system header after C++ system header. Should be: wg021.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not include the C standard headers. Use the C++ headers instead.",
    "file": "wg021.cpp",
    "line": 37,
    "function": null,
    "comment": "wg021.cpp:37:  Include 'cmath' instead of 'math.h'.  [build/include] [5]",
    "tags": ["hicpp","code-standards","headers","include","preprocessor","deprecation","c"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "wg021.cpp",
    "line": 38,
    "function": null,
    "comment": "wg021.cpp:38:  Found C system header after C++ system header. Should be: wg021.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not include the C standard headers. Use the C++ headers instead.",
    "file": "wg021.cpp",
    "line": 38,
    "function": null,
    "comment": "wg021.cpp:38:  Include 'cstddef' instead of 'stddef.h'.  [build/include] [5]",
    "tags": ["hicpp","code-standards","headers","include","preprocessor","deprecation","c"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "wg021.cpp",
    "line": 40,
    "function": null,
    "comment": "wg021.cpp:40:  Found C system header after C++ system header. Should be: wg021.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "wg021.cpp",
    "line": 42,
    "function": null,
    "comment": "wg021.cpp:42:  Found C system header after C++ system header. Should be: wg021.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "wg021.cpp",
    "line": 43,
    "function": null,
    "comment": "wg021.cpp:43:  Found C system header after C++ system header. Should be: wg021.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "wg021.cpp",
    "line": 44,
    "function": null,
    "comment": "wg021.cpp:44:  Found C system header after C++ system header. Should be: wg021.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "wg021.cpp",
    "line": 45,
    "function": null,
    "comment": "wg021.cpp:45:  Found C system header after C++ system header. Should be: wg021.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "wg021.cpp",
    "line": 47,
    "function": null,
    "comment": "wg021.cpp:47:  Found C system header after C++ system header. Should be: wg021.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "wg021.cpp",
    "line": 48,
    "function": null,
    "comment": "wg021.cpp:48:  Found C system header after C++ system header. Should be: wg021.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg021.cpp",
    "line": 55,
    "function": null,
    "comment": "wg021.cpp:55:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg021.cpp",
    "line": 60,
    "function": null,
    "comment": "wg021.cpp:60:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg021.cpp",
    "line": 67,
    "function": null,
    "comment": "wg021.cpp:67:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "wg021.cpp",
    "line": 67,
    "function": null,
    "comment": "wg021.cpp:67:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg021.cpp",
    "line": 68,
    "function": null,
    "comment": "wg021.cpp:68:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg021.cpp",
    "line": 69,
    "function": null,
    "comment": "wg021.cpp:69:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg021.cpp",
    "line": 70,
    "function": null,
    "comment": "wg021.cpp:70:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg021.cpp",
    "line": 71,
    "function": null,
    "comment": "wg021.cpp:71:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg021.cpp",
    "line": 72,
    "function": null,
    "comment": "wg021.cpp:72:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg021.cpp",
    "line": 73,
    "function": null,
    "comment": "wg021.cpp:73:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg021.cpp",
    "line": 74,
    "function": null,
    "comment": "wg021.cpp:74:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg021.cpp",
    "line": 75,
    "function": null,
    "comment": "wg021.cpp:75:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg021.cpp",
    "line": 76,
    "function": null,
    "comment": "wg021.cpp:76:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg021.cpp",
    "line": 80,
    "function": null,
    "comment": "wg021.cpp:80:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "wg021.cpp",
    "line": 80,
    "function": null,
    "comment": "wg021.cpp:80:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg021.cpp",
    "line": 81,
    "function": null,
    "comment": "wg021.cpp:81:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg021.cpp",
    "line": 82,
    "function": null,
    "comment": "wg021.cpp:82:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg021.cpp",
    "line": 83,
    "function": null,
    "comment": "wg021.cpp:83:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg021.cpp",
    "line": 84,
    "function": null,
    "comment": "wg021.cpp:84:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg021.cpp",
    "line": 85,
    "function": null,
    "comment": "wg021.cpp:85:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg021.cpp",
    "line": 86,
    "function": null,
    "comment": "wg021.cpp:86:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg021.cpp",
    "line": 87,
    "function": null,
    "comment": "wg021.cpp:87:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg021.cpp",
    "line": 88,
    "function": null,
    "comment": "wg021.cpp:88:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg021.cpp",
    "line": 89,
    "function": null,
    "comment": "wg021.cpp:89:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg021.cpp",
    "line": 98,
    "function": null,
    "comment": "wg021.cpp:98:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg021.cpp",
    "line": 105,
    "function": null,
    "comment": "wg021.cpp:105:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg021.cpp",
    "line": 109,
    "function": null,
    "comment": "wg021.cpp:109:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg021.cpp",
    "line": 115,
    "function": null,
    "comment": "wg021.cpp:115:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg021.cpp",
    "line": 116,
    "function": null,
    "comment": "wg021.cpp:116:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg021.cpp",
    "line": 123,
    "function": null,
    "comment": "wg021.cpp:123:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "wg021.cpp",
    "line": 126,
    "function": null,
    "comment": "wg021.cpp:126:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg021.cpp",
    "line": 136,
    "function": null,
    "comment": "wg021.cpp:136:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg021.cpp",
    "line": 137,
    "function": null,
    "comment": "wg021.cpp:137:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg021.cpp",
    "line": 139,
    "function": null,
    "comment": "wg021.cpp:139:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg021.cpp",
    "line": 140,
    "function": null,
    "comment": "wg021.cpp:140:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg021.cpp",
    "line": 149,
    "function": null,
    "comment": "wg021.cpp:149:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg021.cpp",
    "line": 150,
    "function": null,
    "comment": "wg021.cpp:150:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg021.cpp",
    "line": 161,
    "function": null,
    "comment": "wg021.cpp:161:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg021.cpp",
    "line": 164,
    "function": null,
    "comment": "wg021.cpp:164:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg021.cpp",
    "line": 165,
    "function": null,
    "comment": "wg021.cpp:165:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg021.cpp",
    "line": 166,
    "function": null,
    "comment": "wg021.cpp:166:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "wg021.cpp",
    "line": 176,
    "function": null,
    "comment": "wg021.cpp:176:  Using C-style cast.  Use reinterpret_cast<WG021Command *>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg021.cpp",
    "line": 179,
    "function": null,
    "comment": "wg021.cpp:179:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "wg021.cpp",
    "line": 179,
    "function": null,
    "comment": "wg021.cpp:179:  Using deprecated casting style.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg021.cpp",
    "line": 180,
    "function": null,
    "comment": "wg021.cpp:180:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg021.cpp",
    "line": 186,
    "function": null,
    "comment": "wg021.cpp:186:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg021.cpp",
    "line": 190,
    "function": null,
    "comment": "wg021.cpp:190:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "wg021.cpp",
    "line": 195,
    "function": null,
    "comment": "wg021.cpp:195:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "wg021.cpp",
    "line": 196,
    "function": null,
    "comment": "wg021.cpp:196:  Using C-style cast.  Use reinterpret_cast<WG021Status *>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "wg021.cpp",
    "line": 197,
    "function": null,
    "comment": "wg021.cpp:197:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg021.cpp",
    "line": 198,
    "function": null,
    "comment": "wg021.cpp:198:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg021.cpp",
    "line": 200,
    "function": null,
    "comment": "wg021.cpp:200:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg021.cpp",
    "line": 224,
    "function": null,
    "comment": "wg021.cpp:224:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg021.cpp",
    "line": 225,
    "function": null,
    "comment": "wg021.cpp:225:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg021.cpp",
    "line": 229,
    "function": null,
    "comment": "wg021.cpp:229:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg021.cpp",
    "line": 230,
    "function": null,
    "comment": "wg021.cpp:230:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg021.cpp",
    "line": 232,
    "function": null,
    "comment": "wg021.cpp:232:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "wg021.cpp",
    "line": 232,
    "function": null,
    "comment": "wg021.cpp:232:  Using C-style cast.  Use reinterpret_cast<WG0XStatus *>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg021.cpp",
    "line": 233,
    "function": null,
    "comment": "wg021.cpp:233:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg021.cpp",
    "line": 243,
    "function": null,
    "comment": "wg021.cpp:243:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg021.cpp",
    "line": 244,
    "function": null,
    "comment": "wg021.cpp:244:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "wg021.cpp",
    "line": 245,
    "function": null,
    "comment": "wg021.cpp:245:  Using C-style cast.  Use reinterpret_cast<WG021Status *>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg021.cpp",
    "line": 251,
    "function": null,
    "comment": "wg021.cpp:251:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg021.cpp",
    "line": 257,
    "function": null,
    "comment": "wg021.cpp:257:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg021.cpp",
    "line": 269,
    "function": null,
    "comment": "wg021.cpp:269:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg021.cpp",
    "line": 277,
    "function": null,
    "comment": "wg021.cpp:277:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg021.cpp",
    "line": 278,
    "function": null,
    "comment": "wg021.cpp:278:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg021.cpp",
    "line": 290,
    "function": null,
    "comment": "wg021.cpp:290:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg021.cpp",
    "line": 291,
    "function": null,
    "comment": "wg021.cpp:291:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg021.cpp",
    "line": 294,
    "function": null,
    "comment": "wg021.cpp:294:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "wg021.cpp",
    "line": 137,
    "function": null,
    "comment": "wg021.cpp:137:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "wg021.cpp",
    "line": 230,
    "function": null,
    "comment": "wg021.cpp:230:  Add #include <algorithm> for max  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "wg06.cpp",
    "line": 37,
    "function": null,
    "comment": "wg06.cpp:37:  Found C system header after C++ system header. Should be: wg06.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not include the C standard headers. Use the C++ headers instead.",
    "file": "wg06.cpp",
    "line": 37,
    "function": null,
    "comment": "wg06.cpp:37:  Include 'cmath' instead of 'math.h'.  [build/include] [5]",
    "tags": ["hicpp","code-standards","headers","include","preprocessor","deprecation","c"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "wg06.cpp",
    "line": 38,
    "function": null,
    "comment": "wg06.cpp:38:  Found C system header after C++ system header. Should be: wg06.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not include the C standard headers. Use the C++ headers instead.",
    "file": "wg06.cpp",
    "line": 38,
    "function": null,
    "comment": "wg06.cpp:38:  Include 'cstddef' instead of 'stddef.h'.  [build/include] [5]",
    "tags": ["hicpp","code-standards","headers","include","preprocessor","deprecation","c"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "wg06.cpp",
    "line": 40,
    "function": null,
    "comment": "wg06.cpp:40:  Found C system header after C++ system header. Should be: wg06.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "wg06.cpp",
    "line": 42,
    "function": null,
    "comment": "wg06.cpp:42:  Found C system header after C++ system header. Should be: wg06.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "wg06.cpp",
    "line": 43,
    "function": null,
    "comment": "wg06.cpp:43:  Found C system header after C++ system header. Should be: wg06.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "wg06.cpp",
    "line": 44,
    "function": null,
    "comment": "wg06.cpp:44:  Found C system header after C++ system header. Should be: wg06.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "wg06.cpp",
    "line": 45,
    "function": null,
    "comment": "wg06.cpp:45:  Found C system header after C++ system header. Should be: wg06.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "wg06.cpp",
    "line": 47,
    "function": null,
    "comment": "wg06.cpp:47:  Found C system header after C++ system header. Should be: wg06.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 58,
    "function": null,
    "comment": "wg06.cpp:58:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 78,
    "function": null,
    "comment": "wg06.cpp:78:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "wg06.cpp",
    "line": 79,
    "function": null,
    "comment": "wg06.cpp:79:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "wg06.cpp",
    "line": 79,
    "function": null,
    "comment": "wg06.cpp:79:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 81,
    "function": null,
    "comment": "wg06.cpp:81:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 83,
    "function": null,
    "comment": "wg06.cpp:83:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 89,
    "function": null,
    "comment": "wg06.cpp:89:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 89,
    "function": null,
    "comment": "wg06.cpp:89:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 94,
    "function": null,
    "comment": "wg06.cpp:94:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 99,
    "function": null,
    "comment": "wg06.cpp:99:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 99,
    "function": null,
    "comment": "wg06.cpp:99:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 109,
    "function": null,
    "comment": "wg06.cpp:109:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 113,
    "function": null,
    "comment": "wg06.cpp:113:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "wg06.cpp",
    "line": 117,
    "function": null,
    "comment": "wg06.cpp:117:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 118,
    "function": null,
    "comment": "wg06.cpp:118:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 123,
    "function": null,
    "comment": "wg06.cpp:123:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 124,
    "function": null,
    "comment": "wg06.cpp:124:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 129,
    "function": null,
    "comment": "wg06.cpp:129:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "wg06.cpp",
    "line": 129,
    "function": null,
    "comment": "wg06.cpp:129:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 130,
    "function": null,
    "comment": "wg06.cpp:130:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 137,
    "function": null,
    "comment": "wg06.cpp:137:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "wg06.cpp",
    "line": 137,
    "function": null,
    "comment": "wg06.cpp:137:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg06.cpp",
    "line": 138,
    "function": null,
    "comment": "wg06.cpp:138:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg06.cpp",
    "line": 139,
    "function": null,
    "comment": "wg06.cpp:139:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg06.cpp",
    "line": 140,
    "function": null,
    "comment": "wg06.cpp:140:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg06.cpp",
    "line": 141,
    "function": null,
    "comment": "wg06.cpp:141:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg06.cpp",
    "line": 142,
    "function": null,
    "comment": "wg06.cpp:142:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg06.cpp",
    "line": 143,
    "function": null,
    "comment": "wg06.cpp:143:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg06.cpp",
    "line": 144,
    "function": null,
    "comment": "wg06.cpp:144:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg06.cpp",
    "line": 145,
    "function": null,
    "comment": "wg06.cpp:145:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg06.cpp",
    "line": 146,
    "function": null,
    "comment": "wg06.cpp:146:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 150,
    "function": null,
    "comment": "wg06.cpp:150:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "wg06.cpp",
    "line": 150,
    "function": null,
    "comment": "wg06.cpp:150:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg06.cpp",
    "line": 151,
    "function": null,
    "comment": "wg06.cpp:151:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg06.cpp",
    "line": 152,
    "function": null,
    "comment": "wg06.cpp:152:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg06.cpp",
    "line": 153,
    "function": null,
    "comment": "wg06.cpp:153:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg06.cpp",
    "line": 154,
    "function": null,
    "comment": "wg06.cpp:154:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg06.cpp",
    "line": 155,
    "function": null,
    "comment": "wg06.cpp:155:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg06.cpp",
    "line": 156,
    "function": null,
    "comment": "wg06.cpp:156:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg06.cpp",
    "line": 157,
    "function": null,
    "comment": "wg06.cpp:157:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg06.cpp",
    "line": 158,
    "function": null,
    "comment": "wg06.cpp:158:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg06.cpp",
    "line": 159,
    "function": null,
    "comment": "wg06.cpp:159:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg06.cpp",
    "line": 163,
    "function": null,
    "comment": "wg06.cpp:163:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg06.cpp",
    "line": 164,
    "function": null,
    "comment": "wg06.cpp:164:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg06.cpp",
    "line": 165,
    "function": null,
    "comment": "wg06.cpp:165:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg06.cpp",
    "line": 166,
    "function": null,
    "comment": "wg06.cpp:166:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg06.cpp",
    "line": 167,
    "function": null,
    "comment": "wg06.cpp:167:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg06.cpp",
    "line": 168,
    "function": null,
    "comment": "wg06.cpp:168:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg06.cpp",
    "line": 169,
    "function": null,
    "comment": "wg06.cpp:169:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg06.cpp",
    "line": 170,
    "function": null,
    "comment": "wg06.cpp:170:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg06.cpp",
    "line": 171,
    "function": null,
    "comment": "wg06.cpp:171:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 180,
    "function": null,
    "comment": "wg06.cpp:180:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 187,
    "function": null,
    "comment": "wg06.cpp:187:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 191,
    "function": null,
    "comment": "wg06.cpp:191:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 201,
    "function": null,
    "comment": "wg06.cpp:201:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 202,
    "function": null,
    "comment": "wg06.cpp:202:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 204,
    "function": null,
    "comment": "wg06.cpp:204:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 209,
    "function": null,
    "comment": "wg06.cpp:209:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 211,
    "function": null,
    "comment": "wg06.cpp:211:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "wg06.cpp",
    "line": 213,
    "function": null,
    "comment": "wg06.cpp:213:  Using deprecated casting style.  Use static_cast<double>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 215,
    "function": null,
    "comment": "wg06.cpp:215:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 215,
    "function": null,
    "comment": "wg06.cpp:215:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 216,
    "function": null,
    "comment": "wg06.cpp:216:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg06.cpp",
    "line": 218,
    "function": null,
    "comment": "wg06.cpp:218:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 223,
    "function": null,
    "comment": "wg06.cpp:223:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 226,
    "function": null,
    "comment": "wg06.cpp:226:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg06.cpp",
    "line": 227,
    "function": null,
    "comment": "wg06.cpp:227:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "wg06.cpp",
    "line": 227,
    "function": null,
    "comment": "wg06.cpp:227:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 230,
    "function": null,
    "comment": "wg06.cpp:230:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg06.cpp",
    "line": 231,
    "function": null,
    "comment": "wg06.cpp:231:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "wg06.cpp",
    "line": 231,
    "function": null,
    "comment": "wg06.cpp:231:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 235,
    "function": null,
    "comment": "wg06.cpp:235:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 236,
    "function": null,
    "comment": "wg06.cpp:236:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 240,
    "function": null,
    "comment": "wg06.cpp:240:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 242,
    "function": null,
    "comment": "wg06.cpp:242:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 250,
    "function": null,
    "comment": "wg06.cpp:250:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 251,
    "function": null,
    "comment": "wg06.cpp:251:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 258,
    "function": null,
    "comment": "wg06.cpp:258:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 264,
    "function": null,
    "comment": "wg06.cpp:264:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 266,
    "function": null,
    "comment": "wg06.cpp:266:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 272,
    "function": null,
    "comment": "wg06.cpp:272:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 274,
    "function": null,
    "comment": "wg06.cpp:274:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 276,
    "function": null,
    "comment": "wg06.cpp:276:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 282,
    "function": null,
    "comment": "wg06.cpp:282:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 284,
    "function": null,
    "comment": "wg06.cpp:284:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 286,
    "function": null,
    "comment": "wg06.cpp:286:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "wg06.cpp",
    "line": 291,
    "function": null,
    "comment": "wg06.cpp:291:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 299,
    "function": null,
    "comment": "wg06.cpp:299:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 304,
    "function": null,
    "comment": "wg06.cpp:304:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 305,
    "function": null,
    "comment": "wg06.cpp:305:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 307,
    "function": null,
    "comment": "wg06.cpp:307:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 308,
    "function": null,
    "comment": "wg06.cpp:308:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 310,
    "function": null,
    "comment": "wg06.cpp:310:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 312,
    "function": null,
    "comment": "wg06.cpp:312:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 313,
    "function": null,
    "comment": "wg06.cpp:313:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 323,
    "function": null,
    "comment": "wg06.cpp:323:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 326,
    "function": null,
    "comment": "wg06.cpp:326:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 329,
    "function": null,
    "comment": "wg06.cpp:329:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 330,
    "function": null,
    "comment": "wg06.cpp:330:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 334,
    "function": null,
    "comment": "wg06.cpp:334:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 335,
    "function": null,
    "comment": "wg06.cpp:335:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 343,
    "function": null,
    "comment": "wg06.cpp:343:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 346,
    "function": null,
    "comment": "wg06.cpp:346:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 347,
    "function": null,
    "comment": "wg06.cpp:347:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 353,
    "function": null,
    "comment": "wg06.cpp:353:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 358,
    "function": null,
    "comment": "wg06.cpp:358:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 362,
    "function": null,
    "comment": "wg06.cpp:362:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 364,
    "function": null,
    "comment": "wg06.cpp:364:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 375,
    "function": null,
    "comment": "wg06.cpp:375:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 380,
    "function": null,
    "comment": "wg06.cpp:380:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 383,
    "function": null,
    "comment": "wg06.cpp:383:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 387,
    "function": null,
    "comment": "wg06.cpp:387:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 389,
    "function": null,
    "comment": "wg06.cpp:389:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 394,
    "function": null,
    "comment": "wg06.cpp:394:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 397,
    "function": null,
    "comment": "wg06.cpp:397:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 398,
    "function": null,
    "comment": "wg06.cpp:398:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 409,
    "function": null,
    "comment": "wg06.cpp:409:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 410,
    "function": null,
    "comment": "wg06.cpp:410:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "To-do comments should look like '// TODO(my_username): Stuff.'.",
    "file": "wg06.cpp",
    "line": 410,
    "function": null,
    "comment": "wg06.cpp:410:  Missing username in TODO; it should look like '// TODO(my_username): Stuff.'  [readability/todo] [2]",
    "tags": ["comments","code-standards","formatting","google-cpp","todo-comment"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 412,
    "function": null,
    "comment": "wg06.cpp:412:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 420,
    "function": null,
    "comment": "wg06.cpp:420:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 430,
    "function": null,
    "comment": "wg06.cpp:430:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 431,
    "function": null,
    "comment": "wg06.cpp:431:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 432,
    "function": null,
    "comment": "wg06.cpp:432:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "wg06.cpp",
    "line": 442,
    "function": null,
    "comment": "wg06.cpp:442:  Using C-style cast.  Use reinterpret_cast<WG0XCommand *>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 444,
    "function": null,
    "comment": "wg06.cpp:444:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 448,
    "function": null,
    "comment": "wg06.cpp:448:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 451,
    "function": null,
    "comment": "wg06.cpp:451:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 453,
    "function": null,
    "comment": "wg06.cpp:453:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 454,
    "function": null,
    "comment": "wg06.cpp:454:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 455,
    "function": null,
    "comment": "wg06.cpp:455:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 460,
    "function": null,
    "comment": "wg06.cpp:460:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 463,
    "function": null,
    "comment": "wg06.cpp:463:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 464,
    "function": null,
    "comment": "wg06.cpp:464:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 465,
    "function": null,
    "comment": "wg06.cpp:465:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 466,
    "function": null,
    "comment": "wg06.cpp:466:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 472,
    "function": null,
    "comment": "wg06.cpp:472:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 479,
    "function": null,
    "comment": "wg06.cpp:479:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 481,
    "function": null,
    "comment": "wg06.cpp:481:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "wg06.cpp",
    "line": 481,
    "function": null,
    "comment": "wg06.cpp:481:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 485,
    "function": null,
    "comment": "wg06.cpp:485:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 486,
    "function": null,
    "comment": "wg06.cpp:486:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "wg06.cpp",
    "line": 486,
    "function": null,
    "comment": "wg06.cpp:486:  Using C-style cast.  Use reinterpret_cast<WG06StatusWithAccel *>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 487,
    "function": null,
    "comment": "wg06.cpp:487:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "wg06.cpp",
    "line": 487,
    "function": null,
    "comment": "wg06.cpp:487:  Using C-style cast.  Use reinterpret_cast<WG06StatusWithAccel *>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 489,
    "function": null,
    "comment": "wg06.cpp:489:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "wg06.cpp",
    "line": 490,
    "function": null,
    "comment": "wg06.cpp:490:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 495,
    "function": null,
    "comment": "wg06.cpp:495:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 496,
    "function": null,
    "comment": "wg06.cpp:496:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "wg06.cpp",
    "line": 496,
    "function": null,
    "comment": "wg06.cpp:496:  Using C-style cast.  Use reinterpret_cast<WG06StatusWithAccelAndFT *>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 497,
    "function": null,
    "comment": "wg06.cpp:497:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "wg06.cpp",
    "line": 497,
    "function": null,
    "comment": "wg06.cpp:497:  Using C-style cast.  Use reinterpret_cast<WG06StatusWithAccelAndFT *>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 499,
    "function": null,
    "comment": "wg06.cpp:499:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 506,
    "function": null,
    "comment": "wg06.cpp:506:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 521,
    "function": null,
    "comment": "wg06.cpp:521:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 521,
    "function": null,
    "comment": "wg06.cpp:521:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 523,
    "function": null,
    "comment": "wg06.cpp:523:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 524,
    "function": null,
    "comment": "wg06.cpp:524:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 529,
    "function": null,
    "comment": "wg06.cpp:529:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 532,
    "function": null,
    "comment": "wg06.cpp:532:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "wg06.cpp",
    "line": 535,
    "function": null,
    "comment": "wg06.cpp:535:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 536,
    "function": null,
    "comment": "wg06.cpp:536:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 547,
    "function": null,
    "comment": "wg06.cpp:547:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "wg06.cpp",
    "line": 547,
    "function": null,
    "comment": "wg06.cpp:547:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 548,
    "function": null,
    "comment": "wg06.cpp:548:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "wg06.cpp",
    "line": 549,
    "function": null,
    "comment": "wg06.cpp:549:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "wg06.cpp",
    "line": 549,
    "function": null,
    "comment": "wg06.cpp:549:  Using C-style cast.  Use reinterpret_cast<WG06Pressure *>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Whitespace inside parenthesis should be consistent, and should consist of either zero or one space.",
    "file": "wg06.cpp",
    "line": 550,
    "function": null,
    "comment": "wg06.cpp:550:  Mismatching spaces inside () in for  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 560,
    "function": null,
    "comment": "wg06.cpp:560:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 562,
    "function": null,
    "comment": "wg06.cpp:562:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Whitespace inside parenthesis should be consistent, and should consist of either zero or one space.",
    "file": "wg06.cpp",
    "line": 566,
    "function": null,
    "comment": "wg06.cpp:566:  Mismatching spaces inside () in for  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 567,
    "function": null,
    "comment": "wg06.cpp:567:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 568,
    "function": null,
    "comment": "wg06.cpp:568:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 585,
    "function": null,
    "comment": "wg06.cpp:585:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 586,
    "function": null,
    "comment": "wg06.cpp:586:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 589,
    "function": null,
    "comment": "wg06.cpp:589:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 590,
    "function": null,
    "comment": "wg06.cpp:590:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 592,
    "function": null,
    "comment": "wg06.cpp:592:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 595,
    "function": null,
    "comment": "wg06.cpp:595:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 597,
    "function": null,
    "comment": "wg06.cpp:597:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 601,
    "function": null,
    "comment": "wg06.cpp:601:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 602,
    "function": null,
    "comment": "wg06.cpp:602:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 603,
    "function": null,
    "comment": "wg06.cpp:603:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 607,
    "function": null,
    "comment": "wg06.cpp:607:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 612,
    "function": null,
    "comment": "wg06.cpp:612:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 644,
    "function": null,
    "comment": "wg06.cpp:644:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 645,
    "function": null,
    "comment": "wg06.cpp:645:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 647,
    "function": null,
    "comment": "wg06.cpp:647:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "wg06.cpp",
    "line": 650,
    "function": null,
    "comment": "wg06.cpp:650:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 651,
    "function": null,
    "comment": "wg06.cpp:651:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 654,
    "function": null,
    "comment": "wg06.cpp:654:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "wg06.cpp",
    "line": 655,
    "function": null,
    "comment": "wg06.cpp:655:  Missing spaces around <<  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 657,
    "function": null,
    "comment": "wg06.cpp:657:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "wg06.cpp",
    "line": 657,
    "function": null,
    "comment": "wg06.cpp:657:  Extra space after (  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "wg06.cpp",
    "line": 657,
    "function": null,
    "comment": "wg06.cpp:657:  Using deprecated casting style.  Use static_cast<double>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 663,
    "function": null,
    "comment": "wg06.cpp:663:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 664,
    "function": null,
    "comment": "wg06.cpp:664:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "wg06.cpp",
    "line": 665,
    "function": null,
    "comment": "wg06.cpp:665:  Using deprecated casting style.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 666,
    "function": null,
    "comment": "wg06.cpp:666:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 668,
    "function": null,
    "comment": "wg06.cpp:668:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 669,
    "function": null,
    "comment": "wg06.cpp:669:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 673,
    "function": null,
    "comment": "wg06.cpp:673:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "wg06.cpp",
    "line": 673,
    "function": null,
    "comment": "wg06.cpp:673:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 674,
    "function": null,
    "comment": "wg06.cpp:674:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 679,
    "function": null,
    "comment": "wg06.cpp:679:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "wg06.cpp",
    "line": 681,
    "function": null,
    "comment": "wg06.cpp:681:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 682,
    "function": null,
    "comment": "wg06.cpp:682:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "wg06.cpp",
    "line": 683,
    "function": null,
    "comment": "wg06.cpp:683:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "wg06.cpp",
    "line": 684,
    "function": null,
    "comment": "wg06.cpp:684:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 685,
    "function": null,
    "comment": "wg06.cpp:685:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "wg06.cpp",
    "line": 686,
    "function": null,
    "comment": "wg06.cpp:686:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 705,
    "function": null,
    "comment": "wg06.cpp:705:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 706,
    "function": null,
    "comment": "wg06.cpp:706:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 706,
    "function": null,
    "comment": "wg06.cpp:706:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 711,
    "function": null,
    "comment": "wg06.cpp:711:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "wg06.cpp",
    "line": 715,
    "function": null,
    "comment": "wg06.cpp:715:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 716,
    "function": null,
    "comment": "wg06.cpp:716:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "wg06.cpp",
    "line": 718,
    "function": null,
    "comment": "wg06.cpp:718:  Using deprecated casting style.  Use static_cast<double>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 722,
    "function": null,
    "comment": "wg06.cpp:722:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "wg06.cpp",
    "line": 724,
    "function": null,
    "comment": "wg06.cpp:724:  Using deprecated casting style.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 726,
    "function": null,
    "comment": "wg06.cpp:726:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 730,
    "function": null,
    "comment": "wg06.cpp:730:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 737,
    "function": null,
    "comment": "wg06.cpp:737:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 738,
    "function": null,
    "comment": "wg06.cpp:738:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 739,
    "function": null,
    "comment": "wg06.cpp:739:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 740,
    "function": null,
    "comment": "wg06.cpp:740:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "wg06.cpp",
    "line": 743,
    "function": null,
    "comment": "wg06.cpp:743:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 744,
    "function": null,
    "comment": "wg06.cpp:744:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 746,
    "function": null,
    "comment": "wg06.cpp:746:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 748,
    "function": null,
    "comment": "wg06.cpp:748:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 755,
    "function": null,
    "comment": "wg06.cpp:755:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 767,
    "function": null,
    "comment": "wg06.cpp:767:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "wg06.cpp",
    "line": 771,
    "function": null,
    "comment": "wg06.cpp:771:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 772,
    "function": null,
    "comment": "wg06.cpp:772:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 775,
    "function": null,
    "comment": "wg06.cpp:775:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "wg06.cpp",
    "line": 778,
    "function": null,
    "comment": "wg06.cpp:778:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 779,
    "function": null,
    "comment": "wg06.cpp:779:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 789,
    "function": null,
    "comment": "wg06.cpp:789:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 790,
    "function": null,
    "comment": "wg06.cpp:790:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 797,
    "function": null,
    "comment": "wg06.cpp:797:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 802,
    "function": null,
    "comment": "wg06.cpp:802:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 803,
    "function": null,
    "comment": "wg06.cpp:803:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 805,
    "function": null,
    "comment": "wg06.cpp:805:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 808,
    "function": null,
    "comment": "wg06.cpp:808:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 813,
    "function": null,
    "comment": "wg06.cpp:813:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 814,
    "function": null,
    "comment": "wg06.cpp:814:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "wg06.cpp",
    "line": 814,
    "function": null,
    "comment": "wg06.cpp:814:  Using C-style cast.  Use reinterpret_cast<WG06StatusWithAccelAndFT *>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 825,
    "function": null,
    "comment": "wg06.cpp:825:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 826,
    "function": null,
    "comment": "wg06.cpp:826:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 831,
    "function": null,
    "comment": "wg06.cpp:831:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 836,
    "function": null,
    "comment": "wg06.cpp:836:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 839,
    "function": null,
    "comment": "wg06.cpp:839:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 845,
    "function": null,
    "comment": "wg06.cpp:845:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 860,
    "function": null,
    "comment": "wg06.cpp:860:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 861,
    "function": null,
    "comment": "wg06.cpp:861:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "wg06.cpp",
    "line": 861,
    "function": null,
    "comment": "wg06.cpp:861:  Using deprecated casting style.  Use static_cast<double>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 863,
    "function": null,
    "comment": "wg06.cpp:863:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 864,
    "function": null,
    "comment": "wg06.cpp:864:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 871,
    "function": null,
    "comment": "wg06.cpp:871:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 875,
    "function": null,
    "comment": "wg06.cpp:875:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 875,
    "function": null,
    "comment": "wg06.cpp:875:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 879,
    "function": null,
    "comment": "wg06.cpp:879:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 880,
    "function": null,
    "comment": "wg06.cpp:880:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 882,
    "function": null,
    "comment": "wg06.cpp:882:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 885,
    "function": null,
    "comment": "wg06.cpp:885:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 886,
    "function": null,
    "comment": "wg06.cpp:886:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 887,
    "function": null,
    "comment": "wg06.cpp:887:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 888,
    "function": null,
    "comment": "wg06.cpp:888:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 889,
    "function": null,
    "comment": "wg06.cpp:889:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 891,
    "function": null,
    "comment": "wg06.cpp:891:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "wg06.cpp",
    "line": 891,
    "function": null,
    "comment": "wg06.cpp:891:  Using C-style cast.  Use reinterpret_cast<WG06Pressure *>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 897,
    "function": null,
    "comment": "wg06.cpp:897:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 902,
    "function": null,
    "comment": "wg06.cpp:902:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 902,
    "function": null,
    "comment": "wg06.cpp:902:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "wg06.cpp",
    "line": 905,
    "function": null,
    "comment": "wg06.cpp:905:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 906,
    "function": null,
    "comment": "wg06.cpp:906:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 911,
    "function": null,
    "comment": "wg06.cpp:911:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 914,
    "function": null,
    "comment": "wg06.cpp:914:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 916,
    "function": null,
    "comment": "wg06.cpp:916:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 917,
    "function": null,
    "comment": "wg06.cpp:917:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "wg06.cpp",
    "line": 921,
    "function": null,
    "comment": "wg06.cpp:921:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 922,
    "function": null,
    "comment": "wg06.cpp:922:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 925,
    "function": null,
    "comment": "wg06.cpp:925:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 931,
    "function": null,
    "comment": "wg06.cpp:931:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 935,
    "function": null,
    "comment": "wg06.cpp:935:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 936,
    "function": null,
    "comment": "wg06.cpp:936:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 937,
    "function": null,
    "comment": "wg06.cpp:937:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 940,
    "function": null,
    "comment": "wg06.cpp:940:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 943,
    "function": null,
    "comment": "wg06.cpp:943:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "wg06.cpp",
    "line": 943,
    "function": null,
    "comment": "wg06.cpp:943:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 944,
    "function": null,
    "comment": "wg06.cpp:944:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 945,
    "function": null,
    "comment": "wg06.cpp:945:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 947,
    "function": null,
    "comment": "wg06.cpp:947:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "wg06.cpp",
    "line": 950,
    "function": null,
    "comment": "wg06.cpp:950:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 951,
    "function": null,
    "comment": "wg06.cpp:951:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 952,
    "function": null,
    "comment": "wg06.cpp:952:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 956,
    "function": null,
    "comment": "wg06.cpp:956:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "wg06.cpp",
    "line": 959,
    "function": null,
    "comment": "wg06.cpp:959:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 960,
    "function": null,
    "comment": "wg06.cpp:960:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 961,
    "function": null,
    "comment": "wg06.cpp:961:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 963,
    "function": null,
    "comment": "wg06.cpp:963:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "wg06.cpp",
    "line": 972,
    "function": null,
    "comment": "wg06.cpp:972:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 973,
    "function": null,
    "comment": "wg06.cpp:973:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 974,
    "function": null,
    "comment": "wg06.cpp:974:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 976,
    "function": null,
    "comment": "wg06.cpp:976:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 977,
    "function": null,
    "comment": "wg06.cpp:977:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "wg06.cpp",
    "line": 983,
    "function": null,
    "comment": "wg06.cpp:983:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 984,
    "function": null,
    "comment": "wg06.cpp:984:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 985,
    "function": null,
    "comment": "wg06.cpp:985:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 987,
    "function": null,
    "comment": "wg06.cpp:987:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "wg06.cpp",
    "line": 992,
    "function": null,
    "comment": "wg06.cpp:992:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 996,
    "function": null,
    "comment": "wg06.cpp:996:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 997,
    "function": null,
    "comment": "wg06.cpp:997:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 1002,
    "function": null,
    "comment": "wg06.cpp:1002:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 1011,
    "function": null,
    "comment": "wg06.cpp:1011:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 1012,
    "function": null,
    "comment": "wg06.cpp:1012:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "wg06.cpp",
    "line": 1012,
    "function": null,
    "comment": "wg06.cpp:1012:  Using deprecated casting style.  Use static_cast<double>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "wg06.cpp",
    "line": 1016,
    "function": null,
    "comment": "wg06.cpp:1016:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "wg06.cpp",
    "line": 1020,
    "function": null,
    "comment": "wg06.cpp:1020:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "wg06.cpp",
    "line": 1021,
    "function": null,
    "comment": "wg06.cpp:1021:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "There should be a space after a semicolon, if it does not end the line.",
    "file": "wg06.cpp",
    "line": 1021,
    "function": null,
    "comment": "wg06.cpp:1021:  Missing space after ;  [whitespace/semicolon] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 1022,
    "function": null,
    "comment": "wg06.cpp:1022:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "wg06.cpp",
    "line": 1023,
    "function": null,
    "comment": "wg06.cpp:1023:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "wg06.cpp",
    "line": 1024,
    "function": null,
    "comment": "wg06.cpp:1024:  Using deprecated casting style.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "wg06.cpp",
    "line": 1026,
    "function": null,
    "comment": "wg06.cpp:1026:  Using deprecated casting style.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 1029,
    "function": null,
    "comment": "wg06.cpp:1029:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "wg06.cpp",
    "line": 1032,
    "function": null,
    "comment": "wg06.cpp:1032:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "There should be a space after a semicolon, if it does not end the line.",
    "file": "wg06.cpp",
    "line": 1032,
    "function": null,
    "comment": "wg06.cpp:1032:  Missing space after ;  [whitespace/semicolon] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 1033,
    "function": null,
    "comment": "wg06.cpp:1033:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 1037,
    "function": null,
    "comment": "wg06.cpp:1037:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "wg06.cpp",
    "line": 1037,
    "function": null,
    "comment": "wg06.cpp:1037:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 1038,
    "function": null,
    "comment": "wg06.cpp:1038:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 1044,
    "function": null,
    "comment": "wg06.cpp:1044:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 1049,
    "function": null,
    "comment": "wg06.cpp:1049:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "wg06.cpp",
    "line": 1052,
    "function": null,
    "comment": "wg06.cpp:1052:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 1053,
    "function": null,
    "comment": "wg06.cpp:1053:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 1054,
    "function": null,
    "comment": "wg06.cpp:1054:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "wg06.cpp",
    "line": 1057,
    "function": null,
    "comment": "wg06.cpp:1057:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "wg06.cpp",
    "line": 1057,
    "function": null,
    "comment": "wg06.cpp:1057:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 1059,
    "function": null,
    "comment": "wg06.cpp:1059:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 1072,
    "function": null,
    "comment": "wg06.cpp:1072:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 1074,
    "function": null,
    "comment": "wg06.cpp:1074:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "wg06.cpp",
    "line": 1076,
    "function": null,
    "comment": "wg06.cpp:1076:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 1077,
    "function": null,
    "comment": "wg06.cpp:1077:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "wg06.cpp",
    "line": 1080,
    "function": null,
    "comment": "wg06.cpp:1080:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 1081,
    "function": null,
    "comment": "wg06.cpp:1081:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "wg06.cpp",
    "line": 1082,
    "function": null,
    "comment": "wg06.cpp:1082:  Missing spaces around ==  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "wg06.cpp",
    "line": 1082,
    "function": null,
    "comment": "wg06.cpp:1082:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 1089,
    "function": null,
    "comment": "wg06.cpp:1089:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "wg06.cpp",
    "line": 1090,
    "function": null,
    "comment": "wg06.cpp:1090:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 1091,
    "function": null,
    "comment": "wg06.cpp:1091:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "wg06.cpp",
    "line": 1094,
    "function": null,
    "comment": "wg06.cpp:1094:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 1095,
    "function": null,
    "comment": "wg06.cpp:1095:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "wg06.cpp",
    "line": 1098,
    "function": null,
    "comment": "wg06.cpp:1098:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 1099,
    "function": null,
    "comment": "wg06.cpp:1099:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 1100,
    "function": null,
    "comment": "wg06.cpp:1100:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 1101,
    "function": null,
    "comment": "wg06.cpp:1101:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "wg06.cpp",
    "line": 1101,
    "function": null,
    "comment": "wg06.cpp:1101:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 1102,
    "function": null,
    "comment": "wg06.cpp:1102:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "wg06.cpp",
    "line": 1102,
    "function": null,
    "comment": "wg06.cpp:1102:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "wg06.cpp",
    "line": 1103,
    "function": null,
    "comment": "wg06.cpp:1103:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "wg06.cpp",
    "line": 1104,
    "function": null,
    "comment": "wg06.cpp:1104:  Closing ) should be moved to the previous line  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 1109,
    "function": null,
    "comment": "wg06.cpp:1109:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 1110,
    "function": null,
    "comment": "wg06.cpp:1110:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "wg06.cpp",
    "line": 1111,
    "function": null,
    "comment": "wg06.cpp:1111:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 1112,
    "function": null,
    "comment": "wg06.cpp:1112:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 1119,
    "function": null,
    "comment": "wg06.cpp:1119:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "wg06.cpp",
    "line": 1123,
    "function": null,
    "comment": "wg06.cpp:1123:  Using deprecated casting style.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 1124,
    "function": null,
    "comment": "wg06.cpp:1124:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "wg06.cpp",
    "line": 1128,
    "function": null,
    "comment": "wg06.cpp:1128:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 1129,
    "function": null,
    "comment": "wg06.cpp:1129:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 1131,
    "function": null,
    "comment": "wg06.cpp:1131:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg06.cpp",
    "line": 1134,
    "function": null,
    "comment": "wg06.cpp:1134:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "wg06.cpp",
    "line": 1134,
    "function": null,
    "comment": "wg06.cpp:1134:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 1153,
    "function": null,
    "comment": "wg06.cpp:1153:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 1155,
    "function": null,
    "comment": "wg06.cpp:1155:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 1156,
    "function": null,
    "comment": "wg06.cpp:1156:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 1164,
    "function": null,
    "comment": "wg06.cpp:1164:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 1170,
    "function": null,
    "comment": "wg06.cpp:1170:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 1175,
    "function": null,
    "comment": "wg06.cpp:1175:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 1181,
    "function": null,
    "comment": "wg06.cpp:1181:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 1186,
    "function": null,
    "comment": "wg06.cpp:1186:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "wg06.cpp",
    "line": 1191,
    "function": null,
    "comment": "wg06.cpp:1191:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 1192,
    "function": null,
    "comment": "wg06.cpp:1192:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 1195,
    "function": null,
    "comment": "wg06.cpp:1195:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 1200,
    "function": null,
    "comment": "wg06.cpp:1200:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 1201,
    "function": null,
    "comment": "wg06.cpp:1201:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg06.cpp",
    "line": 1204,
    "function": null,
    "comment": "wg06.cpp:1204:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "wg06.cpp",
    "line": 1205,
    "function": null,
    "comment": "wg06.cpp:1205:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 1206,
    "function": null,
    "comment": "wg06.cpp:1206:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg06.cpp",
    "line": 1208,
    "function": null,
    "comment": "wg06.cpp:1208:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg06.cpp",
    "line": 1209,
    "function": null,
    "comment": "wg06.cpp:1209:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "wg06.cpp",
    "line": 1209,
    "function": null,
    "comment": "wg06.cpp:1209:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg06.cpp",
    "line": 1211,
    "function": null,
    "comment": "wg06.cpp:1211:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "wg06.cpp",
    "line": 1211,
    "function": null,
    "comment": "wg06.cpp:1211:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "wg06.cpp",
    "line": 1212,
    "function": null,
    "comment": "wg06.cpp:1212:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "wg06.cpp",
    "line": 595,
    "function": null,
    "comment": "wg06.cpp:595:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "wg06.cpp",
    "line": 726,
    "function": null,
    "comment": "wg06.cpp:726:  Add #include <algorithm> for min  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "wg06.cpp",
    "line": 1057,
    "function": null,
    "comment": "wg06.cpp:1057:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "motor_heating_model.cpp",
    "line": 39,
    "function": null,
    "comment": "motor_heating_model.cpp:39:  Include 'boost/filesystem.hpp' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "motor_heating_model.cpp",
    "line": 40,
    "function": null,
    "comment": "motor_heating_model.cpp:40:  Include 'boost/bind.hpp' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not include the C standard headers. Use the C++ headers instead.",
    "file": "motor_heating_model.cpp",
    "line": 47,
    "function": null,
    "comment": "motor_heating_model.cpp:47:  Include 'cstdio' instead of 'stdio.h'.  [build/include] [5]",
    "tags": ["hicpp","code-standards","headers","include","preprocessor","deprecation","c"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "motor_heating_model.cpp",
    "line": 48,
    "function": null,
    "comment": "motor_heating_model.cpp:48:  Include 'errno.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not include the C standard headers. Use the C++ headers instead.",
    "file": "motor_heating_model.cpp",
    "line": 48,
    "function": null,
    "comment": "motor_heating_model.cpp:48:  Include 'cerrno' instead of 'errno.h'.  [build/include] [5]",
    "tags": ["hicpp","code-standards","headers","include","preprocessor","deprecation","c"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 52,
    "function": null,
    "comment": "motor_heating_model.cpp:52:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.cpp",
    "line": 55,
    "function": null,
    "comment": "motor_heating_model.cpp:55:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 59,
    "function": null,
    "comment": "motor_heating_model.cpp:59:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.cpp",
    "line": 60,
    "function": null,
    "comment": "motor_heating_model.cpp:60:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.cpp",
    "line": 61,
    "function": null,
    "comment": "motor_heating_model.cpp:61:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "motor_heating_model.cpp",
    "line": 61,
    "function": null,
    "comment": "motor_heating_model.cpp:61:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.cpp",
    "line": 62,
    "function": null,
    "comment": "motor_heating_model.cpp:62:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.cpp",
    "line": 63,
    "function": null,
    "comment": "motor_heating_model.cpp:63:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 68,
    "function": null,
    "comment": "motor_heating_model.cpp:68:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.cpp",
    "line": 70,
    "function": null,
    "comment": "motor_heating_model.cpp:70:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 77,
    "function": null,
    "comment": "motor_heating_model.cpp:77:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.cpp",
    "line": 78,
    "function": null,
    "comment": "motor_heating_model.cpp:78:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.cpp",
    "line": 79,
    "function": null,
    "comment": "motor_heating_model.cpp:79:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.cpp",
    "line": 81,
    "function": null,
    "comment": "motor_heating_model.cpp:81:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.cpp",
    "line": 82,
    "function": null,
    "comment": "motor_heating_model.cpp:82:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.cpp",
    "line": 84,
    "function": null,
    "comment": "motor_heating_model.cpp:84:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.cpp",
    "line": 86,
    "function": null,
    "comment": "motor_heating_model.cpp:86:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.cpp",
    "line": 87,
    "function": null,
    "comment": "motor_heating_model.cpp:87:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.cpp",
    "line": 88,
    "function": null,
    "comment": "motor_heating_model.cpp:88:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 91,
    "function": null,
    "comment": "motor_heating_model.cpp:91:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 95,
    "function": null,
    "comment": "motor_heating_model.cpp:95:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 99,
    "function": null,
    "comment": "motor_heating_model.cpp:99:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.cpp",
    "line": 100,
    "function": null,
    "comment": "motor_heating_model.cpp:100:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "To-do comments should look like '// TODO(my_username): Stuff.'.",
    "file": "motor_heating_model.cpp",
    "line": 100,
    "function": null,
    "comment": "motor_heating_model.cpp:100:  Missing username in TODO; it should look like '// TODO(my_username): Stuff.'  [readability/todo] [2]",
    "tags": ["comments","code-standards","formatting","google-cpp","todo-comment"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.cpp",
    "line": 102,
    "function": null,
    "comment": "motor_heating_model.cpp:102:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 105,
    "function": null,
    "comment": "motor_heating_model.cpp:105:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 109,
    "function": null,
    "comment": "motor_heating_model.cpp:109:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 113,
    "function": null,
    "comment": "motor_heating_model.cpp:113:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "motor_heating_model.cpp",
    "line": 120,
    "function": null,
    "comment": "motor_heating_model.cpp:120:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "motor_heating_model.cpp",
    "line": 120,
    "function": null,
    "comment": "motor_heating_model.cpp:120:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "motor_heating_model.cpp",
    "line": 120,
    "function": null,
    "comment": "motor_heating_model.cpp:120:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "motor_heating_model.cpp",
    "line": 121,
    "function": null,
    "comment": "motor_heating_model.cpp:121:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "motor_heating_model.cpp",
    "line": 121,
    "function": null,
    "comment": "motor_heating_model.cpp:121:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "motor_heating_model.cpp",
    "line": 122,
    "function": null,
    "comment": "motor_heating_model.cpp:122:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "motor_heating_model.cpp",
    "line": 122,
    "function": null,
    "comment": "motor_heating_model.cpp:122:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "motor_heating_model.cpp",
    "line": 122,
    "function": null,
    "comment": "motor_heating_model.cpp:122:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "motor_heating_model.cpp",
    "line": 123,
    "function": null,
    "comment": "motor_heating_model.cpp:123:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "motor_heating_model.cpp",
    "line": 123,
    "function": null,
    "comment": "motor_heating_model.cpp:123:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "motor_heating_model.cpp",
    "line": 123,
    "function": null,
    "comment": "motor_heating_model.cpp:123:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "motor_heating_model.cpp",
    "line": 124,
    "function": null,
    "comment": "motor_heating_model.cpp:124:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "motor_heating_model.cpp",
    "line": 124,
    "function": null,
    "comment": "motor_heating_model.cpp:124:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "motor_heating_model.cpp",
    "line": 125,
    "function": null,
    "comment": "motor_heating_model.cpp:125:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 126,
    "function": null,
    "comment": "motor_heating_model.cpp:126:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.cpp",
    "line": 127,
    "function": null,
    "comment": "motor_heating_model.cpp:127:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "motor_heating_model.cpp",
    "line": 127,
    "function": null,
    "comment": "motor_heating_model.cpp:127:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "motor_heating_model.cpp",
    "line": 127,
    "function": null,
    "comment": "motor_heating_model.cpp:127:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 132,
    "function": null,
    "comment": "motor_heating_model.cpp:132:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "motor_heating_model.cpp",
    "line": 136,
    "function": null,
    "comment": "motor_heating_model.cpp:136:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 141,
    "function": null,
    "comment": "motor_heating_model.cpp:141:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 143,
    "function": null,
    "comment": "motor_heating_model.cpp:143:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.cpp",
    "line": 144,
    "function": null,
    "comment": "motor_heating_model.cpp:144:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.cpp",
    "line": 145,
    "function": null,
    "comment": "motor_heating_model.cpp:145:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 159,
    "function": null,
    "comment": "motor_heating_model.cpp:159:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.cpp",
    "line": 161,
    "function": null,
    "comment": "motor_heating_model.cpp:161:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "motor_heating_model.cpp",
    "line": 161,
    "function": null,
    "comment": "motor_heating_model.cpp:161:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 164,
    "function": null,
    "comment": "motor_heating_model.cpp:164:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "motor_heating_model.cpp",
    "line": 166,
    "function": null,
    "comment": "motor_heating_model.cpp:166:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "motor_heating_model.cpp",
    "line": 168,
    "function": null,
    "comment": "motor_heating_model.cpp:168:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 169,
    "function": null,
    "comment": "motor_heating_model.cpp:169:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "motor_heating_model.cpp",
    "line": 172,
    "function": null,
    "comment": "motor_heating_model.cpp:172:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "motor_heating_model.cpp",
    "line": 172,
    "function": null,
    "comment": "motor_heating_model.cpp:172:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.cpp",
    "line": 174,
    "function": null,
    "comment": "motor_heating_model.cpp:174:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.cpp",
    "line": 178,
    "function": null,
    "comment": "motor_heating_model.cpp:178:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 185,
    "function": null,
    "comment": "motor_heating_model.cpp:185:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 188,
    "function": null,
    "comment": "motor_heating_model.cpp:188:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.cpp",
    "line": 189,
    "function": null,
    "comment": "motor_heating_model.cpp:189:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 190,
    "function": null,
    "comment": "motor_heating_model.cpp:190:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.cpp",
    "line": 192,
    "function": null,
    "comment": "motor_heating_model.cpp:192:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 194,
    "function": null,
    "comment": "motor_heating_model.cpp:194:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.cpp",
    "line": 195,
    "function": null,
    "comment": "motor_heating_model.cpp:195:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.cpp",
    "line": 214,
    "function": null,
    "comment": "motor_heating_model.cpp:214:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.cpp",
    "line": 218,
    "function": null,
    "comment": "motor_heating_model.cpp:218:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "motor_heating_model.cpp",
    "line": 218,
    "function": null,
    "comment": "motor_heating_model.cpp:218:  Closing ) should be moved to the previous line  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 228,
    "function": null,
    "comment": "motor_heating_model.cpp:228:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.cpp",
    "line": 229,
    "function": null,
    "comment": "motor_heating_model.cpp:229:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "motor_heating_model.cpp",
    "line": 229,
    "function": null,
    "comment": "motor_heating_model.cpp:229:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.cpp",
    "line": 235,
    "function": null,
    "comment": "motor_heating_model.cpp:235:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.cpp",
    "line": 236,
    "function": null,
    "comment": "motor_heating_model.cpp:236:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.cpp",
    "line": 236,
    "function": null,
    "comment": "motor_heating_model.cpp:236:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.cpp",
    "line": 237,
    "function": null,
    "comment": "motor_heating_model.cpp:237:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.cpp",
    "line": 237,
    "function": null,
    "comment": "motor_heating_model.cpp:237:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.cpp",
    "line": 245,
    "function": null,
    "comment": "motor_heating_model.cpp:245:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.cpp",
    "line": 246,
    "function": null,
    "comment": "motor_heating_model.cpp:246:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.cpp",
    "line": 246,
    "function": null,
    "comment": "motor_heating_model.cpp:246:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.cpp",
    "line": 247,
    "function": null,
    "comment": "motor_heating_model.cpp:247:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.cpp",
    "line": 248,
    "function": null,
    "comment": "motor_heating_model.cpp:248:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.cpp",
    "line": 249,
    "function": null,
    "comment": "motor_heating_model.cpp:249:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.cpp",
    "line": 250,
    "function": null,
    "comment": "motor_heating_model.cpp:250:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.cpp",
    "line": 250,
    "function": null,
    "comment": "motor_heating_model.cpp:250:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 255,
    "function": null,
    "comment": "motor_heating_model.cpp:255:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 258,
    "function": null,
    "comment": "motor_heating_model.cpp:258:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.cpp",
    "line": 260,
    "function": null,
    "comment": "motor_heating_model.cpp:260:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 262,
    "function": null,
    "comment": "motor_heating_model.cpp:262:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.cpp",
    "line": 266,
    "function": null,
    "comment": "motor_heating_model.cpp:266:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.cpp",
    "line": 272,
    "function": null,
    "comment": "motor_heating_model.cpp:272:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.cpp",
    "line": 272,
    "function": null,
    "comment": "motor_heating_model.cpp:272:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.cpp",
    "line": 273,
    "function": null,
    "comment": "motor_heating_model.cpp:273:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 274,
    "function": null,
    "comment": "motor_heating_model.cpp:274:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.cpp",
    "line": 275,
    "function": null,
    "comment": "motor_heating_model.cpp:275:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.cpp",
    "line": 282,
    "function": null,
    "comment": "motor_heating_model.cpp:282:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.cpp",
    "line": 287,
    "function": null,
    "comment": "motor_heating_model.cpp:287:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.cpp",
    "line": 293,
    "function": null,
    "comment": "motor_heating_model.cpp:293:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "motor_heating_model.cpp",
    "line": 293,
    "function": null,
    "comment": "motor_heating_model.cpp:293:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 294,
    "function": null,
    "comment": "motor_heating_model.cpp:294:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 296,
    "function": null,
    "comment": "motor_heating_model.cpp:296:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.cpp",
    "line": 297,
    "function": null,
    "comment": "motor_heating_model.cpp:297:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.cpp",
    "line": 298,
    "function": null,
    "comment": "motor_heating_model.cpp:298:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.cpp",
    "line": 309,
    "function": null,
    "comment": "motor_heating_model.cpp:309:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 310,
    "function": null,
    "comment": "motor_heating_model.cpp:310:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.cpp",
    "line": 315,
    "function": null,
    "comment": "motor_heating_model.cpp:315:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.cpp",
    "line": 316,
    "function": null,
    "comment": "motor_heating_model.cpp:316:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.cpp",
    "line": 317,
    "function": null,
    "comment": "motor_heating_model.cpp:317:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.cpp",
    "line": 318,
    "function": null,
    "comment": "motor_heating_model.cpp:318:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.cpp",
    "line": 320,
    "function": null,
    "comment": "motor_heating_model.cpp:320:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.cpp",
    "line": 321,
    "function": null,
    "comment": "motor_heating_model.cpp:321:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "motor_heating_model.cpp",
    "line": 330,
    "function": null,
    "comment": "motor_heating_model.cpp:330:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.cpp",
    "line": 331,
    "function": null,
    "comment": "motor_heating_model.cpp:331:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.cpp",
    "line": 337,
    "function": null,
    "comment": "motor_heating_model.cpp:337:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.cpp",
    "line": 338,
    "function": null,
    "comment": "motor_heating_model.cpp:338:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.cpp",
    "line": 338,
    "function": null,
    "comment": "motor_heating_model.cpp:338:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.cpp",
    "line": 339,
    "function": null,
    "comment": "motor_heating_model.cpp:339:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 341,
    "function": null,
    "comment": "motor_heating_model.cpp:341:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.cpp",
    "line": 342,
    "function": null,
    "comment": "motor_heating_model.cpp:342:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "motor_heating_model.cpp",
    "line": 342,
    "function": null,
    "comment": "motor_heating_model.cpp:342:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "motor_heating_model.cpp",
    "line": 343,
    "function": null,
    "comment": "motor_heating_model.cpp:343:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 344,
    "function": null,
    "comment": "motor_heating_model.cpp:344:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 346,
    "function": null,
    "comment": "motor_heating_model.cpp:346:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "motor_heating_model.cpp",
    "line": 350,
    "function": null,
    "comment": "motor_heating_model.cpp:350:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 351,
    "function": null,
    "comment": "motor_heating_model.cpp:351:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.cpp",
    "line": 361,
    "function": null,
    "comment": "motor_heating_model.cpp:361:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 362,
    "function": null,
    "comment": "motor_heating_model.cpp:362:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.cpp",
    "line": 363,
    "function": null,
    "comment": "motor_heating_model.cpp:363:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.cpp",
    "line": 368,
    "function": null,
    "comment": "motor_heating_model.cpp:368:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.cpp",
    "line": 370,
    "function": null,
    "comment": "motor_heating_model.cpp:370:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.cpp",
    "line": 371,
    "function": null,
    "comment": "motor_heating_model.cpp:371:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.cpp",
    "line": 372,
    "function": null,
    "comment": "motor_heating_model.cpp:372:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.cpp",
    "line": 373,
    "function": null,
    "comment": "motor_heating_model.cpp:373:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 377,
    "function": null,
    "comment": "motor_heating_model.cpp:377:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.cpp",
    "line": 378,
    "function": null,
    "comment": "motor_heating_model.cpp:378:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.cpp",
    "line": 383,
    "function": null,
    "comment": "motor_heating_model.cpp:383:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.cpp",
    "line": 384,
    "function": null,
    "comment": "motor_heating_model.cpp:384:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.cpp",
    "line": 389,
    "function": null,
    "comment": "motor_heating_model.cpp:389:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 389,
    "function": null,
    "comment": "motor_heating_model.cpp:389:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "motor_heating_model.cpp",
    "line": 393,
    "function": null,
    "comment": "motor_heating_model.cpp:393:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.cpp",
    "line": 397,
    "function": null,
    "comment": "motor_heating_model.cpp:397:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 398,
    "function": null,
    "comment": "motor_heating_model.cpp:398:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.cpp",
    "line": 399,
    "function": null,
    "comment": "motor_heating_model.cpp:399:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 418,
    "function": null,
    "comment": "motor_heating_model.cpp:418:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.cpp",
    "line": 419,
    "function": null,
    "comment": "motor_heating_model.cpp:419:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.cpp",
    "line": 423,
    "function": null,
    "comment": "motor_heating_model.cpp:423:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "motor_heating_model.cpp",
    "line": 423,
    "function": null,
    "comment": "motor_heating_model.cpp:423:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 424,
    "function": null,
    "comment": "motor_heating_model.cpp:424:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "motor_heating_model.cpp",
    "line": 425,
    "function": null,
    "comment": "motor_heating_model.cpp:425:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.cpp",
    "line": 429,
    "function": null,
    "comment": "motor_heating_model.cpp:429:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "motor_heating_model.cpp",
    "line": 433,
    "function": null,
    "comment": "motor_heating_model.cpp:433:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "motor_heating_model.cpp",
    "line": 439,
    "function": null,
    "comment": "motor_heating_model.cpp:439:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 442,
    "function": null,
    "comment": "motor_heating_model.cpp:442:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.cpp",
    "line": 443,
    "function": null,
    "comment": "motor_heating_model.cpp:443:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.cpp",
    "line": 446,
    "function": null,
    "comment": "motor_heating_model.cpp:446:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "motor_heating_model.cpp",
    "line": 446,
    "function": null,
    "comment": "motor_heating_model.cpp:446:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 447,
    "function": null,
    "comment": "motor_heating_model.cpp:447:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.cpp",
    "line": 451,
    "function": null,
    "comment": "motor_heating_model.cpp:451:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.cpp",
    "line": 452,
    "function": null,
    "comment": "motor_heating_model.cpp:452:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "To-do comments should look like '// TODO(my_username): Stuff.'.",
    "file": "motor_heating_model.cpp",
    "line": 456,
    "function": null,
    "comment": "motor_heating_model.cpp:456:  Missing username in TODO; it should look like '// TODO(my_username): Stuff.'  [readability/todo] [2]",
    "tags": ["comments","code-standards","formatting","google-cpp","todo-comment"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.cpp",
    "line": 460,
    "function": null,
    "comment": "motor_heating_model.cpp:460:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.cpp",
    "line": 462,
    "function": null,
    "comment": "motor_heating_model.cpp:462:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 462,
    "function": null,
    "comment": "motor_heating_model.cpp:462:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.cpp",
    "line": 478,
    "function": null,
    "comment": "motor_heating_model.cpp:478:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "motor_heating_model.cpp",
    "line": 478,
    "function": null,
    "comment": "motor_heating_model.cpp:478:  Is this a non-const reference? If so, make const or use a pointer: std::string &value  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 479,
    "function": null,
    "comment": "motor_heating_model.cpp:479:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 482,
    "function": null,
    "comment": "motor_heating_model.cpp:482:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.cpp",
    "line": 483,
    "function": null,
    "comment": "motor_heating_model.cpp:483:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.cpp",
    "line": 491,
    "function": null,
    "comment": "motor_heating_model.cpp:491:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "motor_heating_model.cpp",
    "line": 491,
    "function": null,
    "comment": "motor_heating_model.cpp:491:  Is this a non-const reference? If so, make const or use a pointer: double &value  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 492,
    "function": null,
    "comment": "motor_heating_model.cpp:492:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 495,
    "function": null,
    "comment": "motor_heating_model.cpp:495:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "motor_heating_model.cpp",
    "line": 500,
    "function": null,
    "comment": "motor_heating_model.cpp:500:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 503,
    "function": null,
    "comment": "motor_heating_model.cpp:503:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.cpp",
    "line": 504,
    "function": null,
    "comment": "motor_heating_model.cpp:504:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.cpp",
    "line": 513,
    "function": null,
    "comment": "motor_heating_model.cpp:513:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "motor_heating_model.cpp",
    "line": 513,
    "function": null,
    "comment": "motor_heating_model.cpp:513:  Is this a non-const reference? If so, make const or use a pointer: int &value  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 514,
    "function": null,
    "comment": "motor_heating_model.cpp:514:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 517,
    "function": null,
    "comment": "motor_heating_model.cpp:517:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "motor_heating_model.cpp",
    "line": 522,
    "function": null,
    "comment": "motor_heating_model.cpp:522:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 525,
    "function": null,
    "comment": "motor_heating_model.cpp:525:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.cpp",
    "line": 526,
    "function": null,
    "comment": "motor_heating_model.cpp:526:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "motor_heating_model.cpp",
    "line": 535,
    "function": null,
    "comment": "motor_heating_model.cpp:535:  Is this a non-const reference? If so, make const or use a pointer: double &temperature  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 536,
    "function": null,
    "comment": "motor_heating_model.cpp:536:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 541,
    "function": null,
    "comment": "motor_heating_model.cpp:541:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 547,
    "function": null,
    "comment": "motor_heating_model.cpp:547:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 556,
    "function": null,
    "comment": "motor_heating_model.cpp:556:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 574,
    "function": null,
    "comment": "motor_heating_model.cpp:574:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.cpp",
    "line": 575,
    "function": null,
    "comment": "motor_heating_model.cpp:575:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 581,
    "function": null,
    "comment": "motor_heating_model.cpp:581:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.cpp",
    "line": 586,
    "function": null,
    "comment": "motor_heating_model.cpp:586:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 589,
    "function": null,
    "comment": "motor_heating_model.cpp:589:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.cpp",
    "line": 593,
    "function": null,
    "comment": "motor_heating_model.cpp:593:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 602,
    "function": null,
    "comment": "motor_heating_model.cpp:602:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 607,
    "function": null,
    "comment": "motor_heating_model.cpp:607:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.cpp",
    "line": 608,
    "function": null,
    "comment": "motor_heating_model.cpp:608:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.cpp",
    "line": 611,
    "function": null,
    "comment": "motor_heating_model.cpp:611:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.cpp",
    "line": 613,
    "function": null,
    "comment": "motor_heating_model.cpp:613:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.cpp",
    "line": 615,
    "function": null,
    "comment": "motor_heating_model.cpp:615:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.cpp",
    "line": 616,
    "function": null,
    "comment": "motor_heating_model.cpp:616:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.cpp",
    "line": 617,
    "function": null,
    "comment": "motor_heating_model.cpp:617:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.cpp",
    "line": 618,
    "function": null,
    "comment": "motor_heating_model.cpp:618:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.cpp",
    "line": 619,
    "function": null,
    "comment": "motor_heating_model.cpp:619:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 621,
    "function": null,
    "comment": "motor_heating_model.cpp:621:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 626,
    "function": null,
    "comment": "motor_heating_model.cpp:626:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.cpp",
    "line": 627,
    "function": null,
    "comment": "motor_heating_model.cpp:627:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.cpp",
    "line": 628,
    "function": null,
    "comment": "motor_heating_model.cpp:628:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.cpp",
    "line": 630,
    "function": null,
    "comment": "motor_heating_model.cpp:630:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 633,
    "function": null,
    "comment": "motor_heating_model.cpp:633:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.cpp",
    "line": 634,
    "function": null,
    "comment": "motor_heating_model.cpp:634:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.cpp",
    "line": 635,
    "function": null,
    "comment": "motor_heating_model.cpp:635:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.cpp",
    "line": 647,
    "function": null,
    "comment": "motor_heating_model.cpp:647:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.cpp",
    "line": 648,
    "function": null,
    "comment": "motor_heating_model.cpp:648:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 650,
    "function": null,
    "comment": "motor_heating_model.cpp:650:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.cpp",
    "line": 651,
    "function": null,
    "comment": "motor_heating_model.cpp:651:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "motor_heating_model.cpp",
    "line": 653,
    "function": null,
    "comment": "motor_heating_model.cpp:653:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 654,
    "function": null,
    "comment": "motor_heating_model.cpp:654:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 670,
    "function": null,
    "comment": "motor_heating_model.cpp:670:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "motor_heating_model.cpp",
    "line": 685,
    "function": null,
    "comment": "motor_heating_model.cpp:685:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "motor_heating_model.cpp",
    "line": 701,
    "function": null,
    "comment": "motor_heating_model.cpp:701:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "motor_heating_model.cpp",
    "line": 701,
    "function": null,
    "comment": "motor_heating_model.cpp:701:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 705,
    "function": null,
    "comment": "motor_heating_model.cpp:705:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model.cpp",
    "line": 706,
    "function": null,
    "comment": "motor_heating_model.cpp:706:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model.cpp",
    "line": 712,
    "function": null,
    "comment": "motor_heating_model.cpp:712:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model.cpp",
    "line": 717,
    "function": null,
    "comment": "motor_heating_model.cpp:717:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "motor_heating_model.cpp",
    "line": 675,
    "function": null,
    "comment": "motor_heating_model.cpp:675:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "motor_heating_model.cpp",
    "line": 303,
    "function": null,
    "comment": "motor_heating_model.cpp:303:  Add #include <algorithm> for max  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 41,
    "function": null,
    "comment": "wg_mailbox.cpp:41:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "wg_mailbox.cpp",
    "line": 55,
    "function": null,
    "comment": "wg_mailbox.cpp:55:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 58,
    "function": null,
    "comment": "wg_mailbox.cpp:58:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 61,
    "function": null,
    "comment": "wg_mailbox.cpp:61:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 64,
    "function": null,
    "comment": "wg_mailbox.cpp:64:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_mailbox.cpp",
    "line": 66,
    "function": null,
    "comment": "wg_mailbox.cpp:66:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 68,
    "function": null,
    "comment": "wg_mailbox.cpp:68:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "wg_mailbox.cpp",
    "line": 68,
    "function": null,
    "comment": "wg_mailbox.cpp:68:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_mailbox.cpp",
    "line": 72,
    "function": null,
    "comment": "wg_mailbox.cpp:72:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 74,
    "function": null,
    "comment": "wg_mailbox.cpp:74:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "wg_mailbox.cpp",
    "line": 74,
    "function": null,
    "comment": "wg_mailbox.cpp:74:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 79,
    "function": null,
    "comment": "wg_mailbox.cpp:79:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_mailbox.cpp",
    "line": 84,
    "function": null,
    "comment": "wg_mailbox.cpp:84:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 85,
    "function": null,
    "comment": "wg_mailbox.cpp:85:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "wg_mailbox.cpp",
    "line": 85,
    "function": null,
    "comment": "wg_mailbox.cpp:85:  Extra space before ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_mailbox.cpp",
    "line": 89,
    "function": null,
    "comment": "wg_mailbox.cpp:89:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 90,
    "function": null,
    "comment": "wg_mailbox.cpp:90:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 91,
    "function": null,
    "comment": "wg_mailbox.cpp:91:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "wg_mailbox.cpp",
    "line": 91,
    "function": null,
    "comment": "wg_mailbox.cpp:91:  Missing spaces around ==  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 92,
    "function": null,
    "comment": "wg_mailbox.cpp:92:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 93,
    "function": null,
    "comment": "wg_mailbox.cpp:93:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 94,
    "function": null,
    "comment": "wg_mailbox.cpp:94:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 99,
    "function": null,
    "comment": "wg_mailbox.cpp:99:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "wg_mailbox.cpp",
    "line": 99,
    "function": null,
    "comment": "wg_mailbox.cpp:99:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "wg_mailbox.cpp",
    "line": 99,
    "function": null,
    "comment": "wg_mailbox.cpp:99:  Missing spaces around ==  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 100,
    "function": null,
    "comment": "wg_mailbox.cpp:100:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 103,
    "function": null,
    "comment": "wg_mailbox.cpp:103:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 105,
    "function": null,
    "comment": "wg_mailbox.cpp:105:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "wg_mailbox.cpp",
    "line": 108,
    "function": null,
    "comment": "wg_mailbox.cpp:108:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "wg_mailbox.cpp",
    "line": 108,
    "function": null,
    "comment": "wg_mailbox.cpp:108:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 108,
    "function": null,
    "comment": "wg_mailbox.cpp:108:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 112,
    "function": null,
    "comment": "wg_mailbox.cpp:112:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "wg_mailbox.cpp",
    "line": 116,
    "function": null,
    "comment": "wg_mailbox.cpp:116:  Missing spaces around ==  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_mailbox.cpp",
    "line": 117,
    "function": null,
    "comment": "wg_mailbox.cpp:117:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 122,
    "function": null,
    "comment": "wg_mailbox.cpp:122:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_mailbox.cpp",
    "line": 126,
    "function": null,
    "comment": "wg_mailbox.cpp:126:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 127,
    "function": null,
    "comment": "wg_mailbox.cpp:127:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 129,
    "function": null,
    "comment": "wg_mailbox.cpp:129:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 132,
    "function": null,
    "comment": "wg_mailbox.cpp:132:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 134,
    "function": null,
    "comment": "wg_mailbox.cpp:134:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "wg_mailbox.cpp",
    "line": 137,
    "function": null,
    "comment": "wg_mailbox.cpp:137:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 138,
    "function": null,
    "comment": "wg_mailbox.cpp:138:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_mailbox.cpp",
    "line": 141,
    "function": null,
    "comment": "wg_mailbox.cpp:141:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 153,
    "function": null,
    "comment": "wg_mailbox.cpp:153:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 166,
    "function": null,
    "comment": "wg_mailbox.cpp:166:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg_mailbox.cpp",
    "line": 167,
    "function": null,
    "comment": "wg_mailbox.cpp:167:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg_mailbox.cpp",
    "line": 168,
    "function": null,
    "comment": "wg_mailbox.cpp:168:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 181,
    "function": null,
    "comment": "wg_mailbox.cpp:181:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 187,
    "function": null,
    "comment": "wg_mailbox.cpp:187:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 199,
    "function": null,
    "comment": "wg_mailbox.cpp:199:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 200,
    "function": null,
    "comment": "wg_mailbox.cpp:200:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "wg_mailbox.cpp",
    "line": 201,
    "function": null,
    "comment": "wg_mailbox.cpp:201:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "wg_mailbox.cpp",
    "line": 202,
    "function": null,
    "comment": "wg_mailbox.cpp:202:  Missing spaces around >  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "wg_mailbox.cpp",
    "line": 203,
    "function": null,
    "comment": "wg_mailbox.cpp:203:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 207,
    "function": null,
    "comment": "wg_mailbox.cpp:207:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "wg_mailbox.cpp",
    "line": 207,
    "function": null,
    "comment": "wg_mailbox.cpp:207:  Missing spaces around !=  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 209,
    "function": null,
    "comment": "wg_mailbox.cpp:209:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "wg_mailbox.cpp",
    "line": 209,
    "function": null,
    "comment": "wg_mailbox.cpp:209:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 221,
    "function": null,
    "comment": "wg_mailbox.cpp:221:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 222,
    "function": null,
    "comment": "wg_mailbox.cpp:222:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 228,
    "function": null,
    "comment": "wg_mailbox.cpp:228:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 231,
    "function": null,
    "comment": "wg_mailbox.cpp:231:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 237,
    "function": null,
    "comment": "wg_mailbox.cpp:237:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 243,
    "function": null,
    "comment": "wg_mailbox.cpp:243:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 247,
    "function": null,
    "comment": "wg_mailbox.cpp:247:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_mailbox.cpp",
    "line": 248,
    "function": null,
    "comment": "wg_mailbox.cpp:248:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 265,
    "function": null,
    "comment": "wg_mailbox.cpp:265:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 266,
    "function": null,
    "comment": "wg_mailbox.cpp:266:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "wg_mailbox.cpp",
    "line": 266,
    "function": null,
    "comment": "wg_mailbox.cpp:266:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "wg_mailbox.cpp",
    "line": 266,
    "function": null,
    "comment": "wg_mailbox.cpp:266:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 278,
    "function": null,
    "comment": "wg_mailbox.cpp:278:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 279,
    "function": null,
    "comment": "wg_mailbox.cpp:279:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "wg_mailbox.cpp",
    "line": 279,
    "function": null,
    "comment": "wg_mailbox.cpp:279:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 283,
    "function": null,
    "comment": "wg_mailbox.cpp:283:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 284,
    "function": null,
    "comment": "wg_mailbox.cpp:284:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 285,
    "function": null,
    "comment": "wg_mailbox.cpp:285:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 286,
    "function": null,
    "comment": "wg_mailbox.cpp:286:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 297,
    "function": null,
    "comment": "wg_mailbox.cpp:297:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "wg_mailbox.cpp",
    "line": 297,
    "function": null,
    "comment": "wg_mailbox.cpp:297:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 308,
    "function": null,
    "comment": "wg_mailbox.cpp:308:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "wg_mailbox.cpp",
    "line": 309,
    "function": null,
    "comment": "wg_mailbox.cpp:309:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "wg_mailbox.cpp",
    "line": 311,
    "function": null,
    "comment": "wg_mailbox.cpp:311:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 313,
    "function": null,
    "comment": "wg_mailbox.cpp:313:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 320,
    "function": null,
    "comment": "wg_mailbox.cpp:320:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 321,
    "function": null,
    "comment": "wg_mailbox.cpp:321:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 322,
    "function": null,
    "comment": "wg_mailbox.cpp:322:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 326,
    "function": null,
    "comment": "wg_mailbox.cpp:326:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 329,
    "function": null,
    "comment": "wg_mailbox.cpp:329:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 334,
    "function": null,
    "comment": "wg_mailbox.cpp:334:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 335,
    "function": null,
    "comment": "wg_mailbox.cpp:335:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_mailbox.cpp",
    "line": 336,
    "function": null,
    "comment": "wg_mailbox.cpp:336:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 340,
    "function": null,
    "comment": "wg_mailbox.cpp:340:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 343,
    "function": null,
    "comment": "wg_mailbox.cpp:343:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 344,
    "function": null,
    "comment": "wg_mailbox.cpp:344:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 345,
    "function": null,
    "comment": "wg_mailbox.cpp:345:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 360,
    "function": null,
    "comment": "wg_mailbox.cpp:360:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "wg_mailbox.cpp",
    "line": 364,
    "function": null,
    "comment": "wg_mailbox.cpp:364:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "wg_mailbox.cpp",
    "line": 368,
    "function": null,
    "comment": "wg_mailbox.cpp:368:  Missing spaces around !=  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 371,
    "function": null,
    "comment": "wg_mailbox.cpp:371:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 372,
    "function": null,
    "comment": "wg_mailbox.cpp:372:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 372,
    "function": null,
    "comment": "wg_mailbox.cpp:372:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "wg_mailbox.cpp",
    "line": 374,
    "function": null,
    "comment": "wg_mailbox.cpp:374:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_mailbox.cpp",
    "line": 376,
    "function": null,
    "comment": "wg_mailbox.cpp:376:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 379,
    "function": null,
    "comment": "wg_mailbox.cpp:379:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 382,
    "function": null,
    "comment": "wg_mailbox.cpp:382:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "wg_mailbox.cpp",
    "line": 383,
    "function": null,
    "comment": "wg_mailbox.cpp:383:  Missing spaces around !=  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 388,
    "function": null,
    "comment": "wg_mailbox.cpp:388:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 389,
    "function": null,
    "comment": "wg_mailbox.cpp:389:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 391,
    "function": null,
    "comment": "wg_mailbox.cpp:391:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 392,
    "function": null,
    "comment": "wg_mailbox.cpp:392:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 393,
    "function": null,
    "comment": "wg_mailbox.cpp:393:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 393,
    "function": null,
    "comment": "wg_mailbox.cpp:393:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 394,
    "function": null,
    "comment": "wg_mailbox.cpp:394:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 395,
    "function": null,
    "comment": "wg_mailbox.cpp:395:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 412,
    "function": null,
    "comment": "wg_mailbox.cpp:412:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "wg_mailbox.cpp",
    "line": 416,
    "function": null,
    "comment": "wg_mailbox.cpp:416:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "wg_mailbox.cpp",
    "line": 420,
    "function": null,
    "comment": "wg_mailbox.cpp:420:  Missing spaces around !=  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 423,
    "function": null,
    "comment": "wg_mailbox.cpp:423:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 424,
    "function": null,
    "comment": "wg_mailbox.cpp:424:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 424,
    "function": null,
    "comment": "wg_mailbox.cpp:424:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "wg_mailbox.cpp",
    "line": 426,
    "function": null,
    "comment": "wg_mailbox.cpp:426:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_mailbox.cpp",
    "line": 428,
    "function": null,
    "comment": "wg_mailbox.cpp:428:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 431,
    "function": null,
    "comment": "wg_mailbox.cpp:431:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 434,
    "function": null,
    "comment": "wg_mailbox.cpp:434:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "wg_mailbox.cpp",
    "line": 435,
    "function": null,
    "comment": "wg_mailbox.cpp:435:  Missing spaces around !=  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 440,
    "function": null,
    "comment": "wg_mailbox.cpp:440:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 441,
    "function": null,
    "comment": "wg_mailbox.cpp:441:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 443,
    "function": null,
    "comment": "wg_mailbox.cpp:443:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 444,
    "function": null,
    "comment": "wg_mailbox.cpp:444:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 445,
    "function": null,
    "comment": "wg_mailbox.cpp:445:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 445,
    "function": null,
    "comment": "wg_mailbox.cpp:445:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 446,
    "function": null,
    "comment": "wg_mailbox.cpp:446:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 447,
    "function": null,
    "comment": "wg_mailbox.cpp:447:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_mailbox.cpp",
    "line": 447,
    "function": null,
    "comment": "wg_mailbox.cpp:447:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_mailbox.cpp",
    "line": 466,
    "function": null,
    "comment": "wg_mailbox.cpp:466:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 467,
    "function": null,
    "comment": "wg_mailbox.cpp:467:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 468,
    "function": null,
    "comment": "wg_mailbox.cpp:468:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 474,
    "function": null,
    "comment": "wg_mailbox.cpp:474:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "wg_mailbox.cpp",
    "line": 474,
    "function": null,
    "comment": "wg_mailbox.cpp:474:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 478,
    "function": null,
    "comment": "wg_mailbox.cpp:478:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 480,
    "function": null,
    "comment": "wg_mailbox.cpp:480:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 482,
    "function": null,
    "comment": "wg_mailbox.cpp:482:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 487,
    "function": null,
    "comment": "wg_mailbox.cpp:487:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 489,
    "function": null,
    "comment": "wg_mailbox.cpp:489:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 513,
    "function": null,
    "comment": "wg_mailbox.cpp:513:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 514,
    "function": null,
    "comment": "wg_mailbox.cpp:514:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 516,
    "function": null,
    "comment": "wg_mailbox.cpp:516:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 519,
    "function": null,
    "comment": "wg_mailbox.cpp:519:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 521,
    "function": null,
    "comment": "wg_mailbox.cpp:521:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "wg_mailbox.cpp",
    "line": 521,
    "function": null,
    "comment": "wg_mailbox.cpp:521:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "wg_mailbox.cpp",
    "line": 522,
    "function": null,
    "comment": "wg_mailbox.cpp:522:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "wg_mailbox.cpp",
    "line": 523,
    "function": null,
    "comment": "wg_mailbox.cpp:523:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 525,
    "function": null,
    "comment": "wg_mailbox.cpp:525:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_mailbox.cpp",
    "line": 529,
    "function": null,
    "comment": "wg_mailbox.cpp:529:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg_mailbox.cpp",
    "line": 529,
    "function": null,
    "comment": "wg_mailbox.cpp:529:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "wg_mailbox.cpp",
    "line": 529,
    "function": null,
    "comment": "wg_mailbox.cpp:529:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 542,
    "function": null,
    "comment": "wg_mailbox.cpp:542:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 543,
    "function": null,
    "comment": "wg_mailbox.cpp:543:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 544,
    "function": null,
    "comment": "wg_mailbox.cpp:544:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 548,
    "function": null,
    "comment": "wg_mailbox.cpp:548:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 550,
    "function": null,
    "comment": "wg_mailbox.cpp:550:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 555,
    "function": null,
    "comment": "wg_mailbox.cpp:555:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 556,
    "function": null,
    "comment": "wg_mailbox.cpp:556:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_mailbox.cpp",
    "line": 558,
    "function": null,
    "comment": "wg_mailbox.cpp:558:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "wg_mailbox.cpp",
    "line": 561,
    "function": null,
    "comment": "wg_mailbox.cpp:561:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 562,
    "function": null,
    "comment": "wg_mailbox.cpp:562:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 563,
    "function": null,
    "comment": "wg_mailbox.cpp:563:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "wg_mailbox.cpp",
    "line": 564,
    "function": null,
    "comment": "wg_mailbox.cpp:564:  Missing spaces around <=  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 566,
    "function": null,
    "comment": "wg_mailbox.cpp:566:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 570,
    "function": null,
    "comment": "wg_mailbox.cpp:570:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 570,
    "function": null,
    "comment": "wg_mailbox.cpp:570:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 571,
    "function": null,
    "comment": "wg_mailbox.cpp:571:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_mailbox.cpp",
    "line": 572,
    "function": null,
    "comment": "wg_mailbox.cpp:572:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 573,
    "function": null,
    "comment": "wg_mailbox.cpp:573:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 576,
    "function": null,
    "comment": "wg_mailbox.cpp:576:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 583,
    "function": null,
    "comment": "wg_mailbox.cpp:583:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 586,
    "function": null,
    "comment": "wg_mailbox.cpp:586:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 593,
    "function": null,
    "comment": "wg_mailbox.cpp:593:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_mailbox.cpp",
    "line": 597,
    "function": null,
    "comment": "wg_mailbox.cpp:597:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 597,
    "function": null,
    "comment": "wg_mailbox.cpp:597:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 598,
    "function": null,
    "comment": "wg_mailbox.cpp:598:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 602,
    "function": null,
    "comment": "wg_mailbox.cpp:602:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_mailbox.cpp",
    "line": 603,
    "function": null,
    "comment": "wg_mailbox.cpp:603:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 605,
    "function": null,
    "comment": "wg_mailbox.cpp:605:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_mailbox.cpp",
    "line": 613,
    "function": null,
    "comment": "wg_mailbox.cpp:613:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 613,
    "function": null,
    "comment": "wg_mailbox.cpp:613:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 614,
    "function": null,
    "comment": "wg_mailbox.cpp:614:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "wg_mailbox.cpp",
    "line": 616,
    "function": null,
    "comment": "wg_mailbox.cpp:616:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 619,
    "function": null,
    "comment": "wg_mailbox.cpp:619:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "wg_mailbox.cpp",
    "line": 625,
    "function": null,
    "comment": "wg_mailbox.cpp:625:  Missing spaces around !=  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 628,
    "function": null,
    "comment": "wg_mailbox.cpp:628:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 629,
    "function": null,
    "comment": "wg_mailbox.cpp:629:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_mailbox.cpp",
    "line": 630,
    "function": null,
    "comment": "wg_mailbox.cpp:630:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 630,
    "function": null,
    "comment": "wg_mailbox.cpp:630:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 631,
    "function": null,
    "comment": "wg_mailbox.cpp:631:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_mailbox.cpp",
    "line": 637,
    "function": null,
    "comment": "wg_mailbox.cpp:637:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 639,
    "function": null,
    "comment": "wg_mailbox.cpp:639:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_mailbox.cpp",
    "line": 640,
    "function": null,
    "comment": "wg_mailbox.cpp:640:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "wg_mailbox.cpp",
    "line": 641,
    "function": null,
    "comment": "wg_mailbox.cpp:641:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 646,
    "function": null,
    "comment": "wg_mailbox.cpp:646:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 647,
    "function": null,
    "comment": "wg_mailbox.cpp:647:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_mailbox.cpp",
    "line": 647,
    "function": null,
    "comment": "wg_mailbox.cpp:647:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 648,
    "function": null,
    "comment": "wg_mailbox.cpp:648:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_mailbox.cpp",
    "line": 649,
    "function": null,
    "comment": "wg_mailbox.cpp:649:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "wg_mailbox.cpp",
    "line": 650,
    "function": null,
    "comment": "wg_mailbox.cpp:650:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "wg_mailbox.cpp",
    "line": 651,
    "function": null,
    "comment": "wg_mailbox.cpp:651:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "wg_mailbox.cpp",
    "line": 655,
    "function": null,
    "comment": "wg_mailbox.cpp:655:  Missing spaces around !=  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 658,
    "function": null,
    "comment": "wg_mailbox.cpp:658:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 660,
    "function": null,
    "comment": "wg_mailbox.cpp:660:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 661,
    "function": null,
    "comment": "wg_mailbox.cpp:661:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 662,
    "function": null,
    "comment": "wg_mailbox.cpp:662:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 663,
    "function": null,
    "comment": "wg_mailbox.cpp:663:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 664,
    "function": null,
    "comment": "wg_mailbox.cpp:664:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_mailbox.cpp",
    "line": 664,
    "function": null,
    "comment": "wg_mailbox.cpp:664:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_mailbox.cpp",
    "line": 681,
    "function": null,
    "comment": "wg_mailbox.cpp:681:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 682,
    "function": null,
    "comment": "wg_mailbox.cpp:682:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 685,
    "function": null,
    "comment": "wg_mailbox.cpp:685:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 686,
    "function": null,
    "comment": "wg_mailbox.cpp:686:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 692,
    "function": null,
    "comment": "wg_mailbox.cpp:692:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "wg_mailbox.cpp",
    "line": 692,
    "function": null,
    "comment": "wg_mailbox.cpp:692:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 695,
    "function": null,
    "comment": "wg_mailbox.cpp:695:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 696,
    "function": null,
    "comment": "wg_mailbox.cpp:696:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 705,
    "function": null,
    "comment": "wg_mailbox.cpp:705:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 706,
    "function": null,
    "comment": "wg_mailbox.cpp:706:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 707,
    "function": null,
    "comment": "wg_mailbox.cpp:707:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Use 2 spaces for indentation.",
    "file": "wg_mailbox.cpp",
    "line": 709,
    "function": null,
    "comment": "wg_mailbox.cpp:709:  Weird number of spaces at line-start.  Are you using a 2-space indent?  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","indentation"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 719,
    "function": null,
    "comment": "wg_mailbox.cpp:719:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "wg_mailbox.cpp",
    "line": 719,
    "function": null,
    "comment": "wg_mailbox.cpp:719:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 725,
    "function": null,
    "comment": "wg_mailbox.cpp:725:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 727,
    "function": null,
    "comment": "wg_mailbox.cpp:727:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 730,
    "function": null,
    "comment": "wg_mailbox.cpp:730:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 733,
    "function": null,
    "comment": "wg_mailbox.cpp:733:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "wg_mailbox.cpp",
    "line": 734,
    "function": null,
    "comment": "wg_mailbox.cpp:734:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 735,
    "function": null,
    "comment": "wg_mailbox.cpp:735:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "wg_mailbox.cpp",
    "line": 735,
    "function": null,
    "comment": "wg_mailbox.cpp:735:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "wg_mailbox.cpp",
    "line": 736,
    "function": null,
    "comment": "wg_mailbox.cpp:736:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "wg_mailbox.cpp",
    "line": 738,
    "function": null,
    "comment": "wg_mailbox.cpp:738:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "wg_mailbox.cpp",
    "line": 739,
    "function": null,
    "comment": "wg_mailbox.cpp:739:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 740,
    "function": null,
    "comment": "wg_mailbox.cpp:740:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 747,
    "function": null,
    "comment": "wg_mailbox.cpp:747:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "wg_mailbox.cpp",
    "line": 748,
    "function": null,
    "comment": "wg_mailbox.cpp:748:  Missing spaces around >=  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 749,
    "function": null,
    "comment": "wg_mailbox.cpp:749:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 752,
    "function": null,
    "comment": "wg_mailbox.cpp:752:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 754,
    "function": null,
    "comment": "wg_mailbox.cpp:754:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 758,
    "function": null,
    "comment": "wg_mailbox.cpp:758:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 761,
    "function": null,
    "comment": "wg_mailbox.cpp:761:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 762,
    "function": null,
    "comment": "wg_mailbox.cpp:762:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 763,
    "function": null,
    "comment": "wg_mailbox.cpp:763:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 766,
    "function": null,
    "comment": "wg_mailbox.cpp:766:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 766,
    "function": null,
    "comment": "wg_mailbox.cpp:766:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 769,
    "function": null,
    "comment": "wg_mailbox.cpp:769:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_mailbox.cpp",
    "line": 770,
    "function": null,
    "comment": "wg_mailbox.cpp:770:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 771,
    "function": null,
    "comment": "wg_mailbox.cpp:771:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 776,
    "function": null,
    "comment": "wg_mailbox.cpp:776:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 779,
    "function": null,
    "comment": "wg_mailbox.cpp:779:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 779,
    "function": null,
    "comment": "wg_mailbox.cpp:779:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 780,
    "function": null,
    "comment": "wg_mailbox.cpp:780:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 781,
    "function": null,
    "comment": "wg_mailbox.cpp:781:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_mailbox.cpp",
    "line": 781,
    "function": null,
    "comment": "wg_mailbox.cpp:781:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 788,
    "function": null,
    "comment": "wg_mailbox.cpp:788:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_mailbox.cpp",
    "line": 789,
    "function": null,
    "comment": "wg_mailbox.cpp:789:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 793,
    "function": null,
    "comment": "wg_mailbox.cpp:793:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_mailbox.cpp",
    "line": 812,
    "function": null,
    "comment": "wg_mailbox.cpp:812:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 813,
    "function": null,
    "comment": "wg_mailbox.cpp:813:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 821,
    "function": null,
    "comment": "wg_mailbox.cpp:821:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_mailbox.cpp",
    "line": 831,
    "function": null,
    "comment": "wg_mailbox.cpp:831:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 832,
    "function": null,
    "comment": "wg_mailbox.cpp:832:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 834,
    "function": null,
    "comment": "wg_mailbox.cpp:834:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "wg_mailbox.cpp",
    "line": 834,
    "function": null,
    "comment": "wg_mailbox.cpp:834:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 839,
    "function": null,
    "comment": "wg_mailbox.cpp:839:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 840,
    "function": null,
    "comment": "wg_mailbox.cpp:840:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 841,
    "function": null,
    "comment": "wg_mailbox.cpp:841:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 848,
    "function": null,
    "comment": "wg_mailbox.cpp:848:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 849,
    "function": null,
    "comment": "wg_mailbox.cpp:849:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_mailbox.cpp",
    "line": 849,
    "function": null,
    "comment": "wg_mailbox.cpp:849:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 850,
    "function": null,
    "comment": "wg_mailbox.cpp:850:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 851,
    "function": null,
    "comment": "wg_mailbox.cpp:851:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 855,
    "function": null,
    "comment": "wg_mailbox.cpp:855:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 856,
    "function": null,
    "comment": "wg_mailbox.cpp:856:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 857,
    "function": null,
    "comment": "wg_mailbox.cpp:857:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 862,
    "function": null,
    "comment": "wg_mailbox.cpp:862:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 864,
    "function": null,
    "comment": "wg_mailbox.cpp:864:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 865,
    "function": null,
    "comment": "wg_mailbox.cpp:865:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 866,
    "function": null,
    "comment": "wg_mailbox.cpp:866:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 872,
    "function": null,
    "comment": "wg_mailbox.cpp:872:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "wg_mailbox.cpp",
    "line": 874,
    "function": null,
    "comment": "wg_mailbox.cpp:874:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 874,
    "function": null,
    "comment": "wg_mailbox.cpp:874:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_mailbox.cpp",
    "line": 874,
    "function": null,
    "comment": "wg_mailbox.cpp:874:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "To-do comments should look like '// TODO(my_username): Stuff.'.",
    "file": "wg_mailbox.cpp",
    "line": 876,
    "function": null,
    "comment": "wg_mailbox.cpp:876:  Missing username in TODO; it should look like '// TODO(my_username): Stuff.'  [readability/todo] [2]",
    "tags": ["comments","code-standards","formatting","google-cpp","todo-comment"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_mailbox.cpp",
    "line": 877,
    "function": null,
    "comment": "wg_mailbox.cpp:877:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "To-do comments should look like '// TODO(my_username): Stuff.'.",
    "file": "wg_mailbox.cpp",
    "line": 879,
    "function": null,
    "comment": "wg_mailbox.cpp:879:  Missing username in TODO; it should look like '// TODO(my_username): Stuff.'  [readability/todo] [2]",
    "tags": ["comments","code-standards","formatting","google-cpp","todo-comment"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 881,
    "function": null,
    "comment": "wg_mailbox.cpp:881:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "wg_mailbox.cpp",
    "line": 883,
    "function": null,
    "comment": "wg_mailbox.cpp:883:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 885,
    "function": null,
    "comment": "wg_mailbox.cpp:885:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 886,
    "function": null,
    "comment": "wg_mailbox.cpp:886:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 890,
    "function": null,
    "comment": "wg_mailbox.cpp:890:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 891,
    "function": null,
    "comment": "wg_mailbox.cpp:891:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 892,
    "function": null,
    "comment": "wg_mailbox.cpp:892:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 893,
    "function": null,
    "comment": "wg_mailbox.cpp:893:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "wg_mailbox.cpp",
    "line": 903,
    "function": null,
    "comment": "wg_mailbox.cpp:903:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 906,
    "function": null,
    "comment": "wg_mailbox.cpp:906:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 907,
    "function": null,
    "comment": "wg_mailbox.cpp:907:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 917,
    "function": null,
    "comment": "wg_mailbox.cpp:917:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 918,
    "function": null,
    "comment": "wg_mailbox.cpp:918:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_mailbox.cpp",
    "line": 939,
    "function": null,
    "comment": "wg_mailbox.cpp:939:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 940,
    "function": null,
    "comment": "wg_mailbox.cpp:940:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_mailbox.cpp",
    "line": 959,
    "function": null,
    "comment": "wg_mailbox.cpp:959:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 960,
    "function": null,
    "comment": "wg_mailbox.cpp:960:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 962,
    "function": null,
    "comment": "wg_mailbox.cpp:962:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "wg_mailbox.cpp",
    "line": 962,
    "function": null,
    "comment": "wg_mailbox.cpp:962:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 965,
    "function": null,
    "comment": "wg_mailbox.cpp:965:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "wg_mailbox.cpp",
    "line": 967,
    "function": null,
    "comment": "wg_mailbox.cpp:967:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 967,
    "function": null,
    "comment": "wg_mailbox.cpp:967:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_mailbox.cpp",
    "line": 969,
    "function": null,
    "comment": "wg_mailbox.cpp:969:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 969,
    "function": null,
    "comment": "wg_mailbox.cpp:969:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 972,
    "function": null,
    "comment": "wg_mailbox.cpp:972:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 973,
    "function": null,
    "comment": "wg_mailbox.cpp:973:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 975,
    "function": null,
    "comment": "wg_mailbox.cpp:975:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 981,
    "function": null,
    "comment": "wg_mailbox.cpp:981:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_mailbox.cpp",
    "line": 982,
    "function": null,
    "comment": "wg_mailbox.cpp:982:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "To-do comments should look like '// TODO(my_username): Stuff.'.",
    "file": "wg_mailbox.cpp",
    "line": 982,
    "function": null,
    "comment": "wg_mailbox.cpp:982:  Missing username in TODO; it should look like '// TODO(my_username): Stuff.'  [readability/todo] [2]",
    "tags": ["comments","code-standards","formatting","google-cpp","todo-comment"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 984,
    "function": null,
    "comment": "wg_mailbox.cpp:984:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 985,
    "function": null,
    "comment": "wg_mailbox.cpp:985:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 988,
    "function": null,
    "comment": "wg_mailbox.cpp:988:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_mailbox.cpp",
    "line": 993,
    "function": null,
    "comment": "wg_mailbox.cpp:993:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 994,
    "function": null,
    "comment": "wg_mailbox.cpp:994:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_mailbox.cpp",
    "line": 995,
    "function": null,
    "comment": "wg_mailbox.cpp:995:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg_mailbox.cpp",
    "line": 995,
    "function": null,
    "comment": "wg_mailbox.cpp:995:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg_mailbox.cpp",
    "line": 1008,
    "function": null,
    "comment": "wg_mailbox.cpp:1008:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "wg_mailbox.cpp",
    "line": 1008,
    "function": null,
    "comment": "wg_mailbox.cpp:1008:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not include the C standard headers. Use the C++ headers instead.",
    "file": "ethercat_com.cpp",
    "line": 36,
    "function": null,
    "comment": "ethercat_com.cpp:36:  Include 'cstdio' instead of 'stdio.h'.  [build/include] [5]",
    "tags": ["hicpp","code-standards","headers","include","preprocessor","deprecation","c"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "ethercat_com.cpp",
    "line": 37,
    "function": null,
    "comment": "ethercat_com.cpp:37:  Include 'errno.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not include the C standard headers. Use the C++ headers instead.",
    "file": "ethercat_com.cpp",
    "line": 37,
    "function": null,
    "comment": "ethercat_com.cpp:37:  Include 'cerrno' instead of 'errno.h'.  [build/include] [5]",
    "tags": ["hicpp","code-standards","headers","include","preprocessor","deprecation","c"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_com.cpp",
    "line": 39,
    "function": null,
    "comment": "ethercat_com.cpp:39:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_com.cpp",
    "line": 41,
    "function": null,
    "comment": "ethercat_com.cpp:41:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_com.cpp",
    "line": 41,
    "function": null,
    "comment": "ethercat_com.cpp:41:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_com.cpp",
    "line": 45,
    "function": null,
    "comment": "ethercat_com.cpp:45:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_com.cpp",
    "line": 46,
    "function": null,
    "comment": "ethercat_com.cpp:46:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_com.cpp",
    "line": 51,
    "function": null,
    "comment": "ethercat_com.cpp:51:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "ethercat_com.cpp",
    "line": 52,
    "function": null,
    "comment": "ethercat_com.cpp:52:  Missing spaces around !=  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_com.cpp",
    "line": 54,
    "function": null,
    "comment": "ethercat_com.cpp:54:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_com.cpp",
    "line": 60,
    "function": null,
    "comment": "ethercat_com.cpp:60:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_com.cpp",
    "line": 64,
    "function": null,
    "comment": "ethercat_com.cpp:64:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_com.cpp",
    "line": 70,
    "function": null,
    "comment": "ethercat_com.cpp:70:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "ethercat_com.cpp",
    "line": 71,
    "function": null,
    "comment": "ethercat_com.cpp:71:  Missing spaces around !=  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_com.cpp",
    "line": 76,
    "function": null,
    "comment": "ethercat_com.cpp:76:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "ethercat_com.cpp",
    "line": 76,
    "function": null,
    "comment": "ethercat_com.cpp:76:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_com.cpp",
    "line": 81,
    "function": null,
    "comment": "ethercat_com.cpp:81:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "ethercat_com.cpp",
    "line": 81,
    "function": null,
    "comment": "ethercat_com.cpp:81:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "ethercat_com.cpp",
    "line": 86,
    "function": null,
    "comment": "ethercat_com.cpp:86:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "ethercat_com.cpp",
    "line": 89,
    "function": null,
    "comment": "ethercat_com.cpp:89:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_com.cpp",
    "line": 91,
    "function": null,
    "comment": "ethercat_com.cpp:91:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "ethercat_com.cpp",
    "line": 91,
    "function": null,
    "comment": "ethercat_com.cpp:91:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "ethercat_com.cpp",
    "line": 94,
    "function": null,
    "comment": "ethercat_com.cpp:94:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_com.cpp",
    "line": 96,
    "function": null,
    "comment": "ethercat_com.cpp:96:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "ethercat_com.cpp",
    "line": 96,
    "function": null,
    "comment": "ethercat_com.cpp:96:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_com.cpp",
    "line": 101,
    "function": null,
    "comment": "ethercat_com.cpp:101:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_com.cpp",
    "line": 102,
    "function": null,
    "comment": "ethercat_com.cpp:102:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "ethercat_com.cpp",
    "line": 103,
    "function": null,
    "comment": "ethercat_com.cpp:103:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_com.cpp",
    "line": 104,
    "function": null,
    "comment": "ethercat_com.cpp:104:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_com.cpp",
    "line": 108,
    "function": null,
    "comment": "ethercat_com.cpp:108:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_com.cpp",
    "line": 119,
    "function": null,
    "comment": "ethercat_com.cpp:119:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_com.cpp",
    "line": 133,
    "function": null,
    "comment": "ethercat_com.cpp:133:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_com.cpp",
    "line": 147,
    "function": null,
    "comment": "ethercat_com.cpp:147:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_com.cpp",
    "line": 152,
    "function": null,
    "comment": "ethercat_com.cpp:152:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "ethercat_com.cpp",
    "line": 155,
    "function": null,
    "comment": "ethercat_com.cpp:155:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_com.cpp",
    "line": 156,
    "function": null,
    "comment": "ethercat_com.cpp:156:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_com.cpp",
    "line": 160,
    "function": null,
    "comment": "ethercat_com.cpp:160:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "ethercat_com.cpp",
    "line": 161,
    "function": null,
    "comment": "ethercat_com.cpp:161:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "ethercat_com.cpp",
    "line": 162,
    "function": null,
    "comment": "ethercat_com.cpp:162:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "ethercat_com.cpp",
    "line": 163,
    "function": null,
    "comment": "ethercat_com.cpp:163:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_com.cpp",
    "line": 169,
    "function": null,
    "comment": "ethercat_com.cpp:169:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "ethercat_com.cpp",
    "line": 170,
    "function": null,
    "comment": "ethercat_com.cpp:170:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_com.cpp",
    "line": 174,
    "function": null,
    "comment": "ethercat_com.cpp:174:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_com.cpp",
    "line": 175,
    "function": null,
    "comment": "ethercat_com.cpp:175:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_com.cpp",
    "line": 176,
    "function": null,
    "comment": "ethercat_com.cpp:176:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_com.cpp",
    "line": 183,
    "function": null,
    "comment": "ethercat_com.cpp:183:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "ethercat_com.cpp",
    "line": 184,
    "function": null,
    "comment": "ethercat_com.cpp:184:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "ethercat_com.cpp",
    "line": 185,
    "function": null,
    "comment": "ethercat_com.cpp:185:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "ethercat_com.cpp",
    "line": 186,
    "function": null,
    "comment": "ethercat_com.cpp:186:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_com.cpp",
    "line": 195,
    "function": null,
    "comment": "ethercat_com.cpp:195:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "ethercat_com.cpp",
    "line": 201,
    "function": null,
    "comment": "ethercat_com.cpp:201:  Missing spaces around !=  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_com.cpp",
    "line": 205,
    "function": null,
    "comment": "ethercat_com.cpp:205:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_com.cpp",
    "line": 207,
    "function": null,
    "comment": "ethercat_com.cpp:207:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "wg0x.cpp",
    "line": 37,
    "function": null,
    "comment": "wg0x.cpp:37:  Found C system header after C++ system header. Should be: wg0x.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not include the C standard headers. Use the C++ headers instead.",
    "file": "wg0x.cpp",
    "line": 37,
    "function": null,
    "comment": "wg0x.cpp:37:  Include 'cmath' instead of 'math.h'.  [build/include] [5]",
    "tags": ["hicpp","code-standards","headers","include","preprocessor","deprecation","c"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "wg0x.cpp",
    "line": 38,
    "function": null,
    "comment": "wg0x.cpp:38:  Found C system header after C++ system header. Should be: wg0x.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not include the C standard headers. Use the C++ headers instead.",
    "file": "wg0x.cpp",
    "line": 38,
    "function": null,
    "comment": "wg0x.cpp:38:  Include 'cstddef' instead of 'stddef.h'.  [build/include] [5]",
    "tags": ["hicpp","code-standards","headers","include","preprocessor","deprecation","c"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "wg0x.cpp",
    "line": 40,
    "function": null,
    "comment": "wg0x.cpp:40:  Found C system header after C++ system header. Should be: wg0x.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "wg0x.cpp",
    "line": 42,
    "function": null,
    "comment": "wg0x.cpp:42:  Found C system header after C++ system header. Should be: wg0x.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "wg0x.cpp",
    "line": 43,
    "function": null,
    "comment": "wg0x.cpp:43:  Found C system header after C++ system header. Should be: wg0x.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "wg0x.cpp",
    "line": 44,
    "function": null,
    "comment": "wg0x.cpp:44:  Found C system header after C++ system header. Should be: wg0x.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "wg0x.cpp",
    "line": 45,
    "function": null,
    "comment": "wg0x.cpp:45:  Found C system header after C++ system header. Should be: wg0x.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "wg0x.cpp",
    "line": 47,
    "function": null,
    "comment": "wg0x.cpp:47:  Found C system header after C++ system header. Should be: wg0x.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "wg0x.cpp",
    "line": 48,
    "function": null,
    "comment": "wg0x.cpp:48:  Found C system header after C++ system header. Should be: wg0x.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "wg0x.cpp",
    "line": 49,
    "function": null,
    "comment": "wg0x.cpp:49:  Found C system header after C++ system header. Should be: wg0x.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 78,
    "function": null,
    "comment": "wg0x.cpp:78:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 89,
    "function": null,
    "comment": "wg0x.cpp:89:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 90,
    "function": null,
    "comment": "wg0x.cpp:90:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 92,
    "function": null,
    "comment": "wg0x.cpp:92:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 94,
    "function": null,
    "comment": "wg0x.cpp:94:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 95,
    "function": null,
    "comment": "wg0x.cpp:95:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 96,
    "function": null,
    "comment": "wg0x.cpp:96:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 97,
    "function": null,
    "comment": "wg0x.cpp:97:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 98,
    "function": null,
    "comment": "wg0x.cpp:98:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 99,
    "function": null,
    "comment": "wg0x.cpp:99:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 100,
    "function": null,
    "comment": "wg0x.cpp:100:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 101,
    "function": null,
    "comment": "wg0x.cpp:101:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 102,
    "function": null,
    "comment": "wg0x.cpp:102:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 131,
    "function": null,
    "comment": "wg0x.cpp:131:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "wg0x.cpp",
    "line": 134,
    "function": null,
    "comment": "wg0x.cpp:134:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "wg0x.cpp",
    "line": 135,
    "function": null,
    "comment": "wg0x.cpp:135:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 136,
    "function": null,
    "comment": "wg0x.cpp:136:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 139,
    "function": null,
    "comment": "wg0x.cpp:139:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 146,
    "function": null,
    "comment": "wg0x.cpp:146:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 163,
    "function": null,
    "comment": "wg0x.cpp:163:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 168,
    "function": null,
    "comment": "wg0x.cpp:168:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "wg0x.cpp",
    "line": 169,
    "function": null,
    "comment": "wg0x.cpp:169:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 183,
    "function": null,
    "comment": "wg0x.cpp:183:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "wg0x.cpp",
    "line": 186,
    "function": null,
    "comment": "wg0x.cpp:186:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 190,
    "function": null,
    "comment": "wg0x.cpp:190:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 198,
    "function": null,
    "comment": "wg0x.cpp:198:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 207,
    "function": null,
    "comment": "wg0x.cpp:207:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 208,
    "function": null,
    "comment": "wg0x.cpp:208:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 219,
    "function": null,
    "comment": "wg0x.cpp:219:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 220,
    "function": null,
    "comment": "wg0x.cpp:220:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 227,
    "function": null,
    "comment": "wg0x.cpp:227:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 231,
    "function": null,
    "comment": "wg0x.cpp:231:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 237,
    "function": null,
    "comment": "wg0x.cpp:237:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 239,
    "function": null,
    "comment": "wg0x.cpp:239:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 242,
    "function": null,
    "comment": "wg0x.cpp:242:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 243,
    "function": null,
    "comment": "wg0x.cpp:243:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 247,
    "function": null,
    "comment": "wg0x.cpp:247:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 251,
    "function": null,
    "comment": "wg0x.cpp:251:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 254,
    "function": null,
    "comment": "wg0x.cpp:254:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 263,
    "function": null,
    "comment": "wg0x.cpp:263:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "wg0x.cpp",
    "line": 266,
    "function": null,
    "comment": "wg0x.cpp:266:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 268,
    "function": null,
    "comment": "wg0x.cpp:268:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 270,
    "function": null,
    "comment": "wg0x.cpp:270:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg0x.cpp",
    "line": 273,
    "function": null,
    "comment": "wg0x.cpp:273:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 274,
    "function": null,
    "comment": "wg0x.cpp:274:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 278,
    "function": null,
    "comment": "wg0x.cpp:278:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 280,
    "function": null,
    "comment": "wg0x.cpp:280:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 281,
    "function": null,
    "comment": "wg0x.cpp:281:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 285,
    "function": null,
    "comment": "wg0x.cpp:285:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 293,
    "function": null,
    "comment": "wg0x.cpp:293:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 296,
    "function": null,
    "comment": "wg0x.cpp:296:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "wg0x.cpp",
    "line": 297,
    "function": null,
    "comment": "wg0x.cpp:297:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 301,
    "function": null,
    "comment": "wg0x.cpp:301:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 302,
    "function": null,
    "comment": "wg0x.cpp:302:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 306,
    "function": null,
    "comment": "wg0x.cpp:306:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 309,
    "function": null,
    "comment": "wg0x.cpp:309:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 311,
    "function": null,
    "comment": "wg0x.cpp:311:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 316,
    "function": null,
    "comment": "wg0x.cpp:316:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "wg0x.cpp",
    "line": 316,
    "function": null,
    "comment": "wg0x.cpp:316:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 317,
    "function": null,
    "comment": "wg0x.cpp:317:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 321,
    "function": null,
    "comment": "wg0x.cpp:321:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "To-do comments should look like '// TODO(my_username): Stuff.'.",
    "file": "wg0x.cpp",
    "line": 321,
    "function": null,
    "comment": "wg0x.cpp:321:  Missing username in TODO; it should look like '// TODO(my_username): Stuff.'  [readability/todo] [2]",
    "tags": ["comments","code-standards","formatting","google-cpp","todo-comment"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 322,
    "function": null,
    "comment": "wg0x.cpp:322:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 331,
    "function": null,
    "comment": "wg0x.cpp:331:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 337,
    "function": null,
    "comment": "wg0x.cpp:337:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 343,
    "function": null,
    "comment": "wg0x.cpp:343:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 347,
    "function": null,
    "comment": "wg0x.cpp:347:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 349,
    "function": null,
    "comment": "wg0x.cpp:349:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 353,
    "function": null,
    "comment": "wg0x.cpp:353:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 357,
    "function": null,
    "comment": "wg0x.cpp:357:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 361,
    "function": null,
    "comment": "wg0x.cpp:361:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 367,
    "function": null,
    "comment": "wg0x.cpp:367:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 370,
    "function": null,
    "comment": "wg0x.cpp:370:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 371,
    "function": null,
    "comment": "wg0x.cpp:371:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 372,
    "function": null,
    "comment": "wg0x.cpp:372:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 373,
    "function": null,
    "comment": "wg0x.cpp:373:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 373,
    "function": null,
    "comment": "wg0x.cpp:373:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 375,
    "function": null,
    "comment": "wg0x.cpp:375:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 375,
    "function": null,
    "comment": "wg0x.cpp:375:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 378,
    "function": null,
    "comment": "wg0x.cpp:378:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 380,
    "function": null,
    "comment": "wg0x.cpp:380:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 381,
    "function": null,
    "comment": "wg0x.cpp:381:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 385,
    "function": null,
    "comment": "wg0x.cpp:385:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 394,
    "function": null,
    "comment": "wg0x.cpp:394:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 395,
    "function": null,
    "comment": "wg0x.cpp:395:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 396,
    "function": null,
    "comment": "wg0x.cpp:396:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 396,
    "function": null,
    "comment": "wg0x.cpp:396:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 408,
    "function": null,
    "comment": "wg0x.cpp:408:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 410,
    "function": null,
    "comment": "wg0x.cpp:410:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "wg0x.cpp",
    "line": 415,
    "function": null,
    "comment": "wg0x.cpp:415:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 416,
    "function": null,
    "comment": "wg0x.cpp:416:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 417,
    "function": null,
    "comment": "wg0x.cpp:417:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 418,
    "function": null,
    "comment": "wg0x.cpp:418:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 424,
    "function": null,
    "comment": "wg0x.cpp:424:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 425,
    "function": null,
    "comment": "wg0x.cpp:425:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 430,
    "function": null,
    "comment": "wg0x.cpp:430:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "wg0x.cpp",
    "line": 430,
    "function": null,
    "comment": "wg0x.cpp:430:  Using deprecated casting style.  Use static_cast<double>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 433,
    "function": null,
    "comment": "wg0x.cpp:433:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 437,
    "function": null,
    "comment": "wg0x.cpp:437:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 439,
    "function": null,
    "comment": "wg0x.cpp:439:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 441,
    "function": null,
    "comment": "wg0x.cpp:441:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 443,
    "function": null,
    "comment": "wg0x.cpp:443:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 445,
    "function": null,
    "comment": "wg0x.cpp:445:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 446,
    "function": null,
    "comment": "wg0x.cpp:446:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 458,
    "function": null,
    "comment": "wg0x.cpp:458:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 465,
    "function": null,
    "comment": "wg0x.cpp:465:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 468,
    "function": null,
    "comment": "wg0x.cpp:468:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 469,
    "function": null,
    "comment": "wg0x.cpp:469:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "wg0x.cpp",
    "line": 472,
    "function": null,
    "comment": "wg0x.cpp:472:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 478,
    "function": null,
    "comment": "wg0x.cpp:478:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 479,
    "function": null,
    "comment": "wg0x.cpp:479:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 485,
    "function": null,
    "comment": "wg0x.cpp:485:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 488,
    "function": null,
    "comment": "wg0x.cpp:488:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 489,
    "function": null,
    "comment": "wg0x.cpp:489:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "wg0x.cpp",
    "line": 494,
    "function": null,
    "comment": "wg0x.cpp:494:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 495,
    "function": null,
    "comment": "wg0x.cpp:495:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 496,
    "function": null,
    "comment": "wg0x.cpp:496:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "wg0x.cpp",
    "line": 499,
    "function": null,
    "comment": "wg0x.cpp:499:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 500,
    "function": null,
    "comment": "wg0x.cpp:500:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 501,
    "function": null,
    "comment": "wg0x.cpp:501:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "wg0x.cpp",
    "line": 503,
    "function": null,
    "comment": "wg0x.cpp:503:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 504,
    "function": null,
    "comment": "wg0x.cpp:504:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 510,
    "function": null,
    "comment": "wg0x.cpp:510:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 511,
    "function": null,
    "comment": "wg0x.cpp:511:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 511,
    "function": null,
    "comment": "wg0x.cpp:511:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 512,
    "function": null,
    "comment": "wg0x.cpp:512:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "wg0x.cpp",
    "line": 516,
    "function": null,
    "comment": "wg0x.cpp:516:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 517,
    "function": null,
    "comment": "wg0x.cpp:517:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 518,
    "function": null,
    "comment": "wg0x.cpp:518:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 519,
    "function": null,
    "comment": "wg0x.cpp:519:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "wg0x.cpp",
    "line": 520,
    "function": null,
    "comment": "wg0x.cpp:520:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "wg0x.cpp",
    "line": 521,
    "function": null,
    "comment": "wg0x.cpp:521:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "wg0x.cpp",
    "line": 525,
    "function": null,
    "comment": "wg0x.cpp:525:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 526,
    "function": null,
    "comment": "wg0x.cpp:526:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 527,
    "function": null,
    "comment": "wg0x.cpp:527:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 528,
    "function": null,
    "comment": "wg0x.cpp:528:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg0x.cpp",
    "line": 539,
    "function": null,
    "comment": "wg0x.cpp:539:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "wg0x.cpp",
    "line": 544,
    "function": null,
    "comment": "wg0x.cpp:544:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "wg0x.cpp",
    "line": 545,
    "function": null,
    "comment": "wg0x.cpp:545:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 549,
    "function": null,
    "comment": "wg0x.cpp:549:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 556,
    "function": null,
    "comment": "wg0x.cpp:556:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 557,
    "function": null,
    "comment": "wg0x.cpp:557:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 563,
    "function": null,
    "comment": "wg0x.cpp:563:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 565,
    "function": null,
    "comment": "wg0x.cpp:565:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 566,
    "function": null,
    "comment": "wg0x.cpp:566:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 567,
    "function": null,
    "comment": "wg0x.cpp:567:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 571,
    "function": null,
    "comment": "wg0x.cpp:571:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 572,
    "function": null,
    "comment": "wg0x.cpp:572:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 579,
    "function": null,
    "comment": "wg0x.cpp:579:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 580,
    "function": null,
    "comment": "wg0x.cpp:580:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 582,
    "function": null,
    "comment": "wg0x.cpp:582:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 583,
    "function": null,
    "comment": "wg0x.cpp:583:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 589,
    "function": null,
    "comment": "wg0x.cpp:589:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "wg0x.cpp",
    "line": 589,
    "function": null,
    "comment": "wg0x.cpp:589:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 590,
    "function": null,
    "comment": "wg0x.cpp:590:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 596,
    "function": null,
    "comment": "wg0x.cpp:596:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "wg0x.cpp",
    "line": 596,
    "function": null,
    "comment": "wg0x.cpp:596:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "wg0x.cpp",
    "line": 604,
    "function": null,
    "comment": "wg0x.cpp:604:  Using C-style cast.  Use reinterpret_cast<WG0XCommand *>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "wg0x.cpp",
    "line": 606,
    "function": null,
    "comment": "wg0x.cpp:606:  Using deprecated casting style.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 607,
    "function": null,
    "comment": "wg0x.cpp:607:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 610,
    "function": null,
    "comment": "wg0x.cpp:610:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 614,
    "function": null,
    "comment": "wg0x.cpp:614:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "wg0x.cpp",
    "line": 618,
    "function": null,
    "comment": "wg0x.cpp:618:  Using C-style cast.  Use reinterpret_cast<WG0XStatus *>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "wg0x.cpp",
    "line": 619,
    "function": null,
    "comment": "wg0x.cpp:619:  Using C-style cast.  Use reinterpret_cast<WG0XStatus *>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 623,
    "function": null,
    "comment": "wg0x.cpp:623:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 624,
    "function": null,
    "comment": "wg0x.cpp:624:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 626,
    "function": null,
    "comment": "wg0x.cpp:626:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 628,
    "function": null,
    "comment": "wg0x.cpp:628:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "wg0x.cpp",
    "line": 628,
    "function": null,
    "comment": "wg0x.cpp:628:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 629,
    "function": null,
    "comment": "wg0x.cpp:629:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "wg0x.cpp",
    "line": 629,
    "function": null,
    "comment": "wg0x.cpp:629:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 630,
    "function": null,
    "comment": "wg0x.cpp:630:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 632,
    "function": null,
    "comment": "wg0x.cpp:632:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 634,
    "function": null,
    "comment": "wg0x.cpp:634:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "wg0x.cpp",
    "line": 634,
    "function": null,
    "comment": "wg0x.cpp:634:  Using deprecated casting style.  Use static_cast<double>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 635,
    "function": null,
    "comment": "wg0x.cpp:635:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 636,
    "function": null,
    "comment": "wg0x.cpp:636:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 639,
    "function": null,
    "comment": "wg0x.cpp:639:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 641,
    "function": null,
    "comment": "wg0x.cpp:641:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 642,
    "function": null,
    "comment": "wg0x.cpp:642:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 643,
    "function": null,
    "comment": "wg0x.cpp:643:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 644,
    "function": null,
    "comment": "wg0x.cpp:644:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "wg0x.cpp",
    "line": 644,
    "function": null,
    "comment": "wg0x.cpp:644:  Using deprecated casting style.  Use static_cast<double>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 645,
    "function": null,
    "comment": "wg0x.cpp:645:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "wg0x.cpp",
    "line": 645,
    "function": null,
    "comment": "wg0x.cpp:645:  Using deprecated casting style.  Use static_cast<double>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "wg0x.cpp",
    "line": 646,
    "function": null,
    "comment": "wg0x.cpp:646:  Using deprecated casting style.  Use static_cast<bool>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 648,
    "function": null,
    "comment": "wg0x.cpp:648:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 649,
    "function": null,
    "comment": "wg0x.cpp:649:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 651,
    "function": null,
    "comment": "wg0x.cpp:651:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 652,
    "function": null,
    "comment": "wg0x.cpp:652:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 656,
    "function": null,
    "comment": "wg0x.cpp:656:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 658,
    "function": null,
    "comment": "wg0x.cpp:658:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 658,
    "function": null,
    "comment": "wg0x.cpp:658:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 665,
    "function": null,
    "comment": "wg0x.cpp:665:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg0x.cpp",
    "line": 667,
    "function": null,
    "comment": "wg0x.cpp:667:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg0x.cpp",
    "line": 668,
    "function": null,
    "comment": "wg0x.cpp:668:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 685,
    "function": null,
    "comment": "wg0x.cpp:685:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 696,
    "function": null,
    "comment": "wg0x.cpp:696:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "wg0x.cpp",
    "line": 700,
    "function": null,
    "comment": "wg0x.cpp:700:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 710,
    "function": null,
    "comment": "wg0x.cpp:710:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 720,
    "function": null,
    "comment": "wg0x.cpp:720:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 722,
    "function": null,
    "comment": "wg0x.cpp:722:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 723,
    "function": null,
    "comment": "wg0x.cpp:723:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "wg0x.cpp",
    "line": 723,
    "function": null,
    "comment": "wg0x.cpp:723:  Using deprecated casting style.  Use static_cast<double>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "wg0x.cpp",
    "line": 724,
    "function": null,
    "comment": "wg0x.cpp:724:  Using deprecated casting style.  Use static_cast<double>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 736,
    "function": null,
    "comment": "wg0x.cpp:736:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "wg0x.cpp",
    "line": 737,
    "function": null,
    "comment": "wg0x.cpp:737:  Using deprecated casting style.  Use static_cast<double>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 741,
    "function": null,
    "comment": "wg0x.cpp:741:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 742,
    "function": null,
    "comment": "wg0x.cpp:742:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 743,
    "function": null,
    "comment": "wg0x.cpp:743:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 749,
    "function": null,
    "comment": "wg0x.cpp:749:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 754,
    "function": null,
    "comment": "wg0x.cpp:754:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 757,
    "function": null,
    "comment": "wg0x.cpp:757:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 758,
    "function": null,
    "comment": "wg0x.cpp:758:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "wg0x.cpp",
    "line": 758,
    "function": null,
    "comment": "wg0x.cpp:758:  Using deprecated casting style.  Use static_cast<double>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 759,
    "function": null,
    "comment": "wg0x.cpp:759:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "wg0x.cpp",
    "line": 759,
    "function": null,
    "comment": "wg0x.cpp:759:  Using deprecated casting style.  Use static_cast<double>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 772,
    "function": null,
    "comment": "wg0x.cpp:772:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 778,
    "function": null,
    "comment": "wg0x.cpp:778:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 779,
    "function": null,
    "comment": "wg0x.cpp:779:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 780,
    "function": null,
    "comment": "wg0x.cpp:780:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "wg0x.cpp",
    "line": 780,
    "function": null,
    "comment": "wg0x.cpp:780:  Using deprecated casting style.  Use static_cast<double>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 781,
    "function": null,
    "comment": "wg0x.cpp:781:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 783,
    "function": null,
    "comment": "wg0x.cpp:783:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 784,
    "function": null,
    "comment": "wg0x.cpp:784:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 790,
    "function": null,
    "comment": "wg0x.cpp:790:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 791,
    "function": null,
    "comment": "wg0x.cpp:791:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg0x.cpp",
    "line": 798,
    "function": null,
    "comment": "wg0x.cpp:798:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "wg0x.cpp",
    "line": 798,
    "function": null,
    "comment": "wg0x.cpp:798:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 801,
    "function": null,
    "comment": "wg0x.cpp:801:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "wg0x.cpp",
    "line": 802,
    "function": null,
    "comment": "wg0x.cpp:802:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 803,
    "function": null,
    "comment": "wg0x.cpp:803:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 810,
    "function": null,
    "comment": "wg0x.cpp:810:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "wg0x.cpp",
    "line": 816,
    "function": null,
    "comment": "wg0x.cpp:816:  Using deprecated casting style.  Use static_cast<bool>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 818,
    "function": null,
    "comment": "wg0x.cpp:818:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 824,
    "function": null,
    "comment": "wg0x.cpp:824:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 830,
    "function": null,
    "comment": "wg0x.cpp:830:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 835,
    "function": null,
    "comment": "wg0x.cpp:835:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 837,
    "function": null,
    "comment": "wg0x.cpp:837:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "wg0x.cpp",
    "line": 838,
    "function": null,
    "comment": "wg0x.cpp:838:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 839,
    "function": null,
    "comment": "wg0x.cpp:839:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 840,
    "function": null,
    "comment": "wg0x.cpp:840:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 848,
    "function": null,
    "comment": "wg0x.cpp:848:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 849,
    "function": null,
    "comment": "wg0x.cpp:849:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 855,
    "function": null,
    "comment": "wg0x.cpp:855:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 858,
    "function": null,
    "comment": "wg0x.cpp:858:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 859,
    "function": null,
    "comment": "wg0x.cpp:859:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 861,
    "function": null,
    "comment": "wg0x.cpp:861:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 874,
    "function": null,
    "comment": "wg0x.cpp:874:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 875,
    "function": null,
    "comment": "wg0x.cpp:875:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 876,
    "function": null,
    "comment": "wg0x.cpp:876:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 885,
    "function": null,
    "comment": "wg0x.cpp:885:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 886,
    "function": null,
    "comment": "wg0x.cpp:886:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "wg0x.cpp",
    "line": 886,
    "function": null,
    "comment": "wg0x.cpp:886:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 892,
    "function": null,
    "comment": "wg0x.cpp:892:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 893,
    "function": null,
    "comment": "wg0x.cpp:893:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg0x.cpp",
    "line": 905,
    "function": null,
    "comment": "wg0x.cpp:905:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 914,
    "function": null,
    "comment": "wg0x.cpp:914:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 919,
    "function": null,
    "comment": "wg0x.cpp:919:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 924,
    "function": null,
    "comment": "wg0x.cpp:924:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 928,
    "function": null,
    "comment": "wg0x.cpp:928:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 929,
    "function": null,
    "comment": "wg0x.cpp:929:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg0x.cpp",
    "line": 930,
    "function": null,
    "comment": "wg0x.cpp:930:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "wg0x.cpp",
    "line": 930,
    "function": null,
    "comment": "wg0x.cpp:930:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "wg0x.cpp",
    "line": 931,
    "function": null,
    "comment": "wg0x.cpp:931:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 931,
    "function": null,
    "comment": "wg0x.cpp:931:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "wg0x.cpp",
    "line": 932,
    "function": null,
    "comment": "wg0x.cpp:932:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "wg0x.cpp",
    "line": 934,
    "function": null,
    "comment": "wg0x.cpp:934:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "wg0x.cpp",
    "line": 934,
    "function": null,
    "comment": "wg0x.cpp:934:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg0x.cpp",
    "line": 934,
    "function": null,
    "comment": "wg0x.cpp:934:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "wg0x.cpp",
    "line": 934,
    "function": null,
    "comment": "wg0x.cpp:934:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "wg0x.cpp",
    "line": 935,
    "function": null,
    "comment": "wg0x.cpp:935:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 935,
    "function": null,
    "comment": "wg0x.cpp:935:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "wg0x.cpp",
    "line": 936,
    "function": null,
    "comment": "wg0x.cpp:936:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg0x.cpp",
    "line": 944,
    "function": null,
    "comment": "wg0x.cpp:944:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 945,
    "function": null,
    "comment": "wg0x.cpp:945:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 946,
    "function": null,
    "comment": "wg0x.cpp:946:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 950,
    "function": null,
    "comment": "wg0x.cpp:950:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg0x.cpp",
    "line": 951,
    "function": null,
    "comment": "wg0x.cpp:951:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "wg0x.cpp",
    "line": 952,
    "function": null,
    "comment": "wg0x.cpp:952:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 959,
    "function": null,
    "comment": "wg0x.cpp:959:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 960,
    "function": null,
    "comment": "wg0x.cpp:960:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 967,
    "function": null,
    "comment": "wg0x.cpp:967:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 970,
    "function": null,
    "comment": "wg0x.cpp:970:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 971,
    "function": null,
    "comment": "wg0x.cpp:971:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 974,
    "function": null,
    "comment": "wg0x.cpp:974:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 977,
    "function": null,
    "comment": "wg0x.cpp:977:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 978,
    "function": null,
    "comment": "wg0x.cpp:978:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 998,
    "function": null,
    "comment": "wg0x.cpp:998:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 999,
    "function": null,
    "comment": "wg0x.cpp:999:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 1002,
    "function": null,
    "comment": "wg0x.cpp:1002:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 1003,
    "function": null,
    "comment": "wg0x.cpp:1003:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 1009,
    "function": null,
    "comment": "wg0x.cpp:1009:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 1017,
    "function": null,
    "comment": "wg0x.cpp:1017:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 1018,
    "function": null,
    "comment": "wg0x.cpp:1018:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 1021,
    "function": null,
    "comment": "wg0x.cpp:1021:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 1022,
    "function": null,
    "comment": "wg0x.cpp:1022:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 1051,
    "function": null,
    "comment": "wg0x.cpp:1051:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 1052,
    "function": null,
    "comment": "wg0x.cpp:1052:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 1053,
    "function": null,
    "comment": "wg0x.cpp:1053:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 1057,
    "function": null,
    "comment": "wg0x.cpp:1057:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 1076,
    "function": null,
    "comment": "wg0x.cpp:1076:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 1077,
    "function": null,
    "comment": "wg0x.cpp:1077:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 1078,
    "function": null,
    "comment": "wg0x.cpp:1078:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 1079,
    "function": null,
    "comment": "wg0x.cpp:1079:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 1083,
    "function": null,
    "comment": "wg0x.cpp:1083:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 1084,
    "function": null,
    "comment": "wg0x.cpp:1084:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 1101,
    "function": null,
    "comment": "wg0x.cpp:1101:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 1102,
    "function": null,
    "comment": "wg0x.cpp:1102:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 1106,
    "function": null,
    "comment": "wg0x.cpp:1106:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 1107,
    "function": null,
    "comment": "wg0x.cpp:1107:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 1118,
    "function": null,
    "comment": "wg0x.cpp:1118:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 1119,
    "function": null,
    "comment": "wg0x.cpp:1119:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "wg0x.cpp",
    "line": 1124,
    "function": null,
    "comment": "wg0x.cpp:1124:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "wg0x.cpp",
    "line": 1124,
    "function": null,
    "comment": "wg0x.cpp:1124:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 1133,
    "function": null,
    "comment": "wg0x.cpp:1133:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 1134,
    "function": null,
    "comment": "wg0x.cpp:1134:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 1155,
    "function": null,
    "comment": "wg0x.cpp:1155:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 1156,
    "function": null,
    "comment": "wg0x.cpp:1156:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "wg0x.cpp",
    "line": 1157,
    "function": null,
    "comment": "wg0x.cpp:1157:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg0x.cpp",
    "line": 1163,
    "function": null,
    "comment": "wg0x.cpp:1163:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "wg0x.cpp",
    "line": 1166,
    "function": null,
    "comment": "wg0x.cpp:1166:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "wg0x.cpp",
    "line": 1166,
    "function": null,
    "comment": "wg0x.cpp:1166:  Missing space before ( in while(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 1169,
    "function": null,
    "comment": "wg0x.cpp:1169:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 1173,
    "function": null,
    "comment": "wg0x.cpp:1173:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "wg0x.cpp",
    "line": 1182,
    "function": null,
    "comment": "wg0x.cpp:1182:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 1189,
    "function": null,
    "comment": "wg0x.cpp:1189:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg0x.cpp",
    "line": 1191,
    "function": null,
    "comment": "wg0x.cpp:1191:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg0x.cpp",
    "line": 1192,
    "function": null,
    "comment": "wg0x.cpp:1192:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg0x.cpp",
    "line": 1196,
    "function": null,
    "comment": "wg0x.cpp:1196:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg0x.cpp",
    "line": 1200,
    "function": null,
    "comment": "wg0x.cpp:1200:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg0x.cpp",
    "line": 1204,
    "function": null,
    "comment": "wg0x.cpp:1204:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg0x.cpp",
    "line": 1208,
    "function": null,
    "comment": "wg0x.cpp:1208:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg0x.cpp",
    "line": 1212,
    "function": null,
    "comment": "wg0x.cpp:1212:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg0x.cpp",
    "line": 1216,
    "function": null,
    "comment": "wg0x.cpp:1216:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "wg0x.cpp",
    "line": 1216,
    "function": null,
    "comment": "wg0x.cpp:1216:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 1222,
    "function": null,
    "comment": "wg0x.cpp:1222:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 1223,
    "function": null,
    "comment": "wg0x.cpp:1223:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 1223,
    "function": null,
    "comment": "wg0x.cpp:1223:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 1224,
    "function": null,
    "comment": "wg0x.cpp:1224:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 1225,
    "function": null,
    "comment": "wg0x.cpp:1225:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "wg0x.cpp",
    "line": 1225,
    "function": null,
    "comment": "wg0x.cpp:1225:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 1227,
    "function": null,
    "comment": "wg0x.cpp:1227:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 1231,
    "function": null,
    "comment": "wg0x.cpp:1231:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 1236,
    "function": null,
    "comment": "wg0x.cpp:1236:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 1239,
    "function": null,
    "comment": "wg0x.cpp:1239:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 1241,
    "function": null,
    "comment": "wg0x.cpp:1241:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 1244,
    "function": null,
    "comment": "wg0x.cpp:1244:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "wg0x.cpp",
    "line": 1244,
    "function": null,
    "comment": "wg0x.cpp:1244:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 1245,
    "function": null,
    "comment": "wg0x.cpp:1245:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 1252,
    "function": null,
    "comment": "wg0x.cpp:1252:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 1253,
    "function": null,
    "comment": "wg0x.cpp:1253:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 1263,
    "function": null,
    "comment": "wg0x.cpp:1263:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 1265,
    "function": null,
    "comment": "wg0x.cpp:1265:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 1276,
    "function": null,
    "comment": "wg0x.cpp:1276:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 1277,
    "function": null,
    "comment": "wg0x.cpp:1277:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 1281,
    "function": null,
    "comment": "wg0x.cpp:1281:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 1282,
    "function": null,
    "comment": "wg0x.cpp:1282:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 1285,
    "function": null,
    "comment": "wg0x.cpp:1285:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 1287,
    "function": null,
    "comment": "wg0x.cpp:1287:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "wg0x.cpp",
    "line": 1292,
    "function": null,
    "comment": "wg0x.cpp:1292:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "wg0x.cpp",
    "line": 1294,
    "function": null,
    "comment": "wg0x.cpp:1294:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 1300,
    "function": null,
    "comment": "wg0x.cpp:1300:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 1302,
    "function": null,
    "comment": "wg0x.cpp:1302:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 1303,
    "function": null,
    "comment": "wg0x.cpp:1303:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 1304,
    "function": null,
    "comment": "wg0x.cpp:1304:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 1305,
    "function": null,
    "comment": "wg0x.cpp:1305:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "wg0x.cpp",
    "line": 1305,
    "function": null,
    "comment": "wg0x.cpp:1305:  Using deprecated casting style.  Use static_cast<double>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 1308,
    "function": null,
    "comment": "wg0x.cpp:1308:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "wg0x.cpp",
    "line": 1308,
    "function": null,
    "comment": "wg0x.cpp:1308:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 1309,
    "function": null,
    "comment": "wg0x.cpp:1309:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 1310,
    "function": null,
    "comment": "wg0x.cpp:1310:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 1312,
    "function": null,
    "comment": "wg0x.cpp:1312:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 1313,
    "function": null,
    "comment": "wg0x.cpp:1313:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "wg0x.cpp",
    "line": 1313,
    "function": null,
    "comment": "wg0x.cpp:1313:  Using deprecated casting style.  Use static_cast<double>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 1316,
    "function": null,
    "comment": "wg0x.cpp:1316:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 1317,
    "function": null,
    "comment": "wg0x.cpp:1317:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 1323,
    "function": null,
    "comment": "wg0x.cpp:1323:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 1324,
    "function": null,
    "comment": "wg0x.cpp:1324:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "wg0x.cpp",
    "line": 1325,
    "function": null,
    "comment": "wg0x.cpp:1325:  Using C-style cast.  Use reinterpret_cast<WG0XStatus *>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 1331,
    "function": null,
    "comment": "wg0x.cpp:1331:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 1337,
    "function": null,
    "comment": "wg0x.cpp:1337:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 1347,
    "function": null,
    "comment": "wg0x.cpp:1347:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 1351,
    "function": null,
    "comment": "wg0x.cpp:1351:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 1364,
    "function": null,
    "comment": "wg0x.cpp:1364:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 1366,
    "function": null,
    "comment": "wg0x.cpp:1366:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 1367,
    "function": null,
    "comment": "wg0x.cpp:1367:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 1373,
    "function": null,
    "comment": "wg0x.cpp:1373:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 1374,
    "function": null,
    "comment": "wg0x.cpp:1374:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 1381,
    "function": null,
    "comment": "wg0x.cpp:1381:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 1382,
    "function": null,
    "comment": "wg0x.cpp:1382:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 1387,
    "function": null,
    "comment": "wg0x.cpp:1387:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 1388,
    "function": null,
    "comment": "wg0x.cpp:1388:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 1392,
    "function": null,
    "comment": "wg0x.cpp:1392:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 1393,
    "function": null,
    "comment": "wg0x.cpp:1393:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 1396,
    "function": null,
    "comment": "wg0x.cpp:1396:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 1397,
    "function": null,
    "comment": "wg0x.cpp:1397:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 1402,
    "function": null,
    "comment": "wg0x.cpp:1402:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x.cpp",
    "line": 1407,
    "function": null,
    "comment": "wg0x.cpp:1407:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x.cpp",
    "line": 1417,
    "function": null,
    "comment": "wg0x.cpp:1417:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg0x.cpp",
    "line": 1417,
    "function": null,
    "comment": "wg0x.cpp:1417:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "wg0x.cpp",
    "line": 1417,
    "function": null,
    "comment": "wg0x.cpp:1417:  Missing spaces around ==  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x.cpp",
    "line": 1418,
    "function": null,
    "comment": "wg0x.cpp:1418:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "wg0x.cpp",
    "line": 1266,
    "function": null,
    "comment": "wg0x.cpp:1266:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "wg0x.cpp",
    "line": 797,
    "function": null,
    "comment": "wg0x.cpp:797:  Add #include <algorithm> for max  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "ethercat_device.cpp",
    "line": 41,
    "function": null,
    "comment": "ethercat_device.cpp:41:  Include 'dll/ethercat_frame.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_device.cpp",
    "line": 46,
    "function": null,
    "comment": "ethercat_device.cpp:46:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "ethercat_device.cpp",
    "line": 47,
    "function": null,
    "comment": "ethercat_device.cpp:47:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "ethercat_device.cpp",
    "line": 47,
    "function": null,
    "comment": "ethercat_device.cpp:47:  Missing spaces around >  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "ethercat_device.cpp",
    "line": 51,
    "function": null,
    "comment": "ethercat_device.cpp:51:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_device.cpp",
    "line": 56,
    "function": null,
    "comment": "ethercat_device.cpp:56:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_device.cpp",
    "line": 64,
    "function": null,
    "comment": "ethercat_device.cpp:64:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "ethercat_device.cpp",
    "line": 65,
    "function": null,
    "comment": "ethercat_device.cpp:65:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "ethercat_device.cpp",
    "line": 65,
    "function": null,
    "comment": "ethercat_device.cpp:65:  Missing spaces around >  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "ethercat_device.cpp",
    "line": 69,
    "function": null,
    "comment": "ethercat_device.cpp:69:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "ethercat_device.cpp",
    "line": 72,
    "function": null,
    "comment": "ethercat_device.cpp:72:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_device.cpp",
    "line": 74,
    "function": null,
    "comment": "ethercat_device.cpp:74:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_device.cpp",
    "line": 82,
    "function": null,
    "comment": "ethercat_device.cpp:82:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "ethercat_device.cpp",
    "line": 83,
    "function": null,
    "comment": "ethercat_device.cpp:83:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "ethercat_device.cpp",
    "line": 84,
    "function": null,
    "comment": "ethercat_device.cpp:84:  Missing spaces around <<  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_device.cpp",
    "line": 88,
    "function": null,
    "comment": "ethercat_device.cpp:88:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "ethercat_device.cpp",
    "line": 89,
    "function": null,
    "comment": "ethercat_device.cpp:89:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "ethercat_device.cpp",
    "line": 90,
    "function": null,
    "comment": "ethercat_device.cpp:90:  Missing spaces around <<  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_device.cpp",
    "line": 94,
    "function": null,
    "comment": "ethercat_device.cpp:94:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "ethercat_device.cpp",
    "line": 95,
    "function": null,
    "comment": "ethercat_device.cpp:95:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "ethercat_device.cpp",
    "line": 96,
    "function": null,
    "comment": "ethercat_device.cpp:96:  Missing spaces around <<  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_device.cpp",
    "line": 100,
    "function": null,
    "comment": "ethercat_device.cpp:100:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_device.cpp",
    "line": 109,
    "function": null,
    "comment": "ethercat_device.cpp:109:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_device.cpp",
    "line": 114,
    "function": null,
    "comment": "ethercat_device.cpp:114:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "ethercat_device.cpp",
    "line": 115,
    "function": null,
    "comment": "ethercat_device.cpp:115:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "ethercat_device.cpp",
    "line": 116,
    "function": null,
    "comment": "ethercat_device.cpp:116:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "ethercat_device.cpp",
    "line": 117,
    "function": null,
    "comment": "ethercat_device.cpp:117:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "ethercat_device.cpp",
    "line": 118,
    "function": null,
    "comment": "ethercat_device.cpp:118:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_device.cpp",
    "line": 128,
    "function": null,
    "comment": "ethercat_device.cpp:128:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_device.cpp",
    "line": 133,
    "function": null,
    "comment": "ethercat_device.cpp:133:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_device.cpp",
    "line": 134,
    "function": null,
    "comment": "ethercat_device.cpp:134:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "ethercat_device.cpp",
    "line": 135,
    "function": null,
    "comment": "ethercat_device.cpp:135:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "ethercat_device.cpp",
    "line": 136,
    "function": null,
    "comment": "ethercat_device.cpp:136:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_device.cpp",
    "line": 140,
    "function": null,
    "comment": "ethercat_device.cpp:140:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.cpp",
    "line": 144,
    "function": null,
    "comment": "ethercat_device.cpp:144:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_device.cpp",
    "line": 145,
    "function": null,
    "comment": "ethercat_device.cpp:145:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_device.cpp",
    "line": 145,
    "function": null,
    "comment": "ethercat_device.cpp:145:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_device.cpp",
    "line": 147,
    "function": null,
    "comment": "ethercat_device.cpp:147:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "ethercat_device.cpp",
    "line": 148,
    "function": null,
    "comment": "ethercat_device.cpp:148:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.cpp",
    "line": 150,
    "function": null,
    "comment": "ethercat_device.cpp:150:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "ethercat_device.cpp",
    "line": 150,
    "function": null,
    "comment": "ethercat_device.cpp:150:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.cpp",
    "line": 151,
    "function": null,
    "comment": "ethercat_device.cpp:151:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.cpp",
    "line": 152,
    "function": null,
    "comment": "ethercat_device.cpp:152:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "ethercat_device.cpp",
    "line": 152,
    "function": null,
    "comment": "ethercat_device.cpp:152:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.cpp",
    "line": 153,
    "function": null,
    "comment": "ethercat_device.cpp:153:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.cpp",
    "line": 158,
    "function": null,
    "comment": "ethercat_device.cpp:158:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_device.cpp",
    "line": 159,
    "function": null,
    "comment": "ethercat_device.cpp:159:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.cpp",
    "line": 165,
    "function": null,
    "comment": "ethercat_device.cpp:165:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_device.cpp",
    "line": 169,
    "function": null,
    "comment": "ethercat_device.cpp:169:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.cpp",
    "line": 170,
    "function": null,
    "comment": "ethercat_device.cpp:170:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.cpp",
    "line": 171,
    "function": null,
    "comment": "ethercat_device.cpp:171:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_device.cpp",
    "line": 183,
    "function": null,
    "comment": "ethercat_device.cpp:183:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.cpp",
    "line": 186,
    "function": null,
    "comment": "ethercat_device.cpp:186:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_device.cpp",
    "line": 187,
    "function": null,
    "comment": "ethercat_device.cpp:187:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.cpp",
    "line": 187,
    "function": null,
    "comment": "ethercat_device.cpp:187:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.cpp",
    "line": 190,
    "function": null,
    "comment": "ethercat_device.cpp:190:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_device.cpp",
    "line": 191,
    "function": null,
    "comment": "ethercat_device.cpp:191:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_device.cpp",
    "line": 198,
    "function": null,
    "comment": "ethercat_device.cpp:198:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "ethercat_device.cpp",
    "line": 200,
    "function": null,
    "comment": "ethercat_device.cpp:200:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.cpp",
    "line": 208,
    "function": null,
    "comment": "ethercat_device.cpp:208:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_device.cpp",
    "line": 212,
    "function": null,
    "comment": "ethercat_device.cpp:212:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "ethercat_device.cpp",
    "line": 213,
    "function": null,
    "comment": "ethercat_device.cpp:213:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "ethercat_device.cpp",
    "line": 213,
    "function": null,
    "comment": "ethercat_device.cpp:213:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "ethercat_device.cpp",
    "line": 213,
    "function": null,
    "comment": "ethercat_device.cpp:213:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.cpp",
    "line": 214,
    "function": null,
    "comment": "ethercat_device.cpp:214:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "ethercat_device.cpp",
    "line": 217,
    "function": null,
    "comment": "ethercat_device.cpp:217:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "ethercat_device.cpp",
    "line": 217,
    "function": null,
    "comment": "ethercat_device.cpp:217:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "ethercat_device.cpp",
    "line": 217,
    "function": null,
    "comment": "ethercat_device.cpp:217:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_device.cpp",
    "line": 220,
    "function": null,
    "comment": "ethercat_device.cpp:220:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "ethercat_device.cpp",
    "line": 222,
    "function": null,
    "comment": "ethercat_device.cpp:222:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "There should be a space after a semicolon, if it does not end the line.",
    "file": "ethercat_device.cpp",
    "line": 222,
    "function": null,
    "comment": "ethercat_device.cpp:222:  Missing space after ;  [whitespace/semicolon] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.cpp",
    "line": 233,
    "function": null,
    "comment": "ethercat_device.cpp:233:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_device.cpp",
    "line": 235,
    "function": null,
    "comment": "ethercat_device.cpp:235:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.cpp",
    "line": 237,
    "function": null,
    "comment": "ethercat_device.cpp:237:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "ethercat_device.cpp",
    "line": 239,
    "function": null,
    "comment": "ethercat_device.cpp:239:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "ethercat_device.cpp",
    "line": 240,
    "function": null,
    "comment": "ethercat_device.cpp:240:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "ethercat_device.cpp",
    "line": 245,
    "function": null,
    "comment": "ethercat_device.cpp:245:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.cpp",
    "line": 246,
    "function": null,
    "comment": "ethercat_device.cpp:246:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_device.cpp",
    "line": 253,
    "function": null,
    "comment": "ethercat_device.cpp:253:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "ethercat_device.cpp",
    "line": 254,
    "function": null,
    "comment": "ethercat_device.cpp:254:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "ethercat_device.cpp",
    "line": 254,
    "function": null,
    "comment": "ethercat_device.cpp:254:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.cpp",
    "line": 255,
    "function": null,
    "comment": "ethercat_device.cpp:255:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.cpp",
    "line": 256,
    "function": null,
    "comment": "ethercat_device.cpp:256:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.cpp",
    "line": 260,
    "function": null,
    "comment": "ethercat_device.cpp:260:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_device.cpp",
    "line": 265,
    "function": null,
    "comment": "ethercat_device.cpp:265:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_device.cpp",
    "line": 268,
    "function": null,
    "comment": "ethercat_device.cpp:268:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.cpp",
    "line": 273,
    "function": null,
    "comment": "ethercat_device.cpp:273:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_device.cpp",
    "line": 274,
    "function": null,
    "comment": "ethercat_device.cpp:274:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "ethercat_device.cpp",
    "line": 275,
    "function": null,
    "comment": "ethercat_device.cpp:275:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "ethercat_device.cpp",
    "line": 275,
    "function": null,
    "comment": "ethercat_device.cpp:275:  Missing spaces around >  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "ethercat_device.cpp",
    "line": 276,
    "function": null,
    "comment": "ethercat_device.cpp:276:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "ethercat_device.cpp",
    "line": 277,
    "function": null,
    "comment": "ethercat_device.cpp:277:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_device.cpp",
    "line": 280,
    "function": null,
    "comment": "ethercat_device.cpp:280:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "ethercat_device.cpp",
    "line": 287,
    "function": null,
    "comment": "ethercat_device.cpp:287:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "ethercat_device.cpp",
    "line": 289,
    "function": null,
    "comment": "ethercat_device.cpp:289:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "ethercat_device.cpp",
    "line": 290,
    "function": null,
    "comment": "ethercat_device.cpp:290:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_device.cpp",
    "line": 291,
    "function": null,
    "comment": "ethercat_device.cpp:291:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_device.cpp",
    "line": 294,
    "function": null,
    "comment": "ethercat_device.cpp:294:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "ethercat_device.cpp",
    "line": 295,
    "function": null,
    "comment": "ethercat_device.cpp:295:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_device.cpp",
    "line": 296,
    "function": null,
    "comment": "ethercat_device.cpp:296:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "ethercat_device.cpp",
    "line": 297,
    "function": null,
    "comment": "ethercat_device.cpp:297:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_device.cpp",
    "line": 298,
    "function": null,
    "comment": "ethercat_device.cpp:298:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "ethercat_device.cpp",
    "line": 299,
    "function": null,
    "comment": "ethercat_device.cpp:299:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "ethercat_device.cpp",
    "line": 301,
    "function": null,
    "comment": "ethercat_device.cpp:301:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_device.cpp",
    "line": 304,
    "function": null,
    "comment": "ethercat_device.cpp:304:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_device.cpp",
    "line": 305,
    "function": null,
    "comment": "ethercat_device.cpp:305:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_device.cpp",
    "line": 306,
    "function": null,
    "comment": "ethercat_device.cpp:306:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_device.cpp",
    "line": 309,
    "function": null,
    "comment": "ethercat_device.cpp:309:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "ethercat_device.cpp",
    "line": 309,
    "function": null,
    "comment": "ethercat_device.cpp:309:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_device.cpp",
    "line": 310,
    "function": null,
    "comment": "ethercat_device.cpp:310:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.cpp",
    "line": 311,
    "function": null,
    "comment": "ethercat_device.cpp:311:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "ethercat_device.cpp",
    "line": 313,
    "function": null,
    "comment": "ethercat_device.cpp:313:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "ethercat_device.cpp",
    "line": 313,
    "function": null,
    "comment": "ethercat_device.cpp:313:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "ethercat_device.cpp",
    "line": 313,
    "function": null,
    "comment": "ethercat_device.cpp:313:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_device.cpp",
    "line": 315,
    "function": null,
    "comment": "ethercat_device.cpp:315:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_device.cpp",
    "line": 318,
    "function": null,
    "comment": "ethercat_device.cpp:318:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "ethercat_device.cpp",
    "line": 318,
    "function": null,
    "comment": "ethercat_device.cpp:318:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_device.cpp",
    "line": 319,
    "function": null,
    "comment": "ethercat_device.cpp:319:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_device.cpp",
    "line": 322,
    "function": null,
    "comment": "ethercat_device.cpp:322:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "ethercat_device.cpp",
    "line": 322,
    "function": null,
    "comment": "ethercat_device.cpp:322:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_device.cpp",
    "line": 323,
    "function": null,
    "comment": "ethercat_device.cpp:323:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "ethercat_device.cpp",
    "line": 324,
    "function": null,
    "comment": "ethercat_device.cpp:324:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_device.cpp",
    "line": 332,
    "function": null,
    "comment": "ethercat_device.cpp:332:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_device.cpp",
    "line": 337,
    "function": null,
    "comment": "ethercat_device.cpp:337:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_device.cpp",
    "line": 343,
    "function": null,
    "comment": "ethercat_device.cpp:343:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "ethercat_device.cpp",
    "line": 352,
    "function": null,
    "comment": "ethercat_device.cpp:352:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "ethercat_device.cpp",
    "line": 359,
    "function": null,
    "comment": "ethercat_device.cpp:359:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_device.cpp",
    "line": 361,
    "function": null,
    "comment": "ethercat_device.cpp:361:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_device.cpp",
    "line": 365,
    "function": null,
    "comment": "ethercat_device.cpp:365:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "ethercat_device.cpp",
    "line": 366,
    "function": null,
    "comment": "ethercat_device.cpp:366:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_device.cpp",
    "line": 370,
    "function": null,
    "comment": "ethercat_device.cpp:370:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.cpp",
    "line": 371,
    "function": null,
    "comment": "ethercat_device.cpp:371:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_device.cpp",
    "line": 372,
    "function": null,
    "comment": "ethercat_device.cpp:372:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_device.cpp",
    "line": 373,
    "function": null,
    "comment": "ethercat_device.cpp:373:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.cpp",
    "line": 376,
    "function": null,
    "comment": "ethercat_device.cpp:376:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.cpp",
    "line": 379,
    "function": null,
    "comment": "ethercat_device.cpp:379:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_device.cpp",
    "line": 380,
    "function": null,
    "comment": "ethercat_device.cpp:380:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_device.cpp",
    "line": 382,
    "function": null,
    "comment": "ethercat_device.cpp:382:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.cpp",
    "line": 383,
    "function": null,
    "comment": "ethercat_device.cpp:383:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_device.cpp",
    "line": 386,
    "function": null,
    "comment": "ethercat_device.cpp:386:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_device.cpp",
    "line": 387,
    "function": null,
    "comment": "ethercat_device.cpp:387:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_device.cpp",
    "line": 388,
    "function": null,
    "comment": "ethercat_device.cpp:388:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.cpp",
    "line": 388,
    "function": null,
    "comment": "ethercat_device.cpp:388:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_device.cpp",
    "line": 389,
    "function": null,
    "comment": "ethercat_device.cpp:389:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "ethercat_device.cpp",
    "line": 390,
    "function": null,
    "comment": "ethercat_device.cpp:390:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_device.cpp",
    "line": 392,
    "function": null,
    "comment": "ethercat_device.cpp:392:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.cpp",
    "line": 398,
    "function": null,
    "comment": "ethercat_device.cpp:398:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_device.cpp",
    "line": 399,
    "function": null,
    "comment": "ethercat_device.cpp:399:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_device.cpp",
    "line": 402,
    "function": null,
    "comment": "ethercat_device.cpp:402:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_device.cpp",
    "line": 409,
    "function": null,
    "comment": "ethercat_device.cpp:409:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.cpp",
    "line": 411,
    "function": null,
    "comment": "ethercat_device.cpp:411:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "ethercat_device.cpp",
    "line": 411,
    "function": null,
    "comment": "ethercat_device.cpp:411:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_device.cpp",
    "line": 412,
    "function": null,
    "comment": "ethercat_device.cpp:412:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.cpp",
    "line": 412,
    "function": null,
    "comment": "ethercat_device.cpp:412:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_device.cpp",
    "line": 417,
    "function": null,
    "comment": "ethercat_device.cpp:417:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "ethercat_device.cpp",
    "line": 421,
    "function": null,
    "comment": "ethercat_device.cpp:421:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "ethercat_device.cpp",
    "line": 423,
    "function": null,
    "comment": "ethercat_device.cpp:423:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "ethercat_device.cpp",
    "line": 423,
    "function": null,
    "comment": "ethercat_device.cpp:423:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_device.cpp",
    "line": 427,
    "function": null,
    "comment": "ethercat_device.cpp:427:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_device.cpp",
    "line": 430,
    "function": null,
    "comment": "ethercat_device.cpp:430:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "ethercat_device.cpp",
    "line": 432,
    "function": null,
    "comment": "ethercat_device.cpp:432:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_device.cpp",
    "line": 441,
    "function": null,
    "comment": "ethercat_device.cpp:441:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.cpp",
    "line": 445,
    "function": null,
    "comment": "ethercat_device.cpp:445:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_device.cpp",
    "line": 446,
    "function": null,
    "comment": "ethercat_device.cpp:446:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_device.cpp",
    "line": 449,
    "function": null,
    "comment": "ethercat_device.cpp:449:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_device.cpp",
    "line": 456,
    "function": null,
    "comment": "ethercat_device.cpp:456:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.cpp",
    "line": 458,
    "function": null,
    "comment": "ethercat_device.cpp:458:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "ethercat_device.cpp",
    "line": 458,
    "function": null,
    "comment": "ethercat_device.cpp:458:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_device.cpp",
    "line": 459,
    "function": null,
    "comment": "ethercat_device.cpp:459:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.cpp",
    "line": 459,
    "function": null,
    "comment": "ethercat_device.cpp:459:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_device.cpp",
    "line": 464,
    "function": null,
    "comment": "ethercat_device.cpp:464:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "ethercat_device.cpp",
    "line": 468,
    "function": null,
    "comment": "ethercat_device.cpp:468:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "ethercat_device.cpp",
    "line": 470,
    "function": null,
    "comment": "ethercat_device.cpp:470:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "ethercat_device.cpp",
    "line": 470,
    "function": null,
    "comment": "ethercat_device.cpp:470:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "ethercat_device.cpp",
    "line": 479,
    "function": null,
    "comment": "ethercat_device.cpp:479:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.cpp",
    "line": 492,
    "function": null,
    "comment": "ethercat_device.cpp:492:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_device.cpp",
    "line": 493,
    "function": null,
    "comment": "ethercat_device.cpp:493:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_device.cpp",
    "line": 503,
    "function": null,
    "comment": "ethercat_device.cpp:503:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.cpp",
    "line": 505,
    "function": null,
    "comment": "ethercat_device.cpp:505:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "ethercat_device.cpp",
    "line": 505,
    "function": null,
    "comment": "ethercat_device.cpp:505:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_device.cpp",
    "line": 506,
    "function": null,
    "comment": "ethercat_device.cpp:506:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.cpp",
    "line": 506,
    "function": null,
    "comment": "ethercat_device.cpp:506:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_device.cpp",
    "line": 511,
    "function": null,
    "comment": "ethercat_device.cpp:511:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "ethercat_device.cpp",
    "line": 515,
    "function": null,
    "comment": "ethercat_device.cpp:515:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "ethercat_device.cpp",
    "line": 517,
    "function": null,
    "comment": "ethercat_device.cpp:517:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "ethercat_device.cpp",
    "line": 517,
    "function": null,
    "comment": "ethercat_device.cpp:517:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "ethercat_device.cpp",
    "line": 526,
    "function": null,
    "comment": "ethercat_device.cpp:526:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_device.cpp",
    "line": 529,
    "function": null,
    "comment": "ethercat_device.cpp:529:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_device.cpp",
    "line": 533,
    "function": null,
    "comment": "ethercat_device.cpp:533:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.cpp",
    "line": 538,
    "function": null,
    "comment": "ethercat_device.cpp:538:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_device.cpp",
    "line": 539,
    "function": null,
    "comment": "ethercat_device.cpp:539:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "ethercat_device.cpp",
    "line": 540,
    "function": null,
    "comment": "ethercat_device.cpp:540:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "ethercat_device.cpp",
    "line": 540,
    "function": null,
    "comment": "ethercat_device.cpp:540:  Missing spaces around >  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "ethercat_device.cpp",
    "line": 541,
    "function": null,
    "comment": "ethercat_device.cpp:541:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "ethercat_device.cpp",
    "line": 542,
    "function": null,
    "comment": "ethercat_device.cpp:542:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_device.cpp",
    "line": 546,
    "function": null,
    "comment": "ethercat_device.cpp:546:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.cpp",
    "line": 550,
    "function": null,
    "comment": "ethercat_device.cpp:550:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.cpp",
    "line": 557,
    "function": null,
    "comment": "ethercat_device.cpp:557:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_device.cpp",
    "line": 558,
    "function": null,
    "comment": "ethercat_device.cpp:558:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.cpp",
    "line": 560,
    "function": null,
    "comment": "ethercat_device.cpp:560:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "ethercat_device.cpp",
    "line": 575,
    "function": null,
    "comment": "ethercat_device.cpp:575:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "ethercat_device.cpp",
    "line": 575,
    "function": null,
    "comment": "ethercat_device.cpp:575:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.cpp",
    "line": 578,
    "function": null,
    "comment": "ethercat_device.cpp:578:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_device.cpp",
    "line": 579,
    "function": null,
    "comment": "ethercat_device.cpp:579:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_device.cpp",
    "line": 584,
    "function": null,
    "comment": "ethercat_device.cpp:584:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "ethercat_device.cpp",
    "line": 578,
    "function": null,
    "comment": "ethercat_device.cpp:578:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "ethercat_hardware.cpp",
    "line": 38,
    "function": null,
    "comment": "ethercat_hardware.cpp:38:  Include 'dll/ethercat_dll.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "ethercat_hardware.cpp",
    "line": 39,
    "function": null,
    "comment": "ethercat_hardware.cpp:39:  Include 'dll/ethercat_device_addressed_telegram.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "ethercat_hardware.cpp",
    "line": 43,
    "function": null,
    "comment": "ethercat_hardware.cpp:43:  Found C system header after C++ system header. Should be: ethercat_hardware.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "ethercat_hardware.cpp",
    "line": 44,
    "function": null,
    "comment": "ethercat_hardware.cpp:44:  Found C system header after C++ system header. Should be: ethercat_hardware.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "ethercat_hardware.cpp",
    "line": 45,
    "function": null,
    "comment": "ethercat_hardware.cpp:45:  Found C system header after C++ system header. Should be: ethercat_hardware.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "ethercat_hardware.cpp",
    "line": 46,
    "function": null,
    "comment": "ethercat_hardware.cpp:46:  Found C system header after C++ system header. Should be: ethercat_hardware.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 54,
    "function": null,
    "comment": "ethercat_hardware.cpp:54:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 59,
    "function": null,
    "comment": "ethercat_hardware.cpp:59:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 64,
    "function": null,
    "comment": "ethercat_hardware.cpp:64:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 73,
    "function": null,
    "comment": "ethercat_hardware.cpp:73:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 73,
    "function": null,
    "comment": "ethercat_hardware.cpp:73:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 75,
    "function": null,
    "comment": "ethercat_hardware.cpp:75:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 76,
    "function": null,
    "comment": "ethercat_hardware.cpp:76:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 78,
    "function": null,
    "comment": "ethercat_hardware.cpp:78:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 79,
    "function": null,
    "comment": "ethercat_hardware.cpp:79:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "ethercat_hardware.cpp",
    "line": 79,
    "function": null,
    "comment": "ethercat_hardware.cpp:79:  Redundant blank line at the start of a code block should be deleted.  [whitespace/blank_line] [2]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "ethercat_hardware.cpp",
    "line": 79,
    "function": null,
    "comment": "ethercat_hardware.cpp:79:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 83,
    "function": null,
    "comment": "ethercat_hardware.cpp:83:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 86,
    "function": null,
    "comment": "ethercat_hardware.cpp:86:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 92,
    "function": null,
    "comment": "ethercat_hardware.cpp:92:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 102,
    "function": null,
    "comment": "ethercat_hardware.cpp:102:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 103,
    "function": null,
    "comment": "ethercat_hardware.cpp:103:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 110,
    "function": null,
    "comment": "ethercat_hardware.cpp:110:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 111,
    "function": null,
    "comment": "ethercat_hardware.cpp:111:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 112,
    "function": null,
    "comment": "ethercat_hardware.cpp:112:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 113,
    "function": null,
    "comment": "ethercat_hardware.cpp:113:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "ethercat_hardware.cpp",
    "line": 113,
    "function": null,
    "comment": "ethercat_hardware.cpp:113:  Missing spaces around ==  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 114,
    "function": null,
    "comment": "ethercat_hardware.cpp:114:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 120,
    "function": null,
    "comment": "ethercat_hardware.cpp:120:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 123,
    "function": null,
    "comment": "ethercat_hardware.cpp:123:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 127,
    "function": null,
    "comment": "ethercat_hardware.cpp:127:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 129,
    "function": null,
    "comment": "ethercat_hardware.cpp:129:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 132,
    "function": null,
    "comment": "ethercat_hardware.cpp:132:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 134,
    "function": null,
    "comment": "ethercat_hardware.cpp:134:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 142,
    "function": null,
    "comment": "ethercat_hardware.cpp:142:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 147,
    "function": null,
    "comment": "ethercat_hardware.cpp:147:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 148,
    "function": null,
    "comment": "ethercat_hardware.cpp:148:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 157,
    "function": null,
    "comment": "ethercat_hardware.cpp:157:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 168,
    "function": null,
    "comment": "ethercat_hardware.cpp:168:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 176,
    "function": null,
    "comment": "ethercat_hardware.cpp:176:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 184,
    "function": null,
    "comment": "ethercat_hardware.cpp:184:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 196,
    "function": null,
    "comment": "ethercat_hardware.cpp:196:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 200,
    "function": null,
    "comment": "ethercat_hardware.cpp:200:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 210,
    "function": null,
    "comment": "ethercat_hardware.cpp:210:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 210,
    "function": null,
    "comment": "ethercat_hardware.cpp:210:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 213,
    "function": null,
    "comment": "ethercat_hardware.cpp:213:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 213,
    "function": null,
    "comment": "ethercat_hardware.cpp:213:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 218,
    "function": null,
    "comment": "ethercat_hardware.cpp:218:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 226,
    "function": null,
    "comment": "ethercat_hardware.cpp:226:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "ethercat_hardware.cpp",
    "line": 227,
    "function": null,
    "comment": "ethercat_hardware.cpp:227:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 232,
    "function": null,
    "comment": "ethercat_hardware.cpp:232:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "ethercat_hardware.cpp",
    "line": 233,
    "function": null,
    "comment": "ethercat_hardware.cpp:233:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "To-do comments should look like '// TODO(my_username): Stuff.'.",
    "file": "ethercat_hardware.cpp",
    "line": 237,
    "function": null,
    "comment": "ethercat_hardware.cpp:237:  Missing username in TODO; it should look like '// TODO(my_username): Stuff.'  [readability/todo] [2]",
    "tags": ["comments","code-standards","formatting","google-cpp","todo-comment"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 239,
    "function": null,
    "comment": "ethercat_hardware.cpp:239:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "ethercat_hardware.cpp",
    "line": 240,
    "function": null,
    "comment": "ethercat_hardware.cpp:240:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 251,
    "function": null,
    "comment": "ethercat_hardware.cpp:251:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 256,
    "function": null,
    "comment": "ethercat_hardware.cpp:256:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 257,
    "function": null,
    "comment": "ethercat_hardware.cpp:257:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "ethercat_hardware.cpp",
    "line": 266,
    "function": null,
    "comment": "ethercat_hardware.cpp:266:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 268,
    "function": null,
    "comment": "ethercat_hardware.cpp:268:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 270,
    "function": null,
    "comment": "ethercat_hardware.cpp:270:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 273,
    "function": null,
    "comment": "ethercat_hardware.cpp:273:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 274,
    "function": null,
    "comment": "ethercat_hardware.cpp:274:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 275,
    "function": null,
    "comment": "ethercat_hardware.cpp:275:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 277,
    "function": null,
    "comment": "ethercat_hardware.cpp:277:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 278,
    "function": null,
    "comment": "ethercat_hardware.cpp:278:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "ethercat_hardware.cpp",
    "line": 278,
    "function": null,
    "comment": "ethercat_hardware.cpp:278:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 279,
    "function": null,
    "comment": "ethercat_hardware.cpp:279:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 287,
    "function": null,
    "comment": "ethercat_hardware.cpp:287:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 288,
    "function": null,
    "comment": "ethercat_hardware.cpp:288:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 291,
    "function": null,
    "comment": "ethercat_hardware.cpp:291:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "ethercat_hardware.cpp",
    "line": 291,
    "function": null,
    "comment": "ethercat_hardware.cpp:291:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 294,
    "function": null,
    "comment": "ethercat_hardware.cpp:294:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 295,
    "function": null,
    "comment": "ethercat_hardware.cpp:295:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 298,
    "function": null,
    "comment": "ethercat_hardware.cpp:298:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 299,
    "function": null,
    "comment": "ethercat_hardware.cpp:299:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 301,
    "function": null,
    "comment": "ethercat_hardware.cpp:301:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 304,
    "function": null,
    "comment": "ethercat_hardware.cpp:304:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 305,
    "function": null,
    "comment": "ethercat_hardware.cpp:305:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 311,
    "function": null,
    "comment": "ethercat_hardware.cpp:311:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 311,
    "function": null,
    "comment": "ethercat_hardware.cpp:311:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 312,
    "function": null,
    "comment": "ethercat_hardware.cpp:312:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 313,
    "function": null,
    "comment": "ethercat_hardware.cpp:313:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 314,
    "function": null,
    "comment": "ethercat_hardware.cpp:314:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 315,
    "function": null,
    "comment": "ethercat_hardware.cpp:315:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 315,
    "function": null,
    "comment": "ethercat_hardware.cpp:315:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 316,
    "function": null,
    "comment": "ethercat_hardware.cpp:316:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 316,
    "function": null,
    "comment": "ethercat_hardware.cpp:316:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 319,
    "function": null,
    "comment": "ethercat_hardware.cpp:319:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 320,
    "function": null,
    "comment": "ethercat_hardware.cpp:320:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 320,
    "function": null,
    "comment": "ethercat_hardware.cpp:320:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "ethercat_hardware.cpp",
    "line": 321,
    "function": null,
    "comment": "ethercat_hardware.cpp:321:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 323,
    "function": null,
    "comment": "ethercat_hardware.cpp:323:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 325,
    "function": null,
    "comment": "ethercat_hardware.cpp:325:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 327,
    "function": null,
    "comment": "ethercat_hardware.cpp:327:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 330,
    "function": null,
    "comment": "ethercat_hardware.cpp:330:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 331,
    "function": null,
    "comment": "ethercat_hardware.cpp:331:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "ethercat_hardware.cpp",
    "line": 331,
    "function": null,
    "comment": "ethercat_hardware.cpp:331:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "ethercat_hardware.cpp",
    "line": 334,
    "function": null,
    "comment": "ethercat_hardware.cpp:334:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 338,
    "function": null,
    "comment": "ethercat_hardware.cpp:338:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 342,
    "function": null,
    "comment": "ethercat_hardware.cpp:342:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 345,
    "function": null,
    "comment": "ethercat_hardware.cpp:345:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 349,
    "function": null,
    "comment": "ethercat_hardware.cpp:349:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 353,
    "function": null,
    "comment": "ethercat_hardware.cpp:353:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 357,
    "function": null,
    "comment": "ethercat_hardware.cpp:357:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 357,
    "function": null,
    "comment": "ethercat_hardware.cpp:357:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 358,
    "function": null,
    "comment": "ethercat_hardware.cpp:358:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 358,
    "function": null,
    "comment": "ethercat_hardware.cpp:358:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 359,
    "function": null,
    "comment": "ethercat_hardware.cpp:359:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 359,
    "function": null,
    "comment": "ethercat_hardware.cpp:359:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 360,
    "function": null,
    "comment": "ethercat_hardware.cpp:360:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 361,
    "function": null,
    "comment": "ethercat_hardware.cpp:361:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 377,
    "function": null,
    "comment": "ethercat_hardware.cpp:377:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 381,
    "function": null,
    "comment": "ethercat_hardware.cpp:381:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 383,
    "function": null,
    "comment": "ethercat_hardware.cpp:383:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 387,
    "function": null,
    "comment": "ethercat_hardware.cpp:387:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 398,
    "function": null,
    "comment": "ethercat_hardware.cpp:398:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 405,
    "function": null,
    "comment": "ethercat_hardware.cpp:405:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 406,
    "function": null,
    "comment": "ethercat_hardware.cpp:406:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 407,
    "function": null,
    "comment": "ethercat_hardware.cpp:407:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 409,
    "function": null,
    "comment": "ethercat_hardware.cpp:409:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 415,
    "function": null,
    "comment": "ethercat_hardware.cpp:415:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 415,
    "function": null,
    "comment": "ethercat_hardware.cpp:415:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 421,
    "function": null,
    "comment": "ethercat_hardware.cpp:421:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 422,
    "function": null,
    "comment": "ethercat_hardware.cpp:422:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 425,
    "function": null,
    "comment": "ethercat_hardware.cpp:425:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 426,
    "function": null,
    "comment": "ethercat_hardware.cpp:426:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "ethercat_hardware.cpp",
    "line": 426,
    "function": null,
    "comment": "ethercat_hardware.cpp:426:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 427,
    "function": null,
    "comment": "ethercat_hardware.cpp:427:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 428,
    "function": null,
    "comment": "ethercat_hardware.cpp:428:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 432,
    "function": null,
    "comment": "ethercat_hardware.cpp:432:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 432,
    "function": null,
    "comment": "ethercat_hardware.cpp:432:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 437,
    "function": null,
    "comment": "ethercat_hardware.cpp:437:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 441,
    "function": null,
    "comment": "ethercat_hardware.cpp:441:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 445,
    "function": null,
    "comment": "ethercat_hardware.cpp:445:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 449,
    "function": null,
    "comment": "ethercat_hardware.cpp:449:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 450,
    "function": null,
    "comment": "ethercat_hardware.cpp:450:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 450,
    "function": null,
    "comment": "ethercat_hardware.cpp:450:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 455,
    "function": null,
    "comment": "ethercat_hardware.cpp:455:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 460,
    "function": null,
    "comment": "ethercat_hardware.cpp:460:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 461,
    "function": null,
    "comment": "ethercat_hardware.cpp:461:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 461,
    "function": null,
    "comment": "ethercat_hardware.cpp:461:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "ethercat_hardware.cpp",
    "line": 463,
    "function": null,
    "comment": "ethercat_hardware.cpp:463:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 473,
    "function": null,
    "comment": "ethercat_hardware.cpp:473:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 475,
    "function": null,
    "comment": "ethercat_hardware.cpp:475:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 476,
    "function": null,
    "comment": "ethercat_hardware.cpp:476:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 477,
    "function": null,
    "comment": "ethercat_hardware.cpp:477:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 478,
    "function": null,
    "comment": "ethercat_hardware.cpp:478:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 481,
    "function": null,
    "comment": "ethercat_hardware.cpp:481:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 483,
    "function": null,
    "comment": "ethercat_hardware.cpp:483:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 484,
    "function": null,
    "comment": "ethercat_hardware.cpp:484:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 485,
    "function": null,
    "comment": "ethercat_hardware.cpp:485:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 487,
    "function": null,
    "comment": "ethercat_hardware.cpp:487:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 489,
    "function": null,
    "comment": "ethercat_hardware.cpp:489:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "ethercat_hardware.cpp",
    "line": 490,
    "function": null,
    "comment": "ethercat_hardware.cpp:490:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 491,
    "function": null,
    "comment": "ethercat_hardware.cpp:491:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "ethercat_hardware.cpp",
    "line": 491,
    "function": null,
    "comment": "ethercat_hardware.cpp:491:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 492,
    "function": null,
    "comment": "ethercat_hardware.cpp:492:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "ethercat_hardware.cpp",
    "line": 492,
    "function": null,
    "comment": "ethercat_hardware.cpp:492:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "ethercat_hardware.cpp",
    "line": 493,
    "function": null,
    "comment": "ethercat_hardware.cpp:493:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 494,
    "function": null,
    "comment": "ethercat_hardware.cpp:494:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "ethercat_hardware.cpp",
    "line": 494,
    "function": null,
    "comment": "ethercat_hardware.cpp:494:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 495,
    "function": null,
    "comment": "ethercat_hardware.cpp:495:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "ethercat_hardware.cpp",
    "line": 495,
    "function": null,
    "comment": "ethercat_hardware.cpp:495:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 496,
    "function": null,
    "comment": "ethercat_hardware.cpp:496:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "ethercat_hardware.cpp",
    "line": 496,
    "function": null,
    "comment": "ethercat_hardware.cpp:496:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 497,
    "function": null,
    "comment": "ethercat_hardware.cpp:497:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "ethercat_hardware.cpp",
    "line": 497,
    "function": null,
    "comment": "ethercat_hardware.cpp:497:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "ethercat_hardware.cpp",
    "line": 498,
    "function": null,
    "comment": "ethercat_hardware.cpp:498:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 499,
    "function": null,
    "comment": "ethercat_hardware.cpp:499:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "ethercat_hardware.cpp",
    "line": 499,
    "function": null,
    "comment": "ethercat_hardware.cpp:499:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 500,
    "function": null,
    "comment": "ethercat_hardware.cpp:500:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "ethercat_hardware.cpp",
    "line": 500,
    "function": null,
    "comment": "ethercat_hardware.cpp:500:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 501,
    "function": null,
    "comment": "ethercat_hardware.cpp:501:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "ethercat_hardware.cpp",
    "line": 501,
    "function": null,
    "comment": "ethercat_hardware.cpp:501:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 502,
    "function": null,
    "comment": "ethercat_hardware.cpp:502:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "ethercat_hardware.cpp",
    "line": 502,
    "function": null,
    "comment": "ethercat_hardware.cpp:502:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 503,
    "function": null,
    "comment": "ethercat_hardware.cpp:503:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "ethercat_hardware.cpp",
    "line": 503,
    "function": null,
    "comment": "ethercat_hardware.cpp:503:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 504,
    "function": null,
    "comment": "ethercat_hardware.cpp:504:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 504,
    "function": null,
    "comment": "ethercat_hardware.cpp:504:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "ethercat_hardware.cpp",
    "line": 504,
    "function": null,
    "comment": "ethercat_hardware.cpp:504:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 505,
    "function": null,
    "comment": "ethercat_hardware.cpp:505:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 505,
    "function": null,
    "comment": "ethercat_hardware.cpp:505:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "ethercat_hardware.cpp",
    "line": 505,
    "function": null,
    "comment": "ethercat_hardware.cpp:505:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 506,
    "function": null,
    "comment": "ethercat_hardware.cpp:506:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 506,
    "function": null,
    "comment": "ethercat_hardware.cpp:506:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "ethercat_hardware.cpp",
    "line": 506,
    "function": null,
    "comment": "ethercat_hardware.cpp:506:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 507,
    "function": null,
    "comment": "ethercat_hardware.cpp:507:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "ethercat_hardware.cpp",
    "line": 507,
    "function": null,
    "comment": "ethercat_hardware.cpp:507:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 508,
    "function": null,
    "comment": "ethercat_hardware.cpp:508:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not use the verboten C basic types.",
    "file": "ethercat_hardware.cpp",
    "line": 508,
    "function": null,
    "comment": "ethercat_hardware.cpp:508:  Use int16/int64/etc, rather than the C type long  [runtime/int] [4]",
    "tags": ["code-standards","google-cpp","deprecation","types"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 509,
    "function": null,
    "comment": "ethercat_hardware.cpp:509:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 511,
    "function": null,
    "comment": "ethercat_hardware.cpp:511:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 512,
    "function": null,
    "comment": "ethercat_hardware.cpp:512:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "ethercat_hardware.cpp",
    "line": 512,
    "function": null,
    "comment": "ethercat_hardware.cpp:512:  Using C-style cast.  Use static_cast<double>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 518,
    "function": null,
    "comment": "ethercat_hardware.cpp:518:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 525,
    "function": null,
    "comment": "ethercat_hardware.cpp:525:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 526,
    "function": null,
    "comment": "ethercat_hardware.cpp:526:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 527,
    "function": null,
    "comment": "ethercat_hardware.cpp:527:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 536,
    "function": null,
    "comment": "ethercat_hardware.cpp:536:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 547,
    "function": null,
    "comment": "ethercat_hardware.cpp:547:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 557,
    "function": null,
    "comment": "ethercat_hardware.cpp:557:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 563,
    "function": null,
    "comment": "ethercat_hardware.cpp:563:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 564,
    "function": null,
    "comment": "ethercat_hardware.cpp:564:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "ethercat_hardware.cpp",
    "line": 564,
    "function": null,
    "comment": "ethercat_hardware.cpp:564:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 566,
    "function": null,
    "comment": "ethercat_hardware.cpp:566:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 572,
    "function": null,
    "comment": "ethercat_hardware.cpp:572:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 574,
    "function": null,
    "comment": "ethercat_hardware.cpp:574:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 583,
    "function": null,
    "comment": "ethercat_hardware.cpp:583:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 586,
    "function": null,
    "comment": "ethercat_hardware.cpp:586:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 592,
    "function": null,
    "comment": "ethercat_hardware.cpp:592:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "ethercat_hardware.cpp",
    "line": 592,
    "function": null,
    "comment": "ethercat_hardware.cpp:592:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 593,
    "function": null,
    "comment": "ethercat_hardware.cpp:593:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 598,
    "function": null,
    "comment": "ethercat_hardware.cpp:598:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 598,
    "function": null,
    "comment": "ethercat_hardware.cpp:598:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 604,
    "function": null,
    "comment": "ethercat_hardware.cpp:604:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "ethercat_hardware.cpp",
    "line": 609,
    "function": null,
    "comment": "ethercat_hardware.cpp:609:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 610,
    "function": null,
    "comment": "ethercat_hardware.cpp:610:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 615,
    "function": null,
    "comment": "ethercat_hardware.cpp:615:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 617,
    "function": null,
    "comment": "ethercat_hardware.cpp:617:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 623,
    "function": null,
    "comment": "ethercat_hardware.cpp:623:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 626,
    "function": null,
    "comment": "ethercat_hardware.cpp:626:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 634,
    "function": null,
    "comment": "ethercat_hardware.cpp:634:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 635,
    "function": null,
    "comment": "ethercat_hardware.cpp:635:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 635,
    "function": null,
    "comment": "ethercat_hardware.cpp:635:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 636,
    "function": null,
    "comment": "ethercat_hardware.cpp:636:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 640,
    "function": null,
    "comment": "ethercat_hardware.cpp:640:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 649,
    "function": null,
    "comment": "ethercat_hardware.cpp:649:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 650,
    "function": null,
    "comment": "ethercat_hardware.cpp:650:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 657,
    "function": null,
    "comment": "ethercat_hardware.cpp:657:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 659,
    "function": null,
    "comment": "ethercat_hardware.cpp:659:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 664,
    "function": null,
    "comment": "ethercat_hardware.cpp:664:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "ethercat_hardware.cpp",
    "line": 665,
    "function": null,
    "comment": "ethercat_hardware.cpp:665:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 667,
    "function": null,
    "comment": "ethercat_hardware.cpp:667:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 670,
    "function": null,
    "comment": "ethercat_hardware.cpp:670:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 676,
    "function": null,
    "comment": "ethercat_hardware.cpp:676:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 682,
    "function": null,
    "comment": "ethercat_hardware.cpp:682:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 683,
    "function": null,
    "comment": "ethercat_hardware.cpp:683:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 688,
    "function": null,
    "comment": "ethercat_hardware.cpp:688:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "ethercat_hardware.cpp",
    "line": 697,
    "function": null,
    "comment": "ethercat_hardware.cpp:697:  Using deprecated casting style.  Use static_cast<bool>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 715,
    "function": null,
    "comment": "ethercat_hardware.cpp:715:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 724,
    "function": null,
    "comment": "ethercat_hardware.cpp:724:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 734,
    "function": null,
    "comment": "ethercat_hardware.cpp:734:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 750,
    "function": null,
    "comment": "ethercat_hardware.cpp:750:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 751,
    "function": null,
    "comment": "ethercat_hardware.cpp:751:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 752,
    "function": null,
    "comment": "ethercat_hardware.cpp:752:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 755,
    "function": null,
    "comment": "ethercat_hardware.cpp:755:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 761,
    "function": null,
    "comment": "ethercat_hardware.cpp:761:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 763,
    "function": null,
    "comment": "ethercat_hardware.cpp:763:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 765,
    "function": null,
    "comment": "ethercat_hardware.cpp:765:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 766,
    "function": null,
    "comment": "ethercat_hardware.cpp:766:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 775,
    "function": null,
    "comment": "ethercat_hardware.cpp:775:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 776,
    "function": null,
    "comment": "ethercat_hardware.cpp:776:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "ethercat_hardware.cpp",
    "line": 776,
    "function": null,
    "comment": "ethercat_hardware.cpp:776:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 778,
    "function": null,
    "comment": "ethercat_hardware.cpp:778:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 778,
    "function": null,
    "comment": "ethercat_hardware.cpp:778:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 782,
    "function": null,
    "comment": "ethercat_hardware.cpp:782:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 784,
    "function": null,
    "comment": "ethercat_hardware.cpp:784:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 785,
    "function": null,
    "comment": "ethercat_hardware.cpp:785:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 787,
    "function": null,
    "comment": "ethercat_hardware.cpp:787:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "ethercat_hardware.cpp",
    "line": 789,
    "function": null,
    "comment": "ethercat_hardware.cpp:789:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 790,
    "function": null,
    "comment": "ethercat_hardware.cpp:790:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 791,
    "function": null,
    "comment": "ethercat_hardware.cpp:791:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "ethercat_hardware.cpp",
    "line": 791,
    "function": null,
    "comment": "ethercat_hardware.cpp:791:  Missing spaces around ==  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 792,
    "function": null,
    "comment": "ethercat_hardware.cpp:792:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 793,
    "function": null,
    "comment": "ethercat_hardware.cpp:793:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 796,
    "function": null,
    "comment": "ethercat_hardware.cpp:796:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "ethercat_hardware.cpp",
    "line": 796,
    "function": null,
    "comment": "ethercat_hardware.cpp:796:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 797,
    "function": null,
    "comment": "ethercat_hardware.cpp:797:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 798,
    "function": null,
    "comment": "ethercat_hardware.cpp:798:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 799,
    "function": null,
    "comment": "ethercat_hardware.cpp:799:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 802,
    "function": null,
    "comment": "ethercat_hardware.cpp:802:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 805,
    "function": null,
    "comment": "ethercat_hardware.cpp:805:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 806,
    "function": null,
    "comment": "ethercat_hardware.cpp:806:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "To-do comments should look like '// TODO(my_username): Stuff.'.",
    "file": "ethercat_hardware.cpp",
    "line": 806,
    "function": null,
    "comment": "ethercat_hardware.cpp:806:  Missing username in TODO; it should look like '// TODO(my_username): Stuff.'  [readability/todo] [2]",
    "tags": ["comments","code-standards","formatting","google-cpp","todo-comment"]
  },
  {
    "rule": "To-do comments should look like '// TODO(my_username): Stuff.'.",
    "file": "ethercat_hardware.cpp",
    "line": 806,
    "function": null,
    "comment": "ethercat_hardware.cpp:806:  TODO(my_username) should be followed by a space  [whitespace/todo] [2]",
    "tags": ["comments","code-standards","formatting","google-cpp","todo-comment"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 807,
    "function": null,
    "comment": "ethercat_hardware.cpp:807:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 808,
    "function": null,
    "comment": "ethercat_hardware.cpp:808:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 812,
    "function": null,
    "comment": "ethercat_hardware.cpp:812:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 821,
    "function": null,
    "comment": "ethercat_hardware.cpp:821:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 822,
    "function": null,
    "comment": "ethercat_hardware.cpp:822:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 824,
    "function": null,
    "comment": "ethercat_hardware.cpp:824:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 828,
    "function": null,
    "comment": "ethercat_hardware.cpp:828:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 830,
    "function": null,
    "comment": "ethercat_hardware.cpp:830:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 833,
    "function": null,
    "comment": "ethercat_hardware.cpp:833:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 834,
    "function": null,
    "comment": "ethercat_hardware.cpp:834:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 844,
    "function": null,
    "comment": "ethercat_hardware.cpp:844:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "ethercat_hardware.cpp",
    "line": 845,
    "function": null,
    "comment": "ethercat_hardware.cpp:845:  public: should be indented +1 space inside class MyXmlRpcValue  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "ethercat_hardware.cpp",
    "line": 846,
    "function": null,
    "comment": "ethercat_hardware.cpp:846:  Is this a non-const reference? If so, make const or use a pointer: XmlRpc::XmlRpcValue &value  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "ethercat_hardware.cpp",
    "line": 846,
    "function": null,
    "comment": "ethercat_hardware.cpp:846:  Single-parameter constructors should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 851,
    "function": null,
    "comment": "ethercat_hardware.cpp:851:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 852,
    "function": null,
    "comment": "ethercat_hardware.cpp:852:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 853,
    "function": null,
    "comment": "ethercat_hardware.cpp:853:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 854,
    "function": null,
    "comment": "ethercat_hardware.cpp:854:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 874,
    "function": null,
    "comment": "ethercat_hardware.cpp:874:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 882,
    "function": null,
    "comment": "ethercat_hardware.cpp:882:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 888,
    "function": null,
    "comment": "ethercat_hardware.cpp:888:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 890,
    "function": null,
    "comment": "ethercat_hardware.cpp:890:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 890,
    "function": null,
    "comment": "ethercat_hardware.cpp:890:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 895,
    "function": null,
    "comment": "ethercat_hardware.cpp:895:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 901,
    "function": null,
    "comment": "ethercat_hardware.cpp:901:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 905,
    "function": null,
    "comment": "ethercat_hardware.cpp:905:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 906,
    "function": null,
    "comment": "ethercat_hardware.cpp:906:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 908,
    "function": null,
    "comment": "ethercat_hardware.cpp:908:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "ethercat_hardware.cpp",
    "line": 909,
    "function": null,
    "comment": "ethercat_hardware.cpp:909:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 911,
    "function": null,
    "comment": "ethercat_hardware.cpp:911:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 919,
    "function": null,
    "comment": "ethercat_hardware.cpp:919:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 923,
    "function": null,
    "comment": "ethercat_hardware.cpp:923:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 927,
    "function": null,
    "comment": "ethercat_hardware.cpp:927:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "ethercat_hardware.cpp",
    "line": 929,
    "function": null,
    "comment": "ethercat_hardware.cpp:929:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 930,
    "function": null,
    "comment": "ethercat_hardware.cpp:930:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "ethercat_hardware.cpp",
    "line": 930,
    "function": null,
    "comment": "ethercat_hardware.cpp:930:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "ethercat_hardware.cpp",
    "line": 931,
    "function": null,
    "comment": "ethercat_hardware.cpp:931:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "ethercat_hardware.cpp",
    "line": 932,
    "function": null,
    "comment": "ethercat_hardware.cpp:932:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "ethercat_hardware.cpp",
    "line": 933,
    "function": null,
    "comment": "ethercat_hardware.cpp:933:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "ethercat_hardware.cpp",
    "line": 934,
    "function": null,
    "comment": "ethercat_hardware.cpp:934:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 935,
    "function": null,
    "comment": "ethercat_hardware.cpp:935:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 937,
    "function": null,
    "comment": "ethercat_hardware.cpp:937:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 945,
    "function": null,
    "comment": "ethercat_hardware.cpp:945:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 945,
    "function": null,
    "comment": "ethercat_hardware.cpp:945:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 953,
    "function": null,
    "comment": "ethercat_hardware.cpp:953:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 954,
    "function": null,
    "comment": "ethercat_hardware.cpp:954:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 954,
    "function": null,
    "comment": "ethercat_hardware.cpp:954:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 955,
    "function": null,
    "comment": "ethercat_hardware.cpp:955:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 978,
    "function": null,
    "comment": "ethercat_hardware.cpp:978:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 979,
    "function": null,
    "comment": "ethercat_hardware.cpp:979:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "ethercat_hardware.cpp",
    "line": 982,
    "function": null,
    "comment": "ethercat_hardware.cpp:982:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 985,
    "function": null,
    "comment": "ethercat_hardware.cpp:985:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 987,
    "function": null,
    "comment": "ethercat_hardware.cpp:987:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 995,
    "function": null,
    "comment": "ethercat_hardware.cpp:995:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 996,
    "function": null,
    "comment": "ethercat_hardware.cpp:996:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "ethercat_hardware.cpp",
    "line": 997,
    "function": null,
    "comment": "ethercat_hardware.cpp:997:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 998,
    "function": null,
    "comment": "ethercat_hardware.cpp:998:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "ethercat_hardware.cpp",
    "line": 999,
    "function": null,
    "comment": "ethercat_hardware.cpp:999:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "ethercat_hardware.cpp",
    "line": 999,
    "function": null,
    "comment": "ethercat_hardware.cpp:999:  Using deprecated casting style.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 1003,
    "function": null,
    "comment": "ethercat_hardware.cpp:1003:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 1004,
    "function": null,
    "comment": "ethercat_hardware.cpp:1004:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 1010,
    "function": null,
    "comment": "ethercat_hardware.cpp:1010:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 1012,
    "function": null,
    "comment": "ethercat_hardware.cpp:1012:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 1013,
    "function": null,
    "comment": "ethercat_hardware.cpp:1013:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "ethercat_hardware.cpp",
    "line": 1014,
    "function": null,
    "comment": "ethercat_hardware.cpp:1014:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 1015,
    "function": null,
    "comment": "ethercat_hardware.cpp:1015:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "ethercat_hardware.cpp",
    "line": 1016,
    "function": null,
    "comment": "ethercat_hardware.cpp:1016:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 1017,
    "function": null,
    "comment": "ethercat_hardware.cpp:1017:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 1022,
    "function": null,
    "comment": "ethercat_hardware.cpp:1022:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "ethercat_hardware.cpp",
    "line": 1022,
    "function": null,
    "comment": "ethercat_hardware.cpp:1022:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 1023,
    "function": null,
    "comment": "ethercat_hardware.cpp:1023:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "ethercat_hardware.cpp",
    "line": 1024,
    "function": null,
    "comment": "ethercat_hardware.cpp:1024:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "ethercat_hardware.cpp",
    "line": 1025,
    "function": null,
    "comment": "ethercat_hardware.cpp:1025:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "ethercat_hardware.cpp",
    "line": 1026,
    "function": null,
    "comment": "ethercat_hardware.cpp:1026:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "ethercat_hardware.cpp",
    "line": 1009,
    "function": null,
    "comment": "ethercat_hardware.cpp:1009:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "ethercat_hardware.cpp",
    "line": 684,
    "function": null,
    "comment": "ethercat_hardware.cpp:684:  Add #include <algorithm> for max  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "ethercat_hardware.cpp",
    "line": 757,
    "function": null,
    "comment": "ethercat_hardware.cpp:757:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_util.cpp",
    "line": 38,
    "function": null,
    "comment": "wg_util.cpp:38:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_util.cpp",
    "line": 42,
    "function": null,
    "comment": "wg_util.cpp:42:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_util.cpp",
    "line": 50,
    "function": null,
    "comment": "wg_util.cpp:50:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_util.cpp",
    "line": 54,
    "function": null,
    "comment": "wg_util.cpp:54:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_util.cpp",
    "line": 64,
    "function": null,
    "comment": "wg_util.cpp:64:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_util.cpp",
    "line": 65,
    "function": null,
    "comment": "wg_util.cpp:65:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_util.cpp",
    "line": 68,
    "function": null,
    "comment": "wg_util.cpp:68:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg_util.cpp",
    "line": 69,
    "function": null,
    "comment": "wg_util.cpp:69:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_util.cpp",
    "line": 80,
    "function": null,
    "comment": "wg_util.cpp:80:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_util.cpp",
    "line": 81,
    "function": null,
    "comment": "wg_util.cpp:81:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_util.cpp",
    "line": 82,
    "function": null,
    "comment": "wg_util.cpp:82:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_util.cpp",
    "line": 87,
    "function": null,
    "comment": "wg_util.cpp:87:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_util.cpp",
    "line": 101,
    "function": null,
    "comment": "wg_util.cpp:101:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg_util.cpp",
    "line": 102,
    "function": null,
    "comment": "wg_util.cpp:102:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg_util.cpp",
    "line": 103,
    "function": null,
    "comment": "wg_util.cpp:103:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "wg_util.cpp",
    "line": 107,
    "function": null,
    "comment": "wg_util.cpp:107:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "wg_util.cpp",
    "line": 107,
    "function": null,
    "comment": "wg_util.cpp:107:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "wg0x_test.cpp",
    "line": null,
    "function": null,
    "comment": "wg0x_test.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "wg0x_test.cpp",
    "line": 4,
    "function": null,
    "comment": "wg0x_test.cpp:4:  Found C system header after C++ system header. Should be: wg0x_test.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not include the C standard headers. Use the C++ headers instead.",
    "file": "wg0x_test.cpp",
    "line": 4,
    "function": null,
    "comment": "wg0x_test.cpp:4:  Include 'cmath' instead of 'math.h'.  [build/include] [5]",
    "tags": ["hicpp","code-standards","headers","include","preprocessor","deprecation","c"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x_test.cpp",
    "line": 11,
    "function": null,
    "comment": "wg0x_test.cpp:11:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "wg0x_test.cpp",
    "line": 12,
    "function": null,
    "comment": "wg0x_test.cpp:12:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "wg0x_test.cpp",
    "line": 13,
    "function": null,
    "comment": "wg0x_test.cpp:13:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x_test.cpp",
    "line": 32,
    "function": null,
    "comment": "wg0x_test.cpp:32:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "wg0x_test.cpp",
    "line": 33,
    "function": null,
    "comment": "wg0x_test.cpp:33:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "wg0x_test.cpp",
    "line": 34,
    "function": null,
    "comment": "wg0x_test.cpp:34:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x_test.cpp",
    "line": 62,
    "function": null,
    "comment": "wg0x_test.cpp:62:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x_test.cpp",
    "line": 87,
    "function": null,
    "comment": "wg0x_test.cpp:87:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x_test.cpp",
    "line": 88,
    "function": null,
    "comment": "wg0x_test.cpp:88:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "wg0x_test.cpp",
    "line": 90,
    "function": null,
    "comment": "wg0x_test.cpp:90:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "wg0x_test.cpp",
    "line": 91,
    "function": null,
    "comment": "wg0x_test.cpp:91:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x_test.cpp",
    "line": 93,
    "function": null,
    "comment": "wg0x_test.cpp:93:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "wg0x_test.cpp",
    "line": 94,
    "function": null,
    "comment": "wg0x_test.cpp:94:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "wg0x_test.cpp",
    "line": 94,
    "function": null,
    "comment": "wg0x_test.cpp:94:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "wg0x_test.cpp",
    "line": 95,
    "function": null,
    "comment": "wg0x_test.cpp:95:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "wg0x_test.cpp",
    "line": 95,
    "function": null,
    "comment": "wg0x_test.cpp:95:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "wg0x_test.cpp",
    "line": 96,
    "function": null,
    "comment": "wg0x_test.cpp:96:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x_test.cpp",
    "line": 97,
    "function": null,
    "comment": "wg0x_test.cpp:97:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "wg0x_test.cpp",
    "line": 99,
    "function": null,
    "comment": "wg0x_test.cpp:99:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "wg0x_test.cpp",
    "line": 99,
    "function": null,
    "comment": "wg0x_test.cpp:99:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "wg0x_test.cpp",
    "line": 100,
    "function": null,
    "comment": "wg0x_test.cpp:100:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "wg0x_test.cpp",
    "line": 100,
    "function": null,
    "comment": "wg0x_test.cpp:100:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "wg0x_test.cpp",
    "line": 101,
    "function": null,
    "comment": "wg0x_test.cpp:101:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "wg0x_test.cpp",
    "line": 102,
    "function": null,
    "comment": "wg0x_test.cpp:102:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "wg0x_test.cpp",
    "line": 103,
    "function": null,
    "comment": "wg0x_test.cpp:103:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "wg0x_test.cpp",
    "line": 104,
    "function": null,
    "comment": "wg0x_test.cpp:104:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "wg0x_test.cpp",
    "line": 108,
    "function": null,
    "comment": "wg0x_test.cpp:108:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "wg0x_test.cpp",
    "line": 108,
    "function": null,
    "comment": "wg0x_test.cpp:108:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x_test.cpp",
    "line": 111,
    "function": null,
    "comment": "wg0x_test.cpp:111:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "wg0x_test.cpp",
    "line": 111,
    "function": null,
    "comment": "wg0x_test.cpp:111:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "wg0x_test.cpp",
    "line": 112,
    "function": null,
    "comment": "wg0x_test.cpp:112:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "wg0x_test.cpp",
    "line": 113,
    "function": null,
    "comment": "wg0x_test.cpp:113:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "wg0x_test.cpp",
    "line": 114,
    "function": null,
    "comment": "wg0x_test.cpp:114:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "wg0x_test.cpp",
    "line": 115,
    "function": null,
    "comment": "wg0x_test.cpp:115:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "wg0x_test.cpp",
    "line": 116,
    "function": null,
    "comment": "wg0x_test.cpp:116:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x_test.cpp",
    "line": 118,
    "function": null,
    "comment": "wg0x_test.cpp:118:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "wg0x_test.cpp",
    "line": 118,
    "function": null,
    "comment": "wg0x_test.cpp:118:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "wg0x_test.cpp",
    "line": 119,
    "function": null,
    "comment": "wg0x_test.cpp:119:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "wg0x_test.cpp",
    "line": 120,
    "function": null,
    "comment": "wg0x_test.cpp:120:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "wg0x_test.cpp",
    "line": 121,
    "function": null,
    "comment": "wg0x_test.cpp:121:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "wg0x_test.cpp",
    "line": 122,
    "function": null,
    "comment": "wg0x_test.cpp:122:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "wg0x_test.cpp",
    "line": 123,
    "function": null,
    "comment": "wg0x_test.cpp:123:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x_test.cpp",
    "line": 125,
    "function": null,
    "comment": "wg0x_test.cpp:125:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "wg0x_test.cpp",
    "line": 125,
    "function": null,
    "comment": "wg0x_test.cpp:125:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "wg0x_test.cpp",
    "line": 126,
    "function": null,
    "comment": "wg0x_test.cpp:126:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "wg0x_test.cpp",
    "line": 127,
    "function": null,
    "comment": "wg0x_test.cpp:127:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "wg0x_test.cpp",
    "line": 128,
    "function": null,
    "comment": "wg0x_test.cpp:128:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "wg0x_test.cpp",
    "line": 129,
    "function": null,
    "comment": "wg0x_test.cpp:129:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "wg0x_test.cpp",
    "line": 130,
    "function": null,
    "comment": "wg0x_test.cpp:130:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "wg0x_test.cpp",
    "line": 133,
    "function": null,
    "comment": "wg0x_test.cpp:133:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "wg0x_test.cpp",
    "line": 136,
    "function": null,
    "comment": "wg0x_test.cpp:136:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "wg0x_test.cpp",
    "line": 136,
    "function": null,
    "comment": "wg0x_test.cpp:136:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x_test.cpp",
    "line": 138,
    "function": null,
    "comment": "wg0x_test.cpp:138:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "wg0x_test.cpp",
    "line": 138,
    "function": null,
    "comment": "wg0x_test.cpp:138:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "wg0x_test.cpp",
    "line": 139,
    "function": null,
    "comment": "wg0x_test.cpp:139:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "wg0x_test.cpp",
    "line": 140,
    "function": null,
    "comment": "wg0x_test.cpp:140:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "wg0x_test.cpp",
    "line": 141,
    "function": null,
    "comment": "wg0x_test.cpp:141:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "wg0x_test.cpp",
    "line": 142,
    "function": null,
    "comment": "wg0x_test.cpp:142:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "wg0x_test.cpp",
    "line": 143,
    "function": null,
    "comment": "wg0x_test.cpp:143:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "wg0x_test.cpp",
    "line": 145,
    "function": null,
    "comment": "wg0x_test.cpp:145:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "wg0x_test.cpp",
    "line": 145,
    "function": null,
    "comment": "wg0x_test.cpp:145:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "wg0x_test.cpp",
    "line": 146,
    "function": null,
    "comment": "wg0x_test.cpp:146:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "wg0x_test.cpp",
    "line": 147,
    "function": null,
    "comment": "wg0x_test.cpp:147:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "wg0x_test.cpp",
    "line": 148,
    "function": null,
    "comment": "wg0x_test.cpp:148:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "wg0x_test.cpp",
    "line": 149,
    "function": null,
    "comment": "wg0x_test.cpp:149:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "wg0x_test.cpp",
    "line": 150,
    "function": null,
    "comment": "wg0x_test.cpp:150:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "wg0x_test.cpp",
    "line": 152,
    "function": null,
    "comment": "wg0x_test.cpp:152:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "wg0x_test.cpp",
    "line": 153,
    "function": null,
    "comment": "wg0x_test.cpp:153:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "wg0x_test.cpp",
    "line": 154,
    "function": null,
    "comment": "wg0x_test.cpp:154:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "wg0x_test.cpp",
    "line": 155,
    "function": null,
    "comment": "wg0x_test.cpp:155:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "wg0x_test.cpp",
    "line": 156,
    "function": null,
    "comment": "wg0x_test.cpp:156:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "wg0x_test.cpp",
    "line": 157,
    "function": null,
    "comment": "wg0x_test.cpp:157:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "wg0x_test.cpp",
    "line": 164,
    "function": null,
    "comment": "wg0x_test.cpp:164:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Every source and header file must contain a license and copyright statement at the beginning of the file.",
    "file": "motor_heating_model_test.cpp",
    "line": null,
    "function": null,
    "comment": "motor_heating_model_test.cpp:0:  No copyright message found.  You should have a line: 'Copyright [year] <Copyright Owner>'  [legal/copyright] [5]",
    "tags": ["ros","comments","code-standards","google-cpp","license","copyright"]
  },
  {
    "rule": "Do not include the C standard headers. Use the C++ headers instead.",
    "file": "motor_heating_model_test.cpp",
    "line": 2,
    "function": null,
    "comment": "motor_heating_model_test.cpp:2:  Include 'cstring' instead of 'string.h'.  [build/include] [5]",
    "tags": ["hicpp","code-standards","headers","include","preprocessor","deprecation","c"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "motor_heating_model_test.cpp",
    "line": 5,
    "function": null,
    "comment": "motor_heating_model_test.cpp:5:  Include 'boost/make_shared.hpp' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model_test.cpp",
    "line": 22,
    "function": null,
    "comment": "motor_heating_model_test.cpp:22:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model_test.cpp",
    "line": 35,
    "function": null,
    "comment": "motor_heating_model_test.cpp:35:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "motor_heating_model_test.cpp",
    "line": 36,
    "function": null,
    "comment": "motor_heating_model_test.cpp:36:  protected: should be indented +1 space inside class UpdateFromDowntimeTest  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model_test.cpp",
    "line": 38,
    "function": null,
    "comment": "motor_heating_model_test.cpp:38:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "motor_heating_model_test.cpp",
    "line": 40,
    "function": null,
    "comment": "motor_heating_model_test.cpp:40:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model_test.cpp",
    "line": 41,
    "function": null,
    "comment": "motor_heating_model_test.cpp:41:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model_test.cpp",
    "line": 42,
    "function": null,
    "comment": "motor_heating_model_test.cpp:42:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model_test.cpp",
    "line": 46,
    "function": null,
    "comment": "motor_heating_model_test.cpp:46:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model_test.cpp",
    "line": 48,
    "function": null,
    "comment": "motor_heating_model_test.cpp:48:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model_test.cpp",
    "line": 49,
    "function": null,
    "comment": "motor_heating_model_test.cpp:49:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "motor_heating_model_test.cpp",
    "line": 53,
    "function": null,
    "comment": "motor_heating_model_test.cpp:53:  public: should be indented +1 space inside class UpdateFromDowntimeTest  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "motor_heating_model_test.cpp",
    "line": 54,
    "function": null,
    "comment": "motor_heating_model_test.cpp:54:  Do not leave a blank line after 'public:'  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model_test.cpp",
    "line": 56,
    "function": null,
    "comment": "motor_heating_model_test.cpp:56:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "motor_heating_model_test.cpp",
    "line": 58,
    "function": null,
    "comment": "motor_heating_model_test.cpp:58:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "motor_heating_model_test.cpp",
    "line": 64,
    "function": null,
    "comment": "motor_heating_model_test.cpp:64:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model_test.cpp",
    "line": 65,
    "function": null,
    "comment": "motor_heating_model_test.cpp:65:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model_test.cpp",
    "line": 68,
    "function": null,
    "comment": "motor_heating_model_test.cpp:68:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model_test.cpp",
    "line": 79,
    "function": null,
    "comment": "motor_heating_model_test.cpp:79:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model_test.cpp",
    "line": 81,
    "function": null,
    "comment": "motor_heating_model_test.cpp:81:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model_test.cpp",
    "line": 82,
    "function": null,
    "comment": "motor_heating_model_test.cpp:82:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "motor_heating_model_test.cpp",
    "line": 86,
    "function": null,
    "comment": "motor_heating_model_test.cpp:86:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model_test.cpp",
    "line": 87,
    "function": null,
    "comment": "motor_heating_model_test.cpp:87:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model_test.cpp",
    "line": 89,
    "function": null,
    "comment": "motor_heating_model_test.cpp:89:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "motor_heating_model_test.cpp",
    "line": 89,
    "function": null,
    "comment": "motor_heating_model_test.cpp:89:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "motor_heating_model_test.cpp",
    "line": 89,
    "function": null,
    "comment": "motor_heating_model_test.cpp:89:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model_test.cpp",
    "line": 90,
    "function": null,
    "comment": "motor_heating_model_test.cpp:90:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "motor_heating_model_test.cpp",
    "line": 90,
    "function": null,
    "comment": "motor_heating_model_test.cpp:90:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "motor_heating_model_test.cpp",
    "line": 90,
    "function": null,
    "comment": "motor_heating_model_test.cpp:90:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model_test.cpp",
    "line": 96,
    "function": null,
    "comment": "motor_heating_model_test.cpp:96:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model_test.cpp",
    "line": 100,
    "function": null,
    "comment": "motor_heating_model_test.cpp:100:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model_test.cpp",
    "line": 101,
    "function": null,
    "comment": "motor_heating_model_test.cpp:101:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model_test.cpp",
    "line": 102,
    "function": null,
    "comment": "motor_heating_model_test.cpp:102:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "motor_heating_model_test.cpp",
    "line": 102,
    "function": null,
    "comment": "motor_heating_model_test.cpp:102:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "motor_heating_model_test.cpp",
    "line": 102,
    "function": null,
    "comment": "motor_heating_model_test.cpp:102:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model_test.cpp",
    "line": 103,
    "function": null,
    "comment": "motor_heating_model_test.cpp:103:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "motor_heating_model_test.cpp",
    "line": 103,
    "function": null,
    "comment": "motor_heating_model_test.cpp:103:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "motor_heating_model_test.cpp",
    "line": 103,
    "function": null,
    "comment": "motor_heating_model_test.cpp:103:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model_test.cpp",
    "line": 108,
    "function": null,
    "comment": "motor_heating_model_test.cpp:108:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model_test.cpp",
    "line": 112,
    "function": null,
    "comment": "motor_heating_model_test.cpp:112:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model_test.cpp",
    "line": 113,
    "function": null,
    "comment": "motor_heating_model_test.cpp:113:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model_test.cpp",
    "line": 114,
    "function": null,
    "comment": "motor_heating_model_test.cpp:114:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "motor_heating_model_test.cpp",
    "line": 114,
    "function": null,
    "comment": "motor_heating_model_test.cpp:114:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "motor_heating_model_test.cpp",
    "line": 114,
    "function": null,
    "comment": "motor_heating_model_test.cpp:114:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model_test.cpp",
    "line": 115,
    "function": null,
    "comment": "motor_heating_model_test.cpp:115:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "motor_heating_model_test.cpp",
    "line": 115,
    "function": null,
    "comment": "motor_heating_model_test.cpp:115:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "motor_heating_model_test.cpp",
    "line": 115,
    "function": null,
    "comment": "motor_heating_model_test.cpp:115:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model_test.cpp",
    "line": 120,
    "function": null,
    "comment": "motor_heating_model_test.cpp:120:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model_test.cpp",
    "line": 124,
    "function": null,
    "comment": "motor_heating_model_test.cpp:124:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model_test.cpp",
    "line": 125,
    "function": null,
    "comment": "motor_heating_model_test.cpp:125:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model_test.cpp",
    "line": 126,
    "function": null,
    "comment": "motor_heating_model_test.cpp:126:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "motor_heating_model_test.cpp",
    "line": 126,
    "function": null,
    "comment": "motor_heating_model_test.cpp:126:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "motor_heating_model_test.cpp",
    "line": 126,
    "function": null,
    "comment": "motor_heating_model_test.cpp:126:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "motor_heating_model_test.cpp",
    "line": 127,
    "function": null,
    "comment": "motor_heating_model_test.cpp:127:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "motor_heating_model_test.cpp",
    "line": 127,
    "function": null,
    "comment": "motor_heating_model_test.cpp:127:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "There should never be a space before a ( when it is a function argument. Closing parenthesis should not be preceded only by whitespaces.",
    "file": "motor_heating_model_test.cpp",
    "line": 127,
    "function": null,
    "comment": "motor_heating_model_test.cpp:127:  Extra space before )  [whitespace/parens] [2]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model_test.cpp",
    "line": 133,
    "function": null,
    "comment": "motor_heating_model_test.cpp:133:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model_test.cpp",
    "line": 136,
    "function": null,
    "comment": "motor_heating_model_test.cpp:136:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model_test.cpp",
    "line": 138,
    "function": null,
    "comment": "motor_heating_model_test.cpp:138:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "motor_heating_model_test.cpp",
    "line": 139,
    "function": null,
    "comment": "motor_heating_model_test.cpp:139:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "motor_heating_model_test.cpp",
    "line": 139,
    "function": null,
    "comment": "motor_heating_model_test.cpp:139:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "motor_heating_model_test.cpp",
    "line": 147,
    "function": null,
    "comment": "motor_heating_model_test.cpp:147:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ek1122.cpp",
    "line": 42,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ek1122.cpp",
    "line": 55,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ethercat_com.cpp",
    "line": 53,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ethercat_com.cpp",
    "line": 74,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ethercat_com.cpp",
    "line": 107,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ethercat_com.cpp",
    "line": 109,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ethercat_com.cpp",
    "line": 118,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ethercat_com.cpp",
    "line": 120,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ethercat_com.cpp",
    "line": 132,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ethercat_com.cpp",
    "line": 134,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ethercat_com.cpp",
    "line": 185,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ethercat_device.cpp",
    "line": 45,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ethercat_device.cpp",
    "line": 51,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ethercat_device.cpp",
    "line": 69,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ethercat_device.cpp",
    "line": 81,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ethercat_device.cpp",
    "line": 87,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ethercat_device.cpp",
    "line": 93,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ethercat_device.cpp",
    "line": 148,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ethercat_device.cpp",
    "line": 222,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ethercat_device.cpp",
    "line": 273,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ethercat_device.cpp",
    "line": 287,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ethercat_device.cpp",
    "line": 331,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ethercat_device.cpp",
    "line": 349,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ethercat_device.cpp",
    "line": 375,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ethercat_device.cpp",
    "line": 398,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ethercat_device.cpp",
    "line": 445,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ethercat_device.cpp",
    "line": 492,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ethercat_device.cpp",
    "line": 538,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Declarations should be at the smallest feasible scope.",
    "file": "ethercat_hardware.cpp",
    "line": 291,
    "function": null,
    "comment": "The scope of the variable 'DEFAULT_TIMEOUT' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:void f(int x){    i",
    "tags": ["code-standards","jsf-av-cpp","scope"]
  },
  {
    "rule": "Declarations should be at the smallest feasible scope.",
    "file": "ethercat_hardware.cpp",
    "line": 716,
    "function": null,
    "comment": "The scope of the variable 'start_address' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:void f(int x){    int",
    "tags": ["code-standards","jsf-av-cpp","scope"]
  },
  {
    "rule": "Ensure that no expression is redundant.",
    "file": "ethercat_hardware.cpp",
    "line": 140,
    "function": null,
    "comment": "Variable 'sock' is assigned a value that is never used.",
    "tags": ["hicpp","code-standards","redundancy"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ethercat_hardware.cpp",
    "line": 104,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ethercat_hardware.cpp",
    "line": 105,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ethercat_hardware.cpp",
    "line": 107,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ethercat_hardware.cpp",
    "line": 122,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ethercat_hardware.cpp",
    "line": 124,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ethercat_hardware.cpp",
    "line": 133,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ethercat_hardware.cpp",
    "line": 174,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ethercat_hardware.cpp",
    "line": 195,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ethercat_hardware.cpp",
    "line": 211,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ethercat_hardware.cpp",
    "line": 267,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ethercat_hardware.cpp",
    "line": 292,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ethercat_hardware.cpp",
    "line": 299,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ethercat_hardware.cpp",
    "line": 320,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ethercat_hardware.cpp",
    "line": 357,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ethercat_hardware.cpp",
    "line": 359,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ethercat_hardware.cpp",
    "line": 360,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ethercat_hardware.cpp",
    "line": 535,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ethercat_hardware.cpp",
    "line": 582,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ethercat_hardware.cpp",
    "line": 614,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ethercat_hardware.cpp",
    "line": 716,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ethercat_hardware.cpp",
    "line": 718,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ethercat_hardware.cpp",
    "line": 719,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ethercat_hardware.cpp",
    "line": 721,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ethercat_hardware.cpp",
    "line": 944,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ethercat_hardware.cpp",
    "line": 978,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ethercat_hardware.cpp",
    "line": 982,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ethercat_hardware.cpp",
    "line": 995,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ethercat_hardware.cpp",
    "line": 1014,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not rely on the sequence of evaluation within an expression.",
    "file": "ethercat_hardware.cpp",
    "line": 767,
    "function": null,
    "comment": "Found assignment as a subexpression.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","evaluation-order","expressions"]
  },
  {
    "rule": "Do not rely on the sequence of evaluation within an expression.",
    "file": "ethercat_hardware.cpp",
    "line": 970,
    "function": null,
    "comment": "Found assignment as a subexpression.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","evaluation-order","expressions"]
  },
  {
    "rule": "Wrap use of the C Standard Library.",
    "file": "ethercat_hardware.cpp",
    "line": 124,
    "function": null,
    "comment": "Found use of errno.",
    "tags": ["hicpp","code-standards","c","libraries","c-standard-library","misra-cpp"]
  },
  {
    "rule": "Wrap use of the C Standard Library.",
    "file": "ethercat_hardware.cpp",
    "line": 133,
    "function": null,
    "comment": "Found use of errno.",
    "tags": ["hicpp","code-standards","c","libraries","c-standard-library","misra-cpp"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ethernet_interface_info.cpp",
    "line": 69,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ethernet_interface_info.cpp",
    "line": 82,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ethernet_interface_info.cpp",
    "line": 99,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "ethernet_interface_info.cpp",
    "line": 130,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Wrap use of the C Standard Library.",
    "file": "ethernet_interface_info.cpp",
    "line": 54,
    "function": null,
    "comment": "Found use of errno.",
    "tags": ["hicpp","code-standards","c","libraries","c-standard-library","misra-cpp"]
  },
  {
    "rule": "Wrap use of the C Standard Library.",
    "file": "ethernet_interface_info.cpp",
    "line": 72,
    "function": null,
    "comment": "Found use of errno.",
    "tags": ["hicpp","code-standards","c","libraries","c-standard-library","misra-cpp"]
  },
  {
    "rule": "Wrap use of the C Standard Library.",
    "file": "ethernet_interface_info.cpp",
    "line": 94,
    "function": null,
    "comment": "Found use of errno.",
    "tags": ["hicpp","code-standards","c","libraries","c-standard-library","misra-cpp"]
  },
  {
    "rule": "Wrap use of the C Standard Library.",
    "file": "ethernet_interface_info.cpp",
    "line": 150,
    "function": null,
    "comment": "Found use of errno.",
    "tags": ["hicpp","code-standards","c","libraries","c-standard-library","misra-cpp"]
  },
  {
    "rule": "Wrap use of the C Standard Library.",
    "file": "ethernet_interface_info.cpp",
    "line": 175,
    "function": null,
    "comment": "Found use of errno.",
    "tags": ["hicpp","code-standards","c","libraries","c-standard-library","misra-cpp"]
  },
  {
    "rule": "Declarations should be at the smallest feasible scope.",
    "file": "motor_heating_model.cpp",
    "line": 404,
    "function": null,
    "comment": "The scope of the variable 'ambient_temperature_sum' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:void f(int x)",
    "tags": ["code-standards","jsf-av-cpp","scope"]
  },
  {
    "rule": "Declarations should be at the smallest feasible scope.",
    "file": "motor_heating_model.cpp",
    "line": 405,
    "function": null,
    "comment": "The scope of the variable 'duration_since_last_sample' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:void f(int",
    "tags": ["code-standards","jsf-av-cpp","scope"]
  },
  {
    "rule": "Declarations should be at the smallest feasible scope.",
    "file": "motor_heating_model.cpp",
    "line": 437,
    "function": null,
    "comment": "The scope of the variable 'ERROR' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:void f(int x){    int i = 0;",
    "tags": ["code-standards","jsf-av-cpp","scope"]
  },
  {
    "rule": "Declarations should be at the smallest feasible scope.",
    "file": "motor_heating_model.cpp",
    "line": 438,
    "function": null,
    "comment": "The scope of the variable 'WARN' can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for 'i' can be reduced:void f(int x){    int i = 0; ",
    "tags": ["code-standards","jsf-av-cpp","scope"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "motor_heating_model.cpp",
    "line": 340,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "motor_heating_model.cpp",
    "line": 343,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "motor_heating_model.cpp",
    "line": 513,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "motor_heating_model.cpp",
    "line": 600,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "motor_heating_model.cpp",
    "line": 713,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Wrap use of the C Standard Library.",
    "file": "motor_heating_model.cpp",
    "line": 713,
    "function": null,
    "comment": "Found use of errno.",
    "tags": ["hicpp","code-standards","c","libraries","c-standard-library","misra-cpp"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "motor_model.cpp",
    "line": 6,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "motor_model.cpp",
    "line": 105,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "motor_model.cpp",
    "line": 110,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "motor_model.cpp",
    "line": 125,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "motor_model.cpp",
    "line": 156,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "motor_model.cpp",
    "line": 327,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "motor_model.cpp",
    "line": 358,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Ensure that no expression is redundant.",
    "file": "motorconf.cpp",
    "line": 107,
    "function": null,
    "comment": "Variable 'sock' is assigned a value that is never used.",
    "tags": ["hicpp","code-standards","redundancy"]
  },
  {
    "rule": "Do not use default arguments.",
    "file": "motorconf.cpp",
    "line": 393,
    "function": null,
    "comment": "Found function with default arguments.",
    "tags": ["hicpp","code-standards","functions","parameters","default-arguments","arguments"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "motorconf.cpp",
    "line": 91,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "motorconf.cpp",
    "line": 93,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "motorconf.cpp",
    "line": 101,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "motorconf.cpp",
    "line": 151,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "motorconf.cpp",
    "line": 153,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "motorconf.cpp",
    "line": 223,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "motorconf.cpp",
    "line": 249,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "motorconf.cpp",
    "line": 301,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "motorconf.cpp",
    "line": 370,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "motorconf.cpp",
    "line": 385,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "motorconf.cpp",
    "line": 451,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "motorconf.cpp",
    "line": 472,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "motorconf.cpp",
    "line": 604,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "motorconf.cpp",
    "line": 639,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "motorconf.cpp",
    "line": 669,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "motorconf.cpp",
    "line": 670,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "motorconf.cpp",
    "line": 736,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Wrap use of the C Standard Library.",
    "file": "motorconf.cpp",
    "line": 93,
    "function": null,
    "comment": "Found use of errno.",
    "tags": ["hicpp","code-standards","c","libraries","c-standard-library","misra-cpp"]
  },
  {
    "rule": "Wrap use of the C Standard Library.",
    "file": "motorconf.cpp",
    "line": 101,
    "function": null,
    "comment": "Found use of errno.",
    "tags": ["hicpp","code-standards","c","libraries","c-standard-library","misra-cpp"]
  },
  {
    "rule": "Wrap use of the C Standard Library.",
    "file": "motorconf.cpp",
    "line": 737,
    "function": null,
    "comment": "Found use of errno.",
    "tags": ["hicpp","code-standards","c","libraries","c-standard-library","misra-cpp"]
  },
  {
    "rule": "Wrap use of the C Standard Library.",
    "file": "motorconf.cpp",
    "line": 747,
    "function": null,
    "comment": "Found use of errno.",
    "tags": ["hicpp","code-standards","c","libraries","c-standard-library","misra-cpp"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg014.cpp",
    "line": 42,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg014.cpp",
    "line": 60,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg021.cpp",
    "line": 54,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg021.cpp",
    "line": 58,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg021.cpp",
    "line": 115,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg021.cpp",
    "line": 120,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg021.cpp",
    "line": 135,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not rely on the sequence of evaluation within an expression.",
    "file": "wg021.cpp",
    "line": 63,
    "function": null,
    "comment": "Found assignment as a subexpression.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","evaluation-order","expressions"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg05.cpp",
    "line": 53,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg05.cpp",
    "line": 57,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg05.cpp",
    "line": 116,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg05.cpp",
    "line": 123,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg06.cpp",
    "line": 88,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg06.cpp",
    "line": 101,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg06.cpp",
    "line": 106,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg06.cpp",
    "line": 201,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg06.cpp",
    "line": 208,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg06.cpp",
    "line": 307,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg06.cpp",
    "line": 463,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg06.cpp",
    "line": 550,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg06.cpp",
    "line": 566,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg06.cpp",
    "line": 587,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg06.cpp",
    "line": 596,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg06.cpp",
    "line": 599,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg06.cpp",
    "line": 611,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg06.cpp",
    "line": 650,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg06.cpp",
    "line": 652,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg06.cpp",
    "line": 681,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg06.cpp",
    "line": 684,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg06.cpp",
    "line": 715,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg06.cpp",
    "line": 717,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg06.cpp",
    "line": 722,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg06.cpp",
    "line": 724,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg06.cpp",
    "line": 726,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg06.cpp",
    "line": 743,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg06.cpp",
    "line": 747,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg06.cpp",
    "line": 771,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg06.cpp",
    "line": 778,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg06.cpp",
    "line": 887,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg06.cpp",
    "line": 918,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg06.cpp",
    "line": 919,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg06.cpp",
    "line": 921,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg06.cpp",
    "line": 972,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg06.cpp",
    "line": 983,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg06.cpp",
    "line": 1021,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg06.cpp",
    "line": 1032,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg06.cpp",
    "line": 1076,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg06.cpp",
    "line": 1080,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg06.cpp",
    "line": 1090,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg06.cpp",
    "line": 1094,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg06.cpp",
    "line": 1098,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg06.cpp",
    "line": 1109,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg06.cpp",
    "line": 1128,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg06.cpp",
    "line": 1191,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg06.cpp",
    "line": 1205,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg06.cpp",
    "line": 1221,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg06.cpp",
    "line": 1222,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not rely on the sequence of evaluation within an expression.",
    "file": "wg06.cpp",
    "line": 115,
    "function": null,
    "comment": "Found assignment as a subexpression.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","evaluation-order","expressions"]
  },
  {
    "rule": "Do not rely on the sequence of evaluation within an expression.",
    "file": "wg06.cpp",
    "line": 120,
    "function": null,
    "comment": "Found assignment as a subexpression.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","evaluation-order","expressions"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg0x.cpp",
    "line": 181,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg0x.cpp",
    "line": 197,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg0x.cpp",
    "line": 252,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg0x.cpp",
    "line": 394,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg0x.cpp",
    "line": 664,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg0x.cpp",
    "line": 698,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg0x.cpp",
    "line": 699,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg0x.cpp",
    "line": 862,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg0x.cpp",
    "line": 873,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg0x.cpp",
    "line": 1101,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg0x.cpp",
    "line": 1108,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg0x.cpp",
    "line": 1120,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg0x.cpp",
    "line": 1135,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg0x.cpp",
    "line": 1155,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg0x.cpp",
    "line": 1298,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg0x.cpp",
    "line": 1417,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use the deprecated register keyword.",
    "file": "wg_eeprom.cpp",
    "line": 429,
    "function": null,
    "comment": "Do not use the deprecated register keyword.",
    "tags": ["hicpp","code-standards","cpp11","deprecation","register"]
  },
  {
    "rule": "Do not use the deprecated register keyword.",
    "file": "wg_eeprom.cpp",
    "line": 459,
    "function": null,
    "comment": "Do not use the deprecated register keyword.",
    "tags": ["hicpp","code-standards","cpp11","deprecation","register"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg_eeprom.cpp",
    "line": 59,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg_eeprom.cpp",
    "line": 65,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg_eeprom.cpp",
    "line": 71,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg_eeprom.cpp",
    "line": 124,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg_eeprom.cpp",
    "line": 174,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg_eeprom.cpp",
    "line": 221,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg_eeprom.cpp",
    "line": 287,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg_eeprom.cpp",
    "line": 360,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg_mailbox.cpp",
    "line": 72,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg_mailbox.cpp",
    "line": 77,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg_mailbox.cpp",
    "line": 84,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg_mailbox.cpp",
    "line": 89,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg_mailbox.cpp",
    "line": 126,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg_mailbox.cpp",
    "line": 141,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg_mailbox.cpp",
    "line": 165,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg_mailbox.cpp",
    "line": 167,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg_mailbox.cpp",
    "line": 180,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg_mailbox.cpp",
    "line": 182,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg_mailbox.cpp",
    "line": 184,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg_mailbox.cpp",
    "line": 208,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg_mailbox.cpp",
    "line": 229,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg_mailbox.cpp",
    "line": 311,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg_mailbox.cpp",
    "line": 363,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg_mailbox.cpp",
    "line": 364,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg_mailbox.cpp",
    "line": 375,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg_mailbox.cpp",
    "line": 415,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg_mailbox.cpp",
    "line": 416,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg_mailbox.cpp",
    "line": 427,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg_mailbox.cpp",
    "line": 466,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg_mailbox.cpp",
    "line": 488,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg_mailbox.cpp",
    "line": 521,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg_mailbox.cpp",
    "line": 523,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg_mailbox.cpp",
    "line": 622,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg_mailbox.cpp",
    "line": 681,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg_mailbox.cpp",
    "line": 706,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg_mailbox.cpp",
    "line": 733,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg_mailbox.cpp",
    "line": 734,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg_mailbox.cpp",
    "line": 738,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg_mailbox.cpp",
    "line": 812,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg_mailbox.cpp",
    "line": 817,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg_mailbox.cpp",
    "line": 831,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg_mailbox.cpp",
    "line": 908,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg_mailbox.cpp",
    "line": 919,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg_mailbox.cpp",
    "line": 939,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg_mailbox.cpp",
    "line": 944,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg_mailbox.cpp",
    "line": 959,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg_mailbox.cpp",
    "line": 974,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Wrap use of the C Standard Library.",
    "file": "wg_mailbox.cpp",
    "line": 184,
    "function": null,
    "comment": "Found use of errno.",
    "tags": ["hicpp","code-standards","c","libraries","c-standard-library","misra-cpp"]
  },
  {
    "rule": "Wrap use of the C Standard Library.",
    "file": "wg_mailbox.cpp",
    "line": 208,
    "function": null,
    "comment": "Found use of errno.",
    "tags": ["hicpp","code-standards","c","libraries","c-standard-library","misra-cpp"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg_soft_processor.cpp",
    "line": 29,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg_soft_processor.cpp",
    "line": 78,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg_soft_processor.cpp",
    "line": 87,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg_util.cpp",
    "line": 41,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg_util.cpp",
    "line": 49,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg_util.cpp",
    "line": 52,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg_util.cpp",
    "line": 53,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg_util.cpp",
    "line": 64,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg_util.cpp",
    "line": 80,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg_util.cpp",
    "line": 86,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg_util.cpp",
    "line": 101,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "motor_heating_model_test.cpp",
    "line": 55,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "motor_heating_model_test.cpp",
    "line": 64,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "motor_heating_model_test.cpp",
    "line": 84,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "motor_heating_model_test.cpp",
    "line": 86,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "motor_heating_model_test.cpp",
    "line": 97,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "motor_heating_model_test.cpp",
    "line": 109,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "motor_heating_model_test.cpp",
    "line": 121,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "motor_heating_model_test.cpp",
    "line": 146,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg0x_test.cpp",
    "line": 88,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg0x_test.cpp",
    "line": 89,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "wg0x_test.cpp",
    "line": 163,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "motor_heating_model.cpp",
    "line": 272,
    "function": null,
    "comment": "The function 'calculateMotorHeatPower' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "motor_heating_model.cpp",
    "line": 184,
    "function": null,
    "comment": "The function 'createSaveDirectory' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "ethercat_hardware.cpp",
    "line": 953,
    "function": null,
    "comment": "The function 'printCounters' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "wg014.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "wg014.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "ethernet_interface_info.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "ethernet_interface_info.cpp",
    "line": 46,
    "function": "initialize",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "ethernet_interface_info.cpp",
    "line": 199,
    "function": "publishDiagnostics",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 15",
    "file": "ethernet_interface_info.cpp",
    "line": 199,
    "function": "publishDiagnostics",
    "comment": "CC is greater than 15",
    "tags": ["metrics","ros","cyclomatic-complexity","kth"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "motorconf.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "motorconf.cpp",
    "line": 88,
    "function": "init",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 15",
    "file": "motorconf.cpp",
    "line": 88,
    "function": "init",
    "comment": "CC is greater than 15",
    "tags": ["metrics","ros","cyclomatic-complexity","kth"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "motorconf.cpp",
    "line": 639,
    "function": "main",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 15",
    "file": "motorconf.cpp",
    "line": 639,
    "function": "main",
    "comment": "CC is greater than 15",
    "tags": ["metrics","ros","cyclomatic-complexity","kth"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "motorconf.cpp",
    "line": 492,
    "function": "parseConfig",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 15",
    "file": "motorconf.cpp",
    "line": 492,
    "function": "parseConfig",
    "comment": "CC is greater than 15",
    "tags": ["metrics","ros","cyclomatic-complexity","kth"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "motorconf.cpp",
    "line": 301,
    "function": "updateHeatingConfig",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "wg05.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "wg05.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Maximum coupling between objects: 5",
    "file": "motor_model.cpp",
    "line": null,
    "function": null,
    "comment": "CBO is greater than 5, MotorModel, 6",
    "tags": ["metrics","nasa-satc","ros","coupling"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "motor_model.cpp",
    "line": 198,
    "function": "sample",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "motor_model.cpp",
    "line": 313,
    "function": "verify",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 15",
    "file": "motor_model.cpp",
    "line": 313,
    "function": "verify",
    "comment": "CC is greater than 15",
    "tags": ["metrics","ros","cyclomatic-complexity","kth"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "ek1122.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "ek1122.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "wg_soft_processor.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Maximum coupling between objects: 5",
    "file": "wg_soft_processor.cpp",
    "line": null,
    "function": null,
    "comment": "CBO is greater than 5, WGSoftProcessor, 8",
    "tags": ["metrics","nasa-satc","ros","coupling"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "wg_eeprom.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "wg021.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum coupling between objects: 5",
    "file": "wg06.cpp",
    "line": null,
    "function": null,
    "comment": "CBO is greater than 5, WG06, 9",
    "tags": ["metrics","nasa-satc","ros","coupling"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "wg06.cpp",
    "line": 825,
    "function": "diagnosticsAccel",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "wg06.cpp",
    "line": 885,
    "function": "diagnosticsPressure",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 15",
    "file": "wg06.cpp",
    "line": 885,
    "function": "diagnosticsPressure",
    "comment": "CC is greater than 15",
    "tags": ["metrics","ros","cyclomatic-complexity","kth"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "wg06.cpp",
    "line": 201,
    "function": "initialize",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 15",
    "file": "wg06.cpp",
    "line": 201,
    "function": "initialize",
    "comment": "CC is greater than 15",
    "tags": ["metrics","ros","cyclomatic-complexity","kth"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "wg06.cpp",
    "line": 342,
    "function": "initializeFT",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "wg06.cpp",
    "line": 705,
    "function": "unpackFT",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 15",
    "file": "wg06.cpp",
    "line": 705,
    "function": "unpackFT",
    "comment": "CC is greater than 15",
    "tags": ["metrics","ros","cyclomatic-complexity","kth"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "wg06.cpp",
    "line": 520,
    "function": "unpackPressure",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "wg06.cpp",
    "line": 459,
    "function": "unpackState",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "wg06.cpp",
    "line": 1152,
    "function": "getRosParams",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 15",
    "file": "wg06.cpp",
    "line": 1152,
    "function": "getRosParams",
    "comment": "CC is greater than 15",
    "tags": ["metrics","ros","cyclomatic-complexity","kth"]
  },
  {
    "rule": "Maximum coupling between objects: 5",
    "file": "motor_heating_model.cpp",
    "line": null,
    "function": null,
    "comment": "CBO is greater than 5, MotorHeatingModel, 6",
    "tags": ["metrics","nasa-satc","ros","coupling"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "motor_heating_model.cpp",
    "line": 555,
    "function": "loadTemperatureState",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 15",
    "file": "motor_heating_model.cpp",
    "line": 555,
    "function": "loadTemperatureState",
    "comment": "CC is greater than 15",
    "tags": ["metrics","ros","cyclomatic-complexity","kth"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "wg_mailbox.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Maximum coupling between objects: 5",
    "file": "wg0x.cpp",
    "line": null,
    "function": null,
    "comment": "CBO is greater than 5, WG0X, 15",
    "tags": ["metrics","nasa-satc","ros","coupling"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "wg0x.cpp",
    "line": 394,
    "function": "initialize",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 15",
    "file": "wg0x.cpp",
    "line": 394,
    "function": "initialize",
    "comment": "CC is greater than 15",
    "tags": ["metrics","ros","cyclomatic-complexity","kth"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "wg0x.cpp",
    "line": 295,
    "function": "initializeMotorHeatingModel",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 15",
    "file": "wg0x.cpp",
    "line": 295,
    "function": "initializeMotorHeatingModel",
    "comment": "CC is greater than 15",
    "tags": ["metrics","ros","cyclomatic-complexity","kth"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "wg0x.cpp",
    "line": 237,
    "function": "initializeMotorModel",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "wg0x.cpp",
    "line": 1207,
    "function": "publishGeneralDiagnostics",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "wg0x.cpp",
    "line": 737,
    "function": "verifyState",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 15",
    "file": "wg0x.cpp",
    "line": 737,
    "function": "verifyState",
    "comment": "CC is greater than 15",
    "tags": ["metrics","ros","cyclomatic-complexity","kth"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "ethercat_device.cpp",
    "line": 158,
    "function": "collect",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "ethercat_device.cpp",
    "line": 273,
    "function": "publish",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum coupling between objects: 5",
    "file": "ethercat_device.cpp",
    "line": null,
    "function": null,
    "comment": "CBO is greater than 5, EthercatDevice, 8",
    "tags": ["metrics","nasa-satc","ros","coupling"]
  },
  {
    "rule": "Maximum coupling between objects: 5",
    "file": "ethercat_hardware.cpp",
    "line": null,
    "function": null,
    "comment": "CBO is greater than 5, EthercatHardwareDiagnosticsPublisher, 7",
    "tags": ["metrics","nasa-satc","ros","coupling"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "ethercat_hardware.cpp",
    "line": 431,
    "function": "publishDiagnostics",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum coupling between objects: 5",
    "file": "ethercat_hardware.cpp",
    "line": null,
    "function": null,
    "comment": "CBO is greater than 5, EthercatHardware, 7",
    "tags": ["metrics","nasa-satc","ros","coupling"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "ethercat_hardware.cpp",
    "line": 119,
    "function": "init",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 15",
    "file": "ethercat_hardware.cpp",
    "line": 119,
    "function": "init",
    "comment": "CC is greater than 15",
    "tags": ["metrics","ros","cyclomatic-complexity","kth"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "ethercat_hardware.cpp",
    "line": 546,
    "function": "update",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "wg_util.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "wg_util.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "motor_heating_model_test.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  }
]