[
  {
    "rule": "The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_.",
    "file": "joint_effort_controller.h",
    "line": 35,
    "function": null,
    "comment": "joint_effort_controller.h:35:  #ifndef header guard has wrong style, please use: _HOME_ANDRE_ROS_HAROS_ANALYSER_JOINT_EFFORT_CONTROLLER_H_  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the guard's end should be '#endif  // <PROJECT>_<PATH>_<FILE>_H_' or '#endif  /* <PROJECT>_<PATH>_<FILE>_H_ */'.",
    "file": "joint_effort_controller.h",
    "line": 92,
    "function": null,
    "comment": "joint_effort_controller.h:92:  #endif line should be '#endif  // _HOME_ANDRE_ROS_HAROS_ANALYSER_JOINT_EFFORT_CONTROLLER_H_'  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "joint_effort_controller.h",
    "line": 56,
    "function": null,
    "comment": "joint_effort_controller.h:56:  Include 'pr2_controller_interface/controller.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_effort_controller.h",
    "line": 62,
    "function": null,
    "comment": "joint_effort_controller.h:62:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_effort_controller.h",
    "line": 65,
    "function": null,
    "comment": "joint_effort_controller.h:65:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "joint_effort_controller.h",
    "line": 66,
    "function": null,
    "comment": "joint_effort_controller.h:66:  public: should be indented +1 space inside class JointEffortController  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "joint_effort_controller.h",
    "line": 67,
    "function": null,
    "comment": "joint_effort_controller.h:67:  Do not leave a blank line after 'public:'  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_effort_controller.h",
    "line": 71,
    "function": null,
    "comment": "joint_effort_controller.h:71:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "joint_effort_controller.h",
    "line": 72,
    "function": null,
    "comment": "joint_effort_controller.h:72:  Is this a non-const reference? If so, make const or use a pointer: ros::NodeHandle &n  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "joint_effort_controller.h",
    "line": 81,
    "function": null,
    "comment": "joint_effort_controller.h:81:  private: should be indented +1 space inside class JointEffortController  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "joint_effort_controller.h",
    "line": 87,
    "function": null,
    "comment": "joint_effort_controller.h:87:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "joint_effort_controller.h",
    "line": 90,
    "function": null,
    "comment": "joint_effort_controller.h:90:  Namespace should be terminated with '// namespace controller'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "joint_effort_controller.h",
    "line": 71,
    "function": null,
    "comment": "joint_effort_controller.h:71:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_.",
    "file": "joint_spline_trajectory_controller.h",
    "line": 37,
    "function": null,
    "comment": "joint_spline_trajectory_controller.h:37:  #ifndef header guard has wrong style, please use: _HOME_ANDRE_ROS_HAROS_ANALYSER_JOINT_SPLINE_TRAJECTORY_CONTROLLER_H_  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the symbol name should be <PACKAGE>_<PATH>_<FILE>_H.",
    "file": "joint_spline_trajectory_controller.h",
    "line": 37,
    "function": null,
    "comment": "joint_spline_trajectory_controller.h:37:  #ifndef header guard has wrong style, please use: JOINT_SPLINE_TRAJECTORY_CONTROLLER_H  [build/header_guard] [5]",
    "tags": ["ros","code-standards","ros-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the guard's end should be '#endif  // <PROJECT>_<PATH>_<FILE>_H_' or '#endif  /* <PROJECT>_<PATH>_<FILE>_H_ */'.",
    "file": "joint_spline_trajectory_controller.h",
    "line": 129,
    "function": null,
    "comment": "joint_spline_trajectory_controller.h:129:  #endif line should be '#endif  // _HOME_ANDRE_ROS_HAROS_ANALYSER_JOINT_SPLINE_TRAJECTORY_CONTROLLER_H_'  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "joint_spline_trajectory_controller.h",
    "line": 42,
    "function": null,
    "comment": "joint_spline_trajectory_controller.h:42:  Found C system header after C++ system header. Should be: joint_spline_trajectory_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "joint_spline_trajectory_controller.h",
    "line": 43,
    "function": null,
    "comment": "joint_spline_trajectory_controller.h:43:  Found C system header after C++ system header. Should be: joint_spline_trajectory_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "joint_spline_trajectory_controller.h",
    "line": 44,
    "function": null,
    "comment": "joint_spline_trajectory_controller.h:44:  Found C system header after C++ system header. Should be: joint_spline_trajectory_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "joint_spline_trajectory_controller.h",
    "line": 45,
    "function": null,
    "comment": "joint_spline_trajectory_controller.h:45:  Found C system header after C++ system header. Should be: joint_spline_trajectory_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "joint_spline_trajectory_controller.h",
    "line": 46,
    "function": null,
    "comment": "joint_spline_trajectory_controller.h:46:  Found C system header after C++ system header. Should be: joint_spline_trajectory_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "joint_spline_trajectory_controller.h",
    "line": 47,
    "function": null,
    "comment": "joint_spline_trajectory_controller.h:47:  Found C system header after C++ system header. Should be: joint_spline_trajectory_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "joint_spline_trajectory_controller.h",
    "line": 48,
    "function": null,
    "comment": "joint_spline_trajectory_controller.h:48:  Found C system header after C++ system header. Should be: joint_spline_trajectory_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "joint_spline_trajectory_controller.h",
    "line": 49,
    "function": null,
    "comment": "joint_spline_trajectory_controller.h:49:  Found C system header after C++ system header. Should be: joint_spline_trajectory_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "joint_spline_trajectory_controller.h",
    "line": 52,
    "function": null,
    "comment": "joint_spline_trajectory_controller.h:52:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "joint_spline_trajectory_controller.h",
    "line": 54,
    "function": null,
    "comment": "joint_spline_trajectory_controller.h:54:  Include 'pr2_controllers_msgs/JointTrajectoryControllerState.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint_spline_trajectory_controller.h",
    "line": 56,
    "function": null,
    "comment": "joint_spline_trajectory_controller.h:56:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_spline_trajectory_controller.h",
    "line": 58,
    "function": null,
    "comment": "joint_spline_trajectory_controller.h:58:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_spline_trajectory_controller.h",
    "line": 59,
    "function": null,
    "comment": "joint_spline_trajectory_controller.h:59:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "joint_spline_trajectory_controller.h",
    "line": 60,
    "function": null,
    "comment": "joint_spline_trajectory_controller.h:60:  public: should be indented +1 space inside class JointSplineTrajectoryController  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "joint_spline_trajectory_controller.h",
    "line": 61,
    "function": null,
    "comment": "joint_spline_trajectory_controller.h:61:  Do not leave a blank line after 'public:'  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "joint_spline_trajectory_controller.h",
    "line": 65,
    "function": null,
    "comment": "joint_spline_trajectory_controller.h:65:  Is this a non-const reference? If so, make const or use a pointer: ros::NodeHandle &n  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "joint_spline_trajectory_controller.h",
    "line": 70,
    "function": null,
    "comment": "joint_spline_trajectory_controller.h:70:  private: should be indented +1 space inside class JointSplineTrajectoryController  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_spline_trajectory_controller.h",
    "line": 82,
    "function": null,
    "comment": "joint_spline_trajectory_controller.h:82:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "joint_spline_trajectory_controller.h",
    "line": 82,
    "function": null,
    "comment": "joint_spline_trajectory_controller.h:82:  Is this a non-const reference? If so, make const or use a pointer: pr2_controllers_msgs::QueryTrajectoryState::Request &req  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_spline_trajectory_controller.h",
    "line": 83,
    "function": null,
    "comment": "joint_spline_trajectory_controller.h:83:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "joint_spline_trajectory_controller.h",
    "line": 83,
    "function": null,
    "comment": "joint_spline_trajectory_controller.h:83:  Is this a non-const reference? If so, make const or use a pointer: pr2_controllers_msgs::QueryTrajectoryState::Response &resp  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_spline_trajectory_controller.h",
    "line": 88,
    "function": null,
    "comment": "joint_spline_trajectory_controller.h:88:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_spline_trajectory_controller.h",
    "line": 95,
    "function": null,
    "comment": "joint_spline_trajectory_controller.h:95:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_spline_trajectory_controller.h",
    "line": 102,
    "function": null,
    "comment": "joint_spline_trajectory_controller.h:102:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "joint_spline_trajectory_controller.h",
    "line": 115,
    "function": null,
    "comment": "joint_spline_trajectory_controller.h:115:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "joint_spline_trajectory_controller.h",
    "line": 116,
    "function": null,
    "comment": "joint_spline_trajectory_controller.h:116:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_spline_trajectory_controller.h",
    "line": 123,
    "function": null,
    "comment": "joint_spline_trajectory_controller.h:123:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_spline_trajectory_controller.h",
    "line": 124,
    "function": null,
    "comment": "joint_spline_trajectory_controller.h:124:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "joint_spline_trajectory_controller.h",
    "line": 124,
    "function": null,
    "comment": "joint_spline_trajectory_controller.h:124:  Is this a non-const reference? If so, make const or use a pointer: double& position  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "joint_spline_trajectory_controller.h",
    "line": 124,
    "function": null,
    "comment": "joint_spline_trajectory_controller.h:124:  Is this a non-const reference? If so, make const or use a pointer: double& velocity  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "joint_spline_trajectory_controller.h",
    "line": 124,
    "function": null,
    "comment": "joint_spline_trajectory_controller.h:124:  Is this a non-const reference? If so, make const or use a pointer: double& acceleration  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "joint_spline_trajectory_controller.h",
    "line": 127,
    "function": null,
    "comment": "joint_spline_trajectory_controller.h:127:  Namespace should be terminated with '// namespace controller'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_.",
    "file": "joint_velocity_controller.h",
    "line": 35,
    "function": null,
    "comment": "joint_velocity_controller.h:35:  #ifndef header guard has wrong style, please use: _HOME_ANDRE_ROS_HAROS_ANALYSER_JOINT_VELOCITY_CONTROLLER_H_  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the guard's end should be '#endif  // <PROJECT>_<PATH>_<FILE>_H_' or '#endif  /* <PROJECT>_<PATH>_<FILE>_H_ */'.",
    "file": "joint_velocity_controller.h",
    "line": 139,
    "function": null,
    "comment": "joint_velocity_controller.h:139:  #endif line should be '#endif  // _HOME_ANDRE_ROS_HAROS_ANALYSER_JOINT_VELOCITY_CONTROLLER_H_'  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "joint_velocity_controller.h",
    "line": 63,
    "function": null,
    "comment": "joint_velocity_controller.h:63:  Include 'boost/scoped_ptr.hpp' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "joint_velocity_controller.h",
    "line": 67,
    "function": null,
    "comment": "joint_velocity_controller.h:67:  Include 'control_toolbox/pid.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "joint_velocity_controller.h",
    "line": 71,
    "function": null,
    "comment": "joint_velocity_controller.h:71:  Found C system header after other header. Should be: joint_velocity_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "joint_velocity_controller.h",
    "line": 73,
    "function": null,
    "comment": "joint_velocity_controller.h:73:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "joint_velocity_controller.h",
    "line": 74,
    "function": null,
    "comment": "joint_velocity_controller.h:74:  Found C system header after other header. Should be: joint_velocity_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "joint_velocity_controller.h",
    "line": 75,
    "function": null,
    "comment": "joint_velocity_controller.h:75:  Found C system header after other header. Should be: joint_velocity_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_velocity_controller.h",
    "line": 78,
    "function": null,
    "comment": "joint_velocity_controller.h:78:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_velocity_controller.h",
    "line": 81,
    "function": null,
    "comment": "joint_velocity_controller.h:81:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "joint_velocity_controller.h",
    "line": 82,
    "function": null,
    "comment": "joint_velocity_controller.h:82:  public: should be indented +1 space inside class JointVelocityController  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "joint_velocity_controller.h",
    "line": 83,
    "function": null,
    "comment": "joint_velocity_controller.h:83:  Do not leave a blank line after 'public:'  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_velocity_controller.h",
    "line": 87,
    "function": null,
    "comment": "joint_velocity_controller.h:87:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "joint_velocity_controller.h",
    "line": 88,
    "function": null,
    "comment": "joint_velocity_controller.h:88:  Is this a non-const reference? If so, make const or use a pointer: ros::NodeHandle &n  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "joint_velocity_controller.h",
    "line": 100,
    "function": null,
    "comment": "joint_velocity_controller.h:100:  Is this a non-const reference? If so, make const or use a pointer: double & cmd  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint_velocity_controller.h",
    "line": 106,
    "function": null,
    "comment": "joint_velocity_controller.h:106:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "joint_velocity_controller.h",
    "line": 112,
    "function": null,
    "comment": "joint_velocity_controller.h:112:  Is this a non-const reference? If so, make const or use a pointer: double &p  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "joint_velocity_controller.h",
    "line": 112,
    "function": null,
    "comment": "joint_velocity_controller.h:112:  Is this a non-const reference? If so, make const or use a pointer: double &i  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "joint_velocity_controller.h",
    "line": 112,
    "function": null,
    "comment": "joint_velocity_controller.h:112:  Is this a non-const reference? If so, make const or use a pointer: double &d  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "joint_velocity_controller.h",
    "line": 112,
    "function": null,
    "comment": "joint_velocity_controller.h:112:  Is this a non-const reference? If so, make const or use a pointer: double &i_max  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "joint_velocity_controller.h",
    "line": 112,
    "function": null,
    "comment": "joint_velocity_controller.h:112:  Is this a non-const reference? If so, make const or use a pointer: double &i_min  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_velocity_controller.h",
    "line": 113,
    "function": null,
    "comment": "joint_velocity_controller.h:113:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_velocity_controller.h",
    "line": 116,
    "function": null,
    "comment": "joint_velocity_controller.h:116:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_velocity_controller.h",
    "line": 119,
    "function": null,
    "comment": "joint_velocity_controller.h:119:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "joint_velocity_controller.h",
    "line": 120,
    "function": null,
    "comment": "joint_velocity_controller.h:120:  private: should be indented +1 space inside class JointVelocityController  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_velocity_controller.h",
    "line": 122,
    "function": null,
    "comment": "joint_velocity_controller.h:122:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_velocity_controller.h",
    "line": 123,
    "function": null,
    "comment": "joint_velocity_controller.h:123:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_velocity_controller.h",
    "line": 124,
    "function": null,
    "comment": "joint_velocity_controller.h:124:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_velocity_controller.h",
    "line": 131,
    "function": null,
    "comment": "joint_velocity_controller.h:131:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "joint_velocity_controller.h",
    "line": 131,
    "function": null,
    "comment": "joint_velocity_controller.h:131:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "joint_velocity_controller.h",
    "line": 137,
    "function": null,
    "comment": "joint_velocity_controller.h:137:  Namespace should be terminated with '// namespace controller'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "joint_velocity_controller.h",
    "line": 137,
    "function": null,
    "comment": "joint_velocity_controller.h:137:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "joint_velocity_controller.h",
    "line": 115,
    "function": null,
    "comment": "joint_velocity_controller.h:115:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_.",
    "file": "cartesian_wrench_controller.h",
    "line": 54,
    "function": null,
    "comment": "cartesian_wrench_controller.h:54:  #ifndef header guard has wrong style, please use: _HOME_ANDRE_ROS_HAROS_ANALYSER_CARTESIAN_WRENCH_CONTROLLER_H_  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the guard's end should be '#endif  // <PROJECT>_<PATH>_<FILE>_H_' or '#endif  /* <PROJECT>_<PATH>_<FILE>_H_ */'.",
    "file": "cartesian_wrench_controller.h",
    "line": 104,
    "function": null,
    "comment": "cartesian_wrench_controller.h:104:  #endif line should be '#endif  // _HOME_ANDRE_ROS_HAROS_ANALYSER_CARTESIAN_WRENCH_CONTROLLER_H_'  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "cartesian_wrench_controller.h",
    "line": 58,
    "function": null,
    "comment": "cartesian_wrench_controller.h:58:  Found C system header after C++ system header. Should be: cartesian_wrench_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "cartesian_wrench_controller.h",
    "line": 59,
    "function": null,
    "comment": "cartesian_wrench_controller.h:59:  Found C system header after C++ system header. Should be: cartesian_wrench_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "cartesian_wrench_controller.h",
    "line": 60,
    "function": null,
    "comment": "cartesian_wrench_controller.h:60:  Found C system header after C++ system header. Should be: cartesian_wrench_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "cartesian_wrench_controller.h",
    "line": 61,
    "function": null,
    "comment": "cartesian_wrench_controller.h:61:  Found C system header after C++ system header. Should be: cartesian_wrench_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "cartesian_wrench_controller.h",
    "line": 62,
    "function": null,
    "comment": "cartesian_wrench_controller.h:62:  Found C system header after C++ system header. Should be: cartesian_wrench_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "cartesian_wrench_controller.h",
    "line": 63,
    "function": null,
    "comment": "cartesian_wrench_controller.h:63:  Found C system header after C++ system header. Should be: cartesian_wrench_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "cartesian_wrench_controller.h",
    "line": 64,
    "function": null,
    "comment": "cartesian_wrench_controller.h:64:  Found C system header after C++ system header. Should be: cartesian_wrench_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "cartesian_wrench_controller.h",
    "line": 65,
    "function": null,
    "comment": "cartesian_wrench_controller.h:65:  Found C system header after C++ system header. Should be: cartesian_wrench_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "cartesian_wrench_controller.h",
    "line": 66,
    "function": null,
    "comment": "cartesian_wrench_controller.h:66:  Found C system header after C++ system header. Should be: cartesian_wrench_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "cartesian_wrench_controller.h",
    "line": 67,
    "function": null,
    "comment": "cartesian_wrench_controller.h:67:  Found C system header after C++ system header. Should be: cartesian_wrench_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "cartesian_wrench_controller.h",
    "line": 68,
    "function": null,
    "comment": "cartesian_wrench_controller.h:68:  Found C system header after C++ system header. Should be: cartesian_wrench_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "cartesian_wrench_controller.h",
    "line": 71,
    "function": null,
    "comment": "cartesian_wrench_controller.h:71:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "cartesian_wrench_controller.h",
    "line": 74,
    "function": null,
    "comment": "cartesian_wrench_controller.h:74:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "cartesian_wrench_controller.h",
    "line": 75,
    "function": null,
    "comment": "cartesian_wrench_controller.h:75:  public: should be indented +1 space inside class CartesianWrenchController  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "cartesian_wrench_controller.h",
    "line": 79,
    "function": null,
    "comment": "cartesian_wrench_controller.h:79:  Is this a non-const reference? If so, make const or use a pointer: ros::NodeHandle &n  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "cartesian_wrench_controller.h",
    "line": 87,
    "function": null,
    "comment": "cartesian_wrench_controller.h:87:  private: should be indented +1 space inside class CartesianWrenchController  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "cartesian_wrench_controller.h",
    "line": 98,
    "function": null,
    "comment": "cartesian_wrench_controller.h:98:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "cartesian_wrench_controller.h",
    "line": 101,
    "function": null,
    "comment": "cartesian_wrench_controller.h:101:  Namespace should be terminated with '// namespace controller'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "cartesian_wrench_controller.h",
    "line": 101,
    "function": null,
    "comment": "cartesian_wrench_controller.h:101:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_.",
    "file": "cartesian_twist_controller.h",
    "line": 58,
    "function": null,
    "comment": "cartesian_twist_controller.h:58:  #ifndef header guard has wrong style, please use: _HOME_ANDRE_ROS_HAROS_ANALYSER_CARTESIAN_TWIST_CONTROLLER_H_  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the guard's end should be '#endif  // <PROJECT>_<PATH>_<FILE>_H_' or '#endif  /* <PROJECT>_<PATH>_<FILE>_H_ */'.",
    "file": "cartesian_twist_controller.h",
    "line": 124,
    "function": null,
    "comment": "cartesian_twist_controller.h:124:  #endif line should be '#endif  // _HOME_ANDRE_ROS_HAROS_ANALYSER_CARTESIAN_TWIST_CONTROLLER_H_'  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "cartesian_twist_controller.h",
    "line": 62,
    "function": null,
    "comment": "cartesian_twist_controller.h:62:  Found C system header after C++ system header. Should be: cartesian_twist_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "cartesian_twist_controller.h",
    "line": 63,
    "function": null,
    "comment": "cartesian_twist_controller.h:63:  Found C system header after C++ system header. Should be: cartesian_twist_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "cartesian_twist_controller.h",
    "line": 65,
    "function": null,
    "comment": "cartesian_twist_controller.h:65:  Found C system header after C++ system header. Should be: cartesian_twist_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "cartesian_twist_controller.h",
    "line": 66,
    "function": null,
    "comment": "cartesian_twist_controller.h:66:  Found C system header after C++ system header. Should be: cartesian_twist_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "cartesian_twist_controller.h",
    "line": 68,
    "function": null,
    "comment": "cartesian_twist_controller.h:68:  Found C system header after C++ system header. Should be: cartesian_twist_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "cartesian_twist_controller.h",
    "line": 69,
    "function": null,
    "comment": "cartesian_twist_controller.h:69:  Found C system header after C++ system header. Should be: cartesian_twist_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "cartesian_twist_controller.h",
    "line": 70,
    "function": null,
    "comment": "cartesian_twist_controller.h:70:  Found C system header after C++ system header. Should be: cartesian_twist_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "cartesian_twist_controller.h",
    "line": 71,
    "function": null,
    "comment": "cartesian_twist_controller.h:71:  Found C system header after C++ system header. Should be: cartesian_twist_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "cartesian_twist_controller.h",
    "line": 72,
    "function": null,
    "comment": "cartesian_twist_controller.h:72:  Found C system header after C++ system header. Should be: cartesian_twist_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "cartesian_twist_controller.h",
    "line": 73,
    "function": null,
    "comment": "cartesian_twist_controller.h:73:  Found C system header after C++ system header. Should be: cartesian_twist_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "cartesian_twist_controller.h",
    "line": 74,
    "function": null,
    "comment": "cartesian_twist_controller.h:74:  Found C system header after C++ system header. Should be: cartesian_twist_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "cartesian_twist_controller.h",
    "line": 75,
    "function": null,
    "comment": "cartesian_twist_controller.h:75:  Found C system header after C++ system header. Should be: cartesian_twist_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "cartesian_twist_controller.h",
    "line": 76,
    "function": null,
    "comment": "cartesian_twist_controller.h:76:  Found C system header after C++ system header. Should be: cartesian_twist_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "cartesian_twist_controller.h",
    "line": 79,
    "function": null,
    "comment": "cartesian_twist_controller.h:79:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "cartesian_twist_controller.h",
    "line": 82,
    "function": null,
    "comment": "cartesian_twist_controller.h:82:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "cartesian_twist_controller.h",
    "line": 83,
    "function": null,
    "comment": "cartesian_twist_controller.h:83:  public: should be indented +1 space inside class CartesianTwistController  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "cartesian_twist_controller.h",
    "line": 87,
    "function": null,
    "comment": "cartesian_twist_controller.h:87:  Is this a non-const reference? If so, make const or use a pointer: ros::NodeHandle &n  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "cartesian_twist_controller.h",
    "line": 95,
    "function": null,
    "comment": "cartesian_twist_controller.h:95:  private: should be indented +1 space inside class CartesianTwistController  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "cartesian_twist_controller.h",
    "line": 121,
    "function": null,
    "comment": "cartesian_twist_controller.h:121:  Namespace should be terminated with '// namespace controller'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "cartesian_twist_controller.h",
    "line": 121,
    "function": null,
    "comment": "cartesian_twist_controller.h:121:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_.",
    "file": "jt_cartesian_controller.h",
    "line": 37,
    "function": null,
    "comment": "jt_cartesian_controller.h:37:  #ifndef header guard has wrong style, please use: _HOME_ANDRE_ROS_HAROS_ANALYSER_JT_CARTESIAN_CONTROLLER_H_  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the symbol name should be <PACKAGE>_<PATH>_<FILE>_H.",
    "file": "jt_cartesian_controller.h",
    "line": 37,
    "function": null,
    "comment": "jt_cartesian_controller.h:37:  #ifndef header guard has wrong style, please use: JT_CARTESIAN_CONTROLLER_H  [build/header_guard] [5]",
    "tags": ["ros","code-standards","ros-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the guard's end should be '#endif  // <PROJECT>_<PATH>_<FILE>_H_' or '#endif  /* <PROJECT>_<PATH>_<FILE>_H_ */'.",
    "file": "jt_cartesian_controller.h",
    "line": 209,
    "function": null,
    "comment": "jt_cartesian_controller.h:209:  #endif line should be '#endif  // _HOME_ANDRE_ROS_HAROS_ANALYSER_JT_CARTESIAN_CONTROLLER_H_'  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "jt_cartesian_controller.h",
    "line": 50,
    "function": null,
    "comment": "jt_cartesian_controller.h:50:  Include 'kdl/chain.hpp' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "jt_cartesian_controller.h",
    "line": 63,
    "function": null,
    "comment": "jt_cartesian_controller.h:63:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "jt_cartesian_controller.h",
    "line": 67,
    "function": null,
    "comment": "jt_cartesian_controller.h:67:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "jt_cartesian_controller.h",
    "line": 71,
    "function": null,
    "comment": "jt_cartesian_controller.h:71:  Single-parameter constructors should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "jt_cartesian_controller.h",
    "line": 74,
    "function": null,
    "comment": "jt_cartesian_controller.h:74:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "jt_cartesian_controller.h",
    "line": 77,
    "function": null,
    "comment": "jt_cartesian_controller.h:77:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "jt_cartesian_controller.h",
    "line": 80,
    "function": null,
    "comment": "jt_cartesian_controller.h:80:  Is this a non-const reference? If so, make const or use a pointer: Eigen::Affine3d &x  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "jt_cartesian_controller.h",
    "line": 81,
    "function": null,
    "comment": "jt_cartesian_controller.h:81:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "jt_cartesian_controller.h",
    "line": 87,
    "function": null,
    "comment": "jt_cartesian_controller.h:87:  Is this a non-const reference? If so, make const or use a pointer: Jacobian &J  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "jt_cartesian_controller.h",
    "line": 88,
    "function": null,
    "comment": "jt_cartesian_controller.h:88:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "jt_cartesian_controller.h",
    "line": 101,
    "function": null,
    "comment": "jt_cartesian_controller.h:101:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "jt_cartesian_controller.h",
    "line": 102,
    "function": null,
    "comment": "jt_cartesian_controller.h:102:  public: should be indented +1 space inside class JTCartesianController  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "jt_cartesian_controller.h",
    "line": 106,
    "function": null,
    "comment": "jt_cartesian_controller.h:106:  private: should be indented +1 space inside class JTCartesianController  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "jt_cartesian_controller.h",
    "line": 112,
    "function": null,
    "comment": "jt_cartesian_controller.h:112:  public: should be indented +1 space inside class JTCartesianController  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "jt_cartesian_controller.h",
    "line": 116,
    "function": null,
    "comment": "jt_cartesian_controller.h:116:  Is this a non-const reference? If so, make const or use a pointer: ros::NodeHandle &n  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "jt_cartesian_controller.h",
    "line": 139,
    "function": null,
    "comment": "jt_cartesian_controller.h:139:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "jt_cartesian_controller.h",
    "line": 160,
    "function": null,
    "comment": "jt_cartesian_controller.h:160:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should not be more than one semicolon statement in a single-line if or else statement, unless it is part of a lambda expression, or the if/else body is enclosed in curly braces.",
    "file": "jt_cartesian_controller.h",
    "line": 161,
    "function": null,
    "comment": "jt_cartesian_controller.h:161:  If/else bodies with multiple statements require braces  [readability/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","if-else","single-line-statements"]
  },
  {
    "rule": "There should not be more than one semicolon statement in a single-line if or else statement, unless it is part of a lambda expression, or the if/else body is enclosed in curly braces.",
    "file": "jt_cartesian_controller.h",
    "line": 164,
    "function": null,
    "comment": "jt_cartesian_controller.h:164:  If/else bodies with multiple statements require braces  [readability/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","if-else","single-line-statements"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "jt_cartesian_controller.h",
    "line": 173,
    "function": null,
    "comment": "jt_cartesian_controller.h:173:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "jt_cartesian_controller.h",
    "line": 178,
    "function": null,
    "comment": "jt_cartesian_controller.h:178:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "jt_cartesian_controller.h",
    "line": 178,
    "function": null,
    "comment": "jt_cartesian_controller.h:178:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "jt_cartesian_controller.h",
    "line": 178,
    "function": null,
    "comment": "jt_cartesian_controller.h:178:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "jt_cartesian_controller.h",
    "line": 179,
    "function": null,
    "comment": "jt_cartesian_controller.h:179:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "jt_cartesian_controller.h",
    "line": 182,
    "function": null,
    "comment": "jt_cartesian_controller.h:182:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "jt_cartesian_controller.h",
    "line": 183,
    "function": null,
    "comment": "jt_cartesian_controller.h:183:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "jt_cartesian_controller.h",
    "line": 191,
    "function": null,
    "comment": "jt_cartesian_controller.h:191:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "jt_cartesian_controller.h",
    "line": 193,
    "function": null,
    "comment": "jt_cartesian_controller.h:193:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "jt_cartesian_controller.h",
    "line": 194,
    "function": null,
    "comment": "jt_cartesian_controller.h:194:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "jt_cartesian_controller.h",
    "line": 198,
    "function": null,
    "comment": "jt_cartesian_controller.h:198:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "jt_cartesian_controller.h",
    "line": 207,
    "function": null,
    "comment": "jt_cartesian_controller.h:207:  Namespace should be terminated with '// namespace controller'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "jt_cartesian_controller.h",
    "line": 207,
    "function": null,
    "comment": "jt_cartesian_controller.h:207:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "jt_cartesian_controller.h",
    "line": 132,
    "function": null,
    "comment": "jt_cartesian_controller.h:132:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_.",
    "file": "cartesian_pose_controller.h",
    "line": 69,
    "function": null,
    "comment": "cartesian_pose_controller.h:69:  #ifndef header guard has wrong style, please use: _HOME_ANDRE_ROS_HAROS_ANALYSER_CARTESIAN_POSE_CONTROLLER_H_  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the guard's end should be '#endif  // <PROJECT>_<PATH>_<FILE>_H_' or '#endif  /* <PROJECT>_<PATH>_<FILE>_H_ */'.",
    "file": "cartesian_pose_controller.h",
    "line": 152,
    "function": null,
    "comment": "cartesian_pose_controller.h:152:  #endif line should be '#endif  // _HOME_ANDRE_ROS_HAROS_ANALYSER_CARTESIAN_POSE_CONTROLLER_H_'  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "cartesian_pose_controller.h",
    "line": 73,
    "function": null,
    "comment": "cartesian_pose_controller.h:73:  Found C system header after C++ system header. Should be: cartesian_pose_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "cartesian_pose_controller.h",
    "line": 74,
    "function": null,
    "comment": "cartesian_pose_controller.h:74:  Found C system header after C++ system header. Should be: cartesian_pose_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "cartesian_pose_controller.h",
    "line": 76,
    "function": null,
    "comment": "cartesian_pose_controller.h:76:  Found C system header after C++ system header. Should be: cartesian_pose_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "cartesian_pose_controller.h",
    "line": 78,
    "function": null,
    "comment": "cartesian_pose_controller.h:78:  Found C system header after C++ system header. Should be: cartesian_pose_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "cartesian_pose_controller.h",
    "line": 79,
    "function": null,
    "comment": "cartesian_pose_controller.h:79:  Found C system header after C++ system header. Should be: cartesian_pose_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "cartesian_pose_controller.h",
    "line": 81,
    "function": null,
    "comment": "cartesian_pose_controller.h:81:  Found C system header after C++ system header. Should be: cartesian_pose_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "cartesian_pose_controller.h",
    "line": 82,
    "function": null,
    "comment": "cartesian_pose_controller.h:82:  Found C system header after C++ system header. Should be: cartesian_pose_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "cartesian_pose_controller.h",
    "line": 83,
    "function": null,
    "comment": "cartesian_pose_controller.h:83:  Found C system header after C++ system header. Should be: cartesian_pose_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "cartesian_pose_controller.h",
    "line": 84,
    "function": null,
    "comment": "cartesian_pose_controller.h:84:  Found C system header after C++ system header. Should be: cartesian_pose_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "cartesian_pose_controller.h",
    "line": 85,
    "function": null,
    "comment": "cartesian_pose_controller.h:85:  Found C system header after C++ system header. Should be: cartesian_pose_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "cartesian_pose_controller.h",
    "line": 86,
    "function": null,
    "comment": "cartesian_pose_controller.h:86:  Found C system header after C++ system header. Should be: cartesian_pose_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "cartesian_pose_controller.h",
    "line": 87,
    "function": null,
    "comment": "cartesian_pose_controller.h:87:  Found C system header after C++ system header. Should be: cartesian_pose_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "cartesian_pose_controller.h",
    "line": 88,
    "function": null,
    "comment": "cartesian_pose_controller.h:88:  Found C system header after C++ system header. Should be: cartesian_pose_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "cartesian_pose_controller.h",
    "line": 89,
    "function": null,
    "comment": "cartesian_pose_controller.h:89:  Found C system header after C++ system header. Should be: cartesian_pose_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "cartesian_pose_controller.h",
    "line": 90,
    "function": null,
    "comment": "cartesian_pose_controller.h:90:  Found C system header after C++ system header. Should be: cartesian_pose_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "cartesian_pose_controller.h",
    "line": 91,
    "function": null,
    "comment": "cartesian_pose_controller.h:91:  Found C system header after C++ system header. Should be: cartesian_pose_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "cartesian_pose_controller.h",
    "line": 92,
    "function": null,
    "comment": "cartesian_pose_controller.h:92:  Found C system header after C++ system header. Should be: cartesian_pose_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "cartesian_pose_controller.h",
    "line": 95,
    "function": null,
    "comment": "cartesian_pose_controller.h:95:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "cartesian_pose_controller.h",
    "line": 98,
    "function": null,
    "comment": "cartesian_pose_controller.h:98:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "cartesian_pose_controller.h",
    "line": 99,
    "function": null,
    "comment": "cartesian_pose_controller.h:99:  public: should be indented +1 space inside class CartesianPoseController  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "cartesian_pose_controller.h",
    "line": 103,
    "function": null,
    "comment": "cartesian_pose_controller.h:103:  Is this a non-const reference? If so, make const or use a pointer: ros::NodeHandle &n  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "cartesian_pose_controller.h",
    "line": 116,
    "function": null,
    "comment": "cartesian_pose_controller.h:116:  private: should be indented +1 space inside class CartesianPoseController  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "cartesian_pose_controller.h",
    "line": 139,
    "function": null,
    "comment": "cartesian_pose_controller.h:139:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "cartesian_pose_controller.h",
    "line": 140,
    "function": null,
    "comment": "cartesian_pose_controller.h:140:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "cartesian_pose_controller.h",
    "line": 145,
    "function": null,
    "comment": "cartesian_pose_controller.h:145:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "cartesian_pose_controller.h",
    "line": 146,
    "function": null,
    "comment": "cartesian_pose_controller.h:146:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "cartesian_pose_controller.h",
    "line": 146,
    "function": null,
    "comment": "cartesian_pose_controller.h:146:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "cartesian_pose_controller.h",
    "line": 149,
    "function": null,
    "comment": "cartesian_pose_controller.h:149:  Namespace should be terminated with '// namespace controller'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "cartesian_pose_controller.h",
    "line": 149,
    "function": null,
    "comment": "cartesian_pose_controller.h:149:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "cartesian_pose_controller.h",
    "line": 120,
    "function": null,
    "comment": "cartesian_pose_controller.h:120:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_.",
    "file": "joint_position_controller.h",
    "line": 35,
    "function": null,
    "comment": "joint_position_controller.h:35:  #ifndef header guard has wrong style, please use: _HOME_ANDRE_ROS_HAROS_ANALYSER_JOINT_POSITION_CONTROLLER_H_  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the guard's end should be '#endif  // <PROJECT>_<PATH>_<FILE>_H_' or '#endif  /* <PROJECT>_<PATH>_<FILE>_H_ */'.",
    "file": "joint_position_controller.h",
    "line": 135,
    "function": null,
    "comment": "joint_position_controller.h:135:  #endif line should be '#endif  // _HOME_ANDRE_ROS_HAROS_ANALYSER_JOINT_POSITION_CONTROLLER_H_'  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "joint_position_controller.h",
    "line": 64,
    "function": null,
    "comment": "joint_position_controller.h:64:  Include 'control_toolbox/pid.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "joint_position_controller.h",
    "line": 66,
    "function": null,
    "comment": "joint_position_controller.h:66:  Found C system header after other header. Should be: joint_position_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "joint_position_controller.h",
    "line": 67,
    "function": null,
    "comment": "joint_position_controller.h:67:  Found C system header after other header. Should be: joint_position_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "joint_position_controller.h",
    "line": 68,
    "function": null,
    "comment": "joint_position_controller.h:68:  Found C system header after other header. Should be: joint_position_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "joint_position_controller.h",
    "line": 69,
    "function": null,
    "comment": "joint_position_controller.h:69:  Found C system header after other header. Should be: joint_position_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "joint_position_controller.h",
    "line": 70,
    "function": null,
    "comment": "joint_position_controller.h:70:  Found C system header after other header. Should be: joint_position_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_position_controller.h",
    "line": 73,
    "function": null,
    "comment": "joint_position_controller.h:73:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_position_controller.h",
    "line": 76,
    "function": null,
    "comment": "joint_position_controller.h:76:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "joint_position_controller.h",
    "line": 77,
    "function": null,
    "comment": "joint_position_controller.h:77:  public: should be indented +1 space inside class JointPositionController  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "joint_position_controller.h",
    "line": 78,
    "function": null,
    "comment": "joint_position_controller.h:78:  Do not leave a blank line after 'public:'  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_position_controller.h",
    "line": 82,
    "function": null,
    "comment": "joint_position_controller.h:82:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "joint_position_controller.h",
    "line": 82,
    "function": null,
    "comment": "joint_position_controller.h:82:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "joint_position_controller.h",
    "line": 83,
    "function": null,
    "comment": "joint_position_controller.h:83:  Is this a non-const reference? If so, make const or use a pointer: ros::NodeHandle &n  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Use 2 spaces for indentation.",
    "file": "joint_position_controller.h",
    "line": 95,
    "function": null,
    "comment": "joint_position_controller.h:95:  Weird number of spaces at line-start.  Are you using a 2-space indent?  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","indentation"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "joint_position_controller.h",
    "line": 95,
    "function": null,
    "comment": "joint_position_controller.h:95:  Is this a non-const reference? If so, make const or use a pointer: double & cmd  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint_position_controller.h",
    "line": 97,
    "function": null,
    "comment": "joint_position_controller.h:97:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "joint_position_controller.h",
    "line": 107,
    "function": null,
    "comment": "joint_position_controller.h:107:  Is this a non-const reference? If so, make const or use a pointer: double &p  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "joint_position_controller.h",
    "line": 107,
    "function": null,
    "comment": "joint_position_controller.h:107:  Is this a non-const reference? If so, make const or use a pointer: double &i  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "joint_position_controller.h",
    "line": 107,
    "function": null,
    "comment": "joint_position_controller.h:107:  Is this a non-const reference? If so, make const or use a pointer: double &d  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "joint_position_controller.h",
    "line": 107,
    "function": null,
    "comment": "joint_position_controller.h:107:  Is this a non-const reference? If so, make const or use a pointer: double &i_max  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "joint_position_controller.h",
    "line": 107,
    "function": null,
    "comment": "joint_position_controller.h:107:  Is this a non-const reference? If so, make const or use a pointer: double &i_min  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_position_controller.h",
    "line": 108,
    "function": null,
    "comment": "joint_position_controller.h:108:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_position_controller.h",
    "line": 111,
    "function": null,
    "comment": "joint_position_controller.h:111:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "joint_position_controller.h",
    "line": 115,
    "function": null,
    "comment": "joint_position_controller.h:115:  private: should be indented +1 space inside class JointPositionController  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_position_controller.h",
    "line": 118,
    "function": null,
    "comment": "joint_position_controller.h:118:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_position_controller.h",
    "line": 120,
    "function": null,
    "comment": "joint_position_controller.h:120:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_position_controller.h",
    "line": 127,
    "function": null,
    "comment": "joint_position_controller.h:127:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "joint_position_controller.h",
    "line": 127,
    "function": null,
    "comment": "joint_position_controller.h:127:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "joint_position_controller.h",
    "line": 133,
    "function": null,
    "comment": "joint_position_controller.h:133:  Namespace should be terminated with '// namespace controller'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "joint_position_controller.h",
    "line": 133,
    "function": null,
    "comment": "joint_position_controller.h:133:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "joint_position_controller.h",
    "line": 110,
    "function": null,
    "comment": "joint_position_controller.h:110:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_.",
    "file": "joint_trajectory_action_controller.h",
    "line": 37,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:37:  #ifndef header guard has wrong style, please use: _HOME_ANDRE_ROS_HAROS_ANALYSER_JOINT_TRAJECTORY_ACTION_CONTROLLER_H_  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the symbol name should be <PACKAGE>_<PATH>_<FILE>_H.",
    "file": "joint_trajectory_action_controller.h",
    "line": 37,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:37:  #ifndef header guard has wrong style, please use: JOINT_TRAJECTORY_ACTION_CONTROLLER_H  [build/header_guard] [5]",
    "tags": ["ros","code-standards","ros-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the guard's end should be '#endif  // <PROJECT>_<PATH>_<FILE>_H_' or '#endif  /* <PROJECT>_<PATH>_<FILE>_H_ */'.",
    "file": "joint_trajectory_action_controller.h",
    "line": 284,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:284:  #endif line should be '#endif  // _HOME_ANDRE_ROS_HAROS_ANALYSER_JOINT_TRAJECTORY_ACTION_CONTROLLER_H_'  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "joint_trajectory_action_controller.h",
    "line": 42,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:42:  Found C system header after C++ system header. Should be: joint_trajectory_action_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "joint_trajectory_action_controller.h",
    "line": 43,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:43:  Found C system header after C++ system header. Should be: joint_trajectory_action_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "joint_trajectory_action_controller.h",
    "line": 44,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:44:  Found C system header after C++ system header. Should be: joint_trajectory_action_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "joint_trajectory_action_controller.h",
    "line": 45,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:45:  Found C system header after C++ system header. Should be: joint_trajectory_action_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "joint_trajectory_action_controller.h",
    "line": 47,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:47:  Found C system header after C++ system header. Should be: joint_trajectory_action_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "joint_trajectory_action_controller.h",
    "line": 48,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:48:  Found C system header after C++ system header. Should be: joint_trajectory_action_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "joint_trajectory_action_controller.h",
    "line": 49,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:49:  Found C system header after C++ system header. Should be: joint_trajectory_action_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "joint_trajectory_action_controller.h",
    "line": 50,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:50:  Found C system header after C++ system header. Should be: joint_trajectory_action_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "joint_trajectory_action_controller.h",
    "line": 51,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:51:  Found C system header after C++ system header. Should be: joint_trajectory_action_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "joint_trajectory_action_controller.h",
    "line": 52,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:52:  Found C system header after C++ system header. Should be: joint_trajectory_action_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "joint_trajectory_action_controller.h",
    "line": 53,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:53:  Found C system header after C++ system header. Should be: joint_trajectory_action_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "joint_trajectory_action_controller.h",
    "line": 56,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:56:  Found C system header after C++ system header. Should be: joint_trajectory_action_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "joint_trajectory_action_controller.h",
    "line": 57,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:57:  Found C system header after C++ system header. Should be: joint_trajectory_action_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "joint_trajectory_action_controller.h",
    "line": 58,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:58:  Found C system header after C++ system header. Should be: joint_trajectory_action_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "joint_trajectory_action_controller.h",
    "line": 59,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:59:  Found C system header after C++ system header. Should be: joint_trajectory_action_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "joint_trajectory_action_controller.h",
    "line": 60,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:60:  Found C system header after C++ system header. Should be: joint_trajectory_action_controller.h, c system, c++ system, other.  [build/include_order] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint_trajectory_action_controller.h",
    "line": 63,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:63:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.h",
    "line": 67,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:67:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "joint_trajectory_action_controller.h",
    "line": 68,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:68:  private: should be indented +1 space inside class RTServerGoalHandle  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "joint_trajectory_action_controller.h",
    "line": 71,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:71:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "joint_trajectory_action_controller.h",
    "line": 82,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:82:  public: should be indented +1 space inside class RTServerGoalHandle  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Use 2 spaces for indentation.",
    "file": "joint_trajectory_action_controller.h",
    "line": 87,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:87:  Weird number of spaces at line-start.  Are you using a 2-space indent?  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.h",
    "line": 87,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:87:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "joint_trajectory_action_controller.h",
    "line": 87,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:87:  Using C-style cast.  Use reinterpret_cast<Result*>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "joint_trajectory_action_controller.h",
    "line": 87,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:87:  Is this a non-const reference? If so, make const or use a pointer: GoalHandle &gh  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Use 2 spaces for indentation.",
    "file": "joint_trajectory_action_controller.h",
    "line": 88,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:88:  Weird number of spaces at line-start.  Are you using a 2-space indent?  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.h",
    "line": 88,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:88:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.h",
    "line": 89,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:89:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "joint_trajectory_action_controller.h",
    "line": 96,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:96:  Using C-style cast.  Use reinterpret_cast<Result*>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.h",
    "line": 97,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:97:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.h",
    "line": 99,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:99:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "joint_trajectory_action_controller.h",
    "line": 105,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:105:  Using C-style cast.  Use reinterpret_cast<Result*>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.h",
    "line": 106,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:106:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.h",
    "line": 108,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:108:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.h",
    "line": 115,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:115:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.h",
    "line": 120,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:120:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "joint_trajectory_action_controller.h",
    "line": 121,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:121:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.h",
    "line": 123,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:123:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.h",
    "line": 126,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:126:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "joint_trajectory_action_controller.h",
    "line": 132,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:132:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.h",
    "line": 133,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:133:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.h",
    "line": 144,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:144:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "joint_trajectory_action_controller.h",
    "line": 145,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:145:  public: should be indented +1 space inside class JointTolerance  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.h",
    "line": 146,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:146:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "joint_trajectory_action_controller.h",
    "line": 146,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:146:  Constructors callable with one argument should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.h",
    "line": 148,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:148:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.h",
    "line": 152,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:152:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.h",
    "line": 165,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:165:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.h",
    "line": 166,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:166:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.h",
    "line": 168,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:168:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.h",
    "line": 170,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:170:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.h",
    "line": 173,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:173:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.h",
    "line": 175,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:175:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "joint_trajectory_action_controller.h",
    "line": 176,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:176:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "joint_trajectory_action_controller.h",
    "line": 177,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:177:  public: should be indented +1 space inside class JointTrajectoryActionController  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "joint_trajectory_action_controller.h",
    "line": 178,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:178:  Do not leave a blank line after 'public:'  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "joint_trajectory_action_controller.h",
    "line": 182,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:182:  Is this a non-const reference? If so, make const or use a pointer: ros::NodeHandle &n  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "joint_trajectory_action_controller.h",
    "line": 187,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:187:  private: should be indented +1 space inside class JointTrajectoryActionController  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.h",
    "line": 192,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:192:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.h",
    "line": 207,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:207:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.h",
    "line": 214,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:214:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "joint_trajectory_action_controller.h",
    "line": 214,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:214:  Is this a non-const reference? If so, make const or use a pointer: pr2_controllers_msgs::QueryTrajectoryState::Request &req  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.h",
    "line": 215,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:215:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "joint_trajectory_action_controller.h",
    "line": 215,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:215:  Is this a non-const reference? If so, make const or use a pointer: pr2_controllers_msgs::QueryTrajectoryState::Response &resp  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.h",
    "line": 220,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:220:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.h",
    "line": 236,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:236:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "joint_trajectory_action_controller.h",
    "line": 236,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:236:  Using C-style cast.  Use reinterpret_cast<RTGoalHandle*>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.h",
    "line": 237,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:237:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "joint_trajectory_action_controller.h",
    "line": 237,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:237:  Using C-style cast.  Use reinterpret_cast<RTGoalHandleFollow*>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.h",
    "line": 243,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:243:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.h",
    "line": 250,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:250:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "joint_trajectory_action_controller.h",
    "line": 254,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:254:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.h",
    "line": 260,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:260:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "joint_trajectory_action_controller.h",
    "line": 270,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:270:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "joint_trajectory_action_controller.h",
    "line": 271,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:271:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.h",
    "line": 278,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:278:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.h",
    "line": 279,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:279:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "joint_trajectory_action_controller.h",
    "line": 279,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:279:  Is this a non-const reference? If so, make const or use a pointer: double& position  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "joint_trajectory_action_controller.h",
    "line": 279,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:279:  Is this a non-const reference? If so, make const or use a pointer: double& velocity  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "joint_trajectory_action_controller.h",
    "line": 279,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:279:  Is this a non-const reference? If so, make const or use a pointer: double& acceleration  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "joint_trajectory_action_controller.h",
    "line": 282,
    "function": null,
    "comment": "joint_trajectory_action_controller.h:282:  Namespace should be terminated with '// namespace controller'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "cartesian_wrench_controller.cpp",
    "line": 39,
    "function": null,
    "comment": "cartesian_wrench_controller.cpp:39:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "cartesian_wrench_controller.cpp",
    "line": 41,
    "function": null,
    "comment": "cartesian_wrench_controller.cpp:41:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "cartesian_wrench_controller.cpp",
    "line": 41,
    "function": null,
    "comment": "cartesian_wrench_controller.cpp:41:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "cartesian_wrench_controller.cpp",
    "line": 43,
    "function": null,
    "comment": "cartesian_wrench_controller.cpp:43:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "cartesian_wrench_controller.cpp",
    "line": 53,
    "function": null,
    "comment": "cartesian_wrench_controller.cpp:53:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "cartesian_wrench_controller.cpp",
    "line": 58,
    "function": null,
    "comment": "cartesian_wrench_controller.cpp:58:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "cartesian_wrench_controller.cpp",
    "line": 59,
    "function": null,
    "comment": "cartesian_wrench_controller.cpp:59:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "cartesian_wrench_controller.cpp",
    "line": 68,
    "function": null,
    "comment": "cartesian_wrench_controller.cpp:68:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "cartesian_wrench_controller.cpp",
    "line": 68,
    "function": null,
    "comment": "cartesian_wrench_controller.cpp:68:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "cartesian_wrench_controller.cpp",
    "line": 69,
    "function": null,
    "comment": "cartesian_wrench_controller.cpp:69:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "cartesian_wrench_controller.cpp",
    "line": 73,
    "function": null,
    "comment": "cartesian_wrench_controller.cpp:73:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "cartesian_wrench_controller.cpp",
    "line": 73,
    "function": null,
    "comment": "cartesian_wrench_controller.cpp:73:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "cartesian_wrench_controller.cpp",
    "line": 74,
    "function": null,
    "comment": "cartesian_wrench_controller.cpp:74:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "cartesian_wrench_controller.cpp",
    "line": 80,
    "function": null,
    "comment": "cartesian_wrench_controller.cpp:80:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "cartesian_wrench_controller.cpp",
    "line": 80,
    "function": null,
    "comment": "cartesian_wrench_controller.cpp:80:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "cartesian_wrench_controller.cpp",
    "line": 81,
    "function": null,
    "comment": "cartesian_wrench_controller.cpp:81:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "cartesian_wrench_controller.cpp",
    "line": 85,
    "function": null,
    "comment": "cartesian_wrench_controller.cpp:85:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "cartesian_wrench_controller.cpp",
    "line": 86,
    "function": null,
    "comment": "cartesian_wrench_controller.cpp:86:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "cartesian_wrench_controller.cpp",
    "line": 106,
    "function": null,
    "comment": "cartesian_wrench_controller.cpp:106:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "cartesian_wrench_controller.cpp",
    "line": 114,
    "function": null,
    "comment": "cartesian_wrench_controller.cpp:114:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "cartesian_wrench_controller.cpp",
    "line": 116,
    "function": null,
    "comment": "cartesian_wrench_controller.cpp:116:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "cartesian_wrench_controller.cpp",
    "line": 116,
    "function": null,
    "comment": "cartesian_wrench_controller.cpp:116:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "cartesian_wrench_controller.cpp",
    "line": 127,
    "function": null,
    "comment": "cartesian_wrench_controller.cpp:127:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "cartesian_wrench_controller.cpp",
    "line": 129,
    "function": null,
    "comment": "cartesian_wrench_controller.cpp:129:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "cartesian_wrench_controller.cpp",
    "line": 130,
    "function": null,
    "comment": "cartesian_wrench_controller.cpp:130:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "cartesian_wrench_controller.cpp",
    "line": 139,
    "function": null,
    "comment": "cartesian_wrench_controller.cpp:139:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "cartesian_wrench_controller.cpp",
    "line": 140,
    "function": null,
    "comment": "cartesian_wrench_controller.cpp:140:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "cartesian_wrench_controller.cpp",
    "line": 150,
    "function": null,
    "comment": "cartesian_wrench_controller.cpp:150:  Namespace should be terminated with '// namespace controller'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "cartesian_wrench_controller.cpp",
    "line": 150,
    "function": null,
    "comment": "cartesian_wrench_controller.cpp:150:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "cartesian_wrench_controller.cpp",
    "line": 67,
    "function": null,
    "comment": "cartesian_wrench_controller.cpp:67:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "jt_cartesian_controller.cpp",
    "line": 46,
    "function": null,
    "comment": "jt_cartesian_controller.cpp:46:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "jt_cartesian_controller.cpp",
    "line": 49,
    "function": null,
    "comment": "jt_cartesian_controller.cpp:49:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "jt_cartesian_controller.cpp",
    "line": 56,
    "function": null,
    "comment": "jt_cartesian_controller.cpp:56:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "jt_cartesian_controller.cpp",
    "line": 63,
    "function": null,
    "comment": "jt_cartesian_controller.cpp:63:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "jt_cartesian_controller.cpp",
    "line": 64,
    "function": null,
    "comment": "jt_cartesian_controller.cpp:64:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "jt_cartesian_controller.cpp",
    "line": 69,
    "function": null,
    "comment": "jt_cartesian_controller.cpp:69:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "jt_cartesian_controller.cpp",
    "line": 69,
    "function": null,
    "comment": "jt_cartesian_controller.cpp:69:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "jt_cartesian_controller.cpp",
    "line": 70,
    "function": null,
    "comment": "jt_cartesian_controller.cpp:70:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "jt_cartesian_controller.cpp",
    "line": 74,
    "function": null,
    "comment": "jt_cartesian_controller.cpp:74:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "jt_cartesian_controller.cpp",
    "line": 74,
    "function": null,
    "comment": "jt_cartesian_controller.cpp:74:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "jt_cartesian_controller.cpp",
    "line": 75,
    "function": null,
    "comment": "jt_cartesian_controller.cpp:75:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "jt_cartesian_controller.cpp",
    "line": 88,
    "function": null,
    "comment": "jt_cartesian_controller.cpp:88:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "jt_cartesian_controller.cpp",
    "line": 89,
    "function": null,
    "comment": "jt_cartesian_controller.cpp:89:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "jt_cartesian_controller.cpp",
    "line": 93,
    "function": null,
    "comment": "jt_cartesian_controller.cpp:93:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "jt_cartesian_controller.cpp",
    "line": 94,
    "function": null,
    "comment": "jt_cartesian_controller.cpp:94:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "jt_cartesian_controller.cpp",
    "line": 108,
    "function": null,
    "comment": "jt_cartesian_controller.cpp:108:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "jt_cartesian_controller.cpp",
    "line": 109,
    "function": null,
    "comment": "jt_cartesian_controller.cpp:109:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "jt_cartesian_controller.cpp",
    "line": 114,
    "function": null,
    "comment": "jt_cartesian_controller.cpp:114:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "jt_cartesian_controller.cpp",
    "line": 115,
    "function": null,
    "comment": "jt_cartesian_controller.cpp:115:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "jt_cartesian_controller.cpp",
    "line": 132,
    "function": null,
    "comment": "jt_cartesian_controller.cpp:132:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "jt_cartesian_controller.cpp",
    "line": 134,
    "function": null,
    "comment": "jt_cartesian_controller.cpp:134:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "jt_cartesian_controller.cpp",
    "line": 145,
    "function": null,
    "comment": "jt_cartesian_controller.cpp:145:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "jt_cartesian_controller.cpp",
    "line": 146,
    "function": null,
    "comment": "jt_cartesian_controller.cpp:146:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "jt_cartesian_controller.cpp",
    "line": 147,
    "function": null,
    "comment": "jt_cartesian_controller.cpp:147:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "jt_cartesian_controller.cpp",
    "line": 175,
    "function": null,
    "comment": "jt_cartesian_controller.cpp:175:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "jt_cartesian_controller.cpp",
    "line": 176,
    "function": null,
    "comment": "jt_cartesian_controller.cpp:176:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "jt_cartesian_controller.cpp",
    "line": 177,
    "function": null,
    "comment": "jt_cartesian_controller.cpp:177:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "jt_cartesian_controller.cpp",
    "line": 192,
    "function": null,
    "comment": "jt_cartesian_controller.cpp:192:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "jt_cartesian_controller.cpp",
    "line": 192,
    "function": null,
    "comment": "jt_cartesian_controller.cpp:192:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "jt_cartesian_controller.cpp",
    "line": 192,
    "function": null,
    "comment": "jt_cartesian_controller.cpp:192:  Is this a non-const reference? If so, make const or use a pointer: Eigen::Matrix<double,6,1> &err  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "jt_cartesian_controller.cpp",
    "line": 193,
    "function": null,
    "comment": "jt_cartesian_controller.cpp:193:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "jt_cartesian_controller.cpp",
    "line": 201,
    "function": null,
    "comment": "jt_cartesian_controller.cpp:201:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "jt_cartesian_controller.cpp",
    "line": 242,
    "function": null,
    "comment": "jt_cartesian_controller.cpp:242:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "jt_cartesian_controller.cpp",
    "line": 244,
    "function": null,
    "comment": "jt_cartesian_controller.cpp:244:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "jt_cartesian_controller.cpp",
    "line": 248,
    "function": null,
    "comment": "jt_cartesian_controller.cpp:248:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "jt_cartesian_controller.cpp",
    "line": 255,
    "function": null,
    "comment": "jt_cartesian_controller.cpp:255:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "jt_cartesian_controller.cpp",
    "line": 257,
    "function": null,
    "comment": "jt_cartesian_controller.cpp:257:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "jt_cartesian_controller.cpp",
    "line": 260,
    "function": null,
    "comment": "jt_cartesian_controller.cpp:260:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "jt_cartesian_controller.cpp",
    "line": 272,
    "function": null,
    "comment": "jt_cartesian_controller.cpp:272:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "jt_cartesian_controller.cpp",
    "line": 272,
    "function": null,
    "comment": "jt_cartesian_controller.cpp:272:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "jt_cartesian_controller.cpp",
    "line": 273,
    "function": null,
    "comment": "jt_cartesian_controller.cpp:273:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "jt_cartesian_controller.cpp",
    "line": 274,
    "function": null,
    "comment": "jt_cartesian_controller.cpp:274:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "jt_cartesian_controller.cpp",
    "line": 275,
    "function": null,
    "comment": "jt_cartesian_controller.cpp:275:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "jt_cartesian_controller.cpp",
    "line": 275,
    "function": null,
    "comment": "jt_cartesian_controller.cpp:275:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "jt_cartesian_controller.cpp",
    "line": 276,
    "function": null,
    "comment": "jt_cartesian_controller.cpp:276:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "jt_cartesian_controller.cpp",
    "line": 277,
    "function": null,
    "comment": "jt_cartesian_controller.cpp:277:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "jt_cartesian_controller.cpp",
    "line": 280,
    "function": null,
    "comment": "jt_cartesian_controller.cpp:280:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "jt_cartesian_controller.cpp",
    "line": 282,
    "function": null,
    "comment": "jt_cartesian_controller.cpp:282:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "jt_cartesian_controller.cpp",
    "line": 290,
    "function": null,
    "comment": "jt_cartesian_controller.cpp:290:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "jt_cartesian_controller.cpp",
    "line": 293,
    "function": null,
    "comment": "jt_cartesian_controller.cpp:293:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "jt_cartesian_controller.cpp",
    "line": 320,
    "function": null,
    "comment": "jt_cartesian_controller.cpp:320:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "jt_cartesian_controller.cpp",
    "line": 321,
    "function": null,
    "comment": "jt_cartesian_controller.cpp:321:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "jt_cartesian_controller.cpp",
    "line": 327,
    "function": null,
    "comment": "jt_cartesian_controller.cpp:327:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "jt_cartesian_controller.cpp",
    "line": 334,
    "function": null,
    "comment": "jt_cartesian_controller.cpp:334:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "jt_cartesian_controller.cpp",
    "line": 351,
    "function": null,
    "comment": "jt_cartesian_controller.cpp:351:  Namespace should be terminated with '// namespace controller'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "jt_cartesian_controller.cpp",
    "line": 351,
    "function": null,
    "comment": "jt_cartesian_controller.cpp:351:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "jt_cartesian_controller.cpp",
    "line": 351,
    "function": null,
    "comment": "jt_cartesian_controller.cpp:351:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "jt_cartesian_controller.cpp",
    "line": 68,
    "function": null,
    "comment": "jt_cartesian_controller.cpp:68:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "jt_cartesian_controller.cpp",
    "line": 313,
    "function": null,
    "comment": "jt_cartesian_controller.cpp:313:  Add #include <algorithm> for min  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_velocity_controller.cpp",
    "line": 38,
    "function": null,
    "comment": "joint_velocity_controller.cpp:38:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "joint_velocity_controller.cpp",
    "line": 38,
    "function": null,
    "comment": "joint_velocity_controller.cpp:38:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "joint_velocity_controller.cpp",
    "line": 40,
    "function": null,
    "comment": "joint_velocity_controller.cpp:40:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint_velocity_controller.cpp",
    "line": 42,
    "function": null,
    "comment": "joint_velocity_controller.cpp:42:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_velocity_controller.cpp",
    "line": 46,
    "function": null,
    "comment": "joint_velocity_controller.cpp:46:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_velocity_controller.cpp",
    "line": 50,
    "function": null,
    "comment": "joint_velocity_controller.cpp:50:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_velocity_controller.cpp",
    "line": 54,
    "function": null,
    "comment": "joint_velocity_controller.cpp:54:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "joint_velocity_controller.cpp",
    "line": 55,
    "function": null,
    "comment": "joint_velocity_controller.cpp:55:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_velocity_controller.cpp",
    "line": 56,
    "function": null,
    "comment": "joint_velocity_controller.cpp:56:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_velocity_controller.cpp",
    "line": 63,
    "function": null,
    "comment": "joint_velocity_controller.cpp:63:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_velocity_controller.cpp",
    "line": 74,
    "function": null,
    "comment": "joint_velocity_controller.cpp:74:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_velocity_controller.cpp",
    "line": 75,
    "function": null,
    "comment": "joint_velocity_controller.cpp:75:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint_velocity_controller.cpp",
    "line": 81,
    "function": null,
    "comment": "joint_velocity_controller.cpp:81:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_velocity_controller.cpp",
    "line": 86,
    "function": null,
    "comment": "joint_velocity_controller.cpp:86:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_velocity_controller.cpp",
    "line": 96,
    "function": null,
    "comment": "joint_velocity_controller.cpp:96:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_velocity_controller.cpp",
    "line": 99,
    "function": null,
    "comment": "joint_velocity_controller.cpp:99:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_velocity_controller.cpp",
    "line": 105,
    "function": null,
    "comment": "joint_velocity_controller.cpp:105:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_velocity_controller.cpp",
    "line": 106,
    "function": null,
    "comment": "joint_velocity_controller.cpp:106:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "joint_velocity_controller.cpp",
    "line": 107,
    "function": null,
    "comment": "joint_velocity_controller.cpp:107:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "joint_velocity_controller.cpp",
    "line": 108,
    "function": null,
    "comment": "joint_velocity_controller.cpp:108:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_velocity_controller.cpp",
    "line": 111,
    "function": null,
    "comment": "joint_velocity_controller.cpp:111:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_velocity_controller.cpp",
    "line": 112,
    "function": null,
    "comment": "joint_velocity_controller.cpp:112:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "joint_velocity_controller.cpp",
    "line": 113,
    "function": null,
    "comment": "joint_velocity_controller.cpp:113:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_velocity_controller.cpp",
    "line": 117,
    "function": null,
    "comment": "joint_velocity_controller.cpp:117:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_velocity_controller.cpp",
    "line": 123,
    "function": null,
    "comment": "joint_velocity_controller.cpp:123:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_velocity_controller.cpp",
    "line": 129,
    "function": null,
    "comment": "joint_velocity_controller.cpp:129:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_velocity_controller.cpp",
    "line": 134,
    "function": null,
    "comment": "joint_velocity_controller.cpp:134:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "joint_velocity_controller.cpp",
    "line": 143,
    "function": null,
    "comment": "joint_velocity_controller.cpp:143:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_velocity_controller.cpp",
    "line": 144,
    "function": null,
    "comment": "joint_velocity_controller.cpp:144:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "joint_velocity_controller.cpp",
    "line": 145,
    "function": null,
    "comment": "joint_velocity_controller.cpp:145:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_velocity_controller.cpp",
    "line": 146,
    "function": null,
    "comment": "joint_velocity_controller.cpp:146:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_velocity_controller.cpp",
    "line": 169,
    "function": null,
    "comment": "joint_velocity_controller.cpp:169:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "joint_velocity_controller.cpp",
    "line": 173,
    "function": null,
    "comment": "joint_velocity_controller.cpp:173:  Namespace should be terminated with '// namespace controller'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "joint_velocity_controller.cpp",
    "line": 173,
    "function": null,
    "comment": "joint_velocity_controller.cpp:173:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "joint_velocity_controller.cpp",
    "line": 116,
    "function": null,
    "comment": "joint_velocity_controller.cpp:116:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_position_controller.cpp",
    "line": 39,
    "function": null,
    "comment": "joint_position_controller.cpp:39:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "joint_position_controller.cpp",
    "line": 39,
    "function": null,
    "comment": "joint_position_controller.cpp:39:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "joint_position_controller.cpp",
    "line": 41,
    "function": null,
    "comment": "joint_position_controller.cpp:41:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint_position_controller.cpp",
    "line": 43,
    "function": null,
    "comment": "joint_position_controller.cpp:43:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_position_controller.cpp",
    "line": 48,
    "function": null,
    "comment": "joint_position_controller.cpp:48:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_position_controller.cpp",
    "line": 52,
    "function": null,
    "comment": "joint_position_controller.cpp:52:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_position_controller.cpp",
    "line": 56,
    "function": null,
    "comment": "joint_position_controller.cpp:56:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "joint_position_controller.cpp",
    "line": 57,
    "function": null,
    "comment": "joint_position_controller.cpp:57:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_position_controller.cpp",
    "line": 58,
    "function": null,
    "comment": "joint_position_controller.cpp:58:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_position_controller.cpp",
    "line": 65,
    "function": null,
    "comment": "joint_position_controller.cpp:65:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_position_controller.cpp",
    "line": 71,
    "function": null,
    "comment": "joint_position_controller.cpp:71:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_position_controller.cpp",
    "line": 72,
    "function": null,
    "comment": "joint_position_controller.cpp:72:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_position_controller.cpp",
    "line": 81,
    "function": null,
    "comment": "joint_position_controller.cpp:81:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_position_controller.cpp",
    "line": 82,
    "function": null,
    "comment": "joint_position_controller.cpp:82:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint_position_controller.cpp",
    "line": 87,
    "function": null,
    "comment": "joint_position_controller.cpp:87:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_position_controller.cpp",
    "line": 97,
    "function": null,
    "comment": "joint_position_controller.cpp:97:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_position_controller.cpp",
    "line": 100,
    "function": null,
    "comment": "joint_position_controller.cpp:100:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_position_controller.cpp",
    "line": 106,
    "function": null,
    "comment": "joint_position_controller.cpp:106:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_position_controller.cpp",
    "line": 107,
    "function": null,
    "comment": "joint_position_controller.cpp:107:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "joint_position_controller.cpp",
    "line": 108,
    "function": null,
    "comment": "joint_position_controller.cpp:108:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_position_controller.cpp",
    "line": 111,
    "function": null,
    "comment": "joint_position_controller.cpp:111:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_position_controller.cpp",
    "line": 112,
    "function": null,
    "comment": "joint_position_controller.cpp:112:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "joint_position_controller.cpp",
    "line": 113,
    "function": null,
    "comment": "joint_position_controller.cpp:113:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_position_controller.cpp",
    "line": 117,
    "function": null,
    "comment": "joint_position_controller.cpp:117:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_position_controller.cpp",
    "line": 123,
    "function": null,
    "comment": "joint_position_controller.cpp:123:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_position_controller.cpp",
    "line": 129,
    "function": null,
    "comment": "joint_position_controller.cpp:129:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_position_controller.cpp",
    "line": 134,
    "function": null,
    "comment": "joint_position_controller.cpp:134:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "joint_position_controller.cpp",
    "line": 142,
    "function": null,
    "comment": "joint_position_controller.cpp:142:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_position_controller.cpp",
    "line": 145,
    "function": null,
    "comment": "joint_position_controller.cpp:145:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "joint_position_controller.cpp",
    "line": 150,
    "function": null,
    "comment": "joint_position_controller.cpp:150:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_position_controller.cpp",
    "line": 151,
    "function": null,
    "comment": "joint_position_controller.cpp:151:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "joint_position_controller.cpp",
    "line": 158,
    "function": null,
    "comment": "joint_position_controller.cpp:158:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "joint_position_controller.cpp",
    "line": 160,
    "function": null,
    "comment": "joint_position_controller.cpp:160:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "joint_position_controller.cpp",
    "line": 160,
    "function": null,
    "comment": "joint_position_controller.cpp:160:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_position_controller.cpp",
    "line": 161,
    "function": null,
    "comment": "joint_position_controller.cpp:161:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "joint_position_controller.cpp",
    "line": 165,
    "function": null,
    "comment": "joint_position_controller.cpp:165:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "joint_position_controller.cpp",
    "line": 165,
    "function": null,
    "comment": "joint_position_controller.cpp:165:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "joint_position_controller.cpp",
    "line": 165,
    "function": null,
    "comment": "joint_position_controller.cpp:165:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_position_controller.cpp",
    "line": 166,
    "function": null,
    "comment": "joint_position_controller.cpp:166:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "joint_position_controller.cpp",
    "line": 170,
    "function": null,
    "comment": "joint_position_controller.cpp:170:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "joint_position_controller.cpp",
    "line": 171,
    "function": null,
    "comment": "joint_position_controller.cpp:171:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "joint_position_controller.cpp",
    "line": 174,
    "function": null,
    "comment": "joint_position_controller.cpp:174:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_position_controller.cpp",
    "line": 175,
    "function": null,
    "comment": "joint_position_controller.cpp:175:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "joint_position_controller.cpp",
    "line": 176,
    "function": null,
    "comment": "joint_position_controller.cpp:176:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_position_controller.cpp",
    "line": 177,
    "function": null,
    "comment": "joint_position_controller.cpp:177:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_position_controller.cpp",
    "line": 181,
    "function": null,
    "comment": "joint_position_controller.cpp:181:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_position_controller.cpp",
    "line": 201,
    "function": null,
    "comment": "joint_position_controller.cpp:201:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "joint_position_controller.cpp",
    "line": 205,
    "function": null,
    "comment": "joint_position_controller.cpp:205:  Namespace should be terminated with '// namespace controller'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "joint_position_controller.cpp",
    "line": 116,
    "function": null,
    "comment": "joint_position_controller.cpp:116:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "cartesian_twist_controller.cpp",
    "line": 39,
    "function": null,
    "comment": "cartesian_twist_controller.cpp:39:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "cartesian_twist_controller.cpp",
    "line": 41,
    "function": null,
    "comment": "cartesian_twist_controller.cpp:41:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "cartesian_twist_controller.cpp",
    "line": 41,
    "function": null,
    "comment": "cartesian_twist_controller.cpp:41:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "cartesian_twist_controller.cpp",
    "line": 43,
    "function": null,
    "comment": "cartesian_twist_controller.cpp:43:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "cartesian_twist_controller.cpp",
    "line": 54,
    "function": null,
    "comment": "cartesian_twist_controller.cpp:54:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "cartesian_twist_controller.cpp",
    "line": 59,
    "function": null,
    "comment": "cartesian_twist_controller.cpp:59:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "cartesian_twist_controller.cpp",
    "line": 60,
    "function": null,
    "comment": "cartesian_twist_controller.cpp:60:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "cartesian_twist_controller.cpp",
    "line": 65,
    "function": null,
    "comment": "cartesian_twist_controller.cpp:65:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "cartesian_twist_controller.cpp",
    "line": 65,
    "function": null,
    "comment": "cartesian_twist_controller.cpp:65:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "cartesian_twist_controller.cpp",
    "line": 66,
    "function": null,
    "comment": "cartesian_twist_controller.cpp:66:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "cartesian_twist_controller.cpp",
    "line": 70,
    "function": null,
    "comment": "cartesian_twist_controller.cpp:70:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "cartesian_twist_controller.cpp",
    "line": 70,
    "function": null,
    "comment": "cartesian_twist_controller.cpp:70:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "cartesian_twist_controller.cpp",
    "line": 71,
    "function": null,
    "comment": "cartesian_twist_controller.cpp:71:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "cartesian_twist_controller.cpp",
    "line": 84,
    "function": null,
    "comment": "cartesian_twist_controller.cpp:84:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "cartesian_twist_controller.cpp",
    "line": 85,
    "function": null,
    "comment": "cartesian_twist_controller.cpp:85:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "cartesian_twist_controller.cpp",
    "line": 100,
    "function": null,
    "comment": "cartesian_twist_controller.cpp:100:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "cartesian_twist_controller.cpp",
    "line": 105,
    "function": null,
    "comment": "cartesian_twist_controller.cpp:105:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "cartesian_twist_controller.cpp",
    "line": 109,
    "function": null,
    "comment": "cartesian_twist_controller.cpp:109:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "Don't leave spaces before a semicolon at the end of a line.",
    "file": "cartesian_twist_controller.cpp",
    "line": 110,
    "function": null,
    "comment": "cartesian_twist_controller.cpp:110:  Extra space before last semicolon. If this should be an empty statement, use {} instead.  [whitespace/semicolon] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","semicolon"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "cartesian_twist_controller.cpp",
    "line": 120,
    "function": null,
    "comment": "cartesian_twist_controller.cpp:120:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "cartesian_twist_controller.cpp",
    "line": 122,
    "function": null,
    "comment": "cartesian_twist_controller.cpp:122:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "cartesian_twist_controller.cpp",
    "line": 135,
    "function": null,
    "comment": "cartesian_twist_controller.cpp:135:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "cartesian_twist_controller.cpp",
    "line": 158,
    "function": null,
    "comment": "cartesian_twist_controller.cpp:158:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "cartesian_twist_controller.cpp",
    "line": 159,
    "function": null,
    "comment": "cartesian_twist_controller.cpp:159:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "cartesian_twist_controller.cpp",
    "line": 161,
    "function": null,
    "comment": "cartesian_twist_controller.cpp:161:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "cartesian_twist_controller.cpp",
    "line": 162,
    "function": null,
    "comment": "cartesian_twist_controller.cpp:162:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "cartesian_twist_controller.cpp",
    "line": 165,
    "function": null,
    "comment": "cartesian_twist_controller.cpp:165:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "cartesian_twist_controller.cpp",
    "line": 167,
    "function": null,
    "comment": "cartesian_twist_controller.cpp:167:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "cartesian_twist_controller.cpp",
    "line": 168,
    "function": null,
    "comment": "cartesian_twist_controller.cpp:168:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "cartesian_twist_controller.cpp",
    "line": 176,
    "function": null,
    "comment": "cartesian_twist_controller.cpp:176:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "cartesian_twist_controller.cpp",
    "line": 177,
    "function": null,
    "comment": "cartesian_twist_controller.cpp:177:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "cartesian_twist_controller.cpp",
    "line": 187,
    "function": null,
    "comment": "cartesian_twist_controller.cpp:187:  Namespace should be terminated with '// namespace controller'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "cartesian_twist_controller.cpp",
    "line": 187,
    "function": null,
    "comment": "cartesian_twist_controller.cpp:187:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "cartesian_twist_controller.cpp",
    "line": 64,
    "function": null,
    "comment": "cartesian_twist_controller.cpp:64:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 39,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:39:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 39,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:39:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 41,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:41:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 49,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:49:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 51,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:51:  Missing spaces around <=  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 52,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:52:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 57,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:57:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 58,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:58:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 58,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:58:  Is this a non-const reference? If so, make const or use a pointer: std::vector<double>& coefficients  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 59,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:59:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 63,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:63:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 71,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:71:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 72,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:72:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 79,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:79:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 81,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:81:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 83,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:83:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 91,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:91:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 92,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:92:  Is this a non-const reference? If so, make const or use a pointer: double& position  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 92,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:92:  Is this a non-const reference? If so, make const or use a pointer: double& velocity  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 92,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:92:  Is this a non-const reference? If so, make const or use a pointer: double& acceleration  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 93,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:93:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 118,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:118:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 118,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:118:  Is this a non-const reference? If so, make const or use a pointer: std::vector<double>& coefficients  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 119,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:119:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 123,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:123:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 129,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:129:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 130,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:130:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 136,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:136:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 137,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:137:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 144,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:144:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 148,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:148:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 155,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:155:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 156,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:156:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 157,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:157:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 164,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:164:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 169,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:169:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 170,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:170:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 174,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:174:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 177,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:177:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 178,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:178:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 183,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:183:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 184,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:184:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 186,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:186:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 194,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:194:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 196,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:196:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 210,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:210:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 221,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:221:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 223,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:223:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 231,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:231:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 233,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:233:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 233,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:233:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 233,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:233:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 241,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:241:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 243,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:243:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 247,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:247:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 248,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:248:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 250,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:250:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 256,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:256:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 259,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:259:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 276,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:276:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 285,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:285:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 289,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:289:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 292,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:292:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 300,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:300:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 301,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:301:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 304,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:304:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 305,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:305:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 314,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:314:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 335,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:335:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 341,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:341:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 353,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:353:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 355,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:355:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 357,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:357:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 362,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:362:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 366,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:366:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 373,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:373:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 384,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:384:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 394,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:394:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 399,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:399:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 399,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:399:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 399,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:399:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 414,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:414:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 415,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:415:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 418,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:418:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 421,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:421:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 423,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:423:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 426,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:426:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 426,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:426:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 428,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:428:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 429,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:429:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 435,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:435:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 435,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:435:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 436,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:436:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 440,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:440:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 446,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:446:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 451,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:451:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 451,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:451:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 452,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:452:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 453,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:453:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 455,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:455:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 457,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:457:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 458,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:458:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 461,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:461:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 462,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:462:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 463,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:463:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 468,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:468:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 468,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:468:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 469,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:469:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 470,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:470:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 479,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:479:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 481,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:481:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 484,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:484:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 488,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:488:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 489,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:489:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 491,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:491:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 496,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:496:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 498,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:498:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 499,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:499:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 500,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:500:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 501,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:501:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 502,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:502:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 503,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:503:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 504,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:504:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 505,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:505:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 507,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:507:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 508,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:508:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 509,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:509:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 510,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:510:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 511,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:511:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 512,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:512:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 513,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:513:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 514,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:514:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 515,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:515:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 517,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:517:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 519,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:519:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 520,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:520:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 521,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:521:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 522,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:522:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 523,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:523:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 530,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:530:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 531,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:531:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 536,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:536:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 537,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:537:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 538,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:538:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 539,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:539:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 551,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:551:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 557,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:557:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 558,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:558:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 563,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:563:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 565,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:565:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 567,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:567:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 568,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:568:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 569,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:569:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 571,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:571:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 576,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:576:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 591,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:591:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 597,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:597:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 598,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:598:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 599,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:599:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 601,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:601:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 606,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:606:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 621,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:621:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 626,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:626:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 636,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:636:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 638,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:638:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 640,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:640:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 642,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:642:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 649,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:649:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 650,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:650:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 653,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:653:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 653,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:653:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 654,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:654:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 666,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:666:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 672,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:672:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 676,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:676:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 678,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:678:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 682,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:682:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 694,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:694:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 696,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:696:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 704,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:704:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 705,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:705:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 722,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:722:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 726,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:726:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 729,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:729:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 730,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:730:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 744,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:744:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 750,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:750:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 752,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:752:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 753,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:753:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 754,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:754:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 759,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:759:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 763,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:763:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 765,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:765:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 773,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:773:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 774,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:774:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 775,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:775:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 778,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:778:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 779,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:779:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 780,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:780:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 784,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:784:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 785,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:785:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 795,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:795:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 796,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:796:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 797,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:797:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 798,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:798:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 804,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:804:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 806,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:806:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 813,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:813:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 814,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:814:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 822,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:822:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 823,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:823:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 828,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:828:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 852,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:852:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 852,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:852:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 857,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:857:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 865,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:865:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 866,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:866:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 867,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:867:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 869,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:869:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 886,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:886:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 890,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:890:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 898,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:898:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 900,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:900:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 907,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:907:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 916,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:916:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 920,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:920:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 929,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:929:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 931,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:931:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 937,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:937:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 938,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:938:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 944,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:944:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 945,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:945:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 951,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:951:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 952,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:952:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 957,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:957:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 962,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:962:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 971,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:971:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 973,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:973:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 974,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:974:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 977,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:977:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 983,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:983:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 991,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:991:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 991,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:991:  Is this a non-const reference? If so, make const or use a pointer: Member &member  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 992,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:992:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 999,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:999:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 1006,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:1006:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 1018,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:1018:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 1019,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:1019:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 1025,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:1025:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 1032,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:1032:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 1035,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:1035:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 1046,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:1046:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 1048,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:1048:  Using C-style cast.  Use reinterpret_cast<RTGoalHandle*>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 1055,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:1055:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 1058,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:1058:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 1061,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:1061:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 1073,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:1073:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 1074,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:1074:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 1076,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:1076:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 1079,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:1079:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 1089,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:1089:  Namespace should be terminated with '// namespace controller'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 1026,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:1026:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 865,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:865:  Add #include <algorithm> for min  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 1026,
    "function": null,
    "comment": "joint_trajectory_action_controller.cpp:1026:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "cartesian_pose_controller.cpp",
    "line": 43,
    "function": null,
    "comment": "cartesian_pose_controller.cpp:43:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "cartesian_pose_controller.cpp",
    "line": 44,
    "function": null,
    "comment": "cartesian_pose_controller.cpp:44:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "cartesian_pose_controller.cpp",
    "line": 45,
    "function": null,
    "comment": "cartesian_pose_controller.cpp:45:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "cartesian_pose_controller.cpp",
    "line": 47,
    "function": null,
    "comment": "cartesian_pose_controller.cpp:47:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "cartesian_pose_controller.cpp",
    "line": 47,
    "function": null,
    "comment": "cartesian_pose_controller.cpp:47:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "cartesian_pose_controller.cpp",
    "line": 49,
    "function": null,
    "comment": "cartesian_pose_controller.cpp:49:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "cartesian_pose_controller.cpp",
    "line": 56,
    "function": null,
    "comment": "cartesian_pose_controller.cpp:56:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "cartesian_pose_controller.cpp",
    "line": 61,
    "function": null,
    "comment": "cartesian_pose_controller.cpp:61:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "cartesian_pose_controller.cpp",
    "line": 62,
    "function": null,
    "comment": "cartesian_pose_controller.cpp:62:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "cartesian_pose_controller.cpp",
    "line": 67,
    "function": null,
    "comment": "cartesian_pose_controller.cpp:67:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "cartesian_pose_controller.cpp",
    "line": 67,
    "function": null,
    "comment": "cartesian_pose_controller.cpp:67:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "cartesian_pose_controller.cpp",
    "line": 68,
    "function": null,
    "comment": "cartesian_pose_controller.cpp:68:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "cartesian_pose_controller.cpp",
    "line": 72,
    "function": null,
    "comment": "cartesian_pose_controller.cpp:72:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "cartesian_pose_controller.cpp",
    "line": 72,
    "function": null,
    "comment": "cartesian_pose_controller.cpp:72:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "cartesian_pose_controller.cpp",
    "line": 73,
    "function": null,
    "comment": "cartesian_pose_controller.cpp:73:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "cartesian_pose_controller.cpp",
    "line": 86,
    "function": null,
    "comment": "cartesian_pose_controller.cpp:86:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "cartesian_pose_controller.cpp",
    "line": 87,
    "function": null,
    "comment": "cartesian_pose_controller.cpp:87:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "cartesian_pose_controller.cpp",
    "line": 101,
    "function": null,
    "comment": "cartesian_pose_controller.cpp:101:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "cartesian_pose_controller.cpp",
    "line": 104,
    "function": null,
    "comment": "cartesian_pose_controller.cpp:104:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "cartesian_pose_controller.cpp",
    "line": 112,
    "function": null,
    "comment": "cartesian_pose_controller.cpp:112:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "cartesian_pose_controller.cpp",
    "line": 115,
    "function": null,
    "comment": "cartesian_pose_controller.cpp:115:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "cartesian_pose_controller.cpp",
    "line": 116,
    "function": null,
    "comment": "cartesian_pose_controller.cpp:116:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "cartesian_pose_controller.cpp",
    "line": 122,
    "function": null,
    "comment": "cartesian_pose_controller.cpp:122:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "cartesian_pose_controller.cpp",
    "line": 124,
    "function": null,
    "comment": "cartesian_pose_controller.cpp:124:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "cartesian_pose_controller.cpp",
    "line": 138,
    "function": null,
    "comment": "cartesian_pose_controller.cpp:138:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "cartesian_pose_controller.cpp",
    "line": 150,
    "function": null,
    "comment": "cartesian_pose_controller.cpp:150:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "cartesian_pose_controller.cpp",
    "line": 157,
    "function": null,
    "comment": "cartesian_pose_controller.cpp:157:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "cartesian_pose_controller.cpp",
    "line": 159,
    "function": null,
    "comment": "cartesian_pose_controller.cpp:159:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "cartesian_pose_controller.cpp",
    "line": 160,
    "function": null,
    "comment": "cartesian_pose_controller.cpp:160:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "cartesian_pose_controller.cpp",
    "line": 167,
    "function": null,
    "comment": "cartesian_pose_controller.cpp:167:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "cartesian_pose_controller.cpp",
    "line": 168,
    "function": null,
    "comment": "cartesian_pose_controller.cpp:168:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "cartesian_pose_controller.cpp",
    "line": 168,
    "function": null,
    "comment": "cartesian_pose_controller.cpp:168:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "cartesian_pose_controller.cpp",
    "line": 169,
    "function": null,
    "comment": "cartesian_pose_controller.cpp:169:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "cartesian_pose_controller.cpp",
    "line": 169,
    "function": null,
    "comment": "cartesian_pose_controller.cpp:169:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "cartesian_pose_controller.cpp",
    "line": 174,
    "function": null,
    "comment": "cartesian_pose_controller.cpp:174:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "cartesian_pose_controller.cpp",
    "line": 179,
    "function": null,
    "comment": "cartesian_pose_controller.cpp:179:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "cartesian_pose_controller.cpp",
    "line": 179,
    "function": null,
    "comment": "cartesian_pose_controller.cpp:179:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "cartesian_pose_controller.cpp",
    "line": 180,
    "function": null,
    "comment": "cartesian_pose_controller.cpp:180:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "cartesian_pose_controller.cpp",
    "line": 180,
    "function": null,
    "comment": "cartesian_pose_controller.cpp:180:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "cartesian_pose_controller.cpp",
    "line": 181,
    "function": null,
    "comment": "cartesian_pose_controller.cpp:181:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "cartesian_pose_controller.cpp",
    "line": 183,
    "function": null,
    "comment": "cartesian_pose_controller.cpp:183:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "cartesian_pose_controller.cpp",
    "line": 183,
    "function": null,
    "comment": "cartesian_pose_controller.cpp:183:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "cartesian_pose_controller.cpp",
    "line": 193,
    "function": null,
    "comment": "cartesian_pose_controller.cpp:193:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "cartesian_pose_controller.cpp",
    "line": 204,
    "function": null,
    "comment": "cartesian_pose_controller.cpp:204:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "cartesian_pose_controller.cpp",
    "line": 205,
    "function": null,
    "comment": "cartesian_pose_controller.cpp:205:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "cartesian_pose_controller.cpp",
    "line": 215,
    "function": null,
    "comment": "cartesian_pose_controller.cpp:215:  Namespace should be terminated with '// namespace controller'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "At least two spaces is best between code and comments.",
    "file": "cartesian_pose_controller.cpp",
    "line": 215,
    "function": null,
    "comment": "cartesian_pose_controller.cpp:215:  At least two spaces is best between code and comments  [whitespace/comments] [2]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "cartesian_pose_controller.cpp",
    "line": 66,
    "function": null,
    "comment": "cartesian_pose_controller.cpp:66:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 39,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:39:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 39,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:39:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 41,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:41:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 49,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:49:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 51,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:51:  Missing spaces around <=  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 52,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:52:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 57,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:57:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 58,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:58:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 58,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:58:  Is this a non-const reference? If so, make const or use a pointer: std::vector<double>& coefficients  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 59,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:59:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 63,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:63:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 71,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:71:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 72,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:72:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 79,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:79:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 81,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:81:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 83,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:83:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 91,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:91:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 92,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:92:  Is this a non-const reference? If so, make const or use a pointer: double& position  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 92,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:92:  Is this a non-const reference? If so, make const or use a pointer: double& velocity  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 92,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:92:  Is this a non-const reference? If so, make const or use a pointer: double& acceleration  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 93,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:93:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 118,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:118:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 118,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:118:  Is this a non-const reference? If so, make const or use a pointer: std::vector<double>& coefficients  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 119,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:119:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 123,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:123:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 129,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:129:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 130,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:130:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 136,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:136:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 137,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:137:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 144,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:144:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 148,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:148:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 153,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:153:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 154,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:154:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 155,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:155:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 162,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:162:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 167,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:167:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 168,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:168:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 172,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:172:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 175,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:175:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 176,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:176:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 181,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:181:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 182,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:182:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 184,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:184:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 192,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:192:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 194,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:194:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 207,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:207:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 220,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:220:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 229,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:229:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 233,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:233:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 236,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:236:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 248,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:248:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 267,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:267:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 282,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:282:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 284,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:284:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 286,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:286:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 291,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:291:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 295,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:295:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 302,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:302:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 312,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:312:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 321,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:321:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 323,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:323:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 326,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:326:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 330,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:330:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 331,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:331:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 333,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:333:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 342,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:342:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 343,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:343:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 354,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:354:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 361,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:361:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 363,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:363:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 365,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:365:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 367,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:367:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 374,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:374:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 375,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:375:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 385,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:385:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 391,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:391:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 395,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:395:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 397,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:397:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 401,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:401:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 405,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:405:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 409,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:409:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 411,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:411:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 419,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:419:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 420,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:420:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 439,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:439:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 442,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:442:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 443,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:443:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 456,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:456:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 462,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:462:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 464,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:464:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 465,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:465:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 471,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:471:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 474,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:474:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 480,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:480:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 481,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:481:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 482,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:482:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 485,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:485:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 486,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:486:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 487,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:487:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 491,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:491:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 492,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:492:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 502,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:502:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 503,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:503:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 504,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:504:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 505,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:505:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 511,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:511:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 513,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:513:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 520,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:520:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 521,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:521:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 529,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:529:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 530,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:530:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 535,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:535:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 557,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:557:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 565,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:565:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 566,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:566:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 567,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:567:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 569,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:569:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 586,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:586:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 590,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:590:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 598,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:598:  Using C-style cast.  Use static_cast<int>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 600,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:600:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 607,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:607:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 616,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:616:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 620,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:620:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 629,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:629:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 631,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:631:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 637,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:637:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 638,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:638:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 644,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:644:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 645,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:645:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 651,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:651:  Namespace should be terminated with '// namespace controller'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 202,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:202:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 565,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:565:  Add #include <algorithm> for min  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 627,
    "function": null,
    "comment": "joint_spline_trajectory_controller.cpp:627:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_effort_controller.cpp",
    "line": 38,
    "function": null,
    "comment": "joint_effort_controller.cpp:38:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Except in if/for/while/switch, there should never be space immediately inside parens (eg 'f( 3, 4 )'). We make an exception for nested parens ( (a+b) + c ).",
    "file": "joint_effort_controller.cpp",
    "line": 38,
    "function": null,
    "comment": "joint_effort_controller.cpp:38:  Extra space after ( in function call  [whitespace/parens] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint_effort_controller.cpp",
    "line": 40,
    "function": null,
    "comment": "joint_effort_controller.cpp:40:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_effort_controller.cpp",
    "line": 44,
    "function": null,
    "comment": "joint_effort_controller.cpp:44:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_effort_controller.cpp",
    "line": 48,
    "function": null,
    "comment": "joint_effort_controller.cpp:48:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_effort_controller.cpp",
    "line": 52,
    "function": null,
    "comment": "joint_effort_controller.cpp:52:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_effort_controller.cpp",
    "line": 53,
    "function": null,
    "comment": "joint_effort_controller.cpp:53:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_effort_controller.cpp",
    "line": 55,
    "function": null,
    "comment": "joint_effort_controller.cpp:55:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_effort_controller.cpp",
    "line": 63,
    "function": null,
    "comment": "joint_effort_controller.cpp:63:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_effort_controller.cpp",
    "line": 72,
    "function": null,
    "comment": "joint_effort_controller.cpp:72:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_effort_controller.cpp",
    "line": 73,
    "function": null,
    "comment": "joint_effort_controller.cpp:73:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_effort_controller.cpp",
    "line": 80,
    "function": null,
    "comment": "joint_effort_controller.cpp:80:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_effort_controller.cpp",
    "line": 86,
    "function": null,
    "comment": "joint_effort_controller.cpp:86:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_effort_controller.cpp",
    "line": 99,
    "function": null,
    "comment": "joint_effort_controller.cpp:99:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_effort_controller.cpp",
    "line": 104,
    "function": null,
    "comment": "joint_effort_controller.cpp:104:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "joint_effort_controller.cpp",
    "line": 108,
    "function": null,
    "comment": "joint_effort_controller.cpp:108:  Namespace should be terminated with '// namespace controller'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "joint_effort_controller.cpp",
    "line": 78,
    "function": null,
    "comment": "joint_effort_controller.cpp:78:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "cartesian_pose_controller.cpp",
    "line": 102,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "cartesian_pose_controller.cpp",
    "line": 105,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "cartesian_pose_controller.cpp",
    "line": 124,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "cartesian_pose_controller.cpp",
    "line": 150,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "cartesian_pose_controller.cpp",
    "line": 157,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "cartesian_pose_controller.cpp",
    "line": 159,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "cartesian_twist_controller.cpp",
    "line": 100,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "cartesian_twist_controller.cpp",
    "line": 105,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "cartesian_twist_controller.cpp",
    "line": 122,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "cartesian_twist_controller.cpp",
    "line": 158,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "cartesian_twist_controller.cpp",
    "line": 161,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "cartesian_twist_controller.cpp",
    "line": 165,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "cartesian_twist_controller.cpp",
    "line": 167,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "cartesian_wrench_controller.cpp",
    "line": 127,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "cartesian_wrench_controller.cpp",
    "line": 129,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Maximum number of function parameters: 6",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 57,
    "function": null,
    "comment": "Found function with 7 or more parameters.",
    "tags": ["hicpp","code-standards","functions","parameters"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 48,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 51,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 171,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 191,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 206,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 216,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 232,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 251,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 260,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 283,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 301,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 311,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 325,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 362,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 364,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 394,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 402,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 419,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 438,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 455,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 461,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 470,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 501,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 510,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 597,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 606,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 615,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not write code that expects floating point calculations to yield exact results.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 62,
    "function": null,
    "comment": "Found float equality check.",
    "tags": ["hicpp","code-standards","floats","floating-point"]
  },
  {
    "rule": "Do not write code that expects floating point calculations to yield exact results.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 122,
    "function": null,
    "comment": "Found float equality check.",
    "tags": ["hicpp","code-standards","floats","floating-point"]
  },
  {
    "rule": "Do not write code that expects floating point calculations to yield exact results.",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 532,
    "function": null,
    "comment": "Found float equality check.",
    "tags": ["hicpp","code-standards","floats","floating-point"]
  },
  {
    "rule": "Maximum number of function parameters: 6",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 57,
    "function": null,
    "comment": "Found function with 7 or more parameters.",
    "tags": ["hicpp","code-standards","functions","parameters"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 48,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 51,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 173,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 193,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 209,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 220,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 244,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 246,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 255,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 272,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 288,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 317,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 328,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 354,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 372,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 383,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 420,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 439,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 483,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 506,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 564,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 567,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 597,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 637,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 639,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 675,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 683,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 704,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 725,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 743,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 749,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 758,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 794,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 803,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 897,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 906,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 915,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 956,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 961,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 1001,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 1027,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 1063,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 1081,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not write code that expects floating point calculations to yield exact results.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 62,
    "function": null,
    "comment": "Found float equality check.",
    "tags": ["hicpp","code-standards","floats","floating-point"]
  },
  {
    "rule": "Do not write code that expects floating point calculations to yield exact results.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 122,
    "function": null,
    "comment": "Found float equality check.",
    "tags": ["hicpp","code-standards","floats","floating-point"]
  },
  {
    "rule": "Do not write code that expects floating point calculations to yield exact results.",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 825,
    "function": null,
    "comment": "Found float equality check.",
    "tags": ["hicpp","code-standards","floats","floating-point"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "jt_cartesian_controller.cpp",
    "line": 131,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "jt_cartesian_controller.cpp",
    "line": 133,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "jt_cartesian_controller.cpp",
    "line": 222,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "jt_cartesian_controller.cpp",
    "line": 292,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "jt_cartesian_controller.cpp",
    "line": 298,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "jt_cartesian_controller.cpp",
    "line": 311,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "jt_cartesian_controller.cpp",
    "line": 341,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "joint_position_controller.cpp",
    "line": 128,
    "function": null,
    "comment": "The function 'getCommand' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "joint_position_controller.cpp",
    "line": 122,
    "function": null,
    "comment": "The function 'setCommand' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "posture.py",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "posture.py",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "effort.py",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "effort.py",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "cartesian_wrench_controller.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "cartesian_wrench_controller.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "cartesian_wrench_controller.cpp",
    "line": 41,
    "function": "PLUGINLIB_EXPORT_CLASS",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "jt_cartesian_controller.cpp",
    "line": 46,
    "function": "PLUGINLIB_EXPORT_CLASS",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 15",
    "file": "jt_cartesian_controller.cpp",
    "line": 46,
    "function": "PLUGINLIB_EXPORT_CLASS",
    "comment": "CC is greater than 15",
    "tags": ["metrics","ros","cyclomatic-complexity","kth"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "joint_velocity_controller.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "cartesian_twist_controller.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "cartesian_twist_controller.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "cartesian_twist_controller.cpp",
    "line": 41,
    "function": "PLUGINLIB_EXPORT_CLASS",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 15",
    "file": "cartesian_twist_controller.cpp",
    "line": 41,
    "function": "PLUGINLIB_EXPORT_CLASS",
    "comment": "CC is greater than 15",
    "tags": ["metrics","ros","cyclomatic-complexity","kth"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "joint_trajectory_action_controller.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 39,
    "function": "PLUGINLIB_EXPORT_CLASS",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 15",
    "file": "joint_trajectory_action_controller.cpp",
    "line": 39,
    "function": "PLUGINLIB_EXPORT_CLASS",
    "comment": "CC is greater than 15",
    "tags": ["metrics","ros","cyclomatic-complexity","kth"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "cartesian_pose_controller.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "cartesian_pose_controller.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "cartesian_pose_controller.cpp",
    "line": 47,
    "function": "PLUGINLIB_EXPORT_CLASS",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 15",
    "file": "cartesian_pose_controller.cpp",
    "line": 47,
    "function": "PLUGINLIB_EXPORT_CLASS",
    "comment": "CC is greater than 15",
    "tags": ["metrics","ros","cyclomatic-complexity","kth"]
  },
  {
    "rule": "Minimum lines of comments: 20%",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is below 20%",
    "tags": ["metrics","nasa-satc","his","uai","ros","comments","comment-ratio"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 39,
    "function": "PLUGINLIB_EXPORT_CLASS",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 15",
    "file": "joint_spline_trajectory_controller.cpp",
    "line": 39,
    "function": "PLUGINLIB_EXPORT_CLASS",
    "comment": "CC is greater than 15",
    "tags": ["metrics","ros","cyclomatic-complexity","kth"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "joint_effort_controller.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "joint_effort_controller.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  }
]