[
  {
    "rule": "The format of the symbol name should be <PROJECT>_<PATH>_<FILE>_H_.",
    "file": "trajectory_generation.h",
    "line": 37,
    "function": null,
    "comment": "trajectory_generation.h:37:  #ifndef header guard has wrong style, please use: _HOME_ANDRE_ROS_HAROS_ANALYSER_TRAJECTORY_GENERATION_H_  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The format of the guard's end should be '#endif  // <PROJECT>_<PATH>_<FILE>_H_' or '#endif  /* <PROJECT>_<PATH>_<FILE>_H_ */'.",
    "file": "trajectory_generation.h",
    "line": 57,
    "function": null,
    "comment": "trajectory_generation.h:57:  #endif line should be '#endif  // _HOME_ANDRE_ROS_HAROS_ANALYSER_TRAJECTORY_GENERATION_H_'  [build/header_guard] [5]",
    "tags": ["code-standards","google-cpp","header","header-guard","preprocessor"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "trajectory_generation.h",
    "line": 43,
    "function": null,
    "comment": "trajectory_generation.h:43:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "trajectory_generation.h",
    "line": 43,
    "function": null,
    "comment": "trajectory_generation.h:43:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory_generation.h",
    "line": 45,
    "function": null,
    "comment": "trajectory_generation.h:45:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "trajectory_generation.h",
    "line": 46,
    "function": null,
    "comment": "trajectory_generation.h:46:  public: should be indented +1 space inside class TrajectoryGenerator  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory_generation.h",
    "line": 50,
    "function": null,
    "comment": "trajectory_generation.h:50:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Avoid non-const reference parameters. Use const or pointers.",
    "file": "trajectory_generation.h",
    "line": 50,
    "function": null,
    "comment": "trajectory_generation.h:50:  Is this a non-const reference? If so, make const or use a pointer: trajectory_msgs::JointTrajectory& traj_out  [runtime/references] [2]",
    "tags": ["code-standards","parameters","google-cpp","const","pointers","references"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "trajectory_generation.h",
    "line": 52,
    "function": null,
    "comment": "trajectory_generation.h:52:  private: should be indented +1 space inside class TrajectoryGenerator  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "trajectory_generation.h",
    "line": 54,
    "function": null,
    "comment": "trajectory_generation.h:54:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "trajectory_generation.h",
    "line": 56,
    "function": null,
    "comment": "trajectory_generation.h:56:  Namespace should be terminated with '// namespace trajectory'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "trajectory_generation.h",
    "line": 53,
    "function": null,
    "comment": "trajectory_generation.h:53:  Add #include <vector> for vector<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "joint_trajectory_generator.cpp",
    "line": 38,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:38:  Include 'actionlib/server/simple_action_server.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "joint_trajectory_generator.cpp",
    "line": 39,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:39:  Include 'actionlib/client/simple_action_client.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint_trajectory_generator.cpp",
    "line": 50,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:50:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Do not indent within a namespace.",
    "file": "joint_trajectory_generator.cpp",
    "line": 51,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:51:  Do not indent within a namespace  [runtime/indentation_namespace] [4]",
    "tags": ["code-standards","formatting","google-cpp","indentation","namespace"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_generator.cpp",
    "line": 52,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:52:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "joint_trajectory_generator.cpp",
    "line": 53,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:53:  private: should be indented +1 space inside class JointTrajectoryGenerator  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_generator.cpp",
    "line": 54,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:54:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_generator.cpp",
    "line": 55,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:55:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "joint_trajectory_generator.cpp",
    "line": 56,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:56:  public: should be indented +1 space inside class JointTrajectoryGenerator  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "joint_trajectory_generator.cpp",
    "line": 57,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:57:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Zero-parameter constructors, single-parameter constructors and constructors callable with one argument should be marked explicit.",
    "file": "joint_trajectory_generator.cpp",
    "line": 57,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:57:  Single-parameter constructors should be marked explicit.  [runtime/explicit] [5]",
    "tags": ["code-standards","google-cpp","constructors","explicit"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "joint_trajectory_generator.cpp",
    "line": 63,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:63:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_generator.cpp",
    "line": 65,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:65:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_generator.cpp",
    "line": 75,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:75:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_generator.cpp",
    "line": 76,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:76:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "joint_trajectory_generator.cpp",
    "line": 78,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:78:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "joint_trajectory_generator.cpp",
    "line": 78,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:78:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint_trajectory_generator.cpp",
    "line": 82,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:82:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "joint_trajectory_generator.cpp",
    "line": 82,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:82:  Missing space before ( in while(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "joint_trajectory_generator.cpp",
    "line": 82,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:82:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space after a comma.",
    "file": "joint_trajectory_generator.cpp",
    "line": 89,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:89:  Missing space after ,  [whitespace/comma] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","comma"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_generator.cpp",
    "line": 92,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:92:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint_trajectory_generator.cpp",
    "line": 92,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:92:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "joint_trajectory_generator.cpp",
    "line": 92,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:92:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "joint_trajectory_generator.cpp",
    "line": 94,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:94:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "joint_trajectory_generator.cpp",
    "line": 94,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:94:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_generator.cpp",
    "line": 100,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:100:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint_trajectory_generator.cpp",
    "line": 100,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:100:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "joint_trajectory_generator.cpp",
    "line": 100,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:100:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "joint_trajectory_generator.cpp",
    "line": 109,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:109:  Missing spaces around <<  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "joint_trajectory_generator.cpp",
    "line": 111,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:111:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "joint_trajectory_generator.cpp",
    "line": 113,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:113:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "joint_trajectory_generator.cpp",
    "line": 113,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:113:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "joint_trajectory_generator.cpp",
    "line": 113,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:113:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "joint_trajectory_generator.cpp",
    "line": 119,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:119:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "joint_trajectory_generator.cpp",
    "line": 120,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:120:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "joint_trajectory_generator.cpp",
    "line": 120,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:120:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_generator.cpp",
    "line": 122,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:122:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "joint_trajectory_generator.cpp",
    "line": 122,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:122:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_generator.cpp",
    "line": 123,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:123:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "joint_trajectory_generator.cpp",
    "line": 123,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:123:  Missing spaces around <<  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_generator.cpp",
    "line": 124,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:124:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_generator.cpp",
    "line": 126,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:126:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_generator.cpp",
    "line": 129,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:129:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_generator.cpp",
    "line": 133,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:133:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "joint_trajectory_generator.cpp",
    "line": 135,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:135:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "joint_trajectory_generator.cpp",
    "line": 137,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:137:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "joint_trajectory_generator.cpp",
    "line": 137,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:137:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_generator.cpp",
    "line": 138,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:138:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint_trajectory_generator.cpp",
    "line": 139,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:139:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "joint_trajectory_generator.cpp",
    "line": 139,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:139:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_generator.cpp",
    "line": 140,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:140:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Assignment operators should be preceeded and followed by whitespace.",
    "file": "joint_trajectory_generator.cpp",
    "line": 145,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:145:  Missing spaces around =  [whitespace/operators] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","assignment"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "joint_trajectory_generator.cpp",
    "line": 145,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:145:  Missing space before ( in for(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Indent each block by 2 spaces. Never insert literal tab characters.",
    "file": "joint_trajectory_generator.cpp",
    "line": 146,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:146:  Tab found; better to use spaces  [whitespace/tab] [1]",
    "tags": ["ros","code-standards","formatting","whitespace","google-cpp","ros-cpp","indentation"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_generator.cpp",
    "line": 146,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:146:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_generator.cpp",
    "line": 147,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:147:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "joint_trajectory_generator.cpp",
    "line": 152,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:152:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_generator.cpp",
    "line": 153,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:153:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Use one space before comment text.",
    "file": "joint_trajectory_generator.cpp",
    "line": 155,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:155:  Should have a space between // and comment  [whitespace/comments] [4]",
    "tags": ["comments","code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_generator.cpp",
    "line": 161,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:161:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint_trajectory_generator.cpp",
    "line": 161,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:161:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "joint_trajectory_generator.cpp",
    "line": 161,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:161:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint_trajectory_generator.cpp",
    "line": 165,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:165:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint_trajectory_generator.cpp",
    "line": 167,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:167:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "The closing curly brace is always on its own line.",
    "file": "joint_trajectory_generator.cpp",
    "line": 167,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:167:  } should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_generator.cpp",
    "line": 173,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:173:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint_trajectory_generator.cpp",
    "line": 175,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:175:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "joint_trajectory_generator.cpp",
    "line": 175,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:175:  Missing space before ( in while(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "joint_trajectory_generator.cpp",
    "line": 175,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:175:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint_trajectory_generator.cpp",
    "line": 176,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:176:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "joint_trajectory_generator.cpp",
    "line": 176,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:176:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "joint_trajectory_generator.cpp",
    "line": 176,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:176:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint_trajectory_generator.cpp",
    "line": 177,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:177:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "joint_trajectory_generator.cpp",
    "line": 177,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:177:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "joint_trajectory_generator.cpp",
    "line": 177,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:177:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_generator.cpp",
    "line": 179,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:179:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "joint_trajectory_generator.cpp",
    "line": 185,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:185:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "joint_trajectory_generator.cpp",
    "line": 185,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:185:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint_trajectory_generator.cpp",
    "line": 185,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:185:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "joint_trajectory_generator.cpp",
    "line": 185,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:185:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint_trajectory_generator.cpp",
    "line": 192,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:192:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "joint_trajectory_generator.cpp",
    "line": 192,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:192:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "joint_trajectory_generator.cpp",
    "line": 192,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:192:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_generator.cpp",
    "line": 198,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:198:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "joint_trajectory_generator.cpp",
    "line": 200,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:200:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "joint_trajectory_generator.cpp",
    "line": 200,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:200:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "joint_trajectory_generator.cpp",
    "line": 204,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:204:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "joint_trajectory_generator.cpp",
    "line": 204,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:204:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "joint_trajectory_generator.cpp",
    "line": 204,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:204:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "joint_trajectory_generator.cpp",
    "line": 204,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:204:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "joint_trajectory_generator.cpp",
    "line": 208,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:208:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "If an else has a brace on one side, it should have it on both.",
    "file": "joint_trajectory_generator.cpp",
    "line": 208,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:208:  If an else has a brace on one side, it should have it on both  [readability/braces] [5]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "There should be a space before a ( when it is preceeded by an if, switch, for or while.",
    "file": "joint_trajectory_generator.cpp",
    "line": 208,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:208:  Missing space before ( in if(  [whitespace/parens] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","parenthesis"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "joint_trajectory_generator.cpp",
    "line": 208,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:208:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "The else statement should be on the same line as the preceeding closing brace.",
    "file": "joint_trajectory_generator.cpp",
    "line": 212,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:212:  An else should appear on the same line as the preceding }  [whitespace/newline] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces","if-else"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_generator.cpp",
    "line": 213,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:213:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "joint_trajectory_generator.cpp",
    "line": 214,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:214:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_generator.cpp",
    "line": 217,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:217:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint_trajectory_generator.cpp",
    "line": 217,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:217:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "joint_trajectory_generator.cpp",
    "line": 217,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:217:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Access modifiers should be indented by one space.",
    "file": "joint_trajectory_generator.cpp",
    "line": 221,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:221:  private: should be indented +1 space inside class JointTrajectoryGenerator  [whitespace/indent] [3]",
    "tags": ["code-standards","formatting","google-cpp","indentation","access-modifiers"]
  },
  {
    "rule": "Leave no redundant blank lines in code blocks.",
    "file": "joint_trajectory_generator.cpp",
    "line": 230,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:230:  Redundant blank line at the end of a code block should be deleted.  [whitespace/blank_line] [3]",
    "tags": ["code-standards","functions","formatting","whitespace","google-cpp","code-blocks"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "joint_trajectory_generator.cpp",
    "line": 232,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:232:  Namespace should be terminated with '// namespace joint_trajectory_generator'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "joint_trajectory_generator.cpp",
    "line": 234,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:234:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "joint_trajectory_generator.cpp",
    "line": 234,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:234:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "joint_trajectory_generator.cpp",
    "line": 236,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:236:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "joint_trajectory_generator.cpp",
    "line": 225,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:225:  Add #include <map> for map<>  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include all required headers for what you use.",
    "file": "joint_trajectory_generator.cpp",
    "line": 225,
    "function": null,
    "comment": "joint_trajectory_generator.cpp:225:  Add #include <string> for string  [build/include_what_you_use] [4]",
    "tags": ["code-standards","google-cpp","headers","include","preprocessor"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "trajectory_generation.cpp",
    "line": 39,
    "function": null,
    "comment": "trajectory_generation.cpp:39:  Include 'joint_trajectory_generator/trajectory_generation.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "trajectory_generation.cpp",
    "line": 43,
    "function": null,
    "comment": "trajectory_generation.cpp:43:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "trajectory_generation.cpp",
    "line": 43,
    "function": null,
    "comment": "trajectory_generation.cpp:43:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory_generation.cpp",
    "line": 45,
    "function": null,
    "comment": "trajectory_generation.cpp:45:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory_generation.cpp",
    "line": 47,
    "function": null,
    "comment": "trajectory_generation.cpp:47:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "trajectory_generation.cpp",
    "line": 48,
    "function": null,
    "comment": "trajectory_generation.cpp:48:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory_generation.cpp",
    "line": 54,
    "function": null,
    "comment": "trajectory_generation.cpp:54:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "trajectory_generation.cpp",
    "line": 55,
    "function": null,
    "comment": "trajectory_generation.cpp:55:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory_generation.cpp",
    "line": 59,
    "function": null,
    "comment": "trajectory_generation.cpp:59:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory_generation.cpp",
    "line": 60,
    "function": null,
    "comment": "trajectory_generation.cpp:60:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory_generation.cpp",
    "line": 61,
    "function": null,
    "comment": "trajectory_generation.cpp:61:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "The open curly brace is always on its own line.",
    "file": "trajectory_generation.cpp",
    "line": 64,
    "function": null,
    "comment": "trajectory_generation.cpp:64:  when starting a new scope, { should be on a line by itself  [whitespace/braces] [4]",
    "tags": ["ros","code-standards","formatting","ros-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "trajectory_generation.cpp",
    "line": 64,
    "function": null,
    "comment": "trajectory_generation.cpp:64:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory_generation.cpp",
    "line": 65,
    "function": null,
    "comment": "trajectory_generation.cpp:65:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "trajectory_generation.cpp",
    "line": 73,
    "function": null,
    "comment": "trajectory_generation.cpp:73:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "trajectory_generation.cpp",
    "line": 80,
    "function": null,
    "comment": "trajectory_generation.cpp:80:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "trajectory_generation.cpp",
    "line": 80,
    "function": null,
    "comment": "trajectory_generation.cpp:80:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "trajectory_generation.cpp",
    "line": 83,
    "function": null,
    "comment": "trajectory_generation.cpp:83:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory_generation.cpp",
    "line": 84,
    "function": null,
    "comment": "trajectory_generation.cpp:84:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "trajectory_generation.cpp",
    "line": 89,
    "function": null,
    "comment": "trajectory_generation.cpp:89:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory_generation.cpp",
    "line": 90,
    "function": null,
    "comment": "trajectory_generation.cpp:90:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory_generation.cpp",
    "line": 93,
    "function": null,
    "comment": "trajectory_generation.cpp:93:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "trajectory_generation.cpp",
    "line": 94,
    "function": null,
    "comment": "trajectory_generation.cpp:94:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "trajectory_generation.cpp",
    "line": 99,
    "function": null,
    "comment": "trajectory_generation.cpp:99:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory_generation.cpp",
    "line": 100,
    "function": null,
    "comment": "trajectory_generation.cpp:100:  Lines should very rarely be longer than 100 characters  [whitespace/line_length] [4]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "trajectory_generation.cpp",
    "line": 105,
    "function": null,
    "comment": "trajectory_generation.cpp:105:  Missing spaces around <=  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "trajectory_generation.cpp",
    "line": 105,
    "function": null,
    "comment": "trajectory_generation.cpp:105:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "trajectory_generation.cpp",
    "line": 106,
    "function": null,
    "comment": "trajectory_generation.cpp:106:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "trajectory_generation.cpp",
    "line": 106,
    "function": null,
    "comment": "trajectory_generation.cpp:106:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory_generation.cpp",
    "line": 111,
    "function": null,
    "comment": "trajectory_generation.cpp:111:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Don't use deprecated casting styles.",
    "file": "trajectory_generation.cpp",
    "line": 113,
    "function": null,
    "comment": "trajectory_generation.cpp:113:  Using C-style cast.  Use static_cast<double>(...) instead  [readability/casting] [4]",
    "tags": ["code-standards","google-cpp","deprecation","casting"]
  },
  {
    "rule": "Namespaces should have a comment at the end.",
    "file": "trajectory_generation.cpp",
    "line": 122,
    "function": null,
    "comment": "trajectory_generation.cpp:122:  Namespace should be terminated with '// namespace trajectory'  [readability/namespace] [5]",
    "tags": ["ros","comments","code-standards","formatting","google-cpp","ros-cpp","namespace"]
  },
  {
    "rule": "Include files in alphabetical order, and in the following order. 1. preferred location 2. c system files 3. cpp system files 4. deprecated location 5. other headers",
    "file": "trajectory_generation_test.cpp",
    "line": 39,
    "function": null,
    "comment": "trajectory_generation_test.cpp:39:  Include 'ros/ros.h' not in alphabetical order  [build/include_alpha] [4]",
    "tags": ["code-standards","formatting","google-cpp","include","preprocessor"]
  },
  {
    "rule": "Do not use namespace using-directives. Use using-declarations instead.",
    "file": "trajectory_generation_test.cpp",
    "line": 42,
    "function": null,
    "comment": "trajectory_generation_test.cpp:42:  Do not use namespace using-directives.  Use using-declarations instead.  [build/namespaces] [5]",
    "tags": ["hicpp","code-standards","google-cpp","namespace","misra-cpp","using-directives","using-declarations"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory_generation_test.cpp",
    "line": 45,
    "function": null,
    "comment": "trajectory_generation_test.cpp:45:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "trajectory_generation_test.cpp",
    "line": 48,
    "function": null,
    "comment": "trajectory_generation_test.cpp:48:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "trajectory_generation_test.cpp",
    "line": 51,
    "function": null,
    "comment": "trajectory_generation_test.cpp:51:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Except after an opening parenthesis, or after another opening brace (in case of an initializer list, for instance), you should have spaces before your braces.",
    "file": "trajectory_generation_test.cpp",
    "line": 51,
    "function": null,
    "comment": "trajectory_generation_test.cpp:51:  Missing space before {  [whitespace/braces] [5]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","curly-braces"]
  },
  {
    "rule": "No line should exceed 80 characters in length.",
    "file": "trajectory_generation_test.cpp",
    "line": 52,
    "function": null,
    "comment": "trajectory_generation_test.cpp:52:  Lines should be <= 80 characters long  [whitespace/line_length] [2]",
    "tags": ["code-standards","formatting","line-length","google-cpp"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "trajectory_generation_test.cpp",
    "line": 54,
    "function": null,
    "comment": "trajectory_generation_test.cpp:54:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "trajectory_generation_test.cpp",
    "line": 57,
    "function": null,
    "comment": "trajectory_generation_test.cpp:57:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "Binary operators should be preceeded and followed by whitespace.",
    "file": "trajectory_generation_test.cpp",
    "line": 60,
    "function": null,
    "comment": "trajectory_generation_test.cpp:60:  Missing spaces around <  [whitespace/operators] [3]",
    "tags": ["code-standards","formatting","whitespace","google-cpp","binary-operator"]
  },
  {
    "rule": "The open curly brace should almost never be on its own line.",
    "file": "trajectory_generation_test.cpp",
    "line": 68,
    "function": null,
    "comment": "trajectory_generation_test.cpp:68:  { should almost always be at the end of the previous line  [whitespace/braces] [4]",
    "tags": ["code-standards","formatting","google-cpp","curly-braces"]
  },
  {
    "rule": "Avoid more than one command per line.",
    "file": "trajectory_generation_test.cpp",
    "line": 72,
    "function": null,
    "comment": "trajectory_generation_test.cpp:72:  More than one command on the same line  [whitespace/newline] [0]",
    "tags": ["code-standards","formatting","google-cpp"]
  },
  {
    "rule": "Do not leave whitespace at the end of a line.",
    "file": "trajectory_generation_test.cpp",
    "line": 103,
    "function": null,
    "comment": "trajectory_generation_test.cpp:103:  Line ends in whitespace.  Consider deleting these extra spaces.  [whitespace/end_of_line] [4]",
    "tags": ["code-standards","formatting","whitespace","google-cpp"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_trajectory_generator.cpp",
    "line": 94,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_trajectory_generator.cpp",
    "line": 105,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_trajectory_generator.cpp",
    "line": 113,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_trajectory_generator.cpp",
    "line": 120,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_trajectory_generator.cpp",
    "line": 145,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "joint_trajectory_generator.cpp",
    "line": 234,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory_generation.cpp",
    "line": 45,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory_generation.cpp",
    "line": 48,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory_generation.cpp",
    "line": 55,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory_generation.cpp",
    "line": 80,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory_generation.cpp",
    "line": 89,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory_generation.cpp",
    "line": 94,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory_generation.cpp",
    "line": 99,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory_generation.cpp",
    "line": 103,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory_generation.cpp",
    "line": 105,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory_generation.cpp",
    "line": 106,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory_generation_test.cpp",
    "line": 48,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory_generation_test.cpp",
    "line": 51,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory_generation_test.cpp",
    "line": 54,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory_generation_test.cpp",
    "line": 57,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory_generation_test.cpp",
    "line": 60,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "Do not use integer types directly. Use size-specific typedefs, for instance from <cstdint>.",
    "file": "trajectory_generation_test.cpp",
    "line": 67,
    "function": null,
    "comment": "Found implementation defined integer type.",
    "tags": ["hicpp","code-standards","misra-cpp","jsf-av-cpp","type-safety","integer-types","portability"]
  },
  {
    "rule": "There shall be no unused variables.",
    "file": "joint_trajectory_generator.cpp",
    "line": 161,
    "function": null,
    "comment": "The function 'executeCb' is never used.",
    "tags": ["code-standards","misra-cpp","variables","unused-variables"]
  },
  {
    "rule": "Maximum coupling between objects: 5",
    "file": "joint_trajectory_generator.cpp",
    "line": null,
    "function": null,
    "comment": "CBO is greater than 5, JointTrajectoryGenerator, 12",
    "tags": ["metrics","nasa-satc","ros","coupling"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "trajectory_generation.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "trajectory_generation.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  },
  {
    "rule": "Maximum cyclomatic complexity: 10",
    "file": "trajectory_generation.cpp",
    "line": 59,
    "function": "generate",
    "comment": "CC is greater than 10",
    "tags": ["metrics","nasa-satc","his","hicpp","cyclomatic-complexity"]
  },
  {
    "rule": "Maximum lines of comments: 30%",
    "file": "trajectory_generation_test.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 30%",
    "tags": ["metrics","nasa-satc","comments","comment-ratio"]
  },
  {
    "rule": "Maximum lines of comments: 40%",
    "file": "trajectory_generation_test.cpp",
    "line": null,
    "function": null,
    "comment": "Comment ratio is above 40%",
    "tags": ["metrics","uai","comments","comment-ratio"]
  }
]